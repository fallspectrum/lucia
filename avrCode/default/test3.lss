
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00005006  0000509a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005006  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  000051aa  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000051aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  0000522a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  00007b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00009040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  000092e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  00009d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000b10b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__ctors_end>
       4:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
       8:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
       c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      10:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      14:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      18:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      1c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      20:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      24:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      28:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      2c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      30:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      34:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      38:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      3c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      40:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      44:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      48:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      4c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      50:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      54:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      58:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      5c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      60:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      64:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      68:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      6c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      70:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      74:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      78:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      7c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      80:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      84:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>
      88:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 04 09 00 00 00 00 ff 00 05 09 ff 00 00     .p..............
      9c:	00 ff 00 06 09 ff 00 00 00 ff 00 07 09 00 00 00     ................
      ac:	00 ff 00 ff ff 70 17 00 03 ff 00 00 00 00 00 01     .....p..........
      bc:	00 10 00 01 03 ff 00 ff 00 00 00 01 00 10 00 02     ................
      cc:	03 00 00 ff 00 00 00 01 00 10 00 03 03 00 00 ff     ................
      dc:	00 ff 00 01 00 10 00 04 03 00 00 00 00 ff 00 01     ................
      ec:	00 10 00 05 03 ff 00 00 00 ff 00 01 00 10 00 06     ................
      fc:	03 ff 00 00 00 ff 00 01 00 10 00 07 03 00 00 00     ................
     10c:	00 ff 00 01 00 10 00 08 03 00 00 ff 00 ff 00 01     ................
     11c:	00 10 00 09 03 00 00 ff 00 00 00 01 00 10 00 0a     ................
     12c:	03 ff 00 ff 00 00 00 01 00 10 00 0b 03 ff 00 00     ................
     13c:	00 00 00 01 00 10 00 ff ff 70 17 00 03 ff 00 ff     .........p......
     14c:	00 ff 00 01 00 10 00 01 03 ff 00 ff 00 ff 00 01     ................
     15c:	00 10 00 02 03 ff 00 ff 00 ff 00 01 00 10 00 03     ................
     16c:	03 ff 00 ff 00 ff 00 01 00 10 00 04 03 ff 00 ff     ................
     17c:	00 ff 00 01 00 10 00 05 03 ff 00 ff 00 ff 00 01     ................
     18c:	00 10 00 06 03 ff 00 ff 00 ff 00 01 00 10 00 07     ................
     19c:	03 ff 00 ff 00 ff 00 01 00 10 00 08 03 ff 00 ff     ................
     1ac:	00 ff 00 01 00 10 00 09 03 ff 00 ff 00 ff 00 01     ................
     1bc:	00 10 00 0a 03 ff 00 ff 00 ff 00 01 00 10 00 0b     ................
     1cc:	03 ff 00 ff 00 ff 00 01 00 10 00 ff ff 70 17 00     .............p..
     1dc:	05 ff 00 00 00 00 00 00 00 00 00 00 00 00 20 01     .............. .
     1ec:	00 10 00 01 05 ff 00 ff 00 00 00 00 00 00 00 00     ................
     1fc:	00 00 20 01 00 10 00 02 05 00 00 ff 00 00 00 00     .. .............
     20c:	00 00 00 00 00 00 20 01 00 10 00 03 05 00 00 ff     ...... .........
     21c:	00 ff 00 00 00 00 00 00 00 00 20 01 00 10 00 04     .......... .....
     22c:	05 00 00 00 00 ff 00 00 00 00 00 00 00 00 20 01     .............. .
     23c:	00 10 00 05 05 ff 00 00 00 ff 00 00 00 00 00 00     ................
     24c:	00 00 20 01 00 10 00 06 05 ff 00 00 00 ff 00 00     .. .............
     25c:	00 00 00 00 00 00 20 01 00 10 00 07 05 00 00 00     ...... .........
     26c:	00 ff 00 00 00 00 00 00 00 00 20 01 00 10 00 08     .......... .....
     27c:	05 00 00 ff 00 ff 00 00 00 00 00 00 00 00 20 01     .............. .
     28c:	00 10 00 09 05 00 00 ff 00 00 00 00 00 00 00 00     ................
     29c:	00 00 20 01 00 10 00 0a 05 ff 00 ff 00 00 00 00     .. .............
     2ac:	00 00 00 00 00 00 20 01 00 10 00 0b 05 ff 00 00     ...... .........
	...
     2c4:	00 00 20 01 00 10 00 ff ff 70 17 05 08 02 00 00     .. ......p......
     2d4:	00 00 00 00 00 10 00 00 00 00 00 0f 00 01 00 06     ................
     2e4:	08 02 00 00 00 00 00 00 00 10 00 00 00 00 00 0f     ................
     2f4:	00 01 00 ff ff 70 17 05 08 02 00 00 00 00 00 00     .....p..........
     304:	00 20 00 00 00 00 00 32 00 01 00 06 08 02 00 00     . .....2........
     314:	00 00 00 00 00 20 00 00 00 00 00 32 00 01 00 ff     ..... .....2....
     324:	ff 70 17 05 08 02 00 00 00 00 00 00 00 20 00 00     .p........... ..
     334:	00 00 00 ff 00 01 00 06 08 02 00 00 00 00 00 00     ................
     344:	00 20 00 00 00 00 00 ff 00 01 00 ff ff 70 17 05     . ...........p..
     354:	08 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     364:	00 01 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
     374:	00 01 00 06 08 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     384:	00 00 00 ff 00 01 00 00 00 00 00 00 00 20 00 ff     ............. ..
     394:	00 00 00 7d 00 01 00 ff ff 70 17 05 08 04 00 00     ...}.....p......
     3a4:	00 00 00 00 00 20 00 00 00 00 00 ff 00 01 00 00     ..... ..........
     3b4:	00 00 00 00 00 20 00 00 00 ff 00 00 00 01 00 06     ..... ..........
     3c4:	08 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     3d4:	00 01 00 00 00 00 00 00 00 20 00 ff 00 00 00 7d     ......... .....}
     3e4:	00 01 00 ff ff 70 17 05 08 04 00 00 00 00 00 00     .....p..........
     3f4:	00 08 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     404:	00 08 00 00 00 ff 00 00 00 01 00 06 08 04 00 00     ................
     414:	00 00 00 00 00 08 00 00 00 00 00 ff 00 01 00 00     ................
     424:	00 00 00 00 00 08 00 ff 00 00 00 7d 00 01 00 ff     ...........}....
     434:	ff 70 17 05 08 04 00 00 00 00 00 00 00 03 00 00     .p..............
     444:	00 00 00 ff 00 01 00 00 00 00 00 00 00 03 00 00     ................
     454:	00 ff 00 00 00 01 00 06 08 04 00 00 00 00 00 00     ................
     464:	00 03 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     474:	00 03 00 ff 00 00 00 7d 00 01 00 ff ff 70 17 05     .......}.....p..
     484:	08 02 00 00 00 7d 00 00 00 09 00 00 00 00 00 7d     .....}.........}
     494:	00 09 00 06 08 02 00 ff 00 00 00 7d 00 09 00 00     ...........}....
     4a4:	00 00 00 7d 00 09 00 ff ff 70 17 04 08 02 00 ff     ...}.....p......
     4b4:	00 00 00 7d 00 09 00 00 00 00 00 00 00 10 00 05     ...}............
     4c4:	08 03 00 00 00 7d 00 00 00 09 00 00 00 00 00 7d     .....}.........}
     4d4:	00 09 00 ff 00 ff 00 ff 00 03 00 06 08 03 00 ff     ................
     4e4:	00 00 00 7d 00 09 00 00 00 00 00 7d 00 09 00 ff     ...}.......}....
     4f4:	00 ff 00 ff 00 03 00 07 08 02 00 00 00 7d 00 00     .............}..
     504:	00 09 00 00 00 00 00 00 00 10 00 ff ff 6f 17 00     .............o..
     514:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     524:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     534:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     544:	00 01 00 00 00 00 00 00 00 26 00 01 08 07 00 ff     .........&......
     554:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     564:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     574:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     584:	00 00 00 00 00 26 00 02 08 07 00 ff 00 00 00 00     .....&..........
     594:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     5a4:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     5b4:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     5c4:	00 26 00 03 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     5d4:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     5e4:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     5f4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 04     .............&..
     604:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     614:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     624:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     634:	00 01 00 00 00 00 00 00 00 26 00 05 08 07 00 ff     .........&......
     644:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     654:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     664:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     674:	00 00 00 00 00 26 00 06 08 07 00 ff 00 00 00 00     .....&..........
     684:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     694:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     6a4:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     6b4:	00 26 00 07 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     6c4:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     6d4:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     6e4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 08     .............&..
     6f4:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     704:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     714:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     724:	00 01 00 00 00 00 00 00 00 26 00 09 08 07 00 ff     .........&......
     734:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     744:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     754:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     764:	00 00 00 00 00 26 00 0a 08 07 00 ff 00 00 00 00     .....&..........
     774:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     784:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     794:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     7a4:	00 26 00 0b 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     7b4:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     7c4:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     7d4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 ff     .............&..
     7e4:	ff 64 00 ff ff 0a 00 04 09 ff 00 00 00 00 00 ff     .d..............
     7f4:	ff 0a 00 07 09 00 5a 00 00 00 00 ff ff 38 18 05     ......Z......8..
     804:	03 7d 00 00 00 00 00 01 00 1e 00 06 03 7d 00 00     .}...........}..
     814:	00 00 00 01 00 1e 00 ff ff 0a 00 05 03 7d 00 00     .............}..
     824:	00 00 00 01 00 0a 00 06 03 7d 00 00 00 00 00 01     .........}......
     834:	00 0a 00 ff ff 09 00 05 05 ff 00 00 00 00 00 ff     ................
     844:	00 7d 00 00 00 03 00 01 00 0a 00 06 05 ff 00 00     .}..............
     854:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 0a 00 ff     .....}..........
     864:	ff 09 00 05 05 ff 00 00 00 00 00 ff 00 7d 00 00     .............}..
     874:	00 03 00 01 00 05 00 06 05 ff 00 00 00 00 00 ff     ................
     884:	00 7d 00 00 00 03 00 01 00 05 00 ff ff 09 00 04     .}..............
     894:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     8a4:	00 05 00 05 05 ff 00 00 00 00 00 ff 00 7d 00 00     .............}..
     8b4:	00 03 00 01 00 05 00 06 05 ff 00 00 00 00 00 ff     ................
     8c4:	00 7d 00 00 00 03 00 01 00 05 00 07 05 ff 00 00     .}..............
     8d4:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 05 00 ff     .....}..........
     8e4:	ff 02 00 00 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     8f4:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     904:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     914:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     924:	00 00 00 00 00 0c 00 01 08 08 00 ff 00 00 00 00     ................
     934:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     944:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     954:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     964:	00 01 00 00 00 00 00 00 00 0c 00 02 08 08 00 ff     ................
     974:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     984:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     994:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     9a4:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 03     ................
     9b4:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     9c4:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     9d4:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     9e4:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     9f4:	00 0c 00 05 08 04 00 80 00 40 00 00 00 04 00 00     .........@......
     a04:	00 00 00 00 00 20 00 ff 00 00 00 00 00 04 00 00     ..... ..........
     a14:	00 00 00 00 00 20 00 06 08 04 00 ff 00 00 00 00     ..... ..........
     a24:	00 04 00 00 00 00 00 00 00 20 00 80 00 1e 00 00     ......... ......
     a34:	00 04 00 00 00 00 00 00 00 20 00 08 08 08 00 ff     ......... ......
     a44:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     a54:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     a64:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     a74:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 09     ................
     a84:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     a94:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     aa4:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     ab4:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     ac4:	00 0c 00 0a 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     ad4:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     ae4:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     af4:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     b04:	00 00 00 00 00 0c 00 0b 08 08 00 ff 00 00 00 00     ................
     b14:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     b24:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     b34:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     b44:	00 01 00 00 00 00 00 00 00 0c 00 ff ff 73 00 00     .............s..
     b54:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     b64:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     b74:	00 08 00 01 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     b84:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     b94:	00 00 00 00 00 08 00 02 08 04 00 40 00 00 00 80     ...........@....
     ba4:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     bb4:	00 01 00 00 00 00 00 00 00 08 00 03 08 04 00 40     ...............@
     bc4:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     bd4:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 05     .`.`............
     be4:	08 08 00 40 00 00 00 80 00 08 00 00 00 00 00 00     ...@............
     bf4:	00 20 00 ff 00 1e 00 00 00 08 00 00 00 00 00 00     . ..............
     c04:	00 20 00 ff 00 00 00 00 00 08 00 00 00 00 00 00     . ..............
     c14:	00 20 00 ff 00 00 00 1e 00 08 00 00 00 00 00 00     . ..............
     c24:	00 20 00 06 08 08 00 40 00 00 00 80 00 08 00 00     . .....@........
     c34:	00 00 00 00 00 20 00 ff 00 1e 00 00 00 08 00 00     ..... ..........
     c44:	00 00 00 00 00 20 00 ff 00 00 00 00 00 08 00 00     ..... ..........
     c54:	00 00 00 00 00 20 00 ff 00 00 00 1e 00 08 00 00     ..... ..........
     c64:	00 00 00 00 00 20 00 08 08 04 00 40 00 00 00 80     ..... .....@....
     c74:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     c84:	00 01 00 00 00 00 00 00 00 08 00 09 08 04 00 40     ...............@
     c94:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     ca4:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 0a     .`.`............
     cb4:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     cc4:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     cd4:	00 08 00 0b 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     ce4:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     cf4:	00 00 00 00 00 08 00 ff ff 01 00 04 08 04 00 00     ................
     d04:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 00     ................
     d14:	00 ff 00 00 00 04 00 00 00 00 00 00 00 10 00 05     ................
     d24:	03 ff 00 00 00 80 00 01 00 10 00 06 03 ff 00 00     ................
     d34:	00 80 00 01 00 10 00 07 08 04 00 00 00 00 00 ff     ................
     d44:	00 04 00 00 00 00 00 00 00 10 00 00 00 ff 00 00     ................
     d54:	00 04 00 00 00 00 00 00 00 10 00 ff ff 01 00 04     ................
     d64:	08 04 00 ff 00 00 00 00 00 04 00 00 00 00 00 00     ................
     d74:	00 10 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     ................
     d84:	00 10 00 07 08 04 00 00 00 00 00 ff 00 04 00 00     ................
     d94:	00 00 00 00 00 10 00 ff 00 00 00 00 00 04 00 00     ................
     da4:	00 00 00 00 00 10 00 ff ff 0a 00 00 08 04 00 09     ................
     db4:	00 09 00 ff 00 01 00 00 00 00 00 00 00 05 00 ff     ................
     dc4:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 01     ................
     dd4:	08 04 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     de4:	00 05 00 09 00 09 00 ff 00 01 00 00 00 00 00 00     ................
     df4:	00 01 00 02 08 04 00 09 00 09 00 ff 00 01 00 00     ................
     e04:	00 00 00 00 00 05 00 ff 00 c8 00 00 00 01 00 00     ................
     e14:	00 00 00 00 00 01 00 03 08 04 00 ff 00 c8 00 00     ................
     e24:	00 01 00 00 00 00 00 00 00 05 00 09 00 09 00 ff     ................
     e34:	00 01 00 00 00 00 00 00 00 01 00 05 08 02 00 ff     ................
     e44:	00 ff 00 ff 00 10 00 00 00 00 00 00 00 20 00 06     ............. ..
     e54:	08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00 00 00     ................
     e64:	00 20 00 08 08 04 00 ff 00 c8 00 00 00 01 00 00     . ..............
     e74:	00 00 00 00 00 05 00 09 00 09 00 ff 00 01 00 00     ................
     e84:	00 00 00 00 00 01 00 09 08 04 00 09 00 09 00 ff     ................
     e94:	00 01 00 00 00 00 00 00 00 05 00 ff 00 c8 00 00     ................
     ea4:	00 01 00 00 00 00 00 00 00 01 00 0a 08 04 00 ff     ................
     eb4:	00 c8 00 00 00 01 00 00 00 00 00 00 00 05 00 09     ................
     ec4:	00 09 00 ff 00 01 00 00 00 00 00 00 00 01 00 0b     ................
     ed4:	08 04 00 09 00 09 00 ff 00 01 00 00 00 00 00 00     ................
     ee4:	00 05 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     ef4:	00 01 00 ff ff 38 18 05 03 00 00 7d 00 00 00 01     .....8.....}....
     f04:	00 1e 00 06 03 00 00 7d 00 00 00 01 00 1e 00 ff     .......}........
     f14:	ff 0a 00 05 03 00 00 7d 00 00 00 01 00 0a 00 06     .......}........
     f24:	03 00 00 7d 00 00 00 01 00 0a 00 ff ff 09 00 05     ...}............
     f34:	05 00 00 ff 00 00 00 ff 00 ff 00 00 00 03 00 01     ................
     f44:	00 0a 00 06 05 00 00 ff 00 00 00 ff 00 ff 00 00     ................
     f54:	00 03 00 01 00 0a 00 ff ff 09 00 05 05 00 00 ff     ................
     f64:	00 00 00 ff 00 ff 00 00 00 03 00 01 00 05 00 06     ................
     f74:	05 00 00 ff 00 00 00 ff 00 ff 00 00 00 03 00 01     ................
     f84:	00 05 00 ff ff 09 00 04 05 00 00 ff 00 00 00 ff     ................
     f94:	00 ff 00 00 00 03 00 01 00 05 00 05 05 00 00 ff     ................
     fa4:	00 00 00 ff 00 ff 00 00 00 03 00 01 00 05 00 06     ................
     fb4:	05 00 00 ff 00 00 00 ff 00 ff 00 00 00 03 00 01     ................
     fc4:	00 05 00 07 05 00 00 ff 00 00 00 ff 00 ff 00 00     ................
     fd4:	00 03 00 01 00 05 00 ff ff 38 18 05 03 00 00 00     .........8......
     fe4:	00 7d 00 01 00 1e 00 06 03 00 00 00 00 7d 00 01     .}...........}..
     ff4:	00 1e 00 ff ff 0a 00 05 03 00 00 00 00 7d 00 01     .............}..
    1004:	00 0a 00 06 03 00 00 00 00 7d 00 01 00 0a 00 ff     .........}......
    1014:	ff 09 00 05 05 00 00 00 00 ff 00 ff 00 ff 00 00     ................
    1024:	00 03 00 01 00 0a 00 06 05 00 00 00 00 ff 00 ff     ................
    1034:	00 ff 00 00 00 03 00 01 00 0a 00 ff ff 09 00 05     ................
    1044:	05 00 00 00 00 ff 00 ff 00 ff 00 00 00 03 00 01     ................
    1054:	00 05 00 06 05 00 00 00 00 ff 00 ff 00 ff 00 00     ................
    1064:	00 03 00 01 00 05 00 ff ff 09 00 04 05 00 00 00     ................
    1074:	00 ff 00 ff 00 ff 00 00 00 03 00 01 00 05 00 05     ................
    1084:	05 00 00 00 00 ff 00 ff 00 ff 00 00 00 03 00 01     ................
    1094:	00 05 00 06 05 00 00 00 00 ff 00 ff 00 ff 00 00     ................
    10a4:	00 03 00 01 00 05 00 07 05 00 00 00 00 ff 00 ff     ................
    10b4:	00 ff 00 00 00 03 00 01 00 05 00 ff ff 38 18 05     .............8..
    10c4:	03 00 00 7d 00 00 00 01 00 1e 00 06 03 00 00 7d     ...}...........}
    10d4:	00 00 00 01 00 1e 00 ff ff 0a 00 05 03 00 00 7d     ...............}
    10e4:	00 00 00 01 00 0a 00 06 03 00 00 7d 00 00 00 01     ...........}....
    10f4:	00 0a 00 ff ff 09 00 05 05 00 00 ff 00 00 00 00     ................
    1104:	00 ff 00 7d 00 03 00 01 00 0a 00 06 05 00 00 ff     ...}............
    1114:	00 00 00 00 00 ff 00 7d 00 03 00 01 00 0a 00 ff     .......}........
    1124:	ff 09 00 05 05 00 00 ff 00 00 00 00 00 ff 00 7d     ...............}
    1134:	00 03 00 01 00 05 00 06 05 00 00 ff 00 00 00 00     ................
    1144:	00 ff 00 7d 00 03 00 01 00 05 00 ff ff 09 00 04     ...}............
    1154:	05 00 00 ff 00 00 00 00 00 ff 00 7d 00 03 00 01     ...........}....
    1164:	00 05 00 05 05 00 00 ff 00 00 00 00 00 ff 00 7d     ...............}
    1174:	00 03 00 01 00 05 00 06 05 00 00 ff 00 00 00 00     ................
    1184:	00 ff 00 7d 00 03 00 01 00 05 00 07 05 00 00 ff     ...}............
    1194:	00 00 00 00 00 ff 00 7d 00 03 00 01 00 05 00 ff     .......}........
    11a4:	ff 0a 00 00 08 04 00 00 00 ff 00 00 00 01 00 00     ................
    11b4:	00 00 00 00 00 05 00 ff 00 00 00 c8 00 01 00 00     ................
    11c4:	00 00 00 00 00 01 00 01 08 04 00 ff 00 00 00 c8     ................
    11d4:	00 01 00 00 00 00 00 00 00 05 00 00 00 ff 00 00     ................
    11e4:	00 01 00 00 00 00 00 00 00 01 00 02 08 04 00 00     ................
    11f4:	00 ff 00 00 00 01 00 00 00 00 00 00 00 05 00 ff     ................
    1204:	00 00 00 c8 00 01 00 00 00 00 00 00 00 01 00 03     ................
    1214:	08 04 00 ff 00 00 00 c8 00 01 00 00 00 00 00 00     ................
    1224:	00 05 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1234:	00 01 00 05 08 02 00 ff 00 ff 00 ff 00 10 00 00     ................
    1244:	00 00 00 00 00 20 00 06 08 02 00 ff 00 ff 00 ff     ..... ..........
    1254:	00 10 00 00 00 00 00 00 00 20 00 08 08 04 00 ff     ......... ......
    1264:	00 00 00 c8 00 01 00 00 00 00 00 00 00 05 00 00     ................
    1274:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 09     ................
    1284:	08 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1294:	00 05 00 ff 00 00 00 c8 00 01 00 00 00 00 00 00     ................
    12a4:	00 01 00 0a 08 04 00 ff 00 00 00 c8 00 01 00 00     ................
    12b4:	00 00 00 00 00 05 00 00 00 ff 00 00 00 01 00 00     ................
    12c4:	00 00 00 00 00 01 00 0b 08 04 00 00 00 ff 00 00     ................
    12d4:	00 01 00 00 00 00 00 00 00 05 00 ff 00 00 00 c8     ................
    12e4:	00 01 00 00 00 00 00 00 00 01 00 ff ff 0a 00 00     ................
    12f4:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1304:	00 05 00 00 00 7d 00 32 00 01 00 00 00 00 00 00     .....}.2........
    1314:	00 01 00 01 08 04 00 00 00 7d 00 32 00 01 00 00     .........}.2....
    1324:	00 00 00 00 00 05 00 ff 00 00 00 00 00 01 00 00     ................
    1334:	00 00 00 00 00 01 00 02 08 04 00 ff 00 00 00 00     ................
    1344:	00 01 00 00 00 00 00 00 00 05 00 00 00 7d 00 32     .............}.2
    1354:	00 01 00 00 00 00 00 00 00 01 00 03 08 04 00 00     ................
    1364:	00 7d 00 32 00 01 00 00 00 00 00 00 00 05 00 ff     .}.2............
    1374:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 05     ................
    1384:	08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00 00 00     ................
    1394:	00 20 00 06 08 02 00 ff 00 ff 00 ff 00 10 00 00     . ..............
    13a4:	00 00 00 00 00 20 00 08 08 04 00 00 00 7d 00 32     ..... .......}.2
    13b4:	00 01 00 00 00 00 00 00 00 05 00 ff 00 00 00 00     ................
    13c4:	00 01 00 00 00 00 00 00 00 01 00 09 08 04 00 ff     ................
    13d4:	00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 00     ................
    13e4:	00 7d 00 32 00 01 00 00 00 00 00 00 00 01 00 0a     .}.2............
    13f4:	08 04 00 00 00 7d 00 32 00 01 00 00 00 00 00 00     .....}.2........
    1404:	00 05 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1414:	00 01 00 0b 08 04 00 ff 00 00 00 00 00 01 00 00     ................
    1424:	00 00 00 00 00 05 00 00 00 7d 00 32 00 01 00 00     .........}.2....
    1434:	00 00 00 00 00 01 00 ff ff 05 00 00 08 0a 00 40     ...............@
    1444:	00 00 00 80 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1454:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1464:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1474:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1484:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 01     ................
    1494:	08 0a 00 ff 00 00 00 10 00 01 00 00 00 00 00 00     ................
    14a4:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    14b4:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    14c4:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    14d4:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    14e4:	00 01 00 02 08 0a 00 ff 00 00 00 10 00 01 00 00     ................
    14f4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1504:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    1514:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1524:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    1534:	00 00 00 00 00 01 00 03 08 0a 00 ff 00 00 00 10     ................
    1544:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1554:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    1564:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1574:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    1584:	00 01 00 00 00 00 00 00 00 01 00 05 08 0a 00 ff     ................
    1594:	00 00 00 10 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    15a4:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    15b4:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    15c4:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    15d4:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 06     ............. ..
    15e4:	08 0a 00 ff 00 00 00 10 00 04 00 00 00 00 00 00     ................
    15f4:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
    1604:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
    1614:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
    1624:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
    1634:	00 20 00 08 08 0a 00 ff 00 00 00 10 00 01 00 00     . ..............
    1644:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1654:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    1664:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1674:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    1684:	00 00 00 00 00 01 00 09 08 0a 00 ff 00 00 00 10     ................
    1694:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    16a4:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    16b4:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    16c4:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    16d4:	00 01 00 00 00 00 00 00 00 01 00 0a 08 0a 00 ff     ................
    16e4:	00 00 00 10 00 01 00 00 00 00 00 00 00 01 00 00     ................
    16f4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1704:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1714:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1724:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 0b     ................
    1734:	08 0a 00 ff 00 00 00 10 00 01 00 00 00 00 00 00     ................
    1744:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1754:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1764:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1774:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1784:	00 01 00 ff ff 05 00 00 08 06 00 ff 00 ff 00 ff     ................
    1794:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    17a4:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    17b4:	00 01 00 00 00 00 00 00 00 01 00 01 08 06 00 ff     ................
    17c4:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    17d4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
    17e4:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 02     ................
    17f4:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    1804:	00 08 00 00 00 00 00 00 00 01 00 ff 00 00 00 00     ................
    1814:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1824:	00 01 00 03 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    1834:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00     ................
    1844:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1854:	00 00 00 00 00 01 00 05 08 04 00 00 00 00 00 ff     ................
    1864:	00 20 00 00 00 00 00 00 00 40 00 ff 00 00 00 00     . .......@......
    1874:	00 20 00 00 00 00 00 00 00 40 00 06 08 04 00 ff     . .......@......
    1884:	00 00 00 00 00 20 00 00 00 00 00 00 00 40 00 00     ..... .......@..
    1894:	00 00 00 ff 00 20 00 00 00 00 00 00 00 40 00 08     ..... .......@..
    18a4:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    18b4:	00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    18c4:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    18d4:	00 01 00 09 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    18e4:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 ff     ................
    18f4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1904:	00 00 00 00 00 01 00 0a 08 06 00 ff 00 ff 00 ff     ................
    1914:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1924:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
    1934:	00 01 00 00 00 00 00 00 00 01 00 0b 08 06 00 ff     ................
    1944:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1954:	00 00 00 00 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1964:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 ff     ................
    1974:	ff 0a 00 00 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    1984:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    1994:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    19a4:	00 00 00 00 00 04 00 01 08 06 00 80 00 00 00 ff     ................
    19b4:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    19c4:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    19d4:	00 01 00 00 00 00 00 00 00 04 00 02 08 06 00 80     ................
    19e4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    19f4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    1a04:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 03     ................
    1a14:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 01     ................
    1a24:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 01     ................
    1a34:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 01     ................
    1a44:	00 04 00 04 03 80 00 00 00 ff 00 01 00 40 00 07     .............@..
    1a54:	03 80 00 00 00 ff 00 01 00 40 00 08 08 06 00 80     .........@......
    1a64:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    1a74:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    1a84:	00 ff 00 00 00 01 00 00 00 00 00 01 00 04 00 09     ................
    1a94:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1aa4:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1ab4:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1ac4:	00 04 00 0a 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    1ad4:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    1ae4:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    1af4:	00 00 00 00 00 04 00 0b 08 06 00 80 00 00 00 ff     ................
    1b04:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    1b14:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    1b24:	00 01 00 00 00 00 00 00 00 04 00 ff ff d2 00 00     ................
    1b34:	03 40 00 00 00 80 00 01 00 04 00 01 08 02 00 40     .@.............@
    1b44:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 02     ................
    1b54:	08 03 00 40 00 00 00 80 00 04 00 64 00 14 00 00     ...@.......d....
    1b64:	00 04 00 02 00 00 00 01 00 18 00 03 08 02 00 40     ...............@
    1b74:	00 00 00 80 00 19 00 64 00 14 00 00 00 19 00 05     .......d........
    1b84:	08 03 00 64 00 00 00 00 00 03 00 ff 00 3c 00 00     ...d.........<..
    1b94:	00 03 00 00 00 00 00 00 00 23 00 06 08 03 00 64     .........#.....d
    1ba4:	00 00 00 00 00 03 00 ff 00 3c 00 00 00 03 00 00     .........<......
    1bb4:	00 00 00 00 00 23 00 08 08 02 00 40 00 00 00 80     .....#.....@....
    1bc4:	00 19 00 64 00 14 00 00 00 19 00 09 08 03 00 40     ...d...........@
    1bd4:	00 00 00 80 00 04 00 64 00 14 00 00 00 04 00 02     .......d........
    1be4:	00 00 00 01 00 18 00 0a 08 02 00 40 00 00 00 80     ...........@....
    1bf4:	00 01 00 00 00 00 00 00 00 08 00 0b 03 40 00 00     .............@..
    1c04:	00 80 00 01 00 04 00 ff ff c8 00 00 08 06 00 ff     ................
    1c14:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1c24:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1c34:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 01     ................
    1c44:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1c54:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1c64:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1c74:	00 01 00 02 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    1c84:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1c94:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1ca4:	00 00 00 00 00 01 00 03 08 06 00 ff 00 00 00 00     ................
    1cb4:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1cc4:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1cd4:	00 08 00 00 00 00 00 00 00 01 00 05 05 ff 00 00     ................
    1ce4:	00 00 00 00 00 00 00 ff 00 0a 00 14 00 4b 00 06     .............K..
    1cf4:	05 ff 00 00 00 00 00 00 00 00 00 ff 00 0a 00 14     ................
    1d04:	00 4b 00 08 08 06 00 ff 00 00 00 00 00 01 00 00     .K..............
    1d14:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1d24:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1d34:	00 00 00 00 00 01 00 09 08 06 00 ff 00 00 00 00     ................
    1d44:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1d54:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1d64:	00 08 00 00 00 00 00 00 00 01 00 0a 08 06 00 ff     ................
    1d74:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1d84:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1d94:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 0b     ................
    1da4:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1db4:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1dc4:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1dd4:	00 01 00 ff ff 0a 00 00 08 03 00 ff 00 ff 00 ff     ................
    1de4:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1df4:	00 0c 00 01 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1e04:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 02     ................
    1e14:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1e24:	00 01 00 00 00 00 00 00 00 0c 00 03 08 03 00 ff     ................
    1e34:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1e44:	00 00 00 00 00 0c 00 04 08 04 00 ff 00 00 00 00     ................
    1e54:	00 04 00 00 00 00 00 00 00 10 00 00 00 00 00 ff     ................
    1e64:	00 04 00 00 00 00 00 00 00 10 00 07 08 04 00 00     ................
    1e74:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 ff     ................
    1e84:	00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 08     ................
    1e94:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1ea4:	00 01 00 00 00 00 00 00 00 0c 00 09 08 03 00 ff     ................
    1eb4:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1ec4:	00 00 00 00 00 0c 00 0a 08 03 00 ff 00 ff 00 ff     ................
    1ed4:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1ee4:	00 0c 00 0b 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1ef4:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    1f04:	ff 32 00 00 08 04 00 00 00 00 00 ff 00 01 00 00     .2..............
    1f14:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1f24:	00 00 00 00 00 11 00 01 08 02 00 40 00 00 00 80     ...........@....
    1f34:	00 01 00 00 00 00 00 00 00 08 00 02 08 06 00 00     ................
    1f44:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1f54:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 ff     ................
    1f64:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 03     ................
    1f74:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1f84:	00 08 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1f94:	00 11 00 05 03 1e 00 00 00 3c 00 10 00 10 00 06     .........<......
    1fa4:	03 1e 00 00 00 3c 00 10 00 10 00 08 08 04 00 40     .....<.........@
    1fb4:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1fc4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 11 00 09     ................
    1fd4:	08 06 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1fe4:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1ff4:	00 08 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    2004:	00 08 00 0a 08 02 00 40 00 00 00 80 00 01 00 00     .......@........
    2014:	00 00 00 00 00 08 00 0b 08 04 00 00 00 00 00 ff     ................
    2024:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2034:	00 01 00 00 00 00 00 00 00 11 00 ff ff 64 00 03     .............d..
    2044:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    2054:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    2064:	00 18 00 05 03 1e 00 00 00 3c 00 10 00 10 00 06     .........<......
    2074:	03 1e 00 00 00 3c 00 10 00 10 00 08 08 04 00 00     .....<..........
    2084:	00 80 00 80 00 01 00 02 00 00 00 01 00 10 00 00     ................
    2094:	00 00 00 c8 00 01 00 02 00 00 00 01 00 18 00 ff     ................
    20a4:	ff 64 00 03 08 04 00 00 00 80 00 80 00 01 00 02     .d..............
    20b4:	00 00 00 01 00 10 00 00 00 00 00 c8 00 01 00 02     ................
    20c4:	00 00 00 01 00 18 00 04 03 40 00 00 00 80 00 01     .........@......
    20d4:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 08     .....@..........
    20e4:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    20f4:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    2104:	00 18 00 ff ff 64 00 04 03 40 00 00 00 80 00 01     .....d...@......
    2114:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 ff     .....@..........
    2124:	ff 64 00 00 05 00 00 7d 00 7d 00 00 00 7d 00 00     .d.....}.}...}..
    2134:	00 32 00 02 00 09 00 01 05 00 00 7d 00 7d 00 00     .2.........}.}..
    2144:	00 00 00 7d 00 32 00 02 00 09 00 02 05 00 00 7d     ...}.2.........}
    2154:	00 7d 00 00 00 7d 00 00 00 32 00 02 00 09 00 03     .}...}...2......
    2164:	05 00 00 7d 00 7d 00 00 00 00 00 7d 00 32 00 02     ...}.}.....}.2..
    2174:	00 09 00 04 05 ff 00 00 00 00 00 00 00 00 00 ff     ................
    2184:	00 09 00 02 00 09 00 07 05 ff 00 00 00 00 00 00     ................
    2194:	00 00 00 ff 00 09 00 02 00 09 00 08 05 00 00 7d     ...............}
    21a4:	00 7d 00 00 00 00 00 7d 00 32 00 02 00 09 00 09     .}.....}.2......
    21b4:	05 00 00 7d 00 7d 00 00 00 7d 00 00 00 32 00 02     ...}.}...}...2..
    21c4:	00 09 00 0a 05 00 00 7d 00 7d 00 00 00 00 00 7d     .......}.}.....}
    21d4:	00 32 00 02 00 09 00 0b 05 00 00 7d 00 7d 00 00     .2.........}.}..
    21e4:	00 7d 00 00 00 32 00 02 00 09 00 ff ff 6e 00 00     .}...2.......n..
    21f4:	08 03 00 c8 00 14 00 00 00 04 00 00 00 01 00 01     ................
    2204:	00 20 00 00 00 00 00 00 00 04 00 01 03 00 00 ff     . ..............
    2214:	00 ff 00 01 00 0c 00 02 03 00 00 ff 00 ff 00 01     ................
    2224:	00 0c 00 03 08 02 00 c8 00 28 00 00 00 01 00 00     .........(......
    2234:	00 01 00 01 00 10 00 04 03 00 00 ff 00 ff 00 01     ................
    2244:	00 18 00 07 03 00 00 ff 00 ff 00 01 00 18 00 08     ................
    2254:	08 02 00 c8 00 28 00 00 00 01 00 00 00 01 00 01     .....(..........
    2264:	00 10 00 09 03 00 00 ff 00 ff 00 01 00 0c 00 0a     ................
    2274:	03 00 00 ff 00 ff 00 01 00 0c 00 0b 08 03 00 c8     ................
    2284:	00 28 00 00 00 04 00 00 00 01 00 01 00 20 00 00     .(........... ..
    2294:	00 00 00 00 00 04 00 ff ff 14 00 00 08 04 00 00     ................
    22a4:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    22b4:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 01     ................
    22c4:	08 02 00 00 00 ff 00 ff 00 04 00 00 00 01 00 01     ................
    22d4:	00 20 00 02 03 00 00 ff 00 ff 00 01 00 10 00 03     . ..............
    22e4:	08 04 00 00 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    22f4:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2304:	00 10 00 05 08 02 00 00 00 ff 00 ff 00 20 00 00     ............. ..
    2314:	00 00 00 00 00 20 00 06 08 02 00 00 00 00 00 ff     ..... ..........
    2324:	00 20 00 00 00 00 00 00 00 20 00 08 08 04 00 00     . ....... ......
    2334:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    2344:	00 00 00 ff 00 01 00 00 00 00 00 00 00 10 00 09     ................
    2354:	03 00 00 00 00 ff 00 01 00 10 00 0a 08 02 00 00     ................
    2364:	00 00 00 ff 00 04 00 00 00 00 00 01 00 20 00 0b     ............. ..
    2374:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2384:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2394:	00 10 00 ff ff 0a 00 00 08 04 00 00 00 ff 00 ff     ................
    23a4:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 ff     ................
    23b4:	00 01 00 00 00 00 00 00 00 10 00 01 08 02 00 00     ................
    23c4:	00 ff 00 ff 00 04 00 00 00 01 00 01 00 20 00 02     ............. ..
    23d4:	03 00 00 ff 00 ff 00 01 00 10 00 03 08 04 00 00     ................
    23e4:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    23f4:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 05     ................
    2404:	08 02 00 00 00 ff 00 ff 00 20 00 00 00 00 00 00     ......... ......
    2414:	00 20 00 06 08 02 00 ff 00 ff 00 00 00 20 00 00     . ........... ..
    2424:	00 00 00 00 00 20 00 08 08 04 00 00 00 ff 00 ff     ..... ..........
    2434:	00 01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00     ................
    2444:	00 01 00 00 00 00 00 00 00 10 00 09 03 ff 00 ff     ................
    2454:	00 00 00 01 00 10 00 0a 08 02 00 ff 00 ff 00 00     ................
    2464:	00 04 00 01 00 01 00 00 00 20 00 0b 08 04 00 ff     ......... ......
    2474:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    2484:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    2494:	ff 0a 00 00 08 04 00 ff 00 00 00 80 00 01 00 00     ................
    24a4:	00 00 00 00 00 04 00 ff 00 00 00 80 00 01 00 00     ................
    24b4:	00 00 00 00 00 10 00 01 08 02 00 ff 00 00 00 80     ................
    24c4:	00 04 00 02 00 00 00 01 00 20 00 02 03 ff 00 00     ......... ......
    24d4:	00 80 00 01 00 10 00 03 08 04 00 ff 00 00 00 80     ................
    24e4:	00 01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00     ................
    24f4:	00 01 00 00 00 00 00 00 00 10 00 05 08 02 00 ff     ................
    2504:	00 00 00 80 00 20 00 00 00 00 00 00 00 20 00 06     ..... ....... ..
    2514:	08 02 00 ff 00 ff 00 00 00 20 00 00 00 00 00 00     ......... ......
    2524:	00 20 00 08 08 04 00 ff 00 00 00 80 00 01 00 00     . ..............
    2534:	00 00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00     ................
    2544:	00 00 00 00 00 10 00 09 03 ff 00 ff 00 00 00 01     ................
    2554:	00 10 00 0a 08 02 00 ff 00 ff 00 00 00 04 00 01     ................
    2564:	00 01 00 00 00 20 00 0b 08 04 00 ff 00 ff 00 00     ..... ..........
    2574:	00 01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00     ................
    2584:	00 01 00 00 00 00 00 00 00 10 00 ff ff 0a 00 ff     ................
	...

00002596 <__ctors_end>:
    2596:	11 24       	eor	r1, r1
    2598:	1f be       	out	0x3f, r1	; 63
    259a:	cf ef       	ldi	r28, 0xFF	; 255
    259c:	d0 e1       	ldi	r29, 0x10	; 16
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	cd bf       	out	0x3d, r28	; 61

000025a2 <__do_copy_data>:
    25a2:	12 e0       	ldi	r17, 0x02	; 2
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b1 e0       	ldi	r27, 0x01	; 1
    25a8:	e6 e0       	ldi	r30, 0x06	; 6
    25aa:	f0 e5       	ldi	r31, 0x50	; 80
    25ac:	00 e0       	ldi	r16, 0x00	; 0
    25ae:	0b bf       	out	0x3b, r16	; 59
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <__do_copy_data+0x14>
    25b2:	07 90       	elpm	r0, Z+
    25b4:	0d 92       	st	X+, r0
    25b6:	a0 31       	cpi	r26, 0x10	; 16
    25b8:	b1 07       	cpc	r27, r17
    25ba:	d9 f7       	brne	.-10     	; 0x25b2 <__do_copy_data+0x10>

000025bc <__do_clear_bss>:
    25bc:	1e e0       	ldi	r17, 0x0E	; 14
    25be:	a0 e1       	ldi	r26, 0x10	; 16
    25c0:	b2 e0       	ldi	r27, 0x02	; 2
    25c2:	01 c0       	rjmp	.+2      	; 0x25c6 <.do_clear_bss_start>

000025c4 <.do_clear_bss_loop>:
    25c4:	1d 92       	st	X+, r1

000025c6 <.do_clear_bss_start>:
    25c6:	a5 3f       	cpi	r26, 0xF5	; 245
    25c8:	b1 07       	cpc	r27, r17
    25ca:	e1 f7       	brne	.-8      	; 0x25c4 <.do_clear_bss_loop>
    25cc:	0e 94 3c 13 	call	0x2678	; 0x2678 <main>
    25d0:	0c 94 01 28 	jmp	0x5002	; 0x5002 <_exit>

000025d4 <__bad_interrupt>:
    25d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000025d8 <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
    25d8:	ef 92       	push	r14
    25da:	ff 92       	push	r15
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	ec 01       	movw	r28, r24
    25e6:	00 e0       	ldi	r16, 0x00	; 0
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	ee 24       	eor	r14, r14
    25ec:	ff 24       	eor	r15, r15
    25ee:	0c c0       	rjmp	.+24     	; 0x2608 <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
    25f0:	80 91 10 02 	lds	r24, 0x0210
    25f4:	90 91 11 02 	lds	r25, 0x0211
    25f8:	0a 97       	sbiw	r24, 0x0a	; 10
    25fa:	4c f5       	brge	.+82     	; 0x264e <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    25fc:	0f 5f       	subi	r16, 0xFF	; 255
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	27 96       	adiw	r28, 0x07	; 7
    2602:	0c 30       	cpi	r16, 0x0C	; 12
    2604:	11 05       	cpc	r17, r1
    2606:	79 f0       	breq	.+30     	; 0x2626 <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
    2608:	8e 81       	ldd	r24, Y+6	; 0x06
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	89 f3       	breq	.-30     	; 0x25f0 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    260e:	6c 81       	ldd	r22, Y+4	; 0x04
    2610:	7d 81       	ldd	r23, Y+5	; 0x05
    2612:	e8 81       	ld	r30, Y
    2614:	f9 81       	ldd	r31, Y+1	; 0x01
    2616:	c8 01       	movw	r24, r16
    2618:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    261a:	0f 5f       	subi	r16, 0xFF	; 255
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	27 96       	adiw	r28, 0x07	; 7
    2620:	0c 30       	cpi	r16, 0x0C	; 12
    2622:	11 05       	cpc	r17, r1
    2624:	89 f7       	brne	.-30     	; 0x2608 <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	e8 16       	cp	r14, r24
    262a:	f1 04       	cpc	r15, r1
    262c:	d1 f0       	breq	.+52     	; 0x2662 <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
    262e:	80 91 10 02 	lds	r24, 0x0210
    2632:	90 91 11 02 	lds	r25, 0x0211
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	90 93 11 02 	sts	0x0211, r25
    263c:	80 93 10 02 	sts	0x0210, r24
	}
}
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    264e:	6c 81       	ldd	r22, Y+4	; 0x04
    2650:	7d 81       	ldd	r23, Y+5	; 0x05
    2652:	e8 81       	ld	r30, Y
    2654:	f9 81       	ldd	r31, Y+1	; 0x01
    2656:	c8 01       	movw	r24, r16
    2658:	09 95       	icall
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	e8 2e       	mov	r14, r24
    265e:	f1 2c       	mov	r15, r1
    2660:	cd cf       	rjmp	.-102    	; 0x25fc <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
    2662:	10 92 11 02 	sts	0x0211, r1
    2666:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	08 95       	ret

00002678 <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
    2678:	2f 92       	push	r2
    267a:	3f 92       	push	r3
    267c:	4f 92       	push	r4
    267e:	5f 92       	push	r5
    2680:	6f 92       	push	r6
    2682:	7f 92       	push	r7
    2684:	8f 92       	push	r8
    2686:	9f 92       	push	r9
    2688:	af 92       	push	r10
    268a:	bf 92       	push	r11
    268c:	cf 92       	push	r12
    268e:	df 92       	push	r13
    2690:	ef 92       	push	r14
    2692:	ff 92       	push	r15
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	c0 56       	subi	r28, 0x60	; 96
    26a2:	d0 40       	sbci	r29, 0x00	; 0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
    26ae:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
    26b2:	8f ef       	ldi	r24, 0xFF	; 255
    26b4:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
    26b8:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
    26ba:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
    26bc:	8b b3       	in	r24, 0x1b	; 27
    26be:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
    26c0:	8e b5       	in	r24, 0x2e	; 46
    26c2:	88 60       	ori	r24, 0x08	; 8
    26c4:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
    26c6:	80 e4       	ldi	r24, 0x40	; 64
    26c8:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
    26ca:	80 ea       	ldi	r24, 0xA0	; 160
    26cc:	9f e0       	ldi	r25, 0x0F	; 15
    26ce:	9b bd       	out	0x2b, r25	; 43
    26d0:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
    26d2:	8e b5       	in	r24, 0x2e	; 46
    26d4:	82 60       	ori	r24, 0x02	; 2
    26d6:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
    26d8:	0e 94 ef 20 	call	0x41de	; 0x41de <initDecoder>
    26dc:	4d e0       	ldi	r20, 0x0D	; 13
    26de:	64 2e       	mov	r6, r20
    26e0:	71 2c       	mov	r7, r1
    26e2:	6c 0e       	add	r6, r28
    26e4:	7d 1e       	adc	r7, r29
    26e6:	f3 01       	movw	r30, r6
    26e8:	89 e7       	ldi	r24, 0x79	; 121
    26ea:	94 e1       	ldi	r25, 0x14	; 20
    26ec:	9e 01       	movw	r18, r28
    26ee:	2f 59       	subi	r18, 0x9F	; 159
    26f0:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    26f2:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
    26f4:	6e ed       	ldi	r22, 0xDE	; 222
    26f6:	74 e1       	ldi	r23, 0x14	; 20
    26f8:	71 83       	std	Z+1, r23	; 0x01
    26fa:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
    26fc:	93 83       	std	Z+3, r25	; 0x03
    26fe:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
    2700:	15 82       	std	Z+5, r1	; 0x05
    2702:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2704:	4b 8b       	std	Y+19, r20	; 0x13
    2706:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
    2708:	e2 17       	cp	r30, r18
    270a:	f3 07       	cpc	r31, r19
    270c:	99 f7       	brne	.-26     	; 0x26f4 <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
    270e:	0e 94 c5 20 	call	0x418a	; 0x418a <getNextGroup>
    2712:	fc 01       	movw	r30, r24
    2714:	ee 24       	eor	r14, r14
    2716:	ff 24       	eor	r15, r15
    2718:	88 24       	eor	r8, r8
    271a:	8a 94       	dec	r8
    271c:	98 2c       	mov	r9, r8
    271e:	2e 01       	movw	r4, r28
    2720:	08 94       	sec
    2722:	41 1c       	adc	r4, r1
    2724:	51 1c       	adc	r5, r1
    2726:	aa 24       	eor	r10, r10
    2728:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    272a:	3c e0       	ldi	r19, 0x0C	; 12
    272c:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
    272e:	33 24       	eor	r3, r3
    2730:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
    2732:	02 81       	ldd	r16, Z+2	; 0x02
    2734:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2736:	d2 01       	movw	r26, r4
    2738:	e2 2d       	mov	r30, r2
    273a:	1d 92       	st	X+, r1
    273c:	ea 95       	dec	r30
    273e:	e9 f7       	brne	.-6      	; 0x273a <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
    2740:	d8 01       	movw	r26, r16
    2742:	8c 91       	ld	r24, X
    2744:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
    2746:	f2 01       	movw	r30, r4
    2748:	e8 0f       	add	r30, r24
    274a:	f9 1f       	adc	r31, r25
    274c:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
    274e:	fc 01       	movw	r30, r24
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	ee 0f       	add	r30, r30
    2756:	ff 1f       	adc	r31, r31
    2758:	ee 0f       	add	r30, r30
    275a:	ff 1f       	adc	r31, r31
    275c:	e8 1b       	sub	r30, r24
    275e:	f9 0b       	sbc	r31, r25
    2760:	e4 0d       	add	r30, r4
    2762:	f5 1d       	adc	r31, r5
    2764:	12 96       	adiw	r26, 0x02	; 2
    2766:	2d 91       	ld	r18, X+
    2768:	3c 91       	ld	r19, X
    276a:	13 97       	sbiw	r26, 0x03	; 3
    276c:	35 87       	std	Z+13, r19	; 0x0d
    276e:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
    2770:	16 96       	adiw	r26, 0x06	; 6
    2772:	6d 91       	ld	r22, X+
    2774:	7c 91       	ld	r23, X
    2776:	17 97       	sbiw	r26, 0x07	; 7
    2778:	71 8b       	std	Z+17, r23	; 0x11
    277a:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
    277c:	18 96       	adiw	r26, 0x08	; 8
    277e:	2c 91       	ld	r18, X
    2780:	18 97       	sbiw	r26, 0x08	; 8
    2782:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
    2784:	14 96       	adiw	r26, 0x04	; 4
    2786:	ed 91       	ld	r30, X+
    2788:	fc 91       	ld	r31, X
    278a:	15 97       	sbiw	r26, 0x05	; 5
    278c:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
    278e:	f8 01       	movw	r30, r16
    2790:	01 85       	ldd	r16, Z+9	; 0x09
    2792:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
    2794:	01 15       	cp	r16, r1
    2796:	11 05       	cpc	r17, r1
    2798:	99 f6       	brne	.-90     	; 0x2740 <main+0xc8>
    279a:	f2 01       	movw	r30, r4
    279c:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
    279e:	80 81       	ld	r24, Z
    27a0:	88 23       	and	r24, r24
    27a2:	61 f4       	brne	.+24     	; 0x27bc <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
    27a4:	6e ed       	ldi	r22, 0xDE	; 222
    27a6:	74 e1       	ldi	r23, 0x14	; 20
    27a8:	11 96       	adiw	r26, 0x01	; 1
    27aa:	7c 93       	st	X, r23
    27ac:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
    27ae:	15 96       	adiw	r26, 0x05	; 5
    27b0:	1c 92       	st	X, r1
    27b2:	1e 92       	st	-X, r1
    27b4:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
    27b6:	16 96       	adiw	r26, 0x06	; 6
    27b8:	3c 92       	st	X, r3
    27ba:	16 97       	sbiw	r26, 0x06	; 6
    27bc:	31 96       	adiw	r30, 0x01	; 1
    27be:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
    27c0:	e6 15       	cp	r30, r6
    27c2:	f7 05       	cpc	r31, r7
    27c4:	61 f7       	brne	.-40     	; 0x279e <main+0x126>
    27c6:	00 e0       	ldi	r16, 0x00	; 0
    27c8:	10 e0       	ldi	r17, 0x00	; 0
    27ca:	cc 24       	eor	r12, r12
    27cc:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    27ce:	e1 14       	cp	r14, r1
    27d0:	f1 04       	cpc	r15, r1
    27d2:	19 f4       	brne	.+6      	; 0x27da <main+0x162>
    27d4:	88 24       	eor	r8, r8
    27d6:	8a 94       	dec	r8
    27d8:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
    27da:	c3 01       	movw	r24, r6
    27dc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <doEffects>
			waitForTimer();
    27e0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <waitForTimer>
			displayColors();
    27e4:	0e 94 48 21 	call	0x4290	; 0x4290 <displayColors>
			deltaTimer++;
    27e8:	0f 5f       	subi	r16, 0xFF	; 255
    27ea:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
    27ec:	0a 30       	cpi	r16, 0x0A	; 10
    27ee:	11 05       	cpc	r17, r1
    27f0:	74 f3       	brlt	.-36     	; 0x27ce <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
    27f2:	80 91 63 00 	lds	r24, 0x0063
    27f6:	81 fd       	sbrc	r24, 1
    27f8:	1a c0       	rjmp	.+52     	; 0x282e <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
    27fa:	ab 28       	or	r10, r11
    27fc:	09 f4       	brne	.+2      	; 0x2800 <main+0x188>
    27fe:	4d c0       	rjmp	.+154    	; 0x289a <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2800:	80 91 63 00 	lds	r24, 0x0063
    2804:	80 fd       	sbrc	r24, 0
    2806:	21 c0       	rjmp	.+66     	; 0x284a <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
    2808:	e0 fe       	sbrs	r14, 0
    280a:	59 c0       	rjmp	.+178    	; 0x28be <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    280c:	c1 fe       	sbrs	r12, 1
    280e:	29 c0       	rjmp	.+82     	; 0x2862 <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
    2810:	b1 e0       	ldi	r27, 0x01	; 1
    2812:	8b 16       	cp	r8, r27
    2814:	91 04       	cpc	r9, r1
    2816:	b1 f1       	breq	.+108    	; 0x2884 <main+0x20c>
    2818:	22 e0       	ldi	r18, 0x02	; 2
    281a:	a2 2e       	mov	r10, r18
    281c:	b1 2c       	mov	r11, r1
    281e:	ae 20       	and	r10, r14
    2820:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
    2822:	00 e0       	ldi	r16, 0x00	; 0
    2824:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2826:	e1 14       	cp	r14, r1
    2828:	f1 04       	cpc	r15, r1
    282a:	b9 f6       	brne	.-82     	; 0x27da <main+0x162>
    282c:	d3 cf       	rjmp	.-90     	; 0x27d4 <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
    282e:	ab 28       	or	r10, r11
    2830:	21 f0       	breq	.+8      	; 0x283a <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
    2832:	a2 e0       	ldi	r26, 0x02	; 2
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ca 2a       	or	r12, r26
    2838:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
    283a:	ed ef       	ldi	r30, 0xFD	; 253
    283c:	ff ef       	ldi	r31, 0xFF	; 255
    283e:	ee 22       	and	r14, r30
    2840:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2842:	80 91 63 00 	lds	r24, 0x0063
    2846:	80 ff       	sbrs	r24, 0
    2848:	df cf       	rjmp	.-66     	; 0x2808 <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
    284a:	e0 fe       	sbrs	r14, 0
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	c8 2a       	or	r12, r24
    2854:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
    2856:	ae ef       	ldi	r26, 0xFE	; 254
    2858:	bf ef       	ldi	r27, 0xFF	; 255
    285a:	ea 22       	and	r14, r26
    285c:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    285e:	c1 fc       	sbrc	r12, 1
    2860:	d7 cf       	rjmp	.-82     	; 0x2810 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
    2862:	c0 fe       	sbrs	r12, 0
    2864:	d9 cf       	rjmp	.-78     	; 0x2818 <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
    2866:	e2 e0       	ldi	r30, 0x02	; 2
    2868:	8e 16       	cp	r8, r30
    286a:	91 04       	cpc	r9, r1
    286c:	a9 f6       	brne	.-86     	; 0x2818 <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
    286e:	92 e0       	ldi	r25, 0x02	; 2
    2870:	a9 2e       	mov	r10, r25
    2872:	b1 2c       	mov	r11, r1
    2874:	ae 20       	and	r10, r14
    2876:	bf 20       	and	r11, r15
    2878:	e1 fe       	sbrs	r14, 1
    287a:	d3 cf       	rjmp	.-90     	; 0x2822 <main+0x1aa>

							groupNew = getNextGroup();
    287c:	0e 94 c5 20 	call	0x418a	; 0x418a <getNextGroup>
    2880:	fc 01       	movw	r30, r24
    2882:	57 cf       	rjmp	.-338    	; 0x2732 <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
    2884:	e0 fe       	sbrs	r14, 0
    2886:	c8 cf       	rjmp	.-112    	; 0x2818 <main+0x1a0>
							groupNew = getPreviousGroup();
    2888:	0e 94 60 20 	call	0x40c0	; 0x40c0 <getPreviousGroup>
    288c:	fc 01       	movw	r30, r24
    288e:	32 e0       	ldi	r19, 0x02	; 2
    2890:	a3 2e       	mov	r10, r19
    2892:	b1 2c       	mov	r11, r1
    2894:	ae 20       	and	r10, r14
    2896:	bf 20       	and	r11, r15
    2898:	4c cf       	rjmp	.-360    	; 0x2732 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    289a:	7f ef       	ldi	r23, 0xFF	; 255
    289c:	87 16       	cp	r8, r23
    289e:	7f ef       	ldi	r23, 0xFF	; 255
    28a0:	97 06       	cpc	r9, r23
    28a2:	11 f1       	breq	.+68     	; 0x28e8 <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	e8 2a       	or	r14, r24
    28aa:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
    28ac:	0e 94 c5 20 	call	0x418a	; 0x418a <getNextGroup>
    28b0:	fc 01       	movw	r30, r24
    28b2:	62 e0       	ldi	r22, 0x02	; 2
    28b4:	a6 2e       	mov	r10, r22
    28b6:	b1 2c       	mov	r11, r1
    28b8:	ae 20       	and	r10, r14
    28ba:	bf 20       	and	r11, r15
    28bc:	3a cf       	rjmp	.-396    	; 0x2732 <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	e6 2a       	or	r14, r22
    28c4:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
    28c6:	0e 94 60 20 	call	0x40c0	; 0x40c0 <getPreviousGroup>
    28ca:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
    28cc:	7f ef       	ldi	r23, 0xFF	; 255
    28ce:	87 16       	cp	r8, r23
    28d0:	7f ef       	ldi	r23, 0xFF	; 255
    28d2:	97 06       	cpc	r9, r23
    28d4:	e1 f6       	brne	.-72     	; 0x288e <main+0x216>
    28d6:	51 e0       	ldi	r21, 0x01	; 1
    28d8:	85 2e       	mov	r8, r21
    28da:	91 2c       	mov	r9, r1
    28dc:	42 e0       	ldi	r20, 0x02	; 2
    28de:	a4 2e       	mov	r10, r20
    28e0:	b1 2c       	mov	r11, r1
    28e2:	ae 20       	and	r10, r14
    28e4:	bf 20       	and	r11, r15
    28e6:	25 cf       	rjmp	.-438    	; 0x2732 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    28e8:	72 e0       	ldi	r23, 0x02	; 2
    28ea:	87 2e       	mov	r8, r23
    28ec:	91 2c       	mov	r9, r1
    28ee:	da cf       	rjmp	.-76     	; 0x28a4 <main+0x22c>

000028f0 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
    28f0:	08 95       	ret

000028f2 <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
    28f2:	08 95       	ret

000028f4 <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
    28f4:	08 95       	ret

000028f6 <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
    28f6:	08 95       	ret

000028f8 <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
    28f8:	fc 01       	movw	r30, r24
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	ed 51       	subi	r30, 0x1D	; 29
    2904:	fb 4f       	sbci	r31, 0xFB	; 251
    2906:	11 82       	std	Z+1, r1	; 0x01
    2908:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
    290a:	13 82       	std	Z+3, r1	; 0x03
    290c:	12 82       	std	Z+2, r1	; 0x02
}	
    290e:	08 95       	ret

00002910 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	8c 01       	movw	r16, r24
    291a:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
    291c:	dc 01       	movw	r26, r24
    291e:	aa 0f       	add	r26, r26
    2920:	bb 1f       	adc	r27, r27
    2922:	aa 0f       	add	r26, r26
    2924:	bb 1f       	adc	r27, r27
    2926:	ad 51       	subi	r26, 0x1D	; 29
    2928:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
    292a:	6e 5f       	subi	r22, 0xFE	; 254
    292c:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
    292e:	12 96       	adiw	r26, 0x02	; 2
    2930:	2d 91       	ld	r18, X+
    2932:	3c 91       	ld	r19, X
    2934:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
    2936:	4d 91       	ld	r20, X+
    2938:	5c 91       	ld	r21, X
    293a:	11 97       	sbiw	r26, 0x01	; 1
    293c:	f9 01       	movw	r30, r18
    293e:	ee 0f       	add	r30, r30
    2940:	ff 1f       	adc	r31, r31
    2942:	ee 0f       	add	r30, r30
    2944:	ff 1f       	adc	r31, r31
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	e6 0f       	add	r30, r22
    294c:	f7 1f       	adc	r31, r23
    294e:	86 81       	ldd	r24, Z+6	; 0x06
    2950:	97 81       	ldd	r25, Z+7	; 0x07
    2952:	84 17       	cp	r24, r20
    2954:	95 07       	cpc	r25, r21
    2956:	6c f5       	brge	.+90     	; 0x29b2 <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
    2958:	2f 5f       	subi	r18, 0xFF	; 255
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	13 96       	adiw	r26, 0x03	; 3
    295e:	3c 93       	st	X, r19
    2960:	2e 93       	st	-X, r18
    2962:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
    2964:	88 81       	ld	r24, Y
    2966:	99 81       	ldd	r25, Y+1	; 0x01
    2968:	28 17       	cp	r18, r24
    296a:	39 07       	cpc	r19, r25
    296c:	24 f0       	brlt	.+8      	; 0x2976 <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
    296e:	13 96       	adiw	r26, 0x03	; 3
    2970:	1c 92       	st	X, r1
    2972:	1e 92       	st	-X, r1
    2974:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	1c 92       	st	X, r1
    297a:	1e 92       	st	-X, r1
    297c:	12 96       	adiw	r26, 0x02	; 2
    297e:	2d 91       	ld	r18, X+
    2980:	3c 91       	ld	r19, X
    2982:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
    2984:	f9 01       	movw	r30, r18
    2986:	ee 0f       	add	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	ee 0f       	add	r30, r30
    298c:	ff 1f       	adc	r31, r31
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	e6 0f       	add	r30, r22
    2994:	f7 1f       	adc	r31, r23
    2996:	60 81       	ld	r22, Z
    2998:	71 81       	ldd	r23, Z+1	; 0x01
    299a:	42 81       	ldd	r20, Z+2	; 0x02
    299c:	53 81       	ldd	r21, Z+3	; 0x03
    299e:	24 81       	ldd	r18, Z+4	; 0x04
    29a0:	35 81       	ldd	r19, Z+5	; 0x05
    29a2:	c8 01       	movw	r24, r16
    29a4:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
    29b2:	4f 5f       	subi	r20, 0xFF	; 255
    29b4:	5f 4f       	sbci	r21, 0xFF	; 255
    29b6:	4d 93       	st	X+, r20
    29b8:	5c 93       	st	X, r21
    29ba:	e4 cf       	rjmp	.-56     	; 0x2984 <lightBeamEffect+0x74>

000029bc <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
}
    29cc:	08 95       	ret

000029ce <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
    29ce:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	42 81       	ldd	r20, Z+2	; 0x02
    29d6:	53 81       	ldd	r21, Z+3	; 0x03
    29d8:	24 81       	ldd	r18, Z+4	; 0x04
    29da:	35 81       	ldd	r19, Z+5	; 0x05
    29dc:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
}
    29e0:	08 95       	ret

000029e2 <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
    29e6:	fc 01       	movw	r30, r24
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	df 01       	movw	r26, r30
    29ee:	a5 5b       	subi	r26, 0xB5	; 181
    29f0:	bc 4f       	sbci	r27, 0xFC	; 252
    29f2:	1d 92       	st	X+, r1
    29f4:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
    29f6:	ed 59       	subi	r30, 0x9D	; 157
    29f8:	fc 4f       	sbci	r31, 0xFC	; 252
    29fa:	21 e0       	ldi	r18, 0x01	; 1
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	31 83       	std	Z+1, r19	; 0x01
    2a00:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    2a02:	fb 01       	movw	r30, r22
    2a04:	60 81       	ld	r22, Z
    2a06:	71 81       	ldd	r23, Z+1	; 0x01
    2a08:	42 81       	ldd	r20, Z+2	; 0x02
    2a0a:	53 81       	ldd	r21, Z+3	; 0x03
    2a0c:	24 81       	ldd	r18, Z+4	; 0x04
    2a0e:	35 81       	ldd	r19, Z+5	; 0x05
    2a10:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
}
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	08 95       	ret

00002a1a <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	9c 01       	movw	r18, r24
    2a28:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	8c 01       	movw	r16, r24
    2a30:	05 5b       	subi	r16, 0xB5	; 181
    2a32:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
    2a34:	ec 01       	movw	r28, r24
    2a36:	cd 59       	subi	r28, 0x9D	; 157
    2a38:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
    2a3e:	42 81       	ldd	r20, Z+2	; 0x02
    2a40:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
    2a42:	e4 80       	ldd	r14, Z+4	; 0x04
    2a44:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
    2a46:	a6 81       	ldd	r26, Z+6	; 0x06
    2a48:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
    2a4a:	00 84       	ldd	r0, Z+8	; 0x08
    2a4c:	f1 85       	ldd	r31, Z+9	; 0x09
    2a4e:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
    2a50:	88 81       	ld	r24, Y
    2a52:	99 81       	ldd	r25, Y+1	; 0x01
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	91 05       	cpc	r25, r1
    2a58:	09 f1       	breq	.+66     	; 0x2a9c <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
    2a5a:	89 2b       	or	r24, r25
    2a5c:	c1 f4       	brne	.+48     	; 0x2a8e <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
    2a5e:	31 97       	sbiw	r30, 0x01	; 1
    2a60:	d8 01       	movw	r26, r16
    2a62:	8d 91       	ld	r24, X+
    2a64:	9c 91       	ld	r25, X
    2a66:	11 97       	sbiw	r26, 0x01	; 1
    2a68:	8e 17       	cp	r24, r30
    2a6a:	9f 07       	cpc	r25, r31
    2a6c:	0c f0       	brlt	.+2      	; 0x2a70 <pwmEffect+0x56>
    2a6e:	43 c0       	rjmp	.+134    	; 0x2af6 <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
    2a70:	c9 01       	movw	r24, r18
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
			*curCounter +=1;
    2a82:	f8 01       	movw	r30, r16
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
		}

	}
	
}
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
    2a9c:	11 97       	sbiw	r26, 0x01	; 1
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	80 81       	ld	r24, Z
    2aa2:	91 81       	ldd	r25, Z+1	; 0x01
    2aa4:	8a 17       	cp	r24, r26
    2aa6:	9b 07       	cpc	r25, r27
    2aa8:	a4 f0       	brlt	.+40     	; 0x2ad2 <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
    2aaa:	19 82       	std	Y+1, r1	; 0x01
    2aac:	18 82       	st	Y, r1
			*curCounter = 0;
    2aae:	11 82       	std	Z+1, r1	; 0x01
    2ab0:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
    2ab2:	c9 01       	movw	r24, r18
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	97 01       	movw	r18, r14
    2ad6:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
			*curCounter += 1;
    2ada:	d8 01       	movw	r26, r16
    2adc:	8d 91       	ld	r24, X+
    2ade:	9c 91       	ld	r25, X
    2ae0:	11 97       	sbiw	r26, 0x01	; 1
    2ae2:	01 96       	adiw	r24, 0x01	; 1
    2ae4:	8d 93       	st	X+, r24
    2ae6:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	ff 90       	pop	r15
    2af2:	ef 90       	pop	r14
    2af4:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	99 83       	std	Y+1, r25	; 0x01
    2afc:	88 83       	st	Y, r24
			*curCounter = 0;
    2afe:	1d 92       	st	X+, r1
    2b00:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    2b02:	c9 01       	movw	r24, r18
    2b04:	97 01       	movw	r18, r14
    2b06:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
    2b16:	08 95       	ret

00002b18 <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
    2b18:	2f 92       	push	r2
    2b1a:	3f 92       	push	r3
    2b1c:	4f 92       	push	r4
    2b1e:	5f 92       	push	r5
    2b20:	6f 92       	push	r6
    2b22:	7f 92       	push	r7
    2b24:	8f 92       	push	r8
    2b26:	9f 92       	push	r9
    2b28:	af 92       	push	r10
    2b2a:	bf 92       	push	r11
    2b2c:	cf 92       	push	r12
    2b2e:	df 92       	push	r13
    2b30:	ef 92       	push	r14
    2b32:	ff 92       	push	r15
    2b34:	0f 93       	push	r16
    2b36:	1f 93       	push	r17
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
    2b40:	6e 97       	sbiw	r28, 0x1e	; 30
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b50:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
    2b52:	20 81       	ld	r18, Z
    2b54:	31 81       	ldd	r19, Z+1	; 0x01
    2b56:	3c 8f       	std	Y+28, r19	; 0x1c
    2b58:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b60:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
    2b62:	a4 81       	ldd	r26, Z+4	; 0x04
    2b64:	b5 81       	ldd	r27, Z+5	; 0x05
    2b66:	b8 8f       	std	Y+24, r27	; 0x18
    2b68:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
    2b6a:	26 81       	ldd	r18, Z+6	; 0x06
    2b6c:	37 81       	ldd	r19, Z+7	; 0x07
    2b6e:	3e 8b       	std	Y+22, r19	; 0x16
    2b70:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
    2b72:	80 85       	ldd	r24, Z+8	; 0x08
    2b74:	91 85       	ldd	r25, Z+9	; 0x09
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
    2b7a:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b7c:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b7e:	ba 8b       	std	Y+18, r27	; 0x12
    2b80:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
    2b82:	24 85       	ldd	r18, Z+12	; 0x0c
    2b84:	35 85       	ldd	r19, Z+13	; 0x0d
    2b86:	38 8b       	std	Y+16, r19	; 0x10
    2b88:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
    2b8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b8e:	88 0f       	add	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	dc 01       	movw	r26, r24
    2b94:	ad 5c       	subi	r26, 0xCD	; 205
    2b96:	bc 4f       	sbci	r27, 0xFC	; 252
    2b98:	be 87       	std	Y+14, r27	; 0x0e
    2b9a:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	e5 58       	subi	r30, 0x85	; 133
    2ba0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ba2:	fc 87       	std	Y+12, r31	; 0x0c
    2ba4:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
    2ba6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ba8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2baa:	82 0f       	add	r24, r18
    2bac:	93 1f       	adc	r25, r19
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	ae 5e       	subi	r26, 0xEE	; 238
    2bba:	bd 4f       	sbci	r27, 0xFD	; 253
    2bbc:	ba 87       	std	Y+10, r27	; 0x0a
    2bbe:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	ea 5e       	subi	r30, 0xEA	; 234
    2bc4:	fd 4f       	sbci	r31, 0xFD	; 253
    2bc6:	f8 87       	std	Y+8, r31	; 0x08
    2bc8:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
    2bca:	9c 01       	movw	r18, r24
    2bcc:	26 5e       	subi	r18, 0xE6	; 230
    2bce:	3d 4f       	sbci	r19, 0xFD	; 253
    2bd0:	3e 83       	std	Y+6, r19	; 0x06
    2bd2:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
    2bd4:	80 91 ea 02 	lds	r24, 0x02EA
    2bd8:	81 30       	cpi	r24, 0x01	; 1
    2bda:	09 f4       	brne	.+2      	; 0x2bde <fadeBetweenColors+0xc6>
    2bdc:	09 c1       	rjmp	.+530    	; 0x2df0 <fadeBetweenColors+0x2d8>
    2bde:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2be0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2be2:	bd 01       	movw	r22, r26
    2be4:	88 27       	eor	r24, r24
    2be6:	77 fd       	sbrc	r23, 7
    2be8:	80 95       	com	r24
    2bea:	98 2f       	mov	r25, r24
    2bec:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2bf0:	3b 01       	movw	r6, r22
    2bf2:	4c 01       	movw	r8, r24
    2bf4:	e9 8d       	ldd	r30, Y+25	; 0x19
    2bf6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2bf8:	bf 01       	movw	r22, r30
    2bfa:	88 27       	eor	r24, r24
    2bfc:	77 fd       	sbrc	r23, 7
    2bfe:	80 95       	com	r24
    2c00:	98 2f       	mov	r25, r24
    2c02:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2c06:	1b 01       	movw	r2, r22
    2c08:	2c 01       	movw	r4, r24
    2c0a:	2f 89       	ldd	r18, Y+23	; 0x17
    2c0c:	38 8d       	ldd	r19, Y+24	; 0x18
    2c0e:	b9 01       	movw	r22, r18
    2c10:	88 27       	eor	r24, r24
    2c12:	77 fd       	sbrc	r23, 7
    2c14:	80 95       	com	r24
    2c16:	98 2f       	mov	r25, r24
    2c18:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2c1c:	69 83       	std	Y+1, r22	; 0x01
    2c1e:	7a 83       	std	Y+2, r23	; 0x02
    2c20:	8b 83       	std	Y+3, r24	; 0x03
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c26:	be 85       	ldd	r27, Y+14	; 0x0e
    2c28:	cd 90       	ld	r12, X+
    2c2a:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
    2c2c:	ef 85       	ldd	r30, Y+15	; 0x0f
    2c2e:	f8 89       	ldd	r31, Y+16	; 0x10
    2c30:	bf 01       	movw	r22, r30
    2c32:	88 27       	eor	r24, r24
    2c34:	77 fd       	sbrc	r23, 7
    2c36:	80 95       	com	r24
    2c38:	98 2f       	mov	r25, r24
    2c3a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2c3e:	7b 01       	movw	r14, r22
    2c40:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
    2c42:	b6 01       	movw	r22, r12
    2c44:	88 27       	eor	r24, r24
    2c46:	77 fd       	sbrc	r23, 7
    2c48:	80 95       	com	r24
    2c4a:	98 2f       	mov	r25, r24
    2c4c:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2c50:	5b 01       	movw	r10, r22
    2c52:	6c 01       	movw	r12, r24
    2c54:	2d 89       	ldd	r18, Y+21	; 0x15
    2c56:	3e 89       	ldd	r19, Y+22	; 0x16
    2c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c5c:	28 1b       	sub	r18, r24
    2c5e:	39 0b       	sbc	r19, r25
    2c60:	b9 01       	movw	r22, r18
    2c62:	88 27       	eor	r24, r24
    2c64:	77 fd       	sbrc	r23, 7
    2c66:	80 95       	com	r24
    2c68:	98 2f       	mov	r25, r24
    2c6a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2c6e:	a8 01       	movw	r20, r16
    2c70:	97 01       	movw	r18, r14
    2c72:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__divsf3>
    2c76:	9b 01       	movw	r18, r22
    2c78:	ac 01       	movw	r20, r24
    2c7a:	c6 01       	movw	r24, r12
    2c7c:	b5 01       	movw	r22, r10
    2c7e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__mulsf3>
    2c82:	a4 01       	movw	r20, r8
    2c84:	93 01       	movw	r18, r6
    2c86:	0e 94 a9 23 	call	0x4752	; 0x4752 <__addsf3>
    2c8a:	a9 85       	ldd	r26, Y+9	; 0x09
    2c8c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c8e:	6d 93       	st	X+, r22
    2c90:	7d 93       	st	X+, r23
    2c92:	8d 93       	st	X+, r24
    2c94:	9c 93       	st	X, r25
    2c96:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
    2c98:	eb 89       	ldd	r30, Y+19	; 0x13
    2c9a:	fc 89       	ldd	r31, Y+20	; 0x14
    2c9c:	29 8d       	ldd	r18, Y+25	; 0x19
    2c9e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2ca0:	e2 1b       	sub	r30, r18
    2ca2:	f3 0b       	sbc	r31, r19
    2ca4:	bf 01       	movw	r22, r30
    2ca6:	88 27       	eor	r24, r24
    2ca8:	77 fd       	sbrc	r23, 7
    2caa:	80 95       	com	r24
    2cac:	98 2f       	mov	r25, r24
    2cae:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2cb2:	a8 01       	movw	r20, r16
    2cb4:	97 01       	movw	r18, r14
    2cb6:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__divsf3>
    2cba:	a6 01       	movw	r20, r12
    2cbc:	95 01       	movw	r18, r10
    2cbe:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__mulsf3>
    2cc2:	a2 01       	movw	r20, r4
    2cc4:	91 01       	movw	r18, r2
    2cc6:	0e 94 a9 23 	call	0x4752	; 0x4752 <__addsf3>
    2cca:	af 81       	ldd	r26, Y+7	; 0x07
    2ccc:	b8 85       	ldd	r27, Y+8	; 0x08
    2cce:	6d 93       	st	X+, r22
    2cd0:	7d 93       	st	X+, r23
    2cd2:	8d 93       	st	X+, r24
    2cd4:	9c 93       	st	X, r25
    2cd6:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
    2cd8:	e9 89       	ldd	r30, Y+17	; 0x11
    2cda:	fa 89       	ldd	r31, Y+18	; 0x12
    2cdc:	2f 89       	ldd	r18, Y+23	; 0x17
    2cde:	38 8d       	ldd	r19, Y+24	; 0x18
    2ce0:	e2 1b       	sub	r30, r18
    2ce2:	f3 0b       	sbc	r31, r19
    2ce4:	bf 01       	movw	r22, r30
    2ce6:	88 27       	eor	r24, r24
    2ce8:	77 fd       	sbrc	r23, 7
    2cea:	80 95       	com	r24
    2cec:	98 2f       	mov	r25, r24
    2cee:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2cf2:	a8 01       	movw	r20, r16
    2cf4:	97 01       	movw	r18, r14
    2cf6:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__divsf3>
    2cfa:	a6 01       	movw	r20, r12
    2cfc:	95 01       	movw	r18, r10
    2cfe:	0e 94 d6 23 	call	0x47ac	; 0x47ac <__mulsf3>
    2d02:	29 81       	ldd	r18, Y+1	; 0x01
    2d04:	3a 81       	ldd	r19, Y+2	; 0x02
    2d06:	4b 81       	ldd	r20, Y+3	; 0x03
    2d08:	5c 81       	ldd	r21, Y+4	; 0x04
    2d0a:	0e 94 a9 23 	call	0x4752	; 0x4752 <__addsf3>
    2d0e:	7b 01       	movw	r14, r22
    2d10:	8c 01       	movw	r16, r24
    2d12:	ad 81       	ldd	r26, Y+5	; 0x05
    2d14:	be 81       	ldd	r27, Y+6	; 0x06
    2d16:	6d 93       	st	X+, r22
    2d18:	7d 93       	st	X+, r23
    2d1a:	8d 93       	st	X+, r24
    2d1c:	9c 93       	st	X, r25
    2d1e:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
    2d20:	e9 85       	ldd	r30, Y+9	; 0x09
    2d22:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <__fixsfsi>
    2d30:	3b 01       	movw	r6, r22
    2d32:	4c 01       	movw	r8, r24
    2d34:	af 81       	ldd	r26, Y+7	; 0x07
    2d36:	b8 85       	ldd	r27, Y+8	; 0x08
    2d38:	6d 91       	ld	r22, X+
    2d3a:	7d 91       	ld	r23, X+
    2d3c:	8d 91       	ld	r24, X+
    2d3e:	9c 91       	ld	r25, X
    2d40:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <__fixsfsi>
    2d44:	5b 01       	movw	r10, r22
    2d46:	6c 01       	movw	r12, r24
    2d48:	c8 01       	movw	r24, r16
    2d4a:	b7 01       	movw	r22, r14
    2d4c:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <__fixsfsi>
    2d50:	8b 01       	movw	r16, r22
    2d52:	9c 01       	movw	r18, r24
    2d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d58:	b3 01       	movw	r22, r6
    2d5a:	a5 01       	movw	r20, r10
    2d5c:	98 01       	movw	r18, r16
    2d5e:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
    2d62:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d64:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d66:	80 81       	ld	r24, Z
    2d68:	91 81       	ldd	r25, Z+1	; 0x01
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	59 f1       	breq	.+86     	; 0x2dc4 <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
    2d6e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d70:	fe 85       	ldd	r31, Y+14	; 0x0e
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
    2d7c:	97 fd       	sbrc	r25, 7
    2d7e:	19 c0       	rjmp	.+50     	; 0x2db2 <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
    2d80:	6e 96       	adiw	r28, 0x1e	; 30
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
    2da0:	9f 90       	pop	r9
    2da2:	8f 90       	pop	r8
    2da4:	7f 90       	pop	r7
    2da6:	6f 90       	pop	r6
    2da8:	5f 90       	pop	r5
    2daa:	4f 90       	pop	r4
    2dac:	3f 90       	pop	r3
    2dae:	2f 90       	pop	r2
    2db0:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
    2db2:	11 82       	std	Z+1, r1	; 0x01
    2db4:	10 82       	st	Z, r1
			*direction = 1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	ab 85       	ldd	r26, Y+11	; 0x0b
    2dbc:	bc 85       	ldd	r27, Y+12	; 0x0c
    2dbe:	8d 93       	st	X+, r24
    2dc0:	9c 93       	st	X, r25
    2dc2:	de cf       	rjmp	.-68     	; 0x2d80 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
    2dc4:	ad 85       	ldd	r26, Y+13	; 0x0d
    2dc6:	be 85       	ldd	r27, Y+14	; 0x0e
    2dc8:	8d 91       	ld	r24, X+
    2dca:	9c 91       	ld	r25, X
    2dcc:	11 97       	sbiw	r26, 0x01	; 1
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	8d 93       	st	X+, r24
    2dd2:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
    2dd4:	ef 85       	ldd	r30, Y+15	; 0x0f
    2dd6:	f8 89       	ldd	r31, Y+16	; 0x10
    2dd8:	e8 17       	cp	r30, r24
    2dda:	f9 07       	cpc	r31, r25
    2ddc:	8c f6       	brge	.-94     	; 0x2d80 <fadeBetweenColors+0x268>
			*direction = 0;
    2dde:	ab 85       	ldd	r26, Y+11	; 0x0b
    2de0:	bc 85       	ldd	r27, Y+12	; 0x0c
    2de2:	1d 92       	st	X+, r1
    2de4:	1c 92       	st	X, r1
			*currentStep = stepCount;
    2de6:	ad 85       	ldd	r26, Y+13	; 0x0d
    2de8:	be 85       	ldd	r27, Y+14	; 0x0e
    2dea:	ed 93       	st	X+, r30
    2dec:	fc 93       	st	X, r31
    2dee:	c8 cf       	rjmp	.-112    	; 0x2d80 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
    2df0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2df2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2df4:	bf 01       	movw	r22, r30
    2df6:	88 27       	eor	r24, r24
    2df8:	77 fd       	sbrc	r23, 7
    2dfa:	80 95       	com	r24
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2e02:	3b 01       	movw	r6, r22
    2e04:	4c 01       	movw	r8, r24
    2e06:	a9 85       	ldd	r26, Y+9	; 0x09
    2e08:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e0a:	6d 93       	st	X+, r22
    2e0c:	7d 93       	st	X+, r23
    2e0e:	8d 93       	st	X+, r24
    2e10:	9c 93       	st	X, r25
    2e12:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
    2e14:	e9 8d       	ldd	r30, Y+25	; 0x19
    2e16:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2e18:	bf 01       	movw	r22, r30
    2e1a:	88 27       	eor	r24, r24
    2e1c:	77 fd       	sbrc	r23, 7
    2e1e:	80 95       	com	r24
    2e20:	98 2f       	mov	r25, r24
    2e22:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2e26:	1b 01       	movw	r2, r22
    2e28:	2c 01       	movw	r4, r24
    2e2a:	af 81       	ldd	r26, Y+7	; 0x07
    2e2c:	b8 85       	ldd	r27, Y+8	; 0x08
    2e2e:	6d 93       	st	X+, r22
    2e30:	7d 93       	st	X+, r23
    2e32:	8d 93       	st	X+, r24
    2e34:	9c 93       	st	X, r25
    2e36:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
    2e38:	ef 89       	ldd	r30, Y+23	; 0x17
    2e3a:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e3c:	bf 01       	movw	r22, r30
    2e3e:	88 27       	eor	r24, r24
    2e40:	77 fd       	sbrc	r23, 7
    2e42:	80 95       	com	r24
    2e44:	98 2f       	mov	r25, r24
    2e46:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <__floatsisf>
    2e4a:	69 83       	std	Y+1, r22	; 0x01
    2e4c:	7a 83       	std	Y+2, r23	; 0x02
    2e4e:	8b 83       	std	Y+3, r24	; 0x03
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	ad 81       	ldd	r26, Y+5	; 0x05
    2e54:	be 81       	ldd	r27, Y+6	; 0x06
    2e56:	6d 93       	st	X+, r22
    2e58:	7d 93       	st	X+, r23
    2e5a:	8d 93       	st	X+, r24
    2e5c:	9c 93       	st	X, r25
    2e5e:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    2e60:	ed 85       	ldd	r30, Y+13	; 0x0d
    2e62:	fe 85       	ldd	r31, Y+14	; 0x0e
    2e64:	11 82       	std	Z+1, r1	; 0x01
    2e66:	10 82       	st	Z, r1
		*direction = 1;	
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	ab 85       	ldd	r26, Y+11	; 0x0b
    2e6e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2e70:	8d 93       	st	X+, r24
    2e72:	9c 93       	st	X, r25
    2e74:	cc 24       	eor	r12, r12
    2e76:	dd 24       	eor	r13, r13
    2e78:	d9 ce       	rjmp	.-590    	; 0x2c2c <fadeBetweenColors+0x114>

00002e7a <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    2e7a:	21 e0       	ldi	r18, 0x01	; 1
    2e7c:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    2e80:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <fadeBetweenColors>
	resetEffect = FALSE;
    2e84:	10 92 ea 02 	sts	0x02EA, r1
}
    2e88:	08 95       	ret

00002e8a <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	2e 97       	sbiw	r28, 0x0e	; 14
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	9c 01       	movw	r18, r24
    2ea4:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    2ea6:	8c 01       	movw	r16, r24
    2ea8:	00 0f       	add	r16, r16
    2eaa:	11 1f       	adc	r17, r17
    2eac:	0d 56       	subi	r16, 0x6D	; 109
    2eae:	1c 4f       	sbci	r17, 0xFC	; 252
    2eb0:	d8 01       	movw	r26, r16
    2eb2:	8d 91       	ld	r24, X+
    2eb4:	9c 91       	ld	r25, X
    2eb6:	42 97       	sbiw	r24, 0x12	; 18
    2eb8:	14 f5       	brge	.+68     	; 0x2efe <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	9c 83       	std	Y+4, r25	; 0x04
    2ec8:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    2eca:	84 81       	ldd	r24, Z+4	; 0x04
    2ecc:	95 81       	ldd	r25, Z+5	; 0x05
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    2ed2:	18 86       	std	Y+8, r1	; 0x08
    2ed4:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    2ed6:	1a 86       	std	Y+10, r1	; 0x0a
    2ed8:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    2eda:	1c 86       	std	Y+12, r1	; 0x0c
    2edc:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    2ede:	82 e1       	ldi	r24, 0x12	; 18
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	9e 87       	std	Y+14, r25	; 0x0e
    2ee4:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    2ee6:	c9 01       	movw	r24, r18
    2ee8:	be 01       	movw	r22, r28
    2eea:	6f 5f       	subi	r22, 0xFF	; 255
    2eec:	7f 4f       	sbci	r23, 0xFF	; 255
    2eee:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    2ef2:	f8 01       	movw	r30, r16
    2ef4:	80 81       	ld	r24, Z
    2ef6:	91 81       	ldd	r25, Z+1	; 0x01
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
	
}
    2efe:	2e 96       	adiw	r28, 0x0e	; 14
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	08 95       	ret

00002f14 <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    2f14:	df 93       	push	r29
    2f16:	cf 93       	push	r28
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	ee 0f       	add	r30, r30
    2f2e:	ff 1f       	adc	r31, r31
    2f30:	ed 56       	subi	r30, 0x6D	; 109
    2f32:	fc 4f       	sbci	r31, 0xFC	; 252
    2f34:	11 82       	std	Z+1, r1	; 0x01
    2f36:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    2f38:	2d 91       	ld	r18, X+
    2f3a:	3c 91       	ld	r19, X
    2f3c:	11 97       	sbiw	r26, 0x01	; 1
    2f3e:	3a 83       	std	Y+2, r19	; 0x02
    2f40:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    2f42:	12 96       	adiw	r26, 0x02	; 2
    2f44:	2d 91       	ld	r18, X+
    2f46:	3c 91       	ld	r19, X
    2f48:	13 97       	sbiw	r26, 0x03	; 3
    2f4a:	3c 83       	std	Y+4, r19	; 0x04
    2f4c:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    2f4e:	14 96       	adiw	r26, 0x04	; 4
    2f50:	2d 91       	ld	r18, X+
    2f52:	3c 91       	ld	r19, X
    2f54:	15 97       	sbiw	r26, 0x05	; 5
    2f56:	3e 83       	std	Y+6, r19	; 0x06
    2f58:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    2f5a:	18 86       	std	Y+8, r1	; 0x08
    2f5c:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    2f5e:	1a 86       	std	Y+10, r1	; 0x0a
    2f60:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    2f62:	1c 86       	std	Y+12, r1	; 0x0c
    2f64:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    2f66:	22 e1       	ldi	r18, 0x12	; 18
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	3e 87       	std	Y+14, r19	; 0x0e
    2f6c:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    2f6e:	21 e0       	ldi	r18, 0x01	; 1
    2f70:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    2f74:	be 01       	movw	r22, r28
    2f76:	6f 5f       	subi	r22, 0xFF	; 255
    2f78:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <fadeBetweenColors>
	resetEffect=FALSE;
    2f7e:	10 92 ea 02 	sts	0x02EA, r1
}
    2f82:	2e 96       	adiw	r28, 0x0e	; 14
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	7c 01       	movw	r14, r24
    2fa2:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    2fa4:	8c 01       	movw	r16, r24
    2fa6:	00 0f       	add	r16, r16
    2fa8:	11 1f       	adc	r17, r17
    2faa:	f8 01       	movw	r30, r16
    2fac:	e5 5b       	subi	r30, 0xB5	; 181
    2fae:	fc 4f       	sbci	r31, 0xFC	; 252
    2fb0:	11 82       	std	Z+1, r1	; 0x01
    2fb2:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	ed 59       	subi	r30, 0x9D	; 157
    2fb8:	fc 4f       	sbci	r31, 0xFC	; 252
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	e5 55       	subi	r30, 0x55	; 85
    2fc6:	fc 4f       	sbci	r31, 0xFC	; 252
    2fc8:	11 82       	std	Z+1, r1	; 0x01
    2fca:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    2fcc:	c7 01       	movw	r24, r14
    2fce:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    2fda:	0e 0d       	add	r16, r14
    2fdc:	1f 1d       	adc	r17, r15
    2fde:	00 0f       	add	r16, r16
    2fe0:	11 1f       	adc	r17, r17
    2fe2:	0e 55       	subi	r16, 0x5E	; 94
    2fe4:	1d 4f       	sbci	r17, 0xFD	; 253
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	b8 01       	movw	r22, r16
    2fea:	0e 94 22 21 	call	0x4244	; 0x4244 <getRGBColor>
}
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	cf 90       	pop	r12
    2ffa:	08 95       	ret

00002ffc <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    2ffc:	af 92       	push	r10
    2ffe:	bf 92       	push	r11
    3000:	cf 92       	push	r12
    3002:	df 92       	push	r13
    3004:	ef 92       	push	r14
    3006:	ff 92       	push	r15
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	2a 97       	sbiw	r28, 0x0a	; 10
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	6c 01       	movw	r12, r24
    3022:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	8c 01       	movw	r16, r24
    302a:	0c 0d       	add	r16, r12
    302c:	1d 1d       	adc	r17, r13
    302e:	00 0f       	add	r16, r16
    3030:	11 1f       	adc	r17, r17
    3032:	0e 55       	subi	r16, 0x5E	; 94
    3034:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    3036:	5b ea       	ldi	r21, 0xAB	; 171
    3038:	e5 2e       	mov	r14, r21
    303a:	53 e0       	ldi	r21, 0x03	; 3
    303c:	f5 2e       	mov	r15, r21
    303e:	e8 0e       	add	r14, r24
    3040:	f9 1e       	adc	r15, r25
    3042:	d7 01       	movw	r26, r14
    3044:	8d 91       	ld	r24, X+
    3046:	9c 91       	ld	r25, X
    3048:	8a 30       	cpi	r24, 0x0A	; 10
    304a:	91 05       	cpc	r25, r1
    304c:	b4 f5       	brge	.+108    	; 0x30ba <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	d7 01       	movw	r26, r14
    3052:	8d 93       	st	X+, r24
    3054:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    3056:	f8 01       	movw	r30, r16
    3058:	22 81       	ldd	r18, Z+2	; 0x02
    305a:	33 81       	ldd	r19, Z+3	; 0x03
    305c:	44 81       	ldd	r20, Z+4	; 0x04
    305e:	55 81       	ldd	r21, Z+5	; 0x05
    3060:	d5 01       	movw	r26, r10
    3062:	1e 96       	adiw	r26, 0x0e	; 14
    3064:	6d 91       	ld	r22, X+
    3066:	7c 91       	ld	r23, X
    3068:	1f 97       	sbiw	r26, 0x0f	; 15
    306a:	50 96       	adiw	r26, 0x10	; 16
    306c:	ed 91       	ld	r30, X+
    306e:	fc 91       	ld	r31, X
    3070:	51 97       	sbiw	r26, 0x11	; 17
    3072:	d8 01       	movw	r26, r16
    3074:	8d 91       	ld	r24, X+
    3076:	9c 91       	ld	r25, X
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	3c 83       	std	Y+4, r19	; 0x04
    307e:	2b 83       	std	Y+3, r18	; 0x03
    3080:	5e 83       	std	Y+6, r21	; 0x06
    3082:	4d 83       	std	Y+5, r20	; 0x05
    3084:	78 87       	std	Y+8, r23	; 0x08
    3086:	6f 83       	std	Y+7, r22	; 0x07
    3088:	fa 87       	std	Y+10, r31	; 0x0a
    308a:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    308c:	c6 01       	movw	r24, r12
    308e:	be 01       	movw	r22, r28
    3090:	6f 5f       	subi	r22, 0xFF	; 255
    3092:	7f 4f       	sbci	r23, 0xFF	; 255
    3094:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <pwmEffect>

	
	
}
    3098:	2a 96       	adiw	r28, 0x0a	; 10
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	1f 91       	pop	r17
    30aa:	0f 91       	pop	r16
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	df 90       	pop	r13
    30b2:	cf 90       	pop	r12
    30b4:	bf 90       	pop	r11
    30b6:	af 90       	pop	r10
    30b8:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    30ba:	c6 01       	movw	r24, r12
    30bc:	b5 01       	movw	r22, r10
    30be:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    30c2:	c6 01       	movw	r24, r12
    30c4:	b8 01       	movw	r22, r16
    30c6:	0e 94 22 21 	call	0x4244	; 0x4244 <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    30ca:	f7 01       	movw	r30, r14
    30cc:	11 82       	std	Z+1, r1	; 0x01
    30ce:	10 82       	st	Z, r1
    30d0:	c2 cf       	rjmp	.-124    	; 0x3056 <fadeBetweenColorsWithPwm+0x5a>

000030d2 <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    30d2:	ef 92       	push	r14
    30d4:	ff 92       	push	r15
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	62 97       	sbiw	r28, 0x12	; 18
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	f8 2e       	mov	r15, r24
    30f0:	e9 2e       	mov	r14, r25
    30f2:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    30f4:	1e 96       	adiw	r26, 0x0e	; 14
    30f6:	8d 91       	ld	r24, X+
    30f8:	9c 91       	ld	r25, X
    30fa:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    30fc:	81 30       	cpi	r24, 0x01	; 1
    30fe:	91 05       	cpc	r25, r1
    3100:	09 f4       	brne	.+2      	; 0x3104 <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    3102:	a6 c0       	rjmp	.+332    	; 0x3250 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    3104:	89 2b       	or	r24, r25
    3106:	31 f5       	brne	.+76     	; 0x3154 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    3108:	8f 2d       	mov	r24, r15
    310a:	9e 2d       	mov	r25, r14
    310c:	fc 01       	movw	r30, r24
    310e:	ee 0f       	add	r30, r30
    3110:	ff 1f       	adc	r31, r31
    3112:	ee 0f       	add	r30, r30
    3114:	ff 1f       	adc	r31, r31
    3116:	ee 0f       	add	r30, r30
    3118:	ff 1f       	adc	r31, r31
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	e8 0f       	add	r30, r24
    3120:	f9 1f       	adc	r31, r25
    3122:	e5 59       	subi	r30, 0x95	; 149
    3124:	fb 4f       	sbci	r31, 0xFB	; 251
    3126:	80 e2       	ldi	r24, 0x20	; 32
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	91 83       	std	Z+1, r25	; 0x01
    312c:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    312e:	8f 2d       	mov	r24, r15
    3130:	9e 2d       	mov	r25, r14
    3132:	fc 01       	movw	r30, r24
    3134:	ee 0f       	add	r30, r30
    3136:	ff 1f       	adc	r31, r31
    3138:	ee 0f       	add	r30, r30
    313a:	ff 1f       	adc	r31, r31
    313c:	ee 0f       	add	r30, r30
    313e:	ff 1f       	adc	r31, r31
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	e8 0f       	add	r30, r24
    3146:	f9 1f       	adc	r31, r25
    3148:	e5 59       	subi	r30, 0x95	; 149
    314a:	fb 4f       	sbci	r31, 0xFB	; 251
    314c:	82 e0       	ldi	r24, 0x02	; 2
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	93 83       	std	Z+3, r25	; 0x03
    3152:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    3154:	8f 2d       	mov	r24, r15
    3156:	9e 2d       	mov	r25, r14
    3158:	fc 01       	movw	r30, r24
    315a:	ee 0f       	add	r30, r30
    315c:	ff 1f       	adc	r31, r31
    315e:	ee 0f       	add	r30, r30
    3160:	ff 1f       	adc	r31, r31
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	e8 0f       	add	r30, r24
    316c:	f9 1f       	adc	r31, r25
    316e:	e5 59       	subi	r30, 0x95	; 149
    3170:	fb 4f       	sbci	r31, 0xFB	; 251
    3172:	15 82       	std	Z+5, r1	; 0x05
    3174:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    3176:	8f 2d       	mov	r24, r15
    3178:	9e 2d       	mov	r25, r14
    317a:	fc 01       	movw	r30, r24
    317c:	ee 0f       	add	r30, r30
    317e:	ff 1f       	adc	r31, r31
    3180:	ee 0f       	add	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	ee 0f       	add	r30, r30
    3186:	ff 1f       	adc	r31, r31
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	e8 0f       	add	r30, r24
    318e:	f9 1f       	adc	r31, r25
    3190:	e5 59       	subi	r30, 0x95	; 149
    3192:	fb 4f       	sbci	r31, 0xFB	; 251
    3194:	50 96       	adiw	r26, 0x10	; 16
    3196:	8c 91       	ld	r24, X
    3198:	50 97       	sbiw	r26, 0x10	; 16
    319a:	51 96       	adiw	r26, 0x11	; 17
    319c:	9c 91       	ld	r25, X
    319e:	51 97       	sbiw	r26, 0x11	; 17
    31a0:	9c 01       	movw	r18, r24
    31a2:	22 0f       	add	r18, r18
    31a4:	33 1f       	adc	r19, r19
    31a6:	22 0f       	add	r18, r18
    31a8:	33 1f       	adc	r19, r19
    31aa:	22 0f       	add	r18, r18
    31ac:	33 1f       	adc	r19, r19
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	28 0f       	add	r18, r24
    31b4:	39 1f       	adc	r19, r25
    31b6:	31 87       	std	Z+9, r19	; 0x09
    31b8:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    31ba:	8e 01       	movw	r16, r28
    31bc:	0f 5f       	subi	r16, 0xFF	; 255
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	c8 01       	movw	r24, r16
    31c2:	bd 01       	movw	r22, r26
    31c4:	47 e0       	ldi	r20, 0x07	; 7
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	0e 94 1b 22 	call	0x4436	; 0x4436 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    31cc:	8f 2d       	mov	r24, r15
    31ce:	9e 2d       	mov	r25, r14
    31d0:	fc 01       	movw	r30, r24
    31d2:	ee 0f       	add	r30, r30
    31d4:	ff 1f       	adc	r31, r31
    31d6:	ee 0f       	add	r30, r30
    31d8:	ff 1f       	adc	r31, r31
    31da:	ee 0f       	add	r30, r30
    31dc:	ff 1f       	adc	r31, r31
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	e8 0f       	add	r30, r24
    31e4:	f9 1f       	adc	r31, r25
    31e6:	e5 59       	subi	r30, 0x95	; 149
    31e8:	fb 4f       	sbci	r31, 0xFB	; 251
    31ea:	80 81       	ld	r24, Z
    31ec:	91 81       	ldd	r25, Z+1	; 0x01
    31ee:	98 8b       	std	Y+16, r25	; 0x10
    31f0:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    31f2:	8f 2d       	mov	r24, r15
    31f4:	9e 2d       	mov	r25, r14
    31f6:	fc 01       	movw	r30, r24
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	ee 0f       	add	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	ee 0f       	add	r30, r30
    3202:	ff 1f       	adc	r31, r31
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	e8 0f       	add	r30, r24
    320a:	f9 1f       	adc	r31, r25
    320c:	e5 59       	subi	r30, 0x95	; 149
    320e:	fb 4f       	sbci	r31, 0xFB	; 251
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	9a 8b       	std	Y+18, r25	; 0x12
    3216:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    3218:	8f 2d       	mov	r24, r15
    321a:	9e 2d       	mov	r25, r14
    321c:	b8 01       	movw	r22, r16
    321e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    3222:	8f 2d       	mov	r24, r15
    3224:	9e 2d       	mov	r25, r14
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>

}
    3236:	62 96       	adiw	r28, 0x12	; 18
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	ff 90       	pop	r15
    324c:	ef 90       	pop	r14
    324e:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    3250:	8f 2d       	mov	r24, r15
    3252:	9e 2d       	mov	r25, r14
    3254:	fc 01       	movw	r30, r24
    3256:	ee 0f       	add	r30, r30
    3258:	ff 1f       	adc	r31, r31
    325a:	ee 0f       	add	r30, r30
    325c:	ff 1f       	adc	r31, r31
    325e:	ee 0f       	add	r30, r30
    3260:	ff 1f       	adc	r31, r31
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	e8 0f       	add	r30, r24
    3268:	f9 1f       	adc	r31, r25
    326a:	e5 59       	subi	r30, 0x95	; 149
    326c:	fb 4f       	sbci	r31, 0xFB	; 251
    326e:	11 82       	std	Z+1, r1	; 0x01
    3270:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    3272:	8f 2d       	mov	r24, r15
    3274:	9e 2d       	mov	r25, r14
    3276:	fc 01       	movw	r30, r24
    3278:	ee 0f       	add	r30, r30
    327a:	ff 1f       	adc	r31, r31
    327c:	ee 0f       	add	r30, r30
    327e:	ff 1f       	adc	r31, r31
    3280:	ee 0f       	add	r30, r30
    3282:	ff 1f       	adc	r31, r31
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	e8 0f       	add	r30, r24
    328a:	f9 1f       	adc	r31, r25
    328c:	e5 59       	subi	r30, 0x95	; 149
    328e:	fb 4f       	sbci	r31, 0xFB	; 251
    3290:	80 e2       	ldi	r24, 0x20	; 32
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	93 83       	std	Z+3, r25	; 0x03
    3296:	82 83       	std	Z+2, r24	; 0x02
    3298:	5d cf       	rjmp	.-326    	; 0x3154 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

0000329a <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    329a:	ef 92       	push	r14
    329c:	ff 92       	push	r15
    329e:	0f 93       	push	r16
    32a0:	1f 93       	push	r17
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	62 97       	sbiw	r28, 0x12	; 18
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	f8 2e       	mov	r15, r24
    32b8:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    32ba:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    32bc:	fb 01       	movw	r30, r22
    32be:	80 81       	ld	r24, Z
    32c0:	91 81       	ldd	r25, Z+1	; 0x01
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    32c6:	82 81       	ldd	r24, Z+2	; 0x02
    32c8:	93 81       	ldd	r25, Z+3	; 0x03
    32ca:	9c 83       	std	Y+4, r25	; 0x04
    32cc:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    32ce:	84 81       	ldd	r24, Z+4	; 0x04
    32d0:	95 81       	ldd	r25, Z+5	; 0x05
    32d2:	9e 83       	std	Y+6, r25	; 0x06
    32d4:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    32d6:	86 81       	ldd	r24, Z+6	; 0x06
    32d8:	97 81       	ldd	r25, Z+7	; 0x07
    32da:	98 87       	std	Y+8, r25	; 0x08
    32dc:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    32de:	80 85       	ldd	r24, Z+8	; 0x08
    32e0:	91 85       	ldd	r25, Z+9	; 0x09
    32e2:	9a 87       	std	Y+10, r25	; 0x0a
    32e4:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    32e6:	82 85       	ldd	r24, Z+10	; 0x0a
    32e8:	93 85       	ldd	r25, Z+11	; 0x0b
    32ea:	9c 87       	std	Y+12, r25	; 0x0c
    32ec:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    32ee:	82 89       	ldd	r24, Z+18	; 0x12
    32f0:	93 89       	ldd	r25, Z+19	; 0x13
    32f2:	9e 87       	std	Y+14, r25	; 0x0e
    32f4:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    32f6:	84 89       	ldd	r24, Z+20	; 0x14
    32f8:	95 89       	ldd	r25, Z+21	; 0x15
    32fa:	98 8b       	std	Y+16, r25	; 0x10
    32fc:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    32fe:	86 89       	ldd	r24, Z+22	; 0x16
    3300:	97 89       	ldd	r25, Z+23	; 0x17
    3302:	9a 8b       	std	Y+18, r25	; 0x12
    3304:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    3306:	8f 2d       	mov	r24, r15
    3308:	9e 2d       	mov	r25, r14
    330a:	be 01       	movw	r22, r28
    330c:	6f 5f       	subi	r22, 0xFF	; 255
    330e:	7f 4f       	sbci	r23, 0xFF	; 255
    3310:	0e 94 69 18 	call	0x30d2	; 0x30d2 <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    3314:	a3 ec       	ldi	r26, 0xC3	; 195
    3316:	b3 e0       	ldi	r27, 0x03	; 3
    3318:	8f 2d       	mov	r24, r15
    331a:	9e 2d       	mov	r25, r14
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	fc 01       	movw	r30, r24
    3322:	ee 0f       	add	r30, r30
    3324:	ff 1f       	adc	r31, r31
    3326:	ee 0f       	add	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	ee 0f       	add	r30, r30
    332c:	ff 1f       	adc	r31, r31
    332e:	e8 1b       	sub	r30, r24
    3330:	f9 0b       	sbc	r31, r25
    3332:	ea 0f       	add	r30, r26
    3334:	fb 1f       	adc	r31, r27
    3336:	11 82       	std	Z+1, r1	; 0x01
    3338:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    333a:	8f 2d       	mov	r24, r15
    333c:	9e 2d       	mov	r25, r14
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	fc 01       	movw	r30, r24
    3344:	ee 0f       	add	r30, r30
    3346:	ff 1f       	adc	r31, r31
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	ee 0f       	add	r30, r30
    334e:	ff 1f       	adc	r31, r31
    3350:	e8 1b       	sub	r30, r24
    3352:	f9 0b       	sbc	r31, r25
    3354:	ea 0f       	add	r30, r26
    3356:	fb 1f       	adc	r31, r27
    3358:	8d 85       	ldd	r24, Y+13	; 0x0d
    335a:	9e 85       	ldd	r25, Y+14	; 0x0e
    335c:	95 83       	std	Z+5, r25	; 0x05
    335e:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    3360:	8f 2d       	mov	r24, r15
    3362:	9e 2d       	mov	r25, r14
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	fc 01       	movw	r30, r24
    336a:	ee 0f       	add	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	ee 0f       	add	r30, r30
    3370:	ff 1f       	adc	r31, r31
    3372:	ee 0f       	add	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	e8 1b       	sub	r30, r24
    3378:	f9 0b       	sbc	r31, r25
    337a:	ea 0f       	add	r30, r26
    337c:	fb 1f       	adc	r31, r27
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	93 83       	std	Z+3, r25	; 0x03
    3384:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    3386:	8f 2d       	mov	r24, r15
    3388:	9e 2d       	mov	r25, r14
    338a:	88 0f       	add	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	fc 01       	movw	r30, r24
    3390:	ee 0f       	add	r30, r30
    3392:	ff 1f       	adc	r31, r31
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	ee 0f       	add	r30, r30
    339a:	ff 1f       	adc	r31, r31
    339c:	e8 1b       	sub	r30, r24
    339e:	f9 0b       	sbc	r31, r25
    33a0:	ea 0f       	add	r30, r26
    33a2:	fb 1f       	adc	r31, r27
    33a4:	17 82       	std	Z+7, r1	; 0x07
    33a6:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    33a8:	8f 2d       	mov	r24, r15
    33aa:	9e 2d       	mov	r25, r14
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	fc 01       	movw	r30, r24
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	ee 0f       	add	r30, r30
    33b8:	ff 1f       	adc	r31, r31
    33ba:	ee 0f       	add	r30, r30
    33bc:	ff 1f       	adc	r31, r31
    33be:	e8 1b       	sub	r30, r24
    33c0:	f9 0b       	sbc	r31, r25
    33c2:	ea 0f       	add	r30, r26
    33c4:	fb 1f       	adc	r31, r27
    33c6:	13 87       	std	Z+11, r17	; 0x0b
    33c8:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    33ca:	8f 2d       	mov	r24, r15
    33cc:	9e 2d       	mov	r25, r14
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	9c 01       	movw	r18, r24
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	22 0f       	add	r18, r18
    33da:	33 1f       	adc	r19, r19
    33dc:	22 0f       	add	r18, r18
    33de:	33 1f       	adc	r19, r19
    33e0:	28 1b       	sub	r18, r24
    33e2:	39 0b       	sbc	r19, r25
    33e4:	a2 0f       	add	r26, r18
    33e6:	b3 1f       	adc	r27, r19
    33e8:	0a 5f       	subi	r16, 0xFA	; 250
    33ea:	1f 4f       	sbci	r17, 0xFF	; 255
    33ec:	1d 96       	adiw	r26, 0x0d	; 13
    33ee:	1c 93       	st	X, r17
    33f0:	0e 93       	st	-X, r16
    33f2:	1c 97       	sbiw	r26, 0x0c	; 12


}
    33f4:	62 96       	adiw	r28, 0x12	; 18
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	ff 90       	pop	r15
    340a:	ef 90       	pop	r14
    340c:	08 95       	ret

0000340e <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    340e:	ef 92       	push	r14
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	62 97       	sbiw	r28, 0x12	; 18
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	f8 2e       	mov	r15, r24
    342c:	e9 2e       	mov	r14, r25
    342e:	db 01       	movw	r26, r22
	short direction = data[7];
    3430:	1e 96       	adiw	r26, 0x0e	; 14
    3432:	6d 91       	ld	r22, X+
    3434:	7c 91       	ld	r23, X
    3436:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    3438:	fc 01       	movw	r30, r24
    343a:	ee 0f       	add	r30, r30
    343c:	ff 1f       	adc	r31, r31
    343e:	ee 0f       	add	r30, r30
    3440:	ff 1f       	adc	r31, r31
    3442:	ee 0f       	add	r30, r30
    3444:	ff 1f       	adc	r31, r31
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	e8 0f       	add	r30, r24
    344c:	f9 1f       	adc	r31, r25
    344e:	e5 59       	subi	r30, 0x95	; 149
    3450:	fb 4f       	sbci	r31, 0xFB	; 251
    3452:	40 85       	ldd	r20, Z+8	; 0x08
    3454:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    3456:	8f 2d       	mov	r24, r15
    3458:	9e 2d       	mov	r25, r14
    345a:	fc 01       	movw	r30, r24
    345c:	ee 0f       	add	r30, r30
    345e:	ff 1f       	adc	r31, r31
    3460:	ee 0f       	add	r30, r30
    3462:	ff 1f       	adc	r31, r31
    3464:	ee 0f       	add	r30, r30
    3466:	ff 1f       	adc	r31, r31
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	e8 0f       	add	r30, r24
    346e:	f9 1f       	adc	r31, r25
    3470:	e5 59       	subi	r30, 0x95	; 149
    3472:	fb 4f       	sbci	r31, 0xFB	; 251
    3474:	86 81       	ldd	r24, Z+6	; 0x06
    3476:	97 81       	ldd	r25, Z+7	; 0x07
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	09 f4       	brne	.+2      	; 0x347e <fadeBetweenColorsWithScalingPwmEffect+0x70>
    347c:	aa c0       	rjmp	.+340    	; 0x35d2 <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    347e:	8f 2d       	mov	r24, r15
    3480:	9e 2d       	mov	r25, r14
    3482:	fc 01       	movw	r30, r24
    3484:	ee 0f       	add	r30, r30
    3486:	ff 1f       	adc	r31, r31
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	ee 0f       	add	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	e8 0f       	add	r30, r24
    3496:	f9 1f       	adc	r31, r25
    3498:	e5 59       	subi	r30, 0x95	; 149
    349a:	fb 4f       	sbci	r31, 0xFB	; 251
    349c:	24 81       	ldd	r18, Z+4	; 0x04
    349e:	35 81       	ldd	r19, Z+5	; 0x05
    34a0:	24 17       	cp	r18, r20
    34a2:	35 07       	cpc	r19, r21
    34a4:	0c f0       	brlt	.+2      	; 0x34a8 <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    34a6:	54 c0       	rjmp	.+168    	; 0x3550 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    34a8:	8f 2d       	mov	r24, r15
    34aa:	9e 2d       	mov	r25, r14
    34ac:	fc 01       	movw	r30, r24
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	e8 0f       	add	r30, r24
    34c0:	f9 1f       	adc	r31, r25
    34c2:	e5 59       	subi	r30, 0x95	; 149
    34c4:	fb 4f       	sbci	r31, 0xFB	; 251
    34c6:	2f 5f       	subi	r18, 0xFF	; 255
    34c8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ca:	35 83       	std	Z+5, r19	; 0x05
    34cc:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    34ce:	8e 01       	movw	r16, r28
    34d0:	0f 5f       	subi	r16, 0xFF	; 255
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	c8 01       	movw	r24, r16
    34d6:	bd 01       	movw	r22, r26
    34d8:	47 e0       	ldi	r20, 0x07	; 7
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	0e 94 1b 22 	call	0x4436	; 0x4436 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    34e0:	8f 2d       	mov	r24, r15
    34e2:	9e 2d       	mov	r25, r14
    34e4:	fc 01       	movw	r30, r24
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	ee 0f       	add	r30, r30
    34ec:	ff 1f       	adc	r31, r31
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	88 0f       	add	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	e8 0f       	add	r30, r24
    34f8:	f9 1f       	adc	r31, r25
    34fa:	e5 59       	subi	r30, 0x95	; 149
    34fc:	fb 4f       	sbci	r31, 0xFB	; 251
    34fe:	80 81       	ld	r24, Z
    3500:	91 81       	ldd	r25, Z+1	; 0x01
    3502:	98 8b       	std	Y+16, r25	; 0x10
    3504:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    3506:	8f 2d       	mov	r24, r15
    3508:	9e 2d       	mov	r25, r14
    350a:	fc 01       	movw	r30, r24
    350c:	ee 0f       	add	r30, r30
    350e:	ff 1f       	adc	r31, r31
    3510:	ee 0f       	add	r30, r30
    3512:	ff 1f       	adc	r31, r31
    3514:	ee 0f       	add	r30, r30
    3516:	ff 1f       	adc	r31, r31
    3518:	88 0f       	add	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	e8 0f       	add	r30, r24
    351e:	f9 1f       	adc	r31, r25
    3520:	e5 59       	subi	r30, 0x95	; 149
    3522:	fb 4f       	sbci	r31, 0xFB	; 251
    3524:	82 81       	ldd	r24, Z+2	; 0x02
    3526:	93 81       	ldd	r25, Z+3	; 0x03
    3528:	9a 8b       	std	Y+18, r25	; 0x12
    352a:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    352c:	8f 2d       	mov	r24, r15
    352e:	9e 2d       	mov	r25, r14
    3530:	b8 01       	movw	r22, r16
    3532:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <fadeBetweenColorsWithPwm>
	

}
    3536:	62 96       	adiw	r28, 0x12	; 18
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	de bf       	out	0x3e, r29	; 62
    353e:	0f be       	out	0x3f, r0	; 63
    3540:	cd bf       	out	0x3d, r28	; 61
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	1f 91       	pop	r17
    3548:	0f 91       	pop	r16
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    3550:	8f 2d       	mov	r24, r15
    3552:	9e 2d       	mov	r25, r14
    3554:	fc 01       	movw	r30, r24
    3556:	ee 0f       	add	r30, r30
    3558:	ff 1f       	adc	r31, r31
    355a:	ee 0f       	add	r30, r30
    355c:	ff 1f       	adc	r31, r31
    355e:	ee 0f       	add	r30, r30
    3560:	ff 1f       	adc	r31, r31
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	e8 0f       	add	r30, r24
    3568:	f9 1f       	adc	r31, r25
    356a:	e5 59       	subi	r30, 0x95	; 149
    356c:	fb 4f       	sbci	r31, 0xFB	; 251
    356e:	15 82       	std	Z+5, r1	; 0x05
    3570:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    3572:	61 30       	cpi	r22, 0x01	; 1
    3574:	71 05       	cpc	r23, r1
    3576:	09 f4       	brne	.+2      	; 0x357a <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    3578:	86 c0       	rjmp	.+268    	; 0x3686 <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    357a:	67 2b       	or	r22, r23
    357c:	09 f0       	breq	.+2      	; 0x3580 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    357e:	a7 cf       	rjmp	.-178    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    3580:	8f 2d       	mov	r24, r15
    3582:	9e 2d       	mov	r25, r14
    3584:	fc 01       	movw	r30, r24
    3586:	ee 0f       	add	r30, r30
    3588:	ff 1f       	adc	r31, r31
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	ee 0f       	add	r30, r30
    3590:	ff 1f       	adc	r31, r31
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	e8 0f       	add	r30, r24
    3598:	f9 1f       	adc	r31, r25
    359a:	e5 59       	subi	r30, 0x95	; 149
    359c:	fb 4f       	sbci	r31, 0xFB	; 251
    359e:	20 81       	ld	r18, Z
    35a0:	31 81       	ldd	r19, Z+1	; 0x01
    35a2:	23 30       	cpi	r18, 0x03	; 3
    35a4:	31 05       	cpc	r19, r1
    35a6:	0c f4       	brge	.+2      	; 0x35aa <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    35a8:	97 c0       	rjmp	.+302    	; 0x36d8 <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    35aa:	8f 2d       	mov	r24, r15
    35ac:	9e 2d       	mov	r25, r14
    35ae:	fc 01       	movw	r30, r24
    35b0:	ee 0f       	add	r30, r30
    35b2:	ff 1f       	adc	r31, r31
    35b4:	ee 0f       	add	r30, r30
    35b6:	ff 1f       	adc	r31, r31
    35b8:	ee 0f       	add	r30, r30
    35ba:	ff 1f       	adc	r31, r31
    35bc:	88 0f       	add	r24, r24
    35be:	99 1f       	adc	r25, r25
    35c0:	e8 0f       	add	r30, r24
    35c2:	f9 1f       	adc	r31, r25
    35c4:	e5 59       	subi	r30, 0x95	; 149
    35c6:	fb 4f       	sbci	r31, 0xFB	; 251
    35c8:	22 50       	subi	r18, 0x02	; 2
    35ca:	30 40       	sbci	r19, 0x00	; 0
    35cc:	31 83       	std	Z+1, r19	; 0x01
    35ce:	20 83       	st	Z, r18
    35d0:	7e cf       	rjmp	.-260    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    35d2:	8f 2d       	mov	r24, r15
    35d4:	9e 2d       	mov	r25, r14
    35d6:	fc 01       	movw	r30, r24
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	ee 0f       	add	r30, r30
    35de:	ff 1f       	adc	r31, r31
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	88 0f       	add	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	e8 0f       	add	r30, r24
    35ea:	f9 1f       	adc	r31, r25
    35ec:	e5 59       	subi	r30, 0x95	; 149
    35ee:	fb 4f       	sbci	r31, 0xFB	; 251
    35f0:	84 81       	ldd	r24, Z+4	; 0x04
    35f2:	95 81       	ldd	r25, Z+5	; 0x05
    35f4:	0a 97       	sbiw	r24, 0x0a	; 10
    35f6:	0c f1       	brlt	.+66     	; 0x363a <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    35f8:	61 30       	cpi	r22, 0x01	; 1
    35fa:	71 05       	cpc	r23, r1
    35fc:	09 f4       	brne	.+2      	; 0x3600 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    35fe:	e6 c0       	rjmp	.+460    	; 0x37cc <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    3600:	67 2b       	or	r22, r23
    3602:	51 f4       	brne	.+20     	; 0x3618 <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    3604:	8f 2d       	mov	r24, r15
    3606:	9e 2d       	mov	r25, r14
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	0e 94 08 21 	call	0x4210	; 0x4210 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    3618:	8f 2d       	mov	r24, r15
    361a:	9e 2d       	mov	r25, r14
    361c:	fc 01       	movw	r30, r24
    361e:	ee 0f       	add	r30, r30
    3620:	ff 1f       	adc	r31, r31
    3622:	ee 0f       	add	r30, r30
    3624:	ff 1f       	adc	r31, r31
    3626:	ee 0f       	add	r30, r30
    3628:	ff 1f       	adc	r31, r31
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	e8 0f       	add	r30, r24
    3630:	f9 1f       	adc	r31, r25
    3632:	e5 59       	subi	r30, 0x95	; 149
    3634:	fb 4f       	sbci	r31, 0xFB	; 251
    3636:	15 82       	std	Z+5, r1	; 0x05
    3638:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    363a:	8f 2d       	mov	r24, r15
    363c:	9e 2d       	mov	r25, r14
    363e:	dc 01       	movw	r26, r24
    3640:	aa 0f       	add	r26, r26
    3642:	bb 1f       	adc	r27, r27
    3644:	aa 0f       	add	r26, r26
    3646:	bb 1f       	adc	r27, r27
    3648:	aa 0f       	add	r26, r26
    364a:	bb 1f       	adc	r27, r27
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	a8 0f       	add	r26, r24
    3652:	b9 1f       	adc	r27, r25
    3654:	a5 59       	subi	r26, 0x95	; 149
    3656:	bb 4f       	sbci	r27, 0xFB	; 251
    3658:	8f 2d       	mov	r24, r15
    365a:	9e 2d       	mov	r25, r14
    365c:	fc 01       	movw	r30, r24
    365e:	ee 0f       	add	r30, r30
    3660:	ff 1f       	adc	r31, r31
    3662:	ee 0f       	add	r30, r30
    3664:	ff 1f       	adc	r31, r31
    3666:	ee 0f       	add	r30, r30
    3668:	ff 1f       	adc	r31, r31
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	e8 0f       	add	r30, r24
    3670:	f9 1f       	adc	r31, r25
    3672:	e5 59       	subi	r30, 0x95	; 149
    3674:	fb 4f       	sbci	r31, 0xFB	; 251
    3676:	84 81       	ldd	r24, Z+4	; 0x04
    3678:	95 81       	ldd	r25, Z+5	; 0x05
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	15 96       	adiw	r26, 0x05	; 5
    367e:	9c 93       	st	X, r25
    3680:	8e 93       	st	-X, r24
    3682:	14 97       	sbiw	r26, 0x04	; 4
    3684:	58 cf       	rjmp	.-336    	; 0x3536 <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    3686:	8f 2d       	mov	r24, r15
    3688:	9e 2d       	mov	r25, r14
    368a:	fc 01       	movw	r30, r24
    368c:	ee 0f       	add	r30, r30
    368e:	ff 1f       	adc	r31, r31
    3690:	ee 0f       	add	r30, r30
    3692:	ff 1f       	adc	r31, r31
    3694:	ee 0f       	add	r30, r30
    3696:	ff 1f       	adc	r31, r31
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	e8 0f       	add	r30, r24
    369e:	f9 1f       	adc	r31, r25
    36a0:	e5 59       	subi	r30, 0x95	; 149
    36a2:	fb 4f       	sbci	r31, 0xFB	; 251
    36a4:	22 81       	ldd	r18, Z+2	; 0x02
    36a6:	33 81       	ldd	r19, Z+3	; 0x03
    36a8:	23 30       	cpi	r18, 0x03	; 3
    36aa:	31 05       	cpc	r19, r1
    36ac:	0c f4       	brge	.+2      	; 0x36b0 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    36ae:	52 c0       	rjmp	.+164    	; 0x3754 <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    36b0:	8f 2d       	mov	r24, r15
    36b2:	9e 2d       	mov	r25, r14
    36b4:	fc 01       	movw	r30, r24
    36b6:	ee 0f       	add	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	ee 0f       	add	r30, r30
    36c0:	ff 1f       	adc	r31, r31
    36c2:	88 0f       	add	r24, r24
    36c4:	99 1f       	adc	r25, r25
    36c6:	e8 0f       	add	r30, r24
    36c8:	f9 1f       	adc	r31, r25
    36ca:	e5 59       	subi	r30, 0x95	; 149
    36cc:	fb 4f       	sbci	r31, 0xFB	; 251
    36ce:	22 50       	subi	r18, 0x02	; 2
    36d0:	30 40       	sbci	r19, 0x00	; 0
    36d2:	33 83       	std	Z+3, r19	; 0x03
    36d4:	22 83       	std	Z+2, r18	; 0x02
    36d6:	fb ce       	rjmp	.-522    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    36d8:	8f 2d       	mov	r24, r15
    36da:	9e 2d       	mov	r25, r14
    36dc:	fc 01       	movw	r30, r24
    36de:	ee 0f       	add	r30, r30
    36e0:	ff 1f       	adc	r31, r31
    36e2:	ee 0f       	add	r30, r30
    36e4:	ff 1f       	adc	r31, r31
    36e6:	ee 0f       	add	r30, r30
    36e8:	ff 1f       	adc	r31, r31
    36ea:	88 0f       	add	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	e8 0f       	add	r30, r24
    36f0:	f9 1f       	adc	r31, r25
    36f2:	e5 59       	subi	r30, 0x95	; 149
    36f4:	fb 4f       	sbci	r31, 0xFB	; 251
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	80 32       	cpi	r24, 0x20	; 32
    36fc:	91 05       	cpc	r25, r1
    36fe:	0c f0       	brlt	.+2      	; 0x3702 <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    3700:	e6 ce       	rjmp	.-564    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    3702:	02 96       	adiw	r24, 0x02	; 2
    3704:	2f 2d       	mov	r18, r15
    3706:	3e 2d       	mov	r19, r14
    3708:	f9 01       	movw	r30, r18
    370a:	ee 0f       	add	r30, r30
    370c:	ff 1f       	adc	r31, r31
    370e:	ee 0f       	add	r30, r30
    3710:	ff 1f       	adc	r31, r31
    3712:	ee 0f       	add	r30, r30
    3714:	ff 1f       	adc	r31, r31
    3716:	22 0f       	add	r18, r18
    3718:	33 1f       	adc	r19, r19
    371a:	e2 0f       	add	r30, r18
    371c:	f3 1f       	adc	r31, r19
    371e:	e5 59       	subi	r30, 0x95	; 149
    3720:	fb 4f       	sbci	r31, 0xFB	; 251
    3722:	93 83       	std	Z+3, r25	; 0x03
    3724:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    3726:	80 97       	sbiw	r24, 0x20	; 32
    3728:	09 f0       	breq	.+2      	; 0x372c <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    372a:	d1 ce       	rjmp	.-606    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    372c:	8f 2d       	mov	r24, r15
    372e:	9e 2d       	mov	r25, r14
    3730:	fc 01       	movw	r30, r24
    3732:	ee 0f       	add	r30, r30
    3734:	ff 1f       	adc	r31, r31
    3736:	ee 0f       	add	r30, r30
    3738:	ff 1f       	adc	r31, r31
    373a:	ee 0f       	add	r30, r30
    373c:	ff 1f       	adc	r31, r31
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	e8 0f       	add	r30, r24
    3744:	f9 1f       	adc	r31, r25
    3746:	e5 59       	subi	r30, 0x95	; 149
    3748:	fb 4f       	sbci	r31, 0xFB	; 251
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	97 83       	std	Z+7, r25	; 0x07
    3750:	86 83       	std	Z+6, r24	; 0x06
    3752:	bd ce       	rjmp	.-646    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    3754:	8f 2d       	mov	r24, r15
    3756:	9e 2d       	mov	r25, r14
    3758:	fc 01       	movw	r30, r24
    375a:	ee 0f       	add	r30, r30
    375c:	ff 1f       	adc	r31, r31
    375e:	ee 0f       	add	r30, r30
    3760:	ff 1f       	adc	r31, r31
    3762:	ee 0f       	add	r30, r30
    3764:	ff 1f       	adc	r31, r31
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	e8 0f       	add	r30, r24
    376c:	f9 1f       	adc	r31, r25
    376e:	e5 59       	subi	r30, 0x95	; 149
    3770:	fb 4f       	sbci	r31, 0xFB	; 251
    3772:	80 81       	ld	r24, Z
    3774:	91 81       	ldd	r25, Z+1	; 0x01
    3776:	80 32       	cpi	r24, 0x20	; 32
    3778:	91 05       	cpc	r25, r1
    377a:	0c f0       	brlt	.+2      	; 0x377e <fadeBetweenColorsWithScalingPwmEffect+0x370>
    377c:	a8 ce       	rjmp	.-688    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    377e:	02 96       	adiw	r24, 0x02	; 2
    3780:	2f 2d       	mov	r18, r15
    3782:	3e 2d       	mov	r19, r14
    3784:	f9 01       	movw	r30, r18
    3786:	ee 0f       	add	r30, r30
    3788:	ff 1f       	adc	r31, r31
    378a:	ee 0f       	add	r30, r30
    378c:	ff 1f       	adc	r31, r31
    378e:	ee 0f       	add	r30, r30
    3790:	ff 1f       	adc	r31, r31
    3792:	22 0f       	add	r18, r18
    3794:	33 1f       	adc	r19, r19
    3796:	e2 0f       	add	r30, r18
    3798:	f3 1f       	adc	r31, r19
    379a:	e5 59       	subi	r30, 0x95	; 149
    379c:	fb 4f       	sbci	r31, 0xFB	; 251
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    37a2:	80 97       	sbiw	r24, 0x20	; 32
    37a4:	09 f0       	breq	.+2      	; 0x37a8 <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    37a6:	93 ce       	rjmp	.-730    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    37a8:	8f 2d       	mov	r24, r15
    37aa:	9e 2d       	mov	r25, r14
    37ac:	fc 01       	movw	r30, r24
    37ae:	ee 0f       	add	r30, r30
    37b0:	ff 1f       	adc	r31, r31
    37b2:	ee 0f       	add	r30, r30
    37b4:	ff 1f       	adc	r31, r31
    37b6:	ee 0f       	add	r30, r30
    37b8:	ff 1f       	adc	r31, r31
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	e8 0f       	add	r30, r24
    37c0:	f9 1f       	adc	r31, r25
    37c2:	e5 59       	subi	r30, 0x95	; 149
    37c4:	fb 4f       	sbci	r31, 0xFB	; 251
    37c6:	77 83       	std	Z+7, r23	; 0x07
    37c8:	66 83       	std	Z+6, r22	; 0x06
    37ca:	81 ce       	rjmp	.-766    	; 0x34ce <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    37cc:	8f 2d       	mov	r24, r15
    37ce:	9e 2d       	mov	r25, r14
    37d0:	bd 01       	movw	r22, r26
    37d2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <fadeBetweenColors>
    37d6:	20 cf       	rjmp	.-448    	; 0x3618 <fadeBetweenColorsWithScalingPwmEffect+0x20a>

000037d8 <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    37d8:	ef 92       	push	r14
    37da:	ff 92       	push	r15
    37dc:	0f 93       	push	r16
    37de:	1f 93       	push	r17
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	cd b7       	in	r28, 0x3d	; 61
    37e6:	de b7       	in	r29, 0x3e	; 62
    37e8:	a6 97       	sbiw	r28, 0x26	; 38
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	f8 2e       	mov	r15, r24
    37f6:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    37f8:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	fc 01       	movw	r30, r24
    3800:	ee 0f       	add	r30, r30
    3802:	ff 1f       	adc	r31, r31
    3804:	ee 0f       	add	r30, r30
    3806:	ff 1f       	adc	r31, r31
    3808:	ee 0f       	add	r30, r30
    380a:	ff 1f       	adc	r31, r31
    380c:	e8 1b       	sub	r30, r24
    380e:	f9 0b       	sbc	r31, r25
    3810:	ed 53       	subi	r30, 0x3D	; 61
    3812:	fc 4f       	sbci	r31, 0xFC	; 252
    3814:	20 85       	ldd	r18, Z+8	; 0x08
    3816:	31 85       	ldd	r19, Z+9	; 0x09
    3818:	2a 30       	cpi	r18, 0x0A	; 10
    381a:	31 05       	cpc	r19, r1
    381c:	0c f4       	brge	.+2      	; 0x3820 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    381e:	4b c0       	rjmp	.+150    	; 0x38b6 <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    3820:	8f 2d       	mov	r24, r15
    3822:	9e 2d       	mov	r25, r14
    3824:	88 0f       	add	r24, r24
    3826:	99 1f       	adc	r25, r25
    3828:	fc 01       	movw	r30, r24
    382a:	ee 0f       	add	r30, r30
    382c:	ff 1f       	adc	r31, r31
    382e:	ee 0f       	add	r30, r30
    3830:	ff 1f       	adc	r31, r31
    3832:	ee 0f       	add	r30, r30
    3834:	ff 1f       	adc	r31, r31
    3836:	e8 1b       	sub	r30, r24
    3838:	f9 0b       	sbc	r31, r25
    383a:	ed 53       	subi	r30, 0x3D	; 61
    383c:	fc 4f       	sbci	r31, 0xFC	; 252
    383e:	26 81       	ldd	r18, Z+6	; 0x06
    3840:	37 81       	ldd	r19, Z+7	; 0x07
    3842:	8f 2d       	mov	r24, r15
    3844:	9e 2d       	mov	r25, r14
    3846:	88 0f       	add	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	fc 01       	movw	r30, r24
    384c:	ee 0f       	add	r30, r30
    384e:	ff 1f       	adc	r31, r31
    3850:	ee 0f       	add	r30, r30
    3852:	ff 1f       	adc	r31, r31
    3854:	ee 0f       	add	r30, r30
    3856:	ff 1f       	adc	r31, r31
    3858:	e8 1b       	sub	r30, r24
    385a:	f9 0b       	sbc	r31, r25
    385c:	ed 53       	subi	r30, 0x3D	; 61
    385e:	fc 4f       	sbci	r31, 0xFC	; 252
    3860:	84 81       	ldd	r24, Z+4	; 0x04
    3862:	95 81       	ldd	r25, Z+5	; 0x05
    3864:	28 17       	cp	r18, r24
    3866:	39 07       	cpc	r19, r25
    3868:	0c f0       	brlt	.+2      	; 0x386c <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    386a:	95 c0       	rjmp	.+298    	; 0x3996 <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    386c:	8f 2d       	mov	r24, r15
    386e:	9e 2d       	mov	r25, r14
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	fc 01       	movw	r30, r24
    3876:	ee 0f       	add	r30, r30
    3878:	ff 1f       	adc	r31, r31
    387a:	ee 0f       	add	r30, r30
    387c:	ff 1f       	adc	r31, r31
    387e:	ee 0f       	add	r30, r30
    3880:	ff 1f       	adc	r31, r31
    3882:	e8 1b       	sub	r30, r24
    3884:	f9 0b       	sbc	r31, r25
    3886:	ed 53       	subi	r30, 0x3D	; 61
    3888:	fc 4f       	sbci	r31, 0xFC	; 252
    388a:	2f 5f       	subi	r18, 0xFF	; 255
    388c:	3f 4f       	sbci	r19, 0xFF	; 255
    388e:	37 83       	std	Z+7, r19	; 0x07
    3890:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    3892:	8f 2d       	mov	r24, r15
    3894:	9e 2d       	mov	r25, r14
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	fc 01       	movw	r30, r24
    389c:	ee 0f       	add	r30, r30
    389e:	ff 1f       	adc	r31, r31
    38a0:	ee 0f       	add	r30, r30
    38a2:	ff 1f       	adc	r31, r31
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	e8 1b       	sub	r30, r24
    38aa:	f9 0b       	sbc	r31, r25
    38ac:	ed 53       	subi	r30, 0x3D	; 61
    38ae:	fc 4f       	sbci	r31, 0xFC	; 252
    38b0:	11 86       	std	Z+9, r1	; 0x09
    38b2:	10 86       	std	Z+8, r1	; 0x08
    38b4:	13 c0       	rjmp	.+38     	; 0x38dc <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    38b6:	8f 2d       	mov	r24, r15
    38b8:	9e 2d       	mov	r25, r14
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	fc 01       	movw	r30, r24
    38c0:	ee 0f       	add	r30, r30
    38c2:	ff 1f       	adc	r31, r31
    38c4:	ee 0f       	add	r30, r30
    38c6:	ff 1f       	adc	r31, r31
    38c8:	ee 0f       	add	r30, r30
    38ca:	ff 1f       	adc	r31, r31
    38cc:	e8 1b       	sub	r30, r24
    38ce:	f9 0b       	sbc	r31, r25
    38d0:	ed 53       	subi	r30, 0x3D	; 61
    38d2:	fc 4f       	sbci	r31, 0xFC	; 252
    38d4:	2f 5f       	subi	r18, 0xFF	; 255
    38d6:	3f 4f       	sbci	r19, 0xFF	; 255
    38d8:	31 87       	std	Z+9, r19	; 0x09
    38da:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    38dc:	8f 2d       	mov	r24, r15
    38de:	9e 2d       	mov	r25, r14
    38e0:	88 0f       	add	r24, r24
    38e2:	99 1f       	adc	r25, r25
    38e4:	fc 01       	movw	r30, r24
    38e6:	ee 0f       	add	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	ee 0f       	add	r30, r30
    38ec:	ff 1f       	adc	r31, r31
    38ee:	ee 0f       	add	r30, r30
    38f0:	ff 1f       	adc	r31, r31
    38f2:	e8 1b       	sub	r30, r24
    38f4:	f9 0b       	sbc	r31, r25
    38f6:	ed 53       	subi	r30, 0x3D	; 61
    38f8:	fc 4f       	sbci	r31, 0xFC	; 252
    38fa:	02 84       	ldd	r0, Z+10	; 0x0a
    38fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    38fe:	e0 2d       	mov	r30, r0
    3900:	80 81       	ld	r24, Z
    3902:	91 81       	ldd	r25, Z+1	; 0x01
    3904:	9e 8b       	std	Y+22, r25	; 0x16
    3906:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    3908:	82 81       	ldd	r24, Z+2	; 0x02
    390a:	93 81       	ldd	r25, Z+3	; 0x03
    390c:	98 8f       	std	Y+24, r25	; 0x18
    390e:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    3910:	84 81       	ldd	r24, Z+4	; 0x04
    3912:	95 81       	ldd	r25, Z+5	; 0x05
    3914:	9a 8f       	std	Y+26, r25	; 0x1a
    3916:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    3918:	8f 2d       	mov	r24, r15
    391a:	9e 2d       	mov	r25, r14
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	fc 01       	movw	r30, r24
    3922:	ee 0f       	add	r30, r30
    3924:	ff 1f       	adc	r31, r31
    3926:	ee 0f       	add	r30, r30
    3928:	ff 1f       	adc	r31, r31
    392a:	ee 0f       	add	r30, r30
    392c:	ff 1f       	adc	r31, r31
    392e:	e8 1b       	sub	r30, r24
    3930:	f9 0b       	sbc	r31, r25
    3932:	ed 53       	subi	r30, 0x3D	; 61
    3934:	fc 4f       	sbci	r31, 0xFC	; 252
    3936:	04 84       	ldd	r0, Z+12	; 0x0c
    3938:	f5 85       	ldd	r31, Z+13	; 0x0d
    393a:	e0 2d       	mov	r30, r0
    393c:	80 81       	ld	r24, Z
    393e:	91 81       	ldd	r25, Z+1	; 0x01
    3940:	9c 8f       	std	Y+28, r25	; 0x1c
    3942:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    3944:	82 81       	ldd	r24, Z+2	; 0x02
    3946:	93 81       	ldd	r25, Z+3	; 0x03
    3948:	9e 8f       	std	Y+30, r25	; 0x1e
    394a:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    394c:	84 81       	ldd	r24, Z+4	; 0x04
    394e:	95 81       	ldd	r25, Z+5	; 0x05
    3950:	98 a3       	std	Y+32, r25	; 0x20
    3952:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    3954:	f8 01       	movw	r30, r16
    3956:	82 89       	ldd	r24, Z+18	; 0x12
    3958:	93 89       	ldd	r25, Z+19	; 0x13
    395a:	9a a3       	std	Y+34, r25	; 0x22
    395c:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    395e:	84 89       	ldd	r24, Z+20	; 0x14
    3960:	95 89       	ldd	r25, Z+21	; 0x15
    3962:	9c a3       	std	Y+36, r25	; 0x24
    3964:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    3966:	86 89       	ldd	r24, Z+22	; 0x16
    3968:	97 89       	ldd	r25, Z+23	; 0x17
    396a:	9e a3       	std	Y+38, r25	; 0x26
    396c:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    396e:	8f 2d       	mov	r24, r15
    3970:	9e 2d       	mov	r25, r14
    3972:	be 01       	movw	r22, r28
    3974:	6b 5e       	subi	r22, 0xEB	; 235
    3976:	7f 4f       	sbci	r23, 0xFF	; 255
    3978:	0e 94 07 1a 	call	0x340e	; 0x340e <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    397c:	a6 96       	adiw	r28, 0x26	; 38
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	cf 91       	pop	r28
    398a:	df 91       	pop	r29
    398c:	1f 91       	pop	r17
    398e:	0f 91       	pop	r16
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    3994:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    3996:	8f 2d       	mov	r24, r15
    3998:	9e 2d       	mov	r25, r14
    399a:	88 0f       	add	r24, r24
    399c:	99 1f       	adc	r25, r25
    399e:	fc 01       	movw	r30, r24
    39a0:	ee 0f       	add	r30, r30
    39a2:	ff 1f       	adc	r31, r31
    39a4:	ee 0f       	add	r30, r30
    39a6:	ff 1f       	adc	r31, r31
    39a8:	ee 0f       	add	r30, r30
    39aa:	ff 1f       	adc	r31, r31
    39ac:	e8 1b       	sub	r30, r24
    39ae:	f9 0b       	sbc	r31, r25
    39b0:	ed 53       	subi	r30, 0x3D	; 61
    39b2:	fc 4f       	sbci	r31, 0xFC	; 252
    39b4:	42 81       	ldd	r20, Z+2	; 0x02
    39b6:	53 81       	ldd	r21, Z+3	; 0x03
    39b8:	41 30       	cpi	r20, 0x01	; 1
    39ba:	51 05       	cpc	r21, r1
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    39be:	6a c0       	rjmp	.+212    	; 0x3a94 <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    39c0:	45 2b       	or	r20, r21
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    39c4:	f2 c0       	rjmp	.+484    	; 0x3baa <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    39c6:	8f 2d       	mov	r24, r15
    39c8:	9e 2d       	mov	r25, r14
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	fc 01       	movw	r30, r24
    39d0:	ee 0f       	add	r30, r30
    39d2:	ff 1f       	adc	r31, r31
    39d4:	ee 0f       	add	r30, r30
    39d6:	ff 1f       	adc	r31, r31
    39d8:	ee 0f       	add	r30, r30
    39da:	ff 1f       	adc	r31, r31
    39dc:	e8 1b       	sub	r30, r24
    39de:	f9 0b       	sbc	r31, r25
    39e0:	ed 53       	subi	r30, 0x3D	; 61
    39e2:	fc 4f       	sbci	r31, 0xFC	; 252
    39e4:	20 81       	ld	r18, Z
    39e6:	31 81       	ldd	r19, Z+1	; 0x01
    39e8:	21 50       	subi	r18, 0x01	; 1
    39ea:	30 40       	sbci	r19, 0x00	; 0
    39ec:	8f 2d       	mov	r24, r15
    39ee:	9e 2d       	mov	r25, r14
    39f0:	88 0f       	add	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	fc 01       	movw	r30, r24
    39f6:	ee 0f       	add	r30, r30
    39f8:	ff 1f       	adc	r31, r31
    39fa:	ee 0f       	add	r30, r30
    39fc:	ff 1f       	adc	r31, r31
    39fe:	ee 0f       	add	r30, r30
    3a00:	ff 1f       	adc	r31, r31
    3a02:	e8 1b       	sub	r30, r24
    3a04:	f9 0b       	sbc	r31, r25
    3a06:	ed 53       	subi	r30, 0x3D	; 61
    3a08:	fc 4f       	sbci	r31, 0xFC	; 252
    3a0a:	31 83       	std	Z+1, r19	; 0x01
    3a0c:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    3a0e:	23 2b       	or	r18, r19
    3a10:	09 f0       	breq	.+2      	; 0x3a14 <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    3a12:	f7 c0       	rjmp	.+494    	; 0x3c02 <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    3a14:	8f 2d       	mov	r24, r15
    3a16:	9e 2d       	mov	r25, r14
    3a18:	88 0f       	add	r24, r24
    3a1a:	99 1f       	adc	r25, r25
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	ee 0f       	add	r30, r30
    3a20:	ff 1f       	adc	r31, r31
    3a22:	ee 0f       	add	r30, r30
    3a24:	ff 1f       	adc	r31, r31
    3a26:	ee 0f       	add	r30, r30
    3a28:	ff 1f       	adc	r31, r31
    3a2a:	e8 1b       	sub	r30, r24
    3a2c:	f9 0b       	sbc	r31, r25
    3a2e:	ed 53       	subi	r30, 0x3D	; 61
    3a30:	fc 4f       	sbci	r31, 0xFC	; 252
    3a32:	0a 5f       	subi	r16, 0xFA	; 250
    3a34:	1f 4f       	sbci	r17, 0xFF	; 255
    3a36:	13 87       	std	Z+11, r17	; 0x0b
    3a38:	02 87       	std	Z+10, r16	; 0x0a
    3a3a:	06 50       	subi	r16, 0x06	; 6
    3a3c:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    3a3e:	8f 2d       	mov	r24, r15
    3a40:	9e 2d       	mov	r25, r14
    3a42:	88 0f       	add	r24, r24
    3a44:	99 1f       	adc	r25, r25
    3a46:	fc 01       	movw	r30, r24
    3a48:	ee 0f       	add	r30, r30
    3a4a:	ff 1f       	adc	r31, r31
    3a4c:	ee 0f       	add	r30, r30
    3a4e:	ff 1f       	adc	r31, r31
    3a50:	ee 0f       	add	r30, r30
    3a52:	ff 1f       	adc	r31, r31
    3a54:	e8 1b       	sub	r30, r24
    3a56:	f9 0b       	sbc	r31, r25
    3a58:	ed 53       	subi	r30, 0x3D	; 61
    3a5a:	fc 4f       	sbci	r31, 0xFC	; 252
    3a5c:	15 87       	std	Z+13, r17	; 0x0d
    3a5e:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    3a60:	f8 01       	movw	r30, r16
    3a62:	86 81       	ldd	r24, Z+6	; 0x06
    3a64:	97 81       	ldd	r25, Z+7	; 0x07
    3a66:	98 87       	std	Y+8, r25	; 0x08
    3a68:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    3a6a:	80 85       	ldd	r24, Z+8	; 0x08
    3a6c:	91 85       	ldd	r25, Z+9	; 0x09
    3a6e:	9a 87       	std	Y+10, r25	; 0x0a
    3a70:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    3a72:	82 85       	ldd	r24, Z+10	; 0x0a
    3a74:	93 85       	ldd	r25, Z+11	; 0x0b
    3a76:	9c 87       	std	Y+12, r25	; 0x0c
    3a78:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    3a7a:	80 81       	ld	r24, Z
    3a7c:	91 81       	ldd	r25, Z+1	; 0x01
    3a7e:	9e 87       	std	Y+14, r25	; 0x0e
    3a80:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    3a82:	82 81       	ldd	r24, Z+2	; 0x02
    3a84:	93 81       	ldd	r25, Z+3	; 0x03
    3a86:	98 8b       	std	Y+16, r25	; 0x10
    3a88:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    3a8a:	84 81       	ldd	r24, Z+4	; 0x04
    3a8c:	95 81       	ldd	r25, Z+5	; 0x05
    3a8e:	9a 8b       	std	Y+18, r25	; 0x12
    3a90:	89 8b       	std	Y+17, r24	; 0x11
    3a92:	8b c0       	rjmp	.+278    	; 0x3baa <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    3a94:	8f 2d       	mov	r24, r15
    3a96:	9e 2d       	mov	r25, r14
    3a98:	88 0f       	add	r24, r24
    3a9a:	99 1f       	adc	r25, r25
    3a9c:	fc 01       	movw	r30, r24
    3a9e:	ee 0f       	add	r30, r30
    3aa0:	ff 1f       	adc	r31, r31
    3aa2:	ee 0f       	add	r30, r30
    3aa4:	ff 1f       	adc	r31, r31
    3aa6:	ee 0f       	add	r30, r30
    3aa8:	ff 1f       	adc	r31, r31
    3aaa:	e8 1b       	sub	r30, r24
    3aac:	f9 0b       	sbc	r31, r25
    3aae:	ed 53       	subi	r30, 0x3D	; 61
    3ab0:	fc 4f       	sbci	r31, 0xFC	; 252
    3ab2:	20 81       	ld	r18, Z
    3ab4:	31 81       	ldd	r19, Z+1	; 0x01
    3ab6:	2f 5f       	subi	r18, 0xFF	; 255
    3ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    3aba:	8f 2d       	mov	r24, r15
    3abc:	9e 2d       	mov	r25, r14
    3abe:	88 0f       	add	r24, r24
    3ac0:	99 1f       	adc	r25, r25
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	ee 0f       	add	r30, r30
    3ac6:	ff 1f       	adc	r31, r31
    3ac8:	ee 0f       	add	r30, r30
    3aca:	ff 1f       	adc	r31, r31
    3acc:	ee 0f       	add	r30, r30
    3ace:	ff 1f       	adc	r31, r31
    3ad0:	e8 1b       	sub	r30, r24
    3ad2:	f9 0b       	sbc	r31, r25
    3ad4:	ed 53       	subi	r30, 0x3D	; 61
    3ad6:	fc 4f       	sbci	r31, 0xFC	; 252
    3ad8:	31 83       	std	Z+1, r19	; 0x01
    3ada:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    3adc:	21 30       	cpi	r18, 0x01	; 1
    3ade:	31 05       	cpc	r19, r1
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    3ae2:	e5 c0       	rjmp	.+458    	; 0x3cae <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    3ae4:	8f 2d       	mov	r24, r15
    3ae6:	9e 2d       	mov	r25, r14
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	fc 01       	movw	r30, r24
    3aee:	ee 0f       	add	r30, r30
    3af0:	ff 1f       	adc	r31, r31
    3af2:	ee 0f       	add	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	ee 0f       	add	r30, r30
    3af8:	ff 1f       	adc	r31, r31
    3afa:	e8 1b       	sub	r30, r24
    3afc:	f9 0b       	sbc	r31, r25
    3afe:	ed 53       	subi	r30, 0x3D	; 61
    3b00:	fc 4f       	sbci	r31, 0xFC	; 252
    3b02:	13 82       	std	Z+3, r1	; 0x03
    3b04:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    3b06:	8f 2d       	mov	r24, r15
    3b08:	9e 2d       	mov	r25, r14
    3b0a:	88 0f       	add	r24, r24
    3b0c:	99 1f       	adc	r25, r25
    3b0e:	fc 01       	movw	r30, r24
    3b10:	ee 0f       	add	r30, r30
    3b12:	ff 1f       	adc	r31, r31
    3b14:	ee 0f       	add	r30, r30
    3b16:	ff 1f       	adc	r31, r31
    3b18:	ee 0f       	add	r30, r30
    3b1a:	ff 1f       	adc	r31, r31
    3b1c:	e8 1b       	sub	r30, r24
    3b1e:	f9 0b       	sbc	r31, r25
    3b20:	ed 53       	subi	r30, 0x3D	; 61
    3b22:	fc 4f       	sbci	r31, 0xFC	; 252
    3b24:	51 83       	std	Z+1, r21	; 0x01
    3b26:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    3b28:	8f 2d       	mov	r24, r15
    3b2a:	9e 2d       	mov	r25, r14
    3b2c:	88 0f       	add	r24, r24
    3b2e:	99 1f       	adc	r25, r25
    3b30:	fc 01       	movw	r30, r24
    3b32:	ee 0f       	add	r30, r30
    3b34:	ff 1f       	adc	r31, r31
    3b36:	ee 0f       	add	r30, r30
    3b38:	ff 1f       	adc	r31, r31
    3b3a:	ee 0f       	add	r30, r30
    3b3c:	ff 1f       	adc	r31, r31
    3b3e:	e8 1b       	sub	r30, r24
    3b40:	f9 0b       	sbc	r31, r25
    3b42:	ed 53       	subi	r30, 0x3D	; 61
    3b44:	fc 4f       	sbci	r31, 0xFC	; 252
    3b46:	04 5f       	subi	r16, 0xF4	; 244
    3b48:	1f 4f       	sbci	r17, 0xFF	; 255
    3b4a:	13 87       	std	Z+11, r17	; 0x0b
    3b4c:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    3b4e:	8f 2d       	mov	r24, r15
    3b50:	9e 2d       	mov	r25, r14
    3b52:	88 0f       	add	r24, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	fc 01       	movw	r30, r24
    3b58:	ee 0f       	add	r30, r30
    3b5a:	ff 1f       	adc	r31, r31
    3b5c:	ee 0f       	add	r30, r30
    3b5e:	ff 1f       	adc	r31, r31
    3b60:	ee 0f       	add	r30, r30
    3b62:	ff 1f       	adc	r31, r31
    3b64:	e8 1b       	sub	r30, r24
    3b66:	f9 0b       	sbc	r31, r25
    3b68:	ed 53       	subi	r30, 0x3D	; 61
    3b6a:	fc 4f       	sbci	r31, 0xFC	; 252
    3b6c:	06 50       	subi	r16, 0x06	; 6
    3b6e:	10 40       	sbci	r17, 0x00	; 0
    3b70:	15 87       	std	Z+13, r17	; 0x0d
    3b72:	04 87       	std	Z+12, r16	; 0x0c
    3b74:	06 50       	subi	r16, 0x06	; 6
    3b76:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    3b78:	f8 01       	movw	r30, r16
    3b7a:	84 85       	ldd	r24, Z+12	; 0x0c
    3b7c:	95 85       	ldd	r25, Z+13	; 0x0d
    3b7e:	98 87       	std	Y+8, r25	; 0x08
    3b80:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    3b82:	86 85       	ldd	r24, Z+14	; 0x0e
    3b84:	97 85       	ldd	r25, Z+15	; 0x0f
    3b86:	9a 87       	std	Y+10, r25	; 0x0a
    3b88:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    3b8a:	80 89       	ldd	r24, Z+16	; 0x10
    3b8c:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    3b8e:	9c 87       	std	Y+12, r25	; 0x0c
    3b90:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    3b92:	86 81       	ldd	r24, Z+6	; 0x06
    3b94:	97 81       	ldd	r25, Z+7	; 0x07
    3b96:	9e 87       	std	Y+14, r25	; 0x0e
    3b98:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    3b9a:	80 85       	ldd	r24, Z+8	; 0x08
    3b9c:	91 85       	ldd	r25, Z+9	; 0x09
    3b9e:	98 8b       	std	Y+16, r25	; 0x10
    3ba0:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    3ba2:	82 85       	ldd	r24, Z+10	; 0x0a
    3ba4:	93 85       	ldd	r25, Z+11	; 0x0b
    3ba6:	9a 8b       	std	Y+18, r25	; 0x12
    3ba8:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    3baa:	8f 2d       	mov	r24, r15
    3bac:	9e 2d       	mov	r25, r14
    3bae:	be 01       	movw	r22, r28
    3bb0:	6f 5f       	subi	r22, 0xFF	; 255
    3bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb4:	0e 94 22 21 	call	0x4244	; 0x4244 <getRGBColor>
			resetData.beginRed = curColors.red;
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	9a 81       	ldd	r25, Y+2	; 0x02
    3bbc:	98 87       	std	Y+8, r25	; 0x08
    3bbe:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    3bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc4:	9a 87       	std	Y+10, r25	; 0x0a
    3bc6:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    3bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bca:	9e 81       	ldd	r25, Y+6	; 0x06
    3bcc:	9c 87       	std	Y+12, r25	; 0x0c
    3bce:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    3bd0:	8f 2d       	mov	r24, r15
    3bd2:	9e 2d       	mov	r25, r14
    3bd4:	be 01       	movw	r22, r28
    3bd6:	69 5f       	subi	r22, 0xF9	; 249
    3bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bda:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    3bde:	8f 2d       	mov	r24, r15
    3be0:	9e 2d       	mov	r25, r14
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	fc 01       	movw	r30, r24
    3be8:	ee 0f       	add	r30, r30
    3bea:	ff 1f       	adc	r31, r31
    3bec:	ee 0f       	add	r30, r30
    3bee:	ff 1f       	adc	r31, r31
    3bf0:	ee 0f       	add	r30, r30
    3bf2:	ff 1f       	adc	r31, r31
    3bf4:	e8 1b       	sub	r30, r24
    3bf6:	f9 0b       	sbc	r31, r25
    3bf8:	ed 53       	subi	r30, 0x3D	; 61
    3bfa:	fc 4f       	sbci	r31, 0xFC	; 252
    3bfc:	17 82       	std	Z+7, r1	; 0x07
    3bfe:	16 82       	std	Z+6, r1	; 0x06
    3c00:	48 ce       	rjmp	.-880    	; 0x3892 <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    3c02:	8f 2d       	mov	r24, r15
    3c04:	9e 2d       	mov	r25, r14
    3c06:	88 0f       	add	r24, r24
    3c08:	99 1f       	adc	r25, r25
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	ee 0f       	add	r30, r30
    3c0e:	ff 1f       	adc	r31, r31
    3c10:	ee 0f       	add	r30, r30
    3c12:	ff 1f       	adc	r31, r31
    3c14:	ee 0f       	add	r30, r30
    3c16:	ff 1f       	adc	r31, r31
    3c18:	e8 1b       	sub	r30, r24
    3c1a:	f9 0b       	sbc	r31, r25
    3c1c:	ed 53       	subi	r30, 0x3D	; 61
    3c1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3c20:	11 82       	std	Z+1, r1	; 0x01
    3c22:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    3c24:	8f 2d       	mov	r24, r15
    3c26:	9e 2d       	mov	r25, r14
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	ee 0f       	add	r30, r30
    3c30:	ff 1f       	adc	r31, r31
    3c32:	ee 0f       	add	r30, r30
    3c34:	ff 1f       	adc	r31, r31
    3c36:	ee 0f       	add	r30, r30
    3c38:	ff 1f       	adc	r31, r31
    3c3a:	e8 1b       	sub	r30, r24
    3c3c:	f9 0b       	sbc	r31, r25
    3c3e:	ed 53       	subi	r30, 0x3D	; 61
    3c40:	fc 4f       	sbci	r31, 0xFC	; 252
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	93 83       	std	Z+3, r25	; 0x03
    3c48:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    3c4a:	8f 2d       	mov	r24, r15
    3c4c:	9e 2d       	mov	r25, r14
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	fc 01       	movw	r30, r24
    3c54:	ee 0f       	add	r30, r30
    3c56:	ff 1f       	adc	r31, r31
    3c58:	ee 0f       	add	r30, r30
    3c5a:	ff 1f       	adc	r31, r31
    3c5c:	ee 0f       	add	r30, r30
    3c5e:	ff 1f       	adc	r31, r31
    3c60:	e8 1b       	sub	r30, r24
    3c62:	f9 0b       	sbc	r31, r25
    3c64:	ed 53       	subi	r30, 0x3D	; 61
    3c66:	fc 4f       	sbci	r31, 0xFC	; 252
    3c68:	13 87       	std	Z+11, r17	; 0x0b
    3c6a:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    3c6c:	8f 2d       	mov	r24, r15
    3c6e:	9e 2d       	mov	r25, r14
    3c70:	88 0f       	add	r24, r24
    3c72:	99 1f       	adc	r25, r25
    3c74:	fc 01       	movw	r30, r24
    3c76:	ee 0f       	add	r30, r30
    3c78:	ff 1f       	adc	r31, r31
    3c7a:	ee 0f       	add	r30, r30
    3c7c:	ff 1f       	adc	r31, r31
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	e8 1b       	sub	r30, r24
    3c84:	f9 0b       	sbc	r31, r25
    3c86:	ed 53       	subi	r30, 0x3D	; 61
    3c88:	fc 4f       	sbci	r31, 0xFC	; 252
    3c8a:	0a 5f       	subi	r16, 0xFA	; 250
    3c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8e:	15 87       	std	Z+13, r17	; 0x0d
    3c90:	04 87       	std	Z+12, r16	; 0x0c
    3c92:	06 50       	subi	r16, 0x06	; 6
    3c94:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    3c96:	f8 01       	movw	r30, r16
    3c98:	80 81       	ld	r24, Z
    3c9a:	91 81       	ldd	r25, Z+1	; 0x01
    3c9c:	98 87       	std	Y+8, r25	; 0x08
    3c9e:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	9a 87       	std	Y+10, r25	; 0x0a
    3ca6:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    3ca8:	84 81       	ldd	r24, Z+4	; 0x04
    3caa:	95 81       	ldd	r25, Z+5	; 0x05
    3cac:	70 cf       	rjmp	.-288    	; 0x3b8e <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    3cae:	8f 2d       	mov	r24, r15
    3cb0:	9e 2d       	mov	r25, r14
    3cb2:	88 0f       	add	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	ee 0f       	add	r30, r30
    3cba:	ff 1f       	adc	r31, r31
    3cbc:	ee 0f       	add	r30, r30
    3cbe:	ff 1f       	adc	r31, r31
    3cc0:	ee 0f       	add	r30, r30
    3cc2:	ff 1f       	adc	r31, r31
    3cc4:	e8 1b       	sub	r30, r24
    3cc6:	f9 0b       	sbc	r31, r25
    3cc8:	ed 53       	subi	r30, 0x3D	; 61
    3cca:	fc 4f       	sbci	r31, 0xFC	; 252
    3ccc:	0a 5f       	subi	r16, 0xFA	; 250
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	13 87       	std	Z+11, r17	; 0x0b
    3cd2:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    3cd4:	8f 2d       	mov	r24, r15
    3cd6:	9e 2d       	mov	r25, r14
    3cd8:	88 0f       	add	r24, r24
    3cda:	99 1f       	adc	r25, r25
    3cdc:	fc 01       	movw	r30, r24
    3cde:	ee 0f       	add	r30, r30
    3ce0:	ff 1f       	adc	r31, r31
    3ce2:	ee 0f       	add	r30, r30
    3ce4:	ff 1f       	adc	r31, r31
    3ce6:	ee 0f       	add	r30, r30
    3ce8:	ff 1f       	adc	r31, r31
    3cea:	e8 1b       	sub	r30, r24
    3cec:	f9 0b       	sbc	r31, r25
    3cee:	ed 53       	subi	r30, 0x3D	; 61
    3cf0:	fc 4f       	sbci	r31, 0xFC	; 252
    3cf2:	0a 5f       	subi	r16, 0xFA	; 250
    3cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf6:	15 87       	std	Z+13, r17	; 0x0d
    3cf8:	04 87       	std	Z+12, r16	; 0x0c
    3cfa:	0c 50       	subi	r16, 0x0C	; 12
    3cfc:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    3cfe:	f8 01       	movw	r30, r16
    3d00:	86 81       	ldd	r24, Z+6	; 0x06
    3d02:	97 81       	ldd	r25, Z+7	; 0x07
    3d04:	98 87       	std	Y+8, r25	; 0x08
    3d06:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    3d08:	80 85       	ldd	r24, Z+8	; 0x08
    3d0a:	91 85       	ldd	r25, Z+9	; 0x09
    3d0c:	9a 87       	std	Y+10, r25	; 0x0a
    3d0e:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    3d10:	82 85       	ldd	r24, Z+10	; 0x0a
    3d12:	93 85       	ldd	r25, Z+11	; 0x0b
    3d14:	9c 87       	std	Y+12, r25	; 0x0c
    3d16:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    3d18:	84 85       	ldd	r24, Z+12	; 0x0c
    3d1a:	95 85       	ldd	r25, Z+13	; 0x0d
    3d1c:	9e 87       	std	Y+14, r25	; 0x0e
    3d1e:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    3d20:	86 85       	ldd	r24, Z+14	; 0x0e
    3d22:	97 85       	ldd	r25, Z+15	; 0x0f
    3d24:	98 8b       	std	Y+16, r25	; 0x10
    3d26:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    3d28:	80 89       	ldd	r24, Z+16	; 0x10
    3d2a:	91 89       	ldd	r25, Z+17	; 0x11
    3d2c:	9a 8b       	std	Y+18, r25	; 0x12
    3d2e:	89 8b       	std	Y+17, r24	; 0x11
    3d30:	3c cf       	rjmp	.-392    	; 0x3baa <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00003d32 <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    3d32:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    3d34:	2d 91       	ld	r18, X+
    3d36:	3c 91       	ld	r19, X
    3d38:	11 97       	sbiw	r26, 0x01	; 1
    3d3a:	f9 01       	movw	r30, r18
    3d3c:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    3d3e:	2f 5f       	subi	r18, 0xFF	; 255
    3d40:	3f 4f       	sbci	r19, 0xFF	; 255
    3d42:	2d 93       	st	X+, r18
    3d44:	3c 93       	st	X, r19
    return returnVal;
}
    3d46:	08 95       	ret

00003d48 <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    3d48:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    3d4a:	8d 91       	ld	r24, X+
    3d4c:	9c 91       	ld	r25, X
    3d4e:	11 97       	sbiw	r26, 0x01	; 1
    3d50:	fc 01       	movw	r30, r24
    3d52:	25 91       	lpm	r18, Z+
    3d54:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    3d56:	02 96       	adiw	r24, 0x02	; 2
    3d58:	8d 93       	st	X+, r24
    3d5a:	9c 93       	st	X, r25
    return returnVal;
}
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	08 95       	ret

00003d60 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    3d66:	14 16       	cp	r1, r20
    3d68:	15 06       	cpc	r1, r21
    3d6a:	64 f4       	brge	.+24     	; 0x3d84 <copyFromFlash+0x24>
    3d6c:	db 01       	movw	r26, r22
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    3d72:	fe 01       	movw	r30, r28
    3d74:	e8 0f       	add	r30, r24
    3d76:	f9 1f       	adc	r31, r25
    3d78:	e4 91       	lpm	r30, Z+
    3d7a:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    3d7c:	01 96       	adiw	r24, 0x01	; 1
    3d7e:	84 17       	cp	r24, r20
    3d80:	95 07       	cpc	r25, r21
    3d82:	bc f3       	brlt	.-18     	; 0x3d72 <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	08 95       	ret

00003d8a <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    3d8a:	2f 92       	push	r2
    3d8c:	3f 92       	push	r3
    3d8e:	4f 92       	push	r4
    3d90:	5f 92       	push	r5
    3d92:	6f 92       	push	r6
    3d94:	7f 92       	push	r7
    3d96:	8f 92       	push	r8
    3d98:	9f 92       	push	r9
    3d9a:	af 92       	push	r10
    3d9c:	bf 92       	push	r11
    3d9e:	cf 92       	push	r12
    3da0:	df 92       	push	r13
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	1f 93       	push	r17
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <getInstructionGroup+0x24>
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <getInstructionGroup+0x26>
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    3db4:	83 ef       	ldi	r24, 0xF3	; 243
    3db6:	98 e0       	ldi	r25, 0x08	; 8
    3db8:	90 93 f4 0e 	sts	0x0EF4, r25
    3dbc:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    3dc0:	40 91 04 01 	lds	r20, 0x0104
    3dc4:	50 91 05 01 	lds	r21, 0x0105
    3dc8:	fa 01       	movw	r30, r20
    3dca:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    3dcc:	31 96       	adiw	r30, 0x01	; 1
    3dce:	f0 93 05 01 	sts	0x0105, r31
    3dd2:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    3dd6:	8f 3f       	cpi	r24, 0xFF	; 255
    3dd8:	c9 f0       	breq	.+50     	; 0x3e0c <getInstructionGroup+0x82>
    3dda:	60 e0       	ldi	r22, 0x00	; 0
    3ddc:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    3dde:	cb 01       	movw	r24, r22
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	1f 91       	pop	r17
    3dee:	ff 90       	pop	r15
    3df0:	ef 90       	pop	r14
    3df2:	df 90       	pop	r13
    3df4:	cf 90       	pop	r12
    3df6:	bf 90       	pop	r11
    3df8:	af 90       	pop	r10
    3dfa:	9f 90       	pop	r9
    3dfc:	8f 90       	pop	r8
    3dfe:	7f 90       	pop	r7
    3e00:	6f 90       	pop	r6
    3e02:	5f 90       	pop	r5
    3e04:	4f 90       	pop	r4
    3e06:	3f 90       	pop	r3
    3e08:	2f 90       	pop	r2
    3e0a:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    3e0c:	80 91 00 01 	lds	r24, 0x0100
    3e10:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    3e14:	20 91 02 01 	lds	r18, 0x0102
    3e18:	30 91 03 01 	lds	r19, 0x0103
    3e1c:	20 93 00 01 	sts	0x0100, r18
    3e20:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    3e24:	90 93 03 01 	sts	0x0103, r25
    3e28:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    3e2c:	c9 01       	movw	r24, r18
    3e2e:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    3e30:	85 91       	lpm	r24, Z+
    3e32:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    3e34:	9c 01       	movw	r18, r24
    3e36:	22 0f       	add	r18, r18
    3e38:	33 1f       	adc	r19, r19
    3e3a:	22 0f       	add	r18, r18
    3e3c:	33 1f       	adc	r19, r19
    3e3e:	22 0f       	add	r18, r18
    3e40:	33 1f       	adc	r19, r19
    3e42:	88 0f       	add	r24, r24
    3e44:	99 1f       	adc	r25, r25
    3e46:	28 0f       	add	r18, r24
    3e48:	39 1f       	adc	r19, r25
    3e4a:	fb 01       	movw	r30, r22
    3e4c:	31 83       	std	Z+1, r19	; 0x01
    3e4e:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    3e50:	db 01       	movw	r26, r22
    3e52:	14 96       	adiw	r26, 0x04	; 4
    3e54:	b3 83       	std	Z+3, r27	; 0x03
    3e56:	a2 83       	std	Z+2, r26	; 0x02
    3e58:	4d 5f       	subi	r20, 0xFD	; 253
    3e5a:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    3e5c:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    3e5e:	9c e8       	ldi	r25, 0x8C	; 140
    3e60:	c9 2e       	mov	r12, r25
    3e62:	95 e1       	ldi	r25, 0x15	; 21
    3e64:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    3e66:	8d e3       	ldi	r24, 0x3D	; 61
    3e68:	a8 2e       	mov	r10, r24
    3e6a:	87 e1       	ldi	r24, 0x17	; 23
    3e6c:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    3e6e:	fd e0       	ldi	r31, 0x0D	; 13
    3e70:	8f 2e       	mov	r8, r31
    3e72:	f5 e1       	ldi	r31, 0x15	; 21
    3e74:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    3e76:	e1 ef       	ldi	r30, 0xF1	; 241
    3e78:	6e 2e       	mov	r6, r30
    3e7a:	e4 e1       	ldi	r30, 0x14	; 20
    3e7c:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    3e7e:	35 e4       	ldi	r19, 0x45	; 69
    3e80:	43 2e       	mov	r4, r19
    3e82:	37 e1       	ldi	r19, 0x17	; 23
    3e84:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    3e86:	2a e8       	ldi	r18, 0x8A	; 138
    3e88:	22 2e       	mov	r2, r18
    3e8a:	27 e1       	ldi	r18, 0x17	; 23
    3e8c:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    3e8e:	9b e7       	ldi	r25, 0x7B	; 123
    3e90:	e9 2e       	mov	r14, r25
    3e92:	94 e1       	ldi	r25, 0x14	; 20
    3e94:	f9 2e       	mov	r15, r25
    3e96:	23 c0       	rjmp	.+70     	; 0x3ede <getInstructionGroup+0x154>
    3e98:	13 96       	adiw	r26, 0x03	; 3
    3e9a:	fc 92       	st	X, r15
    3e9c:	ee 92       	st	-X, r14
    3e9e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    3ea0:	18 96       	adiw	r26, 0x08	; 8
    3ea2:	1c 93       	st	X, r17
    3ea4:	18 97       	sbiw	r26, 0x08	; 8
    3ea6:	80 91 f3 0e 	lds	r24, 0x0EF3
    3eaa:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    3eb2:	82 0f       	add	r24, r18
    3eb4:	93 1f       	adc	r25, r19
    3eb6:	90 93 f4 0e 	sts	0x0EF4, r25
    3eba:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    3ebe:	40 91 04 01 	lds	r20, 0x0104
    3ec2:	50 91 05 01 	lds	r21, 0x0105
    3ec6:	42 0f       	add	r20, r18
    3ec8:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    3eca:	fa 01       	movw	r30, r20
    3ecc:	84 91       	lpm	r24, Z+
    3ece:	8f 3f       	cpi	r24, 0xFF	; 255
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <getInstructionGroup+0x14a>
    3ed2:	b4 c0       	rjmp	.+360    	; 0x403c <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    3ed4:	1b 96       	adiw	r26, 0x0b	; 11
    3ed6:	fd 01       	movw	r30, r26
    3ed8:	32 97       	sbiw	r30, 0x02	; 2
    3eda:	b1 83       	std	Z+1, r27	; 0x01
    3edc:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    3ede:	fa 01       	movw	r30, r20
    3ee0:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    3ee2:	4f 5f       	subi	r20, 0xFF	; 255
    3ee4:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    3ee6:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    3ee8:	fa 01       	movw	r30, r20
    3eea:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    3eec:	ca 01       	movw	r24, r20
    3eee:	01 96       	adiw	r24, 0x01	; 1
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    3ef4:	90 93 05 01 	sts	0x0105, r25
    3ef8:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    3efc:	11 96       	adiw	r26, 0x01	; 1
    3efe:	2c 93       	st	X, r18
    3f00:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    3f02:	80 91 f3 0e 	lds	r24, 0x0EF3
    3f06:	90 91 f4 0e 	lds	r25, 0x0EF4
    3f0a:	9c 83       	std	Y+4, r25	; 0x04
    3f0c:	8b 83       	std	Y+3, r24	; 0x03
    3f0e:	17 96       	adiw	r26, 0x07	; 7
    3f10:	9c 93       	st	X, r25
    3f12:	8e 93       	st	-X, r24
    3f14:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    3f16:	22 23       	and	r18, r18
    3f18:	09 f4       	brne	.+2      	; 0x3f1c <getInstructionGroup+0x192>
    3f1a:	be cf       	rjmp	.-132    	; 0x3e98 <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    3f1c:	22 30       	cpi	r18, 0x02	; 2
    3f1e:	39 f1       	breq	.+78     	; 0x3f6e <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    3f20:	23 30       	cpi	r18, 0x03	; 3
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <getInstructionGroup+0x19c>
    3f24:	4b c0       	rjmp	.+150    	; 0x3fbc <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    3f26:	24 30       	cpi	r18, 0x04	; 4
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <getInstructionGroup+0x1a2>
    3f2a:	68 c0       	rjmp	.+208    	; 0x3ffc <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    3f2c:	25 30       	cpi	r18, 0x05	; 5
    3f2e:	09 f4       	brne	.+2      	; 0x3f32 <getInstructionGroup+0x1a8>
    3f30:	73 c0       	rjmp	.+230    	; 0x4018 <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    3f32:	26 30       	cpi	r18, 0x06	; 6
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <getInstructionGroup+0x1ae>
    3f36:	50 c0       	rjmp	.+160    	; 0x3fd8 <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    3f38:	27 30       	cpi	r18, 0x07	; 7
    3f3a:	09 f4       	brne	.+2      	; 0x3f3e <getInstructionGroup+0x1b4>
    3f3c:	8a c0       	rjmp	.+276    	; 0x4052 <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    3f3e:	28 30       	cpi	r18, 0x08	; 8
    3f40:	09 f4       	brne	.+2      	; 0x3f44 <getInstructionGroup+0x1ba>
    3f42:	99 c0       	rjmp	.+306    	; 0x4076 <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    3f44:	29 30       	cpi	r18, 0x09	; 9
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <getInstructionGroup+0x1c0>
    3f48:	b2 cf       	rjmp	.-156    	; 0x3eae <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    3f4a:	87 ee       	ldi	r24, 0xE7	; 231
    3f4c:	94 e1       	ldi	r25, 0x14	; 20
    3f4e:	13 96       	adiw	r26, 0x03	; 3
    3f50:	9c 93       	st	X, r25
    3f52:	8e 93       	st	-X, r24
    3f54:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    3f56:	e8 e7       	ldi	r30, 0x78	; 120
    3f58:	f4 e1       	ldi	r31, 0x14	; 20
    3f5a:	15 96       	adiw	r26, 0x05	; 5
    3f5c:	fc 93       	st	X, r31
    3f5e:	ee 93       	st	-X, r30
    3f60:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    3f62:	18 96       	adiw	r26, 0x08	; 8
    3f64:	1c 93       	st	X, r17
    3f66:	18 97       	sbiw	r26, 0x08	; 8
    3f68:	46 e0       	ldi	r20, 0x06	; 6
    3f6a:	50 e0       	ldi	r21, 0x00	; 0
    3f6c:	0d c0       	rjmp	.+26     	; 0x3f88 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    3f6e:	13 96       	adiw	r26, 0x03	; 3
    3f70:	5c 92       	st	X, r5
    3f72:	4e 92       	st	-X, r4
    3f74:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    3f76:	15 96       	adiw	r26, 0x05	; 5
    3f78:	3c 92       	st	X, r3
    3f7a:	2e 92       	st	-X, r2
    3f7c:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    3f7e:	18 96       	adiw	r26, 0x08	; 8
    3f80:	1c 93       	st	X, r17
    3f82:	18 97       	sbiw	r26, 0x08	; 8
    3f84:	46 e0       	ldi	r20, 0x06	; 6
    3f86:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    3f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f90:	84 91       	lpm	r24, Z+
    3f92:	eb 81       	ldd	r30, Y+3	; 0x03
    3f94:	fc 81       	ldd	r31, Y+4	; 0x04
    3f96:	81 93       	st	Z+, r24
    3f98:	fc 83       	std	Y+4, r31	; 0x04
    3f9a:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    3f9c:	89 81       	ldd	r24, Y+1	; 0x01
    3f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa0:	01 96       	adiw	r24, 0x01	; 1
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    3fa6:	2f 5f       	subi	r18, 0xFF	; 255
    3fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3faa:	24 17       	cp	r18, r20
    3fac:	35 07       	cpc	r19, r21
    3fae:	74 f3       	brlt	.-36     	; 0x3f8c <getInstructionGroup+0x202>
    3fb0:	9a 01       	movw	r18, r20
    3fb2:	80 91 f3 0e 	lds	r24, 0x0EF3
    3fb6:	90 91 f4 0e 	lds	r25, 0x0EF4
    3fba:	7b cf       	rjmp	.-266    	; 0x3eb2 <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    3fbc:	13 96       	adiw	r26, 0x03	; 3
    3fbe:	9c 92       	st	X, r9
    3fc0:	8e 92       	st	-X, r8
    3fc2:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    3fc4:	15 96       	adiw	r26, 0x05	; 5
    3fc6:	7c 92       	st	X, r7
    3fc8:	6e 92       	st	-X, r6
    3fca:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    3fcc:	18 96       	adiw	r26, 0x08	; 8
    3fce:	1c 92       	st	X, r1
    3fd0:	18 97       	sbiw	r26, 0x08	; 8
    3fd2:	4a e0       	ldi	r20, 0x0A	; 10
    3fd4:	50 e0       	ldi	r21, 0x00	; 0
    3fd6:	d8 cf       	rjmp	.-80     	; 0x3f88 <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    3fd8:	e7 e0       	ldi	r30, 0x07	; 7
    3fda:	fa e1       	ldi	r31, 0x1A	; 26
    3fdc:	13 96       	adiw	r26, 0x03	; 3
    3fde:	fc 93       	st	X, r31
    3fe0:	ee 93       	st	-X, r30
    3fe2:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    3fe4:	89 e6       	ldi	r24, 0x69	; 105
    3fe6:	98 e1       	ldi	r25, 0x18	; 24
    3fe8:	15 96       	adiw	r26, 0x05	; 5
    3fea:	9c 93       	st	X, r25
    3fec:	8e 93       	st	-X, r24
    3fee:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    3ff0:	18 96       	adiw	r26, 0x08	; 8
    3ff2:	1c 92       	st	X, r1
    3ff4:	18 97       	sbiw	r26, 0x08	; 8
    3ff6:	42 e1       	ldi	r20, 0x12	; 18
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	c6 cf       	rjmp	.-116    	; 0x3f88 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    3ffc:	18 96       	adiw	r26, 0x08	; 8
    3ffe:	1c 93       	st	X, r17
    4000:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4002:	13 96       	adiw	r26, 0x03	; 3
    4004:	dc 92       	st	X, r13
    4006:	ce 92       	st	-X, r12
    4008:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    400a:	15 96       	adiw	r26, 0x05	; 5
    400c:	bc 92       	st	X, r11
    400e:	ae 92       	st	-X, r10
    4010:	14 97       	sbiw	r26, 0x04	; 4
    4012:	4e e0       	ldi	r20, 0x0E	; 14
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	b8 cf       	rjmp	.-144    	; 0x3f88 <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    4018:	ee ef       	ldi	r30, 0xFE	; 254
    401a:	f7 e1       	ldi	r31, 0x17	; 23
    401c:	13 96       	adiw	r26, 0x03	; 3
    401e:	fc 93       	st	X, r31
    4020:	ee 93       	st	-X, r30
    4022:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    4024:	8a ec       	ldi	r24, 0xCA	; 202
    4026:	97 e1       	ldi	r25, 0x17	; 23
    4028:	15 96       	adiw	r26, 0x05	; 5
    402a:	9c 93       	st	X, r25
    402c:	8e 93       	st	-X, r24
    402e:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4030:	18 96       	adiw	r26, 0x08	; 8
    4032:	1c 92       	st	X, r1
    4034:	18 97       	sbiw	r26, 0x08	; 8
    4036:	42 e1       	ldi	r20, 0x12	; 18
    4038:	50 e0       	ldi	r21, 0x00	; 0
    403a:	a6 cf       	rjmp	.-180    	; 0x3f88 <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    403c:	1a 96       	adiw	r26, 0x0a	; 10
    403e:	1c 92       	st	X, r1
    4040:	1e 92       	st	-X, r1
    4042:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4044:	4f 5f       	subi	r20, 0xFF	; 255
    4046:	5f 4f       	sbci	r21, 0xFF	; 255
    4048:	50 93 05 01 	sts	0x0105, r21
    404c:	40 93 04 01 	sts	0x0104, r20
    4050:	c6 ce       	rjmp	.-628    	; 0x3dde <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    4052:	ec ee       	ldi	r30, 0xEC	; 236
    4054:	fb e1       	ldi	r31, 0x1B	; 27
    4056:	13 96       	adiw	r26, 0x03	; 3
    4058:	fc 93       	st	X, r31
    405a:	ee 93       	st	-X, r30
    405c:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    405e:	8d e4       	ldi	r24, 0x4D	; 77
    4060:	99 e1       	ldi	r25, 0x19	; 25
    4062:	15 96       	adiw	r26, 0x05	; 5
    4064:	9c 93       	st	X, r25
    4066:	8e 93       	st	-X, r24
    4068:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    406a:	18 96       	adiw	r26, 0x08	; 8
    406c:	1c 92       	st	X, r1
    406e:	18 97       	sbiw	r26, 0x08	; 8
    4070:	48 e1       	ldi	r20, 0x18	; 24
    4072:	50 e0       	ldi	r21, 0x00	; 0
    4074:	89 cf       	rjmp	.-238    	; 0x3f88 <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    4076:	e8 e8       	ldi	r30, 0x88	; 136
    4078:	f4 e1       	ldi	r31, 0x14	; 20
    407a:	13 96       	adiw	r26, 0x03	; 3
    407c:	fc 93       	st	X, r31
    407e:	ee 93       	st	-X, r30
    4080:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    4082:	8c e7       	ldi	r24, 0x7C	; 124
    4084:	94 e1       	ldi	r25, 0x14	; 20
    4086:	15 96       	adiw	r26, 0x05	; 5
    4088:	9c 93       	st	X, r25
    408a:	8e 93       	st	-X, r24
    408c:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	9a 81       	ldd	r25, Y+2	; 0x02
    4092:	fc 01       	movw	r30, r24
    4094:	45 91       	lpm	r20, Z+
    4096:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    4098:	90 93 05 01 	sts	0x0105, r25
    409c:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    40a0:	44 0f       	add	r20, r20
    40a2:	55 1f       	adc	r21, r21
    40a4:	44 0f       	add	r20, r20
    40a6:	55 1f       	adc	r21, r21
    40a8:	44 0f       	add	r20, r20
    40aa:	55 1f       	adc	r21, r21
    40ac:	4e 5f       	subi	r20, 0xFE	; 254
    40ae:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    40b0:	18 96       	adiw	r26, 0x08	; 8
    40b2:	1c 92       	st	X, r1
    40b4:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    40b6:	14 16       	cp	r1, r20
    40b8:	15 06       	cpc	r1, r21
    40ba:	0c f4       	brge	.+2      	; 0x40be <getInstructionGroup+0x334>
    40bc:	65 cf       	rjmp	.-310    	; 0x3f88 <getInstructionGroup+0x1fe>
    40be:	78 cf       	rjmp	.-272    	; 0x3fb0 <getInstructionGroup+0x226>

000040c0 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    40c0:	cf 93       	push	r28
    40c2:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    40c4:	a0 91 f3 0c 	lds	r26, 0x0CF3
    40c8:	b0 91 f4 0c 	lds	r27, 0x0CF4
    40cc:	a2 30       	cpi	r26, 0x02	; 2
    40ce:	b1 05       	cpc	r27, r1
    40d0:	78 f4       	brcc	.+30     	; 0x40f0 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    40d2:	11 97       	sbiw	r26, 0x01	; 1
    40d4:	81 f1       	breq	.+96     	; 0x4136 <getPreviousGroup+0x76>
    40d6:	c0 91 04 01 	lds	r28, 0x0104
    40da:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    40de:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <getInstructionGroup>
			dataPtr = tmpPtr;
    40e2:	d0 93 05 01 	sts	0x0105, r29
    40e6:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    40f0:	fd 01       	movw	r30, r26
    40f2:	31 97       	sbiw	r30, 0x01	; 1
    40f4:	f0 93 f4 0c 	sts	0x0CF4, r31
    40f8:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    40fc:	aa 0f       	add	r26, r26
    40fe:	bb 1f       	adc	r27, r27
    4100:	af 50       	subi	r26, 0x0F	; 15
    4102:	b3 4f       	sbci	r27, 0xF3	; 243
    4104:	ee 0f       	add	r30, r30
    4106:	ff 1f       	adc	r31, r31
    4108:	eb 50       	subi	r30, 0x0B	; 11
    410a:	f3 4f       	sbci	r31, 0xF3	; 243
    410c:	2d 91       	ld	r18, X+
    410e:	3c 91       	ld	r19, X
    4110:	80 81       	ld	r24, Z
    4112:	91 81       	ldd	r25, Z+1	; 0x01
    4114:	28 0f       	add	r18, r24
    4116:	39 1f       	adc	r19, r25
    4118:	80 91 04 01 	lds	r24, 0x0104
    411c:	90 91 05 01 	lds	r25, 0x0105
    4120:	82 1b       	sub	r24, r18
    4122:	93 0b       	sbc	r25, r19
    4124:	90 93 05 01 	sts	0x0105, r25
    4128:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    412c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    4136:	80 91 f5 0c 	lds	r24, 0x0CF5
    413a:	90 91 f6 0c 	lds	r25, 0x0CF6
    413e:	c0 91 04 01 	lds	r28, 0x0104
    4142:	d0 91 05 01 	lds	r29, 0x0105
    4146:	c8 1b       	sub	r28, r24
    4148:	d9 0b       	sbc	r29, r25
    414a:	d0 93 05 01 	sts	0x0105, r29
    414e:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    4152:	10 92 f4 0c 	sts	0x0CF4, r1
    4156:	10 92 f3 0c 	sts	0x0CF3, r1
    415a:	c1 cf       	rjmp	.-126    	; 0x40de <getPreviousGroup+0x1e>

0000415c <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    415c:	e0 91 f3 0c 	lds	r30, 0x0CF3
    4160:	f0 91 f4 0c 	lds	r31, 0x0CF4
    4164:	ee 0f       	add	r30, r30
    4166:	ff 1f       	adc	r31, r31
    4168:	ed 50       	subi	r30, 0x0D	; 13
    416a:	f3 4f       	sbci	r31, 0xF3	; 243
    416c:	20 81       	ld	r18, Z
    416e:	31 81       	ldd	r19, Z+1	; 0x01
    4170:	80 91 04 01 	lds	r24, 0x0104
    4174:	90 91 05 01 	lds	r25, 0x0105
    4178:	82 1b       	sub	r24, r18
    417a:	93 0b       	sbc	r25, r19
    417c:	90 93 05 01 	sts	0x0105, r25
    4180:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    4184:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <getInstructionGroup>
}
    4188:	08 95       	ret

0000418a <getNextGroup>:

struct instruction_group *getNextGroup() {
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    418e:	c0 91 04 01 	lds	r28, 0x0104
    4192:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    4196:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <getInstructionGroup>
    419a:	ac 01       	movw	r20, r24

	if(ig != 0) {
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	d9 f0       	breq	.+54     	; 0x41d6 <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    41a0:	20 91 f3 0c 	lds	r18, 0x0CF3
    41a4:	30 91 f4 0c 	lds	r19, 0x0CF4
    41a8:	f9 01       	movw	r30, r18
    41aa:	ee 0f       	add	r30, r30
    41ac:	ff 1f       	adc	r31, r31
    41ae:	eb 50       	subi	r30, 0x0B	; 11
    41b0:	f3 4f       	sbci	r31, 0xF3	; 243
    41b2:	80 91 04 01 	lds	r24, 0x0104
    41b6:	90 91 05 01 	lds	r25, 0x0105
    41ba:	8c 1b       	sub	r24, r28
    41bc:	9d 0b       	sbc	r25, r29
    41be:	91 83       	std	Z+1, r25	; 0x01
    41c0:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    41c2:	2f 5f       	subi	r18, 0xFF	; 255
    41c4:	3f 4f       	sbci	r19, 0xFF	; 255
    41c6:	30 93 f4 0c 	sts	0x0CF4, r19
    41ca:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    41ce:	ca 01       	movw	r24, r20
    41d0:	df 91       	pop	r29
    41d2:	cf 91       	pop	r28
    41d4:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    41d6:	0e 94 ae 20 	call	0x415c	; 0x415c <getLastGroup>
    41da:	ac 01       	movw	r20, r24
    41dc:	f8 cf       	rjmp	.-16     	; 0x41ce <getNextGroup+0x44>

000041de <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    41de:	10 92 f4 0c 	sts	0x0CF4, r1
    41e2:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    41e6:	8e ef       	ldi	r24, 0xFE	; 254
    41e8:	91 e0       	ldi	r25, 0x01	; 1
    41ea:	e5 ef       	ldi	r30, 0xF5	; 245
    41ec:	fc e0       	ldi	r31, 0x0C	; 12
    41ee:	df 01       	movw	r26, r30
    41f0:	9c 01       	movw	r18, r24
    41f2:	1d 92       	st	X+, r1
    41f4:	21 50       	subi	r18, 0x01	; 1
    41f6:	30 40       	sbci	r19, 0x00	; 0
    41f8:	e1 f7       	brne	.-8      	; 0x41f2 <initDecoder+0x14>
}
    41fa:	08 95       	ret

000041fc <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    41fc:	9c 01       	movw	r18, r24
    41fe:	97 fd       	sbrc	r25, 7
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <abs+0xa>
    4202:	c9 01       	movw	r24, r18
    4204:	08 95       	ret
    4206:	30 95       	com	r19
    4208:	21 95       	neg	r18
    420a:	3f 4f       	sbci	r19, 0xFF	; 255
    420c:	c9 01       	movw	r24, r18
    420e:	08 95       	ret

00004210 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    4210:	86 30       	cpi	r24, 0x06	; 6
    4212:	91 05       	cpc	r25, r1
    4214:	24 f0       	brlt	.+8      	; 0x421e <setRGBColor+0xe>
		if(led == 6) {
    4216:	86 30       	cpi	r24, 0x06	; 6
    4218:	91 05       	cpc	r25, r1
    421a:	89 f0       	breq	.+34     	; 0x423e <setRGBColor+0x2e>
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	fc 01       	movw	r30, r24
    4220:	ee 0f       	add	r30, r30
    4222:	ff 1f       	adc	r31, r31
    4224:	e8 0f       	add	r30, r24
    4226:	f9 1f       	adc	r31, r25
    4228:	ee 0f       	add	r30, r30
    422a:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    422c:	e5 51       	subi	r30, 0x15	; 21
    422e:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    4230:	71 83       	std	Z+1, r23	; 0x01
    4232:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    4234:	55 83       	std	Z+5, r21	; 0x05
    4236:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    4238:	33 83       	std	Z+3, r19	; 0x03
    423a:	22 83       	std	Z+2, r18	; 0x02



}
    423c:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    423e:	e2 e4       	ldi	r30, 0x42	; 66
    4240:	f0 e0       	ldi	r31, 0x00	; 0
    4242:	f4 cf       	rjmp	.-24     	; 0x422c <setRGBColor+0x1c>

00004244 <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    4244:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    4246:	86 30       	cpi	r24, 0x06	; 6
    4248:	91 05       	cpc	r25, r1
    424a:	24 f0       	brlt	.+8      	; 0x4254 <getRGBColor+0x10>
		if(led == 6) {
    424c:	86 30       	cpi	r24, 0x06	; 6
    424e:	91 05       	cpc	r25, r1
    4250:	e1 f0       	breq	.+56     	; 0x428a <getRGBColor+0x46>
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	fc 01       	movw	r30, r24
    4256:	ee 0f       	add	r30, r30
    4258:	ff 1f       	adc	r31, r31
    425a:	e8 0f       	add	r30, r24
    425c:	f9 1f       	adc	r31, r25
    425e:	ee 0f       	add	r30, r30
    4260:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    4262:	e5 51       	subi	r30, 0x15	; 21
    4264:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    4266:	80 81       	ld	r24, Z
    4268:	91 81       	ldd	r25, Z+1	; 0x01
    426a:	11 96       	adiw	r26, 0x01	; 1
    426c:	9c 93       	st	X, r25
    426e:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    4270:	84 81       	ldd	r24, Z+4	; 0x04
    4272:	95 81       	ldd	r25, Z+5	; 0x05
    4274:	13 96       	adiw	r26, 0x03	; 3
    4276:	9c 93       	st	X, r25
    4278:	8e 93       	st	-X, r24
    427a:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    427c:	82 81       	ldd	r24, Z+2	; 0x02
    427e:	93 81       	ldd	r25, Z+3	; 0x03
    4280:	15 96       	adiw	r26, 0x05	; 5
    4282:	9c 93       	st	X, r25
    4284:	8e 93       	st	-X, r24
    4286:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    4288:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    428a:	e2 e4       	ldi	r30, 0x42	; 66
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	e9 cf       	rjmp	.-46     	; 0x4262 <getRGBColor+0x1e>

00004290 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    4290:	43 e2       	ldi	r20, 0x23	; 35
    4292:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    4294:	fa 01       	movw	r30, r20
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	e5 51       	subi	r30, 0x15	; 21
    429c:	fd 4f       	sbci	r31, 0xFD	; 253
    429e:	01 90       	ld	r0, Z+
    42a0:	f0 81       	ld	r31, Z
    42a2:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    42a4:	e2 95       	swap	r30
    42a6:	f2 95       	swap	r31
    42a8:	f0 7f       	andi	r31, 0xF0	; 240
    42aa:	fe 27       	eor	r31, r30
    42ac:	e0 7f       	andi	r30, 0xF0	; 240
    42ae:	fe 27       	eor	r31, r30
    42b0:	2c e0       	ldi	r18, 0x0C	; 12
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	08 c0       	rjmp	.+16     	; 0x42c6 <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    42b6:	8b b3       	in	r24, 0x1b	; 27
    42b8:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    42ba:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    42bc:	8b b3       	in	r24, 0x1b	; 27
    42be:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    42c0:	21 15       	cp	r18, r1
    42c2:	31 05       	cpc	r19, r1
    42c4:	91 f0       	breq	.+36     	; 0x42ea <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    42c6:	21 50       	subi	r18, 0x01	; 1
    42c8:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    42ca:	cf 01       	movw	r24, r30
    42cc:	02 2e       	mov	r0, r18
    42ce:	02 c0       	rjmp	.+4      	; 0x42d4 <displayColors+0x44>
    42d0:	95 95       	asr	r25
    42d2:	87 95       	ror	r24
    42d4:	0a 94       	dec	r0
    42d6:	e2 f7       	brpl	.-8      	; 0x42d0 <displayColors+0x40>
    42d8:	80 ff       	sbrs	r24, 0
    42da:	ed cf       	rjmp	.-38     	; 0x42b6 <displayColors+0x26>
				PINHIGH(BDI);
    42dc:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    42de:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    42e0:	8b b3       	in	r24, 0x1b	; 27
    42e2:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    42e4:	21 15       	cp	r18, r1
    42e6:	31 05       	cpc	r19, r1
    42e8:	71 f7       	brne	.-36     	; 0x42c6 <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    42ea:	42 31       	cpi	r20, 0x12	; 18
    42ec:	51 05       	cpc	r21, r1
    42ee:	41 f0       	breq	.+16     	; 0x4300 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    42f0:	41 50       	subi	r20, 0x01	; 1
    42f2:	50 40       	sbci	r21, 0x00	; 0
    42f4:	57 ff       	sbrs	r21, 7
    42f6:	ce cf       	rjmp	.-100    	; 0x4294 <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    42f8:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    42fa:	8b b3       	in	r24, 0x1b	; 27
    42fc:	1b ba       	out	0x1b, r1	; 27
}
    42fe:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    4300:	8b b3       	in	r24, 0x1b	; 27
    4302:	1b ba       	out	0x1b, r1	; 27
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    4308:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    430a:	2b b3       	in	r18, 0x1b	; 27
    430c:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	88 34       	cpi	r24, 0x48	; 72
    4312:	91 05       	cpc	r25, r1
    4314:	c9 f7       	brne	.-14     	; 0x4308 <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    4316:	41 e1       	ldi	r20, 0x11	; 17
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	bc cf       	rjmp	.-136    	; 0x4294 <displayColors+0x4>

0000431c <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    431c:	10 92 ec 02 	sts	0x02EC, r1
    4320:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    4324:	10 92 f0 02 	sts	0x02F0, r1
    4328:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    432c:	10 92 ee 02 	sts	0x02EE, r1
    4330:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4334:	10 92 f2 02 	sts	0x02F2, r1
    4338:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    433c:	10 92 f6 02 	sts	0x02F6, r1
    4340:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    4344:	10 92 f4 02 	sts	0x02F4, r1
    4348:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    434c:	0e 94 48 21 	call	0x4290	; 0x4290 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4350:	84 e6       	ldi	r24, 0x64	; 100
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	90 93 ec 02 	sts	0x02EC, r25
    4358:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    435c:	10 92 f0 02 	sts	0x02F0, r1
    4360:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    4364:	10 92 ee 02 	sts	0x02EE, r1
    4368:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    436c:	90 93 f2 02 	sts	0x02F2, r25
    4370:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    4374:	10 92 f6 02 	sts	0x02F6, r1
    4378:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    437c:	10 92 f4 02 	sts	0x02F4, r1
    4380:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4384:	90 91 06 01 	lds	r25, 0x0106
    4388:	20 e0       	ldi	r18, 0x00	; 0
    438a:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    438c:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    438e:	86 b7       	in	r24, 0x36	; 54
    4390:	89 23       	and	r24, r25
    4392:	e9 f3       	breq	.-6      	; 0x438e <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    4394:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    4396:	2f 5f       	subi	r18, 0xFF	; 255
    4398:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    439a:	22 33       	cpi	r18, 0x32	; 50
    439c:	31 05       	cpc	r19, r1
    439e:	b9 f7       	brne	.-18     	; 0x438e <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    43a0:	0e 94 48 21 	call	0x4290	; 0x4290 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    43a4:	10 92 ec 02 	sts	0x02EC, r1
    43a8:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    43ac:	10 92 f0 02 	sts	0x02F0, r1
    43b0:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    43b4:	10 92 ee 02 	sts	0x02EE, r1
    43b8:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    43bc:	10 92 f2 02 	sts	0x02F2, r1
    43c0:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    43c4:	10 92 f6 02 	sts	0x02F6, r1
    43c8:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    43cc:	10 92 f4 02 	sts	0x02F4, r1
    43d0:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    43d4:	90 91 06 01 	lds	r25, 0x0106
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    43dc:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    43de:	86 b7       	in	r24, 0x36	; 54
    43e0:	89 23       	and	r24, r25
    43e2:	e9 f3       	breq	.-6      	; 0x43de <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    43e4:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    43e6:	2f 5f       	subi	r18, 0xFF	; 255
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    43ea:	22 33       	cpi	r18, 0x32	; 50
    43ec:	31 05       	cpc	r19, r1
    43ee:	b9 f7       	brne	.-18     	; 0x43de <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    43f0:	0e 94 48 21 	call	0x4290	; 0x4290 <displayColors>
}
    43f4:	08 95       	ret

000043f6 <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    43f6:	90 91 06 01 	lds	r25, 0x0106
    43fa:	86 b7       	in	r24, 0x36	; 54
    43fc:	89 23       	and	r24, r25
    43fe:	e9 f3       	breq	.-6      	; 0x43fa <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    4400:	80 e1       	ldi	r24, 0x10	; 16
    4402:	86 bf       	out	0x36, r24	; 54
}
    4404:	08 95       	ret

00004406 <copy_data>:

void copy_data(char *dest, char *src, short length) {
    4406:	cf 93       	push	r28
    4408:	df 93       	push	r29
    440a:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    440c:	14 16       	cp	r1, r20
    440e:	15 06       	cpc	r1, r21
    4410:	7c f4       	brge	.+30     	; 0x4430 <copy_data+0x2a>
    4412:	20 e0       	ldi	r18, 0x00	; 0
    4414:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4416:	fe 01       	movw	r30, r28
    4418:	e2 0f       	add	r30, r18
    441a:	f3 1f       	adc	r31, r19
    441c:	db 01       	movw	r26, r22
    441e:	a2 0f       	add	r26, r18
    4420:	b3 1f       	adc	r27, r19
    4422:	8c 91       	ld	r24, X
    4424:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    4426:	2f 5f       	subi	r18, 0xFF	; 255
    4428:	3f 4f       	sbci	r19, 0xFF	; 255
    442a:	24 17       	cp	r18, r20
    442c:	35 07       	cpc	r19, r21
    442e:	9c f3       	brlt	.-26     	; 0x4416 <copy_data+0x10>
		dest[i] = src[i];
	}
}
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	08 95       	ret

00004436 <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    4436:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    4438:	14 16       	cp	r1, r20
    443a:	15 06       	cpc	r1, r21
    443c:	64 f4       	brge	.+24     	; 0x4456 <copy_short_data+0x20>
    443e:	db 01       	movw	r26, r22
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4444:	8d 91       	ld	r24, X+
    4446:	9d 91       	ld	r25, X+
    4448:	81 93       	st	Z+, r24
    444a:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    444c:	2f 5f       	subi	r18, 0xFF	; 255
    444e:	3f 4f       	sbci	r19, 0xFF	; 255
    4450:	24 17       	cp	r18, r20
    4452:	35 07       	cpc	r19, r21
    4454:	bc f3       	brlt	.-18     	; 0x4444 <copy_short_data+0xe>
    4456:	08 95       	ret

00004458 <_fpadd_parts>:
    4458:	a0 e0       	ldi	r26, 0x00	; 0
    445a:	b0 e0       	ldi	r27, 0x00	; 0
    445c:	e2 e3       	ldi	r30, 0x32	; 50
    445e:	f2 e2       	ldi	r31, 0x22	; 34
    4460:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <__prologue_saves__>
    4464:	dc 01       	movw	r26, r24
    4466:	2b 01       	movw	r4, r22
    4468:	fa 01       	movw	r30, r20
    446a:	9c 91       	ld	r25, X
    446c:	92 30       	cpi	r25, 0x02	; 2
    446e:	08 f4       	brcc	.+2      	; 0x4472 <_fpadd_parts+0x1a>
    4470:	39 c1       	rjmp	.+626    	; 0x46e4 <_fpadd_parts+0x28c>
    4472:	eb 01       	movw	r28, r22
    4474:	88 81       	ld	r24, Y
    4476:	82 30       	cpi	r24, 0x02	; 2
    4478:	08 f4       	brcc	.+2      	; 0x447c <_fpadd_parts+0x24>
    447a:	33 c1       	rjmp	.+614    	; 0x46e2 <_fpadd_parts+0x28a>
    447c:	94 30       	cpi	r25, 0x04	; 4
    447e:	69 f4       	brne	.+26     	; 0x449a <_fpadd_parts+0x42>
    4480:	84 30       	cpi	r24, 0x04	; 4
    4482:	09 f0       	breq	.+2      	; 0x4486 <_fpadd_parts+0x2e>
    4484:	2f c1       	rjmp	.+606    	; 0x46e4 <_fpadd_parts+0x28c>
    4486:	11 96       	adiw	r26, 0x01	; 1
    4488:	9c 91       	ld	r25, X
    448a:	11 97       	sbiw	r26, 0x01	; 1
    448c:	89 81       	ldd	r24, Y+1	; 0x01
    448e:	98 17       	cp	r25, r24
    4490:	09 f4       	brne	.+2      	; 0x4494 <_fpadd_parts+0x3c>
    4492:	28 c1       	rjmp	.+592    	; 0x46e4 <_fpadd_parts+0x28c>
    4494:	a7 e0       	ldi	r26, 0x07	; 7
    4496:	b1 e0       	ldi	r27, 0x01	; 1
    4498:	25 c1       	rjmp	.+586    	; 0x46e4 <_fpadd_parts+0x28c>
    449a:	84 30       	cpi	r24, 0x04	; 4
    449c:	09 f4       	brne	.+2      	; 0x44a0 <_fpadd_parts+0x48>
    449e:	21 c1       	rjmp	.+578    	; 0x46e2 <_fpadd_parts+0x28a>
    44a0:	82 30       	cpi	r24, 0x02	; 2
    44a2:	a9 f4       	brne	.+42     	; 0x44ce <_fpadd_parts+0x76>
    44a4:	92 30       	cpi	r25, 0x02	; 2
    44a6:	09 f0       	breq	.+2      	; 0x44aa <_fpadd_parts+0x52>
    44a8:	1d c1       	rjmp	.+570    	; 0x46e4 <_fpadd_parts+0x28c>
    44aa:	9a 01       	movw	r18, r20
    44ac:	ad 01       	movw	r20, r26
    44ae:	88 e0       	ldi	r24, 0x08	; 8
    44b0:	ea 01       	movw	r28, r20
    44b2:	09 90       	ld	r0, Y+
    44b4:	ae 01       	movw	r20, r28
    44b6:	e9 01       	movw	r28, r18
    44b8:	09 92       	st	Y+, r0
    44ba:	9e 01       	movw	r18, r28
    44bc:	81 50       	subi	r24, 0x01	; 1
    44be:	c1 f7       	brne	.-16     	; 0x44b0 <_fpadd_parts+0x58>
    44c0:	e2 01       	movw	r28, r4
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	11 96       	adiw	r26, 0x01	; 1
    44c6:	9c 91       	ld	r25, X
    44c8:	89 23       	and	r24, r25
    44ca:	81 83       	std	Z+1, r24	; 0x01
    44cc:	08 c1       	rjmp	.+528    	; 0x46de <_fpadd_parts+0x286>
    44ce:	92 30       	cpi	r25, 0x02	; 2
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <_fpadd_parts+0x7c>
    44d2:	07 c1       	rjmp	.+526    	; 0x46e2 <_fpadd_parts+0x28a>
    44d4:	12 96       	adiw	r26, 0x02	; 2
    44d6:	2d 90       	ld	r2, X+
    44d8:	3c 90       	ld	r3, X
    44da:	13 97       	sbiw	r26, 0x03	; 3
    44dc:	eb 01       	movw	r28, r22
    44de:	8a 81       	ldd	r24, Y+2	; 0x02
    44e0:	9b 81       	ldd	r25, Y+3	; 0x03
    44e2:	14 96       	adiw	r26, 0x04	; 4
    44e4:	ad 90       	ld	r10, X+
    44e6:	bd 90       	ld	r11, X+
    44e8:	cd 90       	ld	r12, X+
    44ea:	dc 90       	ld	r13, X
    44ec:	17 97       	sbiw	r26, 0x07	; 7
    44ee:	ec 80       	ldd	r14, Y+4	; 0x04
    44f0:	fd 80       	ldd	r15, Y+5	; 0x05
    44f2:	0e 81       	ldd	r16, Y+6	; 0x06
    44f4:	1f 81       	ldd	r17, Y+7	; 0x07
    44f6:	91 01       	movw	r18, r2
    44f8:	28 1b       	sub	r18, r24
    44fa:	39 0b       	sbc	r19, r25
    44fc:	b9 01       	movw	r22, r18
    44fe:	37 ff       	sbrs	r19, 7
    4500:	04 c0       	rjmp	.+8      	; 0x450a <_fpadd_parts+0xb2>
    4502:	66 27       	eor	r22, r22
    4504:	77 27       	eor	r23, r23
    4506:	62 1b       	sub	r22, r18
    4508:	73 0b       	sbc	r23, r19
    450a:	60 32       	cpi	r22, 0x20	; 32
    450c:	71 05       	cpc	r23, r1
    450e:	0c f0       	brlt	.+2      	; 0x4512 <_fpadd_parts+0xba>
    4510:	61 c0       	rjmp	.+194    	; 0x45d4 <_fpadd_parts+0x17c>
    4512:	12 16       	cp	r1, r18
    4514:	13 06       	cpc	r1, r19
    4516:	6c f5       	brge	.+90     	; 0x4572 <_fpadd_parts+0x11a>
    4518:	37 01       	movw	r6, r14
    451a:	48 01       	movw	r8, r16
    451c:	06 2e       	mov	r0, r22
    451e:	04 c0       	rjmp	.+8      	; 0x4528 <_fpadd_parts+0xd0>
    4520:	96 94       	lsr	r9
    4522:	87 94       	ror	r8
    4524:	77 94       	ror	r7
    4526:	67 94       	ror	r6
    4528:	0a 94       	dec	r0
    452a:	d2 f7       	brpl	.-12     	; 0x4520 <_fpadd_parts+0xc8>
    452c:	21 e0       	ldi	r18, 0x01	; 1
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e0       	ldi	r20, 0x00	; 0
    4532:	50 e0       	ldi	r21, 0x00	; 0
    4534:	04 c0       	rjmp	.+8      	; 0x453e <_fpadd_parts+0xe6>
    4536:	22 0f       	add	r18, r18
    4538:	33 1f       	adc	r19, r19
    453a:	44 1f       	adc	r20, r20
    453c:	55 1f       	adc	r21, r21
    453e:	6a 95       	dec	r22
    4540:	d2 f7       	brpl	.-12     	; 0x4536 <_fpadd_parts+0xde>
    4542:	21 50       	subi	r18, 0x01	; 1
    4544:	30 40       	sbci	r19, 0x00	; 0
    4546:	40 40       	sbci	r20, 0x00	; 0
    4548:	50 40       	sbci	r21, 0x00	; 0
    454a:	2e 21       	and	r18, r14
    454c:	3f 21       	and	r19, r15
    454e:	40 23       	and	r20, r16
    4550:	51 23       	and	r21, r17
    4552:	21 15       	cp	r18, r1
    4554:	31 05       	cpc	r19, r1
    4556:	41 05       	cpc	r20, r1
    4558:	51 05       	cpc	r21, r1
    455a:	21 f0       	breq	.+8      	; 0x4564 <_fpadd_parts+0x10c>
    455c:	21 e0       	ldi	r18, 0x01	; 1
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e0       	ldi	r20, 0x00	; 0
    4562:	50 e0       	ldi	r21, 0x00	; 0
    4564:	79 01       	movw	r14, r18
    4566:	8a 01       	movw	r16, r20
    4568:	e6 28       	or	r14, r6
    456a:	f7 28       	or	r15, r7
    456c:	08 29       	or	r16, r8
    456e:	19 29       	or	r17, r9
    4570:	3c c0       	rjmp	.+120    	; 0x45ea <_fpadd_parts+0x192>
    4572:	23 2b       	or	r18, r19
    4574:	d1 f1       	breq	.+116    	; 0x45ea <_fpadd_parts+0x192>
    4576:	26 0e       	add	r2, r22
    4578:	37 1e       	adc	r3, r23
    457a:	35 01       	movw	r6, r10
    457c:	46 01       	movw	r8, r12
    457e:	06 2e       	mov	r0, r22
    4580:	04 c0       	rjmp	.+8      	; 0x458a <_fpadd_parts+0x132>
    4582:	96 94       	lsr	r9
    4584:	87 94       	ror	r8
    4586:	77 94       	ror	r7
    4588:	67 94       	ror	r6
    458a:	0a 94       	dec	r0
    458c:	d2 f7       	brpl	.-12     	; 0x4582 <_fpadd_parts+0x12a>
    458e:	21 e0       	ldi	r18, 0x01	; 1
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e0       	ldi	r20, 0x00	; 0
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	04 c0       	rjmp	.+8      	; 0x45a0 <_fpadd_parts+0x148>
    4598:	22 0f       	add	r18, r18
    459a:	33 1f       	adc	r19, r19
    459c:	44 1f       	adc	r20, r20
    459e:	55 1f       	adc	r21, r21
    45a0:	6a 95       	dec	r22
    45a2:	d2 f7       	brpl	.-12     	; 0x4598 <_fpadd_parts+0x140>
    45a4:	21 50       	subi	r18, 0x01	; 1
    45a6:	30 40       	sbci	r19, 0x00	; 0
    45a8:	40 40       	sbci	r20, 0x00	; 0
    45aa:	50 40       	sbci	r21, 0x00	; 0
    45ac:	2a 21       	and	r18, r10
    45ae:	3b 21       	and	r19, r11
    45b0:	4c 21       	and	r20, r12
    45b2:	5d 21       	and	r21, r13
    45b4:	21 15       	cp	r18, r1
    45b6:	31 05       	cpc	r19, r1
    45b8:	41 05       	cpc	r20, r1
    45ba:	51 05       	cpc	r21, r1
    45bc:	21 f0       	breq	.+8      	; 0x45c6 <_fpadd_parts+0x16e>
    45be:	21 e0       	ldi	r18, 0x01	; 1
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	40 e0       	ldi	r20, 0x00	; 0
    45c4:	50 e0       	ldi	r21, 0x00	; 0
    45c6:	59 01       	movw	r10, r18
    45c8:	6a 01       	movw	r12, r20
    45ca:	a6 28       	or	r10, r6
    45cc:	b7 28       	or	r11, r7
    45ce:	c8 28       	or	r12, r8
    45d0:	d9 28       	or	r13, r9
    45d2:	0b c0       	rjmp	.+22     	; 0x45ea <_fpadd_parts+0x192>
    45d4:	82 15       	cp	r24, r2
    45d6:	93 05       	cpc	r25, r3
    45d8:	2c f0       	brlt	.+10     	; 0x45e4 <_fpadd_parts+0x18c>
    45da:	1c 01       	movw	r2, r24
    45dc:	aa 24       	eor	r10, r10
    45de:	bb 24       	eor	r11, r11
    45e0:	65 01       	movw	r12, r10
    45e2:	03 c0       	rjmp	.+6      	; 0x45ea <_fpadd_parts+0x192>
    45e4:	ee 24       	eor	r14, r14
    45e6:	ff 24       	eor	r15, r15
    45e8:	87 01       	movw	r16, r14
    45ea:	11 96       	adiw	r26, 0x01	; 1
    45ec:	9c 91       	ld	r25, X
    45ee:	d2 01       	movw	r26, r4
    45f0:	11 96       	adiw	r26, 0x01	; 1
    45f2:	8c 91       	ld	r24, X
    45f4:	98 17       	cp	r25, r24
    45f6:	09 f4       	brne	.+2      	; 0x45fa <_fpadd_parts+0x1a2>
    45f8:	45 c0       	rjmp	.+138    	; 0x4684 <_fpadd_parts+0x22c>
    45fa:	99 23       	and	r25, r25
    45fc:	39 f0       	breq	.+14     	; 0x460c <_fpadd_parts+0x1b4>
    45fe:	a8 01       	movw	r20, r16
    4600:	97 01       	movw	r18, r14
    4602:	2a 19       	sub	r18, r10
    4604:	3b 09       	sbc	r19, r11
    4606:	4c 09       	sbc	r20, r12
    4608:	5d 09       	sbc	r21, r13
    460a:	06 c0       	rjmp	.+12     	; 0x4618 <_fpadd_parts+0x1c0>
    460c:	a6 01       	movw	r20, r12
    460e:	95 01       	movw	r18, r10
    4610:	2e 19       	sub	r18, r14
    4612:	3f 09       	sbc	r19, r15
    4614:	40 0b       	sbc	r20, r16
    4616:	51 0b       	sbc	r21, r17
    4618:	57 fd       	sbrc	r21, 7
    461a:	08 c0       	rjmp	.+16     	; 0x462c <_fpadd_parts+0x1d4>
    461c:	11 82       	std	Z+1, r1	; 0x01
    461e:	33 82       	std	Z+3, r3	; 0x03
    4620:	22 82       	std	Z+2, r2	; 0x02
    4622:	24 83       	std	Z+4, r18	; 0x04
    4624:	35 83       	std	Z+5, r19	; 0x05
    4626:	46 83       	std	Z+6, r20	; 0x06
    4628:	57 83       	std	Z+7, r21	; 0x07
    462a:	1d c0       	rjmp	.+58     	; 0x4666 <_fpadd_parts+0x20e>
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	81 83       	std	Z+1, r24	; 0x01
    4630:	33 82       	std	Z+3, r3	; 0x03
    4632:	22 82       	std	Z+2, r2	; 0x02
    4634:	88 27       	eor	r24, r24
    4636:	99 27       	eor	r25, r25
    4638:	dc 01       	movw	r26, r24
    463a:	82 1b       	sub	r24, r18
    463c:	93 0b       	sbc	r25, r19
    463e:	a4 0b       	sbc	r26, r20
    4640:	b5 0b       	sbc	r27, r21
    4642:	84 83       	std	Z+4, r24	; 0x04
    4644:	95 83       	std	Z+5, r25	; 0x05
    4646:	a6 83       	std	Z+6, r26	; 0x06
    4648:	b7 83       	std	Z+7, r27	; 0x07
    464a:	0d c0       	rjmp	.+26     	; 0x4666 <_fpadd_parts+0x20e>
    464c:	22 0f       	add	r18, r18
    464e:	33 1f       	adc	r19, r19
    4650:	44 1f       	adc	r20, r20
    4652:	55 1f       	adc	r21, r21
    4654:	24 83       	std	Z+4, r18	; 0x04
    4656:	35 83       	std	Z+5, r19	; 0x05
    4658:	46 83       	std	Z+6, r20	; 0x06
    465a:	57 83       	std	Z+7, r21	; 0x07
    465c:	82 81       	ldd	r24, Z+2	; 0x02
    465e:	93 81       	ldd	r25, Z+3	; 0x03
    4660:	01 97       	sbiw	r24, 0x01	; 1
    4662:	93 83       	std	Z+3, r25	; 0x03
    4664:	82 83       	std	Z+2, r24	; 0x02
    4666:	24 81       	ldd	r18, Z+4	; 0x04
    4668:	35 81       	ldd	r19, Z+5	; 0x05
    466a:	46 81       	ldd	r20, Z+6	; 0x06
    466c:	57 81       	ldd	r21, Z+7	; 0x07
    466e:	da 01       	movw	r26, r20
    4670:	c9 01       	movw	r24, r18
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	a1 09       	sbc	r26, r1
    4676:	b1 09       	sbc	r27, r1
    4678:	8f 5f       	subi	r24, 0xFF	; 255
    467a:	9f 4f       	sbci	r25, 0xFF	; 255
    467c:	af 4f       	sbci	r26, 0xFF	; 255
    467e:	bf 43       	sbci	r27, 0x3F	; 63
    4680:	28 f3       	brcs	.-54     	; 0x464c <_fpadd_parts+0x1f4>
    4682:	0b c0       	rjmp	.+22     	; 0x469a <_fpadd_parts+0x242>
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	33 82       	std	Z+3, r3	; 0x03
    4688:	22 82       	std	Z+2, r2	; 0x02
    468a:	ea 0c       	add	r14, r10
    468c:	fb 1c       	adc	r15, r11
    468e:	0c 1d       	adc	r16, r12
    4690:	1d 1d       	adc	r17, r13
    4692:	e4 82       	std	Z+4, r14	; 0x04
    4694:	f5 82       	std	Z+5, r15	; 0x05
    4696:	06 83       	std	Z+6, r16	; 0x06
    4698:	17 83       	std	Z+7, r17	; 0x07
    469a:	83 e0       	ldi	r24, 0x03	; 3
    469c:	80 83       	st	Z, r24
    469e:	24 81       	ldd	r18, Z+4	; 0x04
    46a0:	35 81       	ldd	r19, Z+5	; 0x05
    46a2:	46 81       	ldd	r20, Z+6	; 0x06
    46a4:	57 81       	ldd	r21, Z+7	; 0x07
    46a6:	57 ff       	sbrs	r21, 7
    46a8:	1a c0       	rjmp	.+52     	; 0x46de <_fpadd_parts+0x286>
    46aa:	c9 01       	movw	r24, r18
    46ac:	aa 27       	eor	r26, r26
    46ae:	97 fd       	sbrc	r25, 7
    46b0:	a0 95       	com	r26
    46b2:	ba 2f       	mov	r27, r26
    46b4:	81 70       	andi	r24, 0x01	; 1
    46b6:	90 70       	andi	r25, 0x00	; 0
    46b8:	a0 70       	andi	r26, 0x00	; 0
    46ba:	b0 70       	andi	r27, 0x00	; 0
    46bc:	56 95       	lsr	r21
    46be:	47 95       	ror	r20
    46c0:	37 95       	ror	r19
    46c2:	27 95       	ror	r18
    46c4:	82 2b       	or	r24, r18
    46c6:	93 2b       	or	r25, r19
    46c8:	a4 2b       	or	r26, r20
    46ca:	b5 2b       	or	r27, r21
    46cc:	84 83       	std	Z+4, r24	; 0x04
    46ce:	95 83       	std	Z+5, r25	; 0x05
    46d0:	a6 83       	std	Z+6, r26	; 0x06
    46d2:	b7 83       	std	Z+7, r27	; 0x07
    46d4:	82 81       	ldd	r24, Z+2	; 0x02
    46d6:	93 81       	ldd	r25, Z+3	; 0x03
    46d8:	01 96       	adiw	r24, 0x01	; 1
    46da:	93 83       	std	Z+3, r25	; 0x03
    46dc:	82 83       	std	Z+2, r24	; 0x02
    46de:	df 01       	movw	r26, r30
    46e0:	01 c0       	rjmp	.+2      	; 0x46e4 <_fpadd_parts+0x28c>
    46e2:	d2 01       	movw	r26, r4
    46e4:	cd 01       	movw	r24, r26
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
    46ea:	e2 e1       	ldi	r30, 0x12	; 18
    46ec:	0c 94 e6 27 	jmp	0x4fcc	; 0x4fcc <__epilogue_restores__>

000046f0 <__subsf3>:
    46f0:	a0 e2       	ldi	r26, 0x20	; 32
    46f2:	b0 e0       	ldi	r27, 0x00	; 0
    46f4:	ee e7       	ldi	r30, 0x7E	; 126
    46f6:	f3 e2       	ldi	r31, 0x23	; 35
    46f8:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__prologue_saves__+0x18>
    46fc:	69 83       	std	Y+1, r22	; 0x01
    46fe:	7a 83       	std	Y+2, r23	; 0x02
    4700:	8b 83       	std	Y+3, r24	; 0x03
    4702:	9c 83       	std	Y+4, r25	; 0x04
    4704:	2d 83       	std	Y+5, r18	; 0x05
    4706:	3e 83       	std	Y+6, r19	; 0x06
    4708:	4f 83       	std	Y+7, r20	; 0x07
    470a:	58 87       	std	Y+8, r21	; 0x08
    470c:	e9 e0       	ldi	r30, 0x09	; 9
    470e:	ee 2e       	mov	r14, r30
    4710:	f1 2c       	mov	r15, r1
    4712:	ec 0e       	add	r14, r28
    4714:	fd 1e       	adc	r15, r29
    4716:	ce 01       	movw	r24, r28
    4718:	01 96       	adiw	r24, 0x01	; 1
    471a:	b7 01       	movw	r22, r14
    471c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4720:	8e 01       	movw	r16, r28
    4722:	0f 5e       	subi	r16, 0xEF	; 239
    4724:	1f 4f       	sbci	r17, 0xFF	; 255
    4726:	ce 01       	movw	r24, r28
    4728:	05 96       	adiw	r24, 0x05	; 5
    472a:	b8 01       	movw	r22, r16
    472c:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4730:	8a 89       	ldd	r24, Y+18	; 0x12
    4732:	91 e0       	ldi	r25, 0x01	; 1
    4734:	89 27       	eor	r24, r25
    4736:	8a 8b       	std	Y+18, r24	; 0x12
    4738:	c7 01       	movw	r24, r14
    473a:	b8 01       	movw	r22, r16
    473c:	ae 01       	movw	r20, r28
    473e:	47 5e       	subi	r20, 0xE7	; 231
    4740:	5f 4f       	sbci	r21, 0xFF	; 255
    4742:	0e 94 2c 22 	call	0x4458	; 0x4458 <_fpadd_parts>
    4746:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    474a:	a0 96       	adiw	r28, 0x20	; 32
    474c:	e6 e0       	ldi	r30, 0x06	; 6
    474e:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <__epilogue_restores__+0x18>

00004752 <__addsf3>:
    4752:	a0 e2       	ldi	r26, 0x20	; 32
    4754:	b0 e0       	ldi	r27, 0x00	; 0
    4756:	ef ea       	ldi	r30, 0xAF	; 175
    4758:	f3 e2       	ldi	r31, 0x23	; 35
    475a:	0c 94 d6 27 	jmp	0x4fac	; 0x4fac <__prologue_saves__+0x18>
    475e:	69 83       	std	Y+1, r22	; 0x01
    4760:	7a 83       	std	Y+2, r23	; 0x02
    4762:	8b 83       	std	Y+3, r24	; 0x03
    4764:	9c 83       	std	Y+4, r25	; 0x04
    4766:	2d 83       	std	Y+5, r18	; 0x05
    4768:	3e 83       	std	Y+6, r19	; 0x06
    476a:	4f 83       	std	Y+7, r20	; 0x07
    476c:	58 87       	std	Y+8, r21	; 0x08
    476e:	f9 e0       	ldi	r31, 0x09	; 9
    4770:	ef 2e       	mov	r14, r31
    4772:	f1 2c       	mov	r15, r1
    4774:	ec 0e       	add	r14, r28
    4776:	fd 1e       	adc	r15, r29
    4778:	ce 01       	movw	r24, r28
    477a:	01 96       	adiw	r24, 0x01	; 1
    477c:	b7 01       	movw	r22, r14
    477e:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4782:	8e 01       	movw	r16, r28
    4784:	0f 5e       	subi	r16, 0xEF	; 239
    4786:	1f 4f       	sbci	r17, 0xFF	; 255
    4788:	ce 01       	movw	r24, r28
    478a:	05 96       	adiw	r24, 0x05	; 5
    478c:	b8 01       	movw	r22, r16
    478e:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4792:	c7 01       	movw	r24, r14
    4794:	b8 01       	movw	r22, r16
    4796:	ae 01       	movw	r20, r28
    4798:	47 5e       	subi	r20, 0xE7	; 231
    479a:	5f 4f       	sbci	r21, 0xFF	; 255
    479c:	0e 94 2c 22 	call	0x4458	; 0x4458 <_fpadd_parts>
    47a0:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    47a4:	a0 96       	adiw	r28, 0x20	; 32
    47a6:	e6 e0       	ldi	r30, 0x06	; 6
    47a8:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <__epilogue_restores__+0x18>

000047ac <__mulsf3>:
    47ac:	a0 e2       	ldi	r26, 0x20	; 32
    47ae:	b0 e0       	ldi	r27, 0x00	; 0
    47b0:	ec ed       	ldi	r30, 0xDC	; 220
    47b2:	f3 e2       	ldi	r31, 0x23	; 35
    47b4:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <__prologue_saves__>
    47b8:	69 83       	std	Y+1, r22	; 0x01
    47ba:	7a 83       	std	Y+2, r23	; 0x02
    47bc:	8b 83       	std	Y+3, r24	; 0x03
    47be:	9c 83       	std	Y+4, r25	; 0x04
    47c0:	2d 83       	std	Y+5, r18	; 0x05
    47c2:	3e 83       	std	Y+6, r19	; 0x06
    47c4:	4f 83       	std	Y+7, r20	; 0x07
    47c6:	58 87       	std	Y+8, r21	; 0x08
    47c8:	ce 01       	movw	r24, r28
    47ca:	01 96       	adiw	r24, 0x01	; 1
    47cc:	be 01       	movw	r22, r28
    47ce:	67 5f       	subi	r22, 0xF7	; 247
    47d0:	7f 4f       	sbci	r23, 0xFF	; 255
    47d2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    47d6:	ce 01       	movw	r24, r28
    47d8:	05 96       	adiw	r24, 0x05	; 5
    47da:	be 01       	movw	r22, r28
    47dc:	6f 5e       	subi	r22, 0xEF	; 239
    47de:	7f 4f       	sbci	r23, 0xFF	; 255
    47e0:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    47e4:	99 85       	ldd	r25, Y+9	; 0x09
    47e6:	92 30       	cpi	r25, 0x02	; 2
    47e8:	88 f0       	brcs	.+34     	; 0x480c <__mulsf3+0x60>
    47ea:	89 89       	ldd	r24, Y+17	; 0x11
    47ec:	82 30       	cpi	r24, 0x02	; 2
    47ee:	c8 f0       	brcs	.+50     	; 0x4822 <__mulsf3+0x76>
    47f0:	94 30       	cpi	r25, 0x04	; 4
    47f2:	19 f4       	brne	.+6      	; 0x47fa <__mulsf3+0x4e>
    47f4:	82 30       	cpi	r24, 0x02	; 2
    47f6:	51 f4       	brne	.+20     	; 0x480c <__mulsf3+0x60>
    47f8:	04 c0       	rjmp	.+8      	; 0x4802 <__mulsf3+0x56>
    47fa:	84 30       	cpi	r24, 0x04	; 4
    47fc:	29 f4       	brne	.+10     	; 0x4808 <__mulsf3+0x5c>
    47fe:	92 30       	cpi	r25, 0x02	; 2
    4800:	81 f4       	brne	.+32     	; 0x4822 <__mulsf3+0x76>
    4802:	87 e0       	ldi	r24, 0x07	; 7
    4804:	91 e0       	ldi	r25, 0x01	; 1
    4806:	c6 c0       	rjmp	.+396    	; 0x4994 <__mulsf3+0x1e8>
    4808:	92 30       	cpi	r25, 0x02	; 2
    480a:	49 f4       	brne	.+18     	; 0x481e <__mulsf3+0x72>
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4810:	8a 89       	ldd	r24, Y+18	; 0x12
    4812:	98 13       	cpse	r25, r24
    4814:	21 e0       	ldi	r18, 0x01	; 1
    4816:	2a 87       	std	Y+10, r18	; 0x0a
    4818:	ce 01       	movw	r24, r28
    481a:	09 96       	adiw	r24, 0x09	; 9
    481c:	bb c0       	rjmp	.+374    	; 0x4994 <__mulsf3+0x1e8>
    481e:	82 30       	cpi	r24, 0x02	; 2
    4820:	49 f4       	brne	.+18     	; 0x4834 <__mulsf3+0x88>
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	9a 85       	ldd	r25, Y+10	; 0x0a
    4826:	8a 89       	ldd	r24, Y+18	; 0x12
    4828:	98 13       	cpse	r25, r24
    482a:	21 e0       	ldi	r18, 0x01	; 1
    482c:	2a 8b       	std	Y+18, r18	; 0x12
    482e:	ce 01       	movw	r24, r28
    4830:	41 96       	adiw	r24, 0x11	; 17
    4832:	b0 c0       	rjmp	.+352    	; 0x4994 <__mulsf3+0x1e8>
    4834:	2d 84       	ldd	r2, Y+13	; 0x0d
    4836:	3e 84       	ldd	r3, Y+14	; 0x0e
    4838:	4f 84       	ldd	r4, Y+15	; 0x0f
    483a:	58 88       	ldd	r5, Y+16	; 0x10
    483c:	6d 88       	ldd	r6, Y+21	; 0x15
    483e:	7e 88       	ldd	r7, Y+22	; 0x16
    4840:	8f 88       	ldd	r8, Y+23	; 0x17
    4842:	98 8c       	ldd	r9, Y+24	; 0x18
    4844:	ee 24       	eor	r14, r14
    4846:	ff 24       	eor	r15, r15
    4848:	87 01       	movw	r16, r14
    484a:	aa 24       	eor	r10, r10
    484c:	bb 24       	eor	r11, r11
    484e:	65 01       	movw	r12, r10
    4850:	40 e0       	ldi	r20, 0x00	; 0
    4852:	50 e0       	ldi	r21, 0x00	; 0
    4854:	60 e0       	ldi	r22, 0x00	; 0
    4856:	70 e0       	ldi	r23, 0x00	; 0
    4858:	e0 e0       	ldi	r30, 0x00	; 0
    485a:	f0 e0       	ldi	r31, 0x00	; 0
    485c:	c1 01       	movw	r24, r2
    485e:	81 70       	andi	r24, 0x01	; 1
    4860:	90 70       	andi	r25, 0x00	; 0
    4862:	89 2b       	or	r24, r25
    4864:	e9 f0       	breq	.+58     	; 0x48a0 <__mulsf3+0xf4>
    4866:	e6 0c       	add	r14, r6
    4868:	f7 1c       	adc	r15, r7
    486a:	08 1d       	adc	r16, r8
    486c:	19 1d       	adc	r17, r9
    486e:	9a 01       	movw	r18, r20
    4870:	ab 01       	movw	r20, r22
    4872:	2a 0d       	add	r18, r10
    4874:	3b 1d       	adc	r19, r11
    4876:	4c 1d       	adc	r20, r12
    4878:	5d 1d       	adc	r21, r13
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	a0 e0       	ldi	r26, 0x00	; 0
    4880:	b0 e0       	ldi	r27, 0x00	; 0
    4882:	e6 14       	cp	r14, r6
    4884:	f7 04       	cpc	r15, r7
    4886:	08 05       	cpc	r16, r8
    4888:	19 05       	cpc	r17, r9
    488a:	20 f4       	brcc	.+8      	; 0x4894 <__mulsf3+0xe8>
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	a0 e0       	ldi	r26, 0x00	; 0
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	ba 01       	movw	r22, r20
    4896:	a9 01       	movw	r20, r18
    4898:	48 0f       	add	r20, r24
    489a:	59 1f       	adc	r21, r25
    489c:	6a 1f       	adc	r22, r26
    489e:	7b 1f       	adc	r23, r27
    48a0:	aa 0c       	add	r10, r10
    48a2:	bb 1c       	adc	r11, r11
    48a4:	cc 1c       	adc	r12, r12
    48a6:	dd 1c       	adc	r13, r13
    48a8:	97 fe       	sbrs	r9, 7
    48aa:	08 c0       	rjmp	.+16     	; 0x48bc <__mulsf3+0x110>
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	a0 e0       	ldi	r26, 0x00	; 0
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	a8 2a       	or	r10, r24
    48b6:	b9 2a       	or	r11, r25
    48b8:	ca 2a       	or	r12, r26
    48ba:	db 2a       	or	r13, r27
    48bc:	31 96       	adiw	r30, 0x01	; 1
    48be:	e0 32       	cpi	r30, 0x20	; 32
    48c0:	f1 05       	cpc	r31, r1
    48c2:	49 f0       	breq	.+18     	; 0x48d6 <__mulsf3+0x12a>
    48c4:	66 0c       	add	r6, r6
    48c6:	77 1c       	adc	r7, r7
    48c8:	88 1c       	adc	r8, r8
    48ca:	99 1c       	adc	r9, r9
    48cc:	56 94       	lsr	r5
    48ce:	47 94       	ror	r4
    48d0:	37 94       	ror	r3
    48d2:	27 94       	ror	r2
    48d4:	c3 cf       	rjmp	.-122    	; 0x485c <__mulsf3+0xb0>
    48d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    48d8:	ea 89       	ldd	r30, Y+18	; 0x12
    48da:	2b 89       	ldd	r18, Y+19	; 0x13
    48dc:	3c 89       	ldd	r19, Y+20	; 0x14
    48de:	8b 85       	ldd	r24, Y+11	; 0x0b
    48e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    48e2:	28 0f       	add	r18, r24
    48e4:	39 1f       	adc	r19, r25
    48e6:	2e 5f       	subi	r18, 0xFE	; 254
    48e8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ea:	17 c0       	rjmp	.+46     	; 0x491a <__mulsf3+0x16e>
    48ec:	ca 01       	movw	r24, r20
    48ee:	81 70       	andi	r24, 0x01	; 1
    48f0:	90 70       	andi	r25, 0x00	; 0
    48f2:	89 2b       	or	r24, r25
    48f4:	61 f0       	breq	.+24     	; 0x490e <__mulsf3+0x162>
    48f6:	16 95       	lsr	r17
    48f8:	07 95       	ror	r16
    48fa:	f7 94       	ror	r15
    48fc:	e7 94       	ror	r14
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	a0 e0       	ldi	r26, 0x00	; 0
    4904:	b0 e8       	ldi	r27, 0x80	; 128
    4906:	e8 2a       	or	r14, r24
    4908:	f9 2a       	or	r15, r25
    490a:	0a 2b       	or	r16, r26
    490c:	1b 2b       	or	r17, r27
    490e:	76 95       	lsr	r23
    4910:	67 95       	ror	r22
    4912:	57 95       	ror	r21
    4914:	47 95       	ror	r20
    4916:	2f 5f       	subi	r18, 0xFF	; 255
    4918:	3f 4f       	sbci	r19, 0xFF	; 255
    491a:	77 fd       	sbrc	r23, 7
    491c:	e7 cf       	rjmp	.-50     	; 0x48ec <__mulsf3+0x140>
    491e:	0c c0       	rjmp	.+24     	; 0x4938 <__mulsf3+0x18c>
    4920:	44 0f       	add	r20, r20
    4922:	55 1f       	adc	r21, r21
    4924:	66 1f       	adc	r22, r22
    4926:	77 1f       	adc	r23, r23
    4928:	17 fd       	sbrc	r17, 7
    492a:	41 60       	ori	r20, 0x01	; 1
    492c:	ee 0c       	add	r14, r14
    492e:	ff 1c       	adc	r15, r15
    4930:	00 1f       	adc	r16, r16
    4932:	11 1f       	adc	r17, r17
    4934:	21 50       	subi	r18, 0x01	; 1
    4936:	30 40       	sbci	r19, 0x00	; 0
    4938:	40 30       	cpi	r20, 0x00	; 0
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	59 07       	cpc	r21, r25
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	69 07       	cpc	r22, r25
    4942:	90 e4       	ldi	r25, 0x40	; 64
    4944:	79 07       	cpc	r23, r25
    4946:	60 f3       	brcs	.-40     	; 0x4920 <__mulsf3+0x174>
    4948:	2b 8f       	std	Y+27, r18	; 0x1b
    494a:	3c 8f       	std	Y+28, r19	; 0x1c
    494c:	db 01       	movw	r26, r22
    494e:	ca 01       	movw	r24, r20
    4950:	8f 77       	andi	r24, 0x7F	; 127
    4952:	90 70       	andi	r25, 0x00	; 0
    4954:	a0 70       	andi	r26, 0x00	; 0
    4956:	b0 70       	andi	r27, 0x00	; 0
    4958:	80 34       	cpi	r24, 0x40	; 64
    495a:	91 05       	cpc	r25, r1
    495c:	a1 05       	cpc	r26, r1
    495e:	b1 05       	cpc	r27, r1
    4960:	61 f4       	brne	.+24     	; 0x497a <__mulsf3+0x1ce>
    4962:	47 fd       	sbrc	r20, 7
    4964:	0a c0       	rjmp	.+20     	; 0x497a <__mulsf3+0x1ce>
    4966:	e1 14       	cp	r14, r1
    4968:	f1 04       	cpc	r15, r1
    496a:	01 05       	cpc	r16, r1
    496c:	11 05       	cpc	r17, r1
    496e:	29 f0       	breq	.+10     	; 0x497a <__mulsf3+0x1ce>
    4970:	40 5c       	subi	r20, 0xC0	; 192
    4972:	5f 4f       	sbci	r21, 0xFF	; 255
    4974:	6f 4f       	sbci	r22, 0xFF	; 255
    4976:	7f 4f       	sbci	r23, 0xFF	; 255
    4978:	40 78       	andi	r20, 0x80	; 128
    497a:	1a 8e       	std	Y+26, r1	; 0x1a
    497c:	fe 17       	cp	r31, r30
    497e:	11 f0       	breq	.+4      	; 0x4984 <__mulsf3+0x1d8>
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	8a 8f       	std	Y+26, r24	; 0x1a
    4984:	4d 8f       	std	Y+29, r20	; 0x1d
    4986:	5e 8f       	std	Y+30, r21	; 0x1e
    4988:	6f 8f       	std	Y+31, r22	; 0x1f
    498a:	78 a3       	std	Y+32, r23	; 0x20
    498c:	83 e0       	ldi	r24, 0x03	; 3
    498e:	89 8f       	std	Y+25, r24	; 0x19
    4990:	ce 01       	movw	r24, r28
    4992:	49 96       	adiw	r24, 0x19	; 25
    4994:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4998:	a0 96       	adiw	r28, 0x20	; 32
    499a:	e2 e1       	ldi	r30, 0x12	; 18
    499c:	0c 94 e6 27 	jmp	0x4fcc	; 0x4fcc <__epilogue_restores__>

000049a0 <__divsf3>:
    49a0:	a8 e1       	ldi	r26, 0x18	; 24
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	e6 ed       	ldi	r30, 0xD6	; 214
    49a6:	f4 e2       	ldi	r31, 0x24	; 36
    49a8:	0c 94 d2 27 	jmp	0x4fa4	; 0x4fa4 <__prologue_saves__+0x10>
    49ac:	69 83       	std	Y+1, r22	; 0x01
    49ae:	7a 83       	std	Y+2, r23	; 0x02
    49b0:	8b 83       	std	Y+3, r24	; 0x03
    49b2:	9c 83       	std	Y+4, r25	; 0x04
    49b4:	2d 83       	std	Y+5, r18	; 0x05
    49b6:	3e 83       	std	Y+6, r19	; 0x06
    49b8:	4f 83       	std	Y+7, r20	; 0x07
    49ba:	58 87       	std	Y+8, r21	; 0x08
    49bc:	b9 e0       	ldi	r27, 0x09	; 9
    49be:	eb 2e       	mov	r14, r27
    49c0:	f1 2c       	mov	r15, r1
    49c2:	ec 0e       	add	r14, r28
    49c4:	fd 1e       	adc	r15, r29
    49c6:	ce 01       	movw	r24, r28
    49c8:	01 96       	adiw	r24, 0x01	; 1
    49ca:	b7 01       	movw	r22, r14
    49cc:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    49d0:	8e 01       	movw	r16, r28
    49d2:	0f 5e       	subi	r16, 0xEF	; 239
    49d4:	1f 4f       	sbci	r17, 0xFF	; 255
    49d6:	ce 01       	movw	r24, r28
    49d8:	05 96       	adiw	r24, 0x05	; 5
    49da:	b8 01       	movw	r22, r16
    49dc:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    49e0:	29 85       	ldd	r18, Y+9	; 0x09
    49e2:	22 30       	cpi	r18, 0x02	; 2
    49e4:	08 f4       	brcc	.+2      	; 0x49e8 <__divsf3+0x48>
    49e6:	7e c0       	rjmp	.+252    	; 0x4ae4 <__divsf3+0x144>
    49e8:	39 89       	ldd	r19, Y+17	; 0x11
    49ea:	32 30       	cpi	r19, 0x02	; 2
    49ec:	10 f4       	brcc	.+4      	; 0x49f2 <__divsf3+0x52>
    49ee:	b8 01       	movw	r22, r16
    49f0:	7c c0       	rjmp	.+248    	; 0x4aea <__divsf3+0x14a>
    49f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    49f4:	9a 89       	ldd	r25, Y+18	; 0x12
    49f6:	89 27       	eor	r24, r25
    49f8:	8a 87       	std	Y+10, r24	; 0x0a
    49fa:	24 30       	cpi	r18, 0x04	; 4
    49fc:	11 f0       	breq	.+4      	; 0x4a02 <__divsf3+0x62>
    49fe:	22 30       	cpi	r18, 0x02	; 2
    4a00:	31 f4       	brne	.+12     	; 0x4a0e <__divsf3+0x6e>
    4a02:	23 17       	cp	r18, r19
    4a04:	09 f0       	breq	.+2      	; 0x4a08 <__divsf3+0x68>
    4a06:	6e c0       	rjmp	.+220    	; 0x4ae4 <__divsf3+0x144>
    4a08:	67 e0       	ldi	r22, 0x07	; 7
    4a0a:	71 e0       	ldi	r23, 0x01	; 1
    4a0c:	6e c0       	rjmp	.+220    	; 0x4aea <__divsf3+0x14a>
    4a0e:	34 30       	cpi	r19, 0x04	; 4
    4a10:	39 f4       	brne	.+14     	; 0x4a20 <__divsf3+0x80>
    4a12:	1d 86       	std	Y+13, r1	; 0x0d
    4a14:	1e 86       	std	Y+14, r1	; 0x0e
    4a16:	1f 86       	std	Y+15, r1	; 0x0f
    4a18:	18 8a       	std	Y+16, r1	; 0x10
    4a1a:	1c 86       	std	Y+12, r1	; 0x0c
    4a1c:	1b 86       	std	Y+11, r1	; 0x0b
    4a1e:	04 c0       	rjmp	.+8      	; 0x4a28 <__divsf3+0x88>
    4a20:	32 30       	cpi	r19, 0x02	; 2
    4a22:	21 f4       	brne	.+8      	; 0x4a2c <__divsf3+0x8c>
    4a24:	84 e0       	ldi	r24, 0x04	; 4
    4a26:	89 87       	std	Y+9, r24	; 0x09
    4a28:	b7 01       	movw	r22, r14
    4a2a:	5f c0       	rjmp	.+190    	; 0x4aea <__divsf3+0x14a>
    4a2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    4a2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4a30:	8b 89       	ldd	r24, Y+19	; 0x13
    4a32:	9c 89       	ldd	r25, Y+20	; 0x14
    4a34:	28 1b       	sub	r18, r24
    4a36:	39 0b       	sbc	r19, r25
    4a38:	3c 87       	std	Y+12, r19	; 0x0c
    4a3a:	2b 87       	std	Y+11, r18	; 0x0b
    4a3c:	ed 84       	ldd	r14, Y+13	; 0x0d
    4a3e:	fe 84       	ldd	r15, Y+14	; 0x0e
    4a40:	0f 85       	ldd	r16, Y+15	; 0x0f
    4a42:	18 89       	ldd	r17, Y+16	; 0x10
    4a44:	ad 88       	ldd	r10, Y+21	; 0x15
    4a46:	be 88       	ldd	r11, Y+22	; 0x16
    4a48:	cf 88       	ldd	r12, Y+23	; 0x17
    4a4a:	d8 8c       	ldd	r13, Y+24	; 0x18
    4a4c:	ea 14       	cp	r14, r10
    4a4e:	fb 04       	cpc	r15, r11
    4a50:	0c 05       	cpc	r16, r12
    4a52:	1d 05       	cpc	r17, r13
    4a54:	40 f4       	brcc	.+16     	; 0x4a66 <__divsf3+0xc6>
    4a56:	ee 0c       	add	r14, r14
    4a58:	ff 1c       	adc	r15, r15
    4a5a:	00 1f       	adc	r16, r16
    4a5c:	11 1f       	adc	r17, r17
    4a5e:	21 50       	subi	r18, 0x01	; 1
    4a60:	30 40       	sbci	r19, 0x00	; 0
    4a62:	3c 87       	std	Y+12, r19	; 0x0c
    4a64:	2b 87       	std	Y+11, r18	; 0x0b
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	40 e0       	ldi	r20, 0x00	; 0
    4a6c:	50 e0       	ldi	r21, 0x00	; 0
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	a0 e0       	ldi	r26, 0x00	; 0
    4a74:	b0 e4       	ldi	r27, 0x40	; 64
    4a76:	60 e0       	ldi	r22, 0x00	; 0
    4a78:	70 e0       	ldi	r23, 0x00	; 0
    4a7a:	ea 14       	cp	r14, r10
    4a7c:	fb 04       	cpc	r15, r11
    4a7e:	0c 05       	cpc	r16, r12
    4a80:	1d 05       	cpc	r17, r13
    4a82:	40 f0       	brcs	.+16     	; 0x4a94 <__divsf3+0xf4>
    4a84:	28 2b       	or	r18, r24
    4a86:	39 2b       	or	r19, r25
    4a88:	4a 2b       	or	r20, r26
    4a8a:	5b 2b       	or	r21, r27
    4a8c:	ea 18       	sub	r14, r10
    4a8e:	fb 08       	sbc	r15, r11
    4a90:	0c 09       	sbc	r16, r12
    4a92:	1d 09       	sbc	r17, r13
    4a94:	b6 95       	lsr	r27
    4a96:	a7 95       	ror	r26
    4a98:	97 95       	ror	r25
    4a9a:	87 95       	ror	r24
    4a9c:	ee 0c       	add	r14, r14
    4a9e:	ff 1c       	adc	r15, r15
    4aa0:	00 1f       	adc	r16, r16
    4aa2:	11 1f       	adc	r17, r17
    4aa4:	6f 5f       	subi	r22, 0xFF	; 255
    4aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa8:	6f 31       	cpi	r22, 0x1F	; 31
    4aaa:	71 05       	cpc	r23, r1
    4aac:	31 f7       	brne	.-52     	; 0x4a7a <__divsf3+0xda>
    4aae:	da 01       	movw	r26, r20
    4ab0:	c9 01       	movw	r24, r18
    4ab2:	8f 77       	andi	r24, 0x7F	; 127
    4ab4:	90 70       	andi	r25, 0x00	; 0
    4ab6:	a0 70       	andi	r26, 0x00	; 0
    4ab8:	b0 70       	andi	r27, 0x00	; 0
    4aba:	80 34       	cpi	r24, 0x40	; 64
    4abc:	91 05       	cpc	r25, r1
    4abe:	a1 05       	cpc	r26, r1
    4ac0:	b1 05       	cpc	r27, r1
    4ac2:	61 f4       	brne	.+24     	; 0x4adc <__divsf3+0x13c>
    4ac4:	27 fd       	sbrc	r18, 7
    4ac6:	0a c0       	rjmp	.+20     	; 0x4adc <__divsf3+0x13c>
    4ac8:	e1 14       	cp	r14, r1
    4aca:	f1 04       	cpc	r15, r1
    4acc:	01 05       	cpc	r16, r1
    4ace:	11 05       	cpc	r17, r1
    4ad0:	29 f0       	breq	.+10     	; 0x4adc <__divsf3+0x13c>
    4ad2:	20 5c       	subi	r18, 0xC0	; 192
    4ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad6:	4f 4f       	sbci	r20, 0xFF	; 255
    4ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    4ada:	20 78       	andi	r18, 0x80	; 128
    4adc:	2d 87       	std	Y+13, r18	; 0x0d
    4ade:	3e 87       	std	Y+14, r19	; 0x0e
    4ae0:	4f 87       	std	Y+15, r20	; 0x0f
    4ae2:	58 8b       	std	Y+16, r21	; 0x10
    4ae4:	be 01       	movw	r22, r28
    4ae6:	67 5f       	subi	r22, 0xF7	; 247
    4ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aea:	cb 01       	movw	r24, r22
    4aec:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4af0:	68 96       	adiw	r28, 0x18	; 24
    4af2:	ea e0       	ldi	r30, 0x0A	; 10
    4af4:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__epilogue_restores__+0x10>

00004af8 <__floatsisf>:
    4af8:	a8 e0       	ldi	r26, 0x08	; 8
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	e2 e8       	ldi	r30, 0x82	; 130
    4afe:	f5 e2       	ldi	r31, 0x25	; 37
    4b00:	0c 94 d3 27 	jmp	0x4fa6	; 0x4fa6 <__prologue_saves__+0x12>
    4b04:	9b 01       	movw	r18, r22
    4b06:	ac 01       	movw	r20, r24
    4b08:	83 e0       	ldi	r24, 0x03	; 3
    4b0a:	89 83       	std	Y+1, r24	; 0x01
    4b0c:	da 01       	movw	r26, r20
    4b0e:	c9 01       	movw	r24, r18
    4b10:	88 27       	eor	r24, r24
    4b12:	b7 fd       	sbrc	r27, 7
    4b14:	83 95       	inc	r24
    4b16:	99 27       	eor	r25, r25
    4b18:	aa 27       	eor	r26, r26
    4b1a:	bb 27       	eor	r27, r27
    4b1c:	b8 2e       	mov	r11, r24
    4b1e:	21 15       	cp	r18, r1
    4b20:	31 05       	cpc	r19, r1
    4b22:	41 05       	cpc	r20, r1
    4b24:	51 05       	cpc	r21, r1
    4b26:	19 f4       	brne	.+6      	; 0x4b2e <__floatsisf+0x36>
    4b28:	82 e0       	ldi	r24, 0x02	; 2
    4b2a:	89 83       	std	Y+1, r24	; 0x01
    4b2c:	3a c0       	rjmp	.+116    	; 0x4ba2 <__floatsisf+0xaa>
    4b2e:	88 23       	and	r24, r24
    4b30:	a9 f0       	breq	.+42     	; 0x4b5c <__floatsisf+0x64>
    4b32:	20 30       	cpi	r18, 0x00	; 0
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	38 07       	cpc	r19, r24
    4b38:	80 e0       	ldi	r24, 0x00	; 0
    4b3a:	48 07       	cpc	r20, r24
    4b3c:	80 e8       	ldi	r24, 0x80	; 128
    4b3e:	58 07       	cpc	r21, r24
    4b40:	29 f4       	brne	.+10     	; 0x4b4c <__floatsisf+0x54>
    4b42:	60 e0       	ldi	r22, 0x00	; 0
    4b44:	70 e0       	ldi	r23, 0x00	; 0
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	9f ec       	ldi	r25, 0xCF	; 207
    4b4a:	30 c0       	rjmp	.+96     	; 0x4bac <__floatsisf+0xb4>
    4b4c:	ee 24       	eor	r14, r14
    4b4e:	ff 24       	eor	r15, r15
    4b50:	87 01       	movw	r16, r14
    4b52:	e2 1a       	sub	r14, r18
    4b54:	f3 0a       	sbc	r15, r19
    4b56:	04 0b       	sbc	r16, r20
    4b58:	15 0b       	sbc	r17, r21
    4b5a:	02 c0       	rjmp	.+4      	; 0x4b60 <__floatsisf+0x68>
    4b5c:	79 01       	movw	r14, r18
    4b5e:	8a 01       	movw	r16, r20
    4b60:	8e e1       	ldi	r24, 0x1E	; 30
    4b62:	c8 2e       	mov	r12, r24
    4b64:	d1 2c       	mov	r13, r1
    4b66:	dc 82       	std	Y+4, r13	; 0x04
    4b68:	cb 82       	std	Y+3, r12	; 0x03
    4b6a:	ed 82       	std	Y+5, r14	; 0x05
    4b6c:	fe 82       	std	Y+6, r15	; 0x06
    4b6e:	0f 83       	std	Y+7, r16	; 0x07
    4b70:	18 87       	std	Y+8, r17	; 0x08
    4b72:	c8 01       	movw	r24, r16
    4b74:	b7 01       	movw	r22, r14
    4b76:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <__clzsi2>
    4b7a:	01 97       	sbiw	r24, 0x01	; 1
    4b7c:	18 16       	cp	r1, r24
    4b7e:	19 06       	cpc	r1, r25
    4b80:	84 f4       	brge	.+32     	; 0x4ba2 <__floatsisf+0xaa>
    4b82:	08 2e       	mov	r0, r24
    4b84:	04 c0       	rjmp	.+8      	; 0x4b8e <__floatsisf+0x96>
    4b86:	ee 0c       	add	r14, r14
    4b88:	ff 1c       	adc	r15, r15
    4b8a:	00 1f       	adc	r16, r16
    4b8c:	11 1f       	adc	r17, r17
    4b8e:	0a 94       	dec	r0
    4b90:	d2 f7       	brpl	.-12     	; 0x4b86 <__floatsisf+0x8e>
    4b92:	ed 82       	std	Y+5, r14	; 0x05
    4b94:	fe 82       	std	Y+6, r15	; 0x06
    4b96:	0f 83       	std	Y+7, r16	; 0x07
    4b98:	18 87       	std	Y+8, r17	; 0x08
    4b9a:	c8 1a       	sub	r12, r24
    4b9c:	d9 0a       	sbc	r13, r25
    4b9e:	dc 82       	std	Y+4, r13	; 0x04
    4ba0:	cb 82       	std	Y+3, r12	; 0x03
    4ba2:	ba 82       	std	Y+2, r11	; 0x02
    4ba4:	ce 01       	movw	r24, r28
    4ba6:	01 96       	adiw	r24, 0x01	; 1
    4ba8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__pack_f>
    4bac:	28 96       	adiw	r28, 0x08	; 8
    4bae:	e9 e0       	ldi	r30, 0x09	; 9
    4bb0:	0c 94 ef 27 	jmp	0x4fde	; 0x4fde <__epilogue_restores__+0x12>

00004bb4 <__fixsfsi>:
    4bb4:	ac e0       	ldi	r26, 0x0C	; 12
    4bb6:	b0 e0       	ldi	r27, 0x00	; 0
    4bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    4bba:	f5 e2       	ldi	r31, 0x25	; 37
    4bbc:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__prologue_saves__+0x20>
    4bc0:	69 83       	std	Y+1, r22	; 0x01
    4bc2:	7a 83       	std	Y+2, r23	; 0x02
    4bc4:	8b 83       	std	Y+3, r24	; 0x03
    4bc6:	9c 83       	std	Y+4, r25	; 0x04
    4bc8:	ce 01       	movw	r24, r28
    4bca:	01 96       	adiw	r24, 0x01	; 1
    4bcc:	be 01       	movw	r22, r28
    4bce:	6b 5f       	subi	r22, 0xFB	; 251
    4bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bd2:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__unpack_f>
    4bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd8:	82 30       	cpi	r24, 0x02	; 2
    4bda:	61 f1       	breq	.+88     	; 0x4c34 <__fixsfsi+0x80>
    4bdc:	82 30       	cpi	r24, 0x02	; 2
    4bde:	50 f1       	brcs	.+84     	; 0x4c34 <__fixsfsi+0x80>
    4be0:	84 30       	cpi	r24, 0x04	; 4
    4be2:	21 f4       	brne	.+8      	; 0x4bec <__fixsfsi+0x38>
    4be4:	8e 81       	ldd	r24, Y+6	; 0x06
    4be6:	88 23       	and	r24, r24
    4be8:	51 f1       	breq	.+84     	; 0x4c3e <__fixsfsi+0x8a>
    4bea:	2e c0       	rjmp	.+92     	; 0x4c48 <__fixsfsi+0x94>
    4bec:	2f 81       	ldd	r18, Y+7	; 0x07
    4bee:	38 85       	ldd	r19, Y+8	; 0x08
    4bf0:	37 fd       	sbrc	r19, 7
    4bf2:	20 c0       	rjmp	.+64     	; 0x4c34 <__fixsfsi+0x80>
    4bf4:	6e 81       	ldd	r22, Y+6	; 0x06
    4bf6:	2f 31       	cpi	r18, 0x1F	; 31
    4bf8:	31 05       	cpc	r19, r1
    4bfa:	1c f0       	brlt	.+6      	; 0x4c02 <__fixsfsi+0x4e>
    4bfc:	66 23       	and	r22, r22
    4bfe:	f9 f0       	breq	.+62     	; 0x4c3e <__fixsfsi+0x8a>
    4c00:	23 c0       	rjmp	.+70     	; 0x4c48 <__fixsfsi+0x94>
    4c02:	8e e1       	ldi	r24, 0x1E	; 30
    4c04:	90 e0       	ldi	r25, 0x00	; 0
    4c06:	82 1b       	sub	r24, r18
    4c08:	93 0b       	sbc	r25, r19
    4c0a:	29 85       	ldd	r18, Y+9	; 0x09
    4c0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c10:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c12:	04 c0       	rjmp	.+8      	; 0x4c1c <__fixsfsi+0x68>
    4c14:	56 95       	lsr	r21
    4c16:	47 95       	ror	r20
    4c18:	37 95       	ror	r19
    4c1a:	27 95       	ror	r18
    4c1c:	8a 95       	dec	r24
    4c1e:	d2 f7       	brpl	.-12     	; 0x4c14 <__fixsfsi+0x60>
    4c20:	66 23       	and	r22, r22
    4c22:	b1 f0       	breq	.+44     	; 0x4c50 <__fixsfsi+0x9c>
    4c24:	50 95       	com	r21
    4c26:	40 95       	com	r20
    4c28:	30 95       	com	r19
    4c2a:	21 95       	neg	r18
    4c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c30:	5f 4f       	sbci	r21, 0xFF	; 255
    4c32:	0e c0       	rjmp	.+28     	; 0x4c50 <__fixsfsi+0x9c>
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	09 c0       	rjmp	.+18     	; 0x4c50 <__fixsfsi+0x9c>
    4c3e:	2f ef       	ldi	r18, 0xFF	; 255
    4c40:	3f ef       	ldi	r19, 0xFF	; 255
    4c42:	4f ef       	ldi	r20, 0xFF	; 255
    4c44:	5f e7       	ldi	r21, 0x7F	; 127
    4c46:	04 c0       	rjmp	.+8      	; 0x4c50 <__fixsfsi+0x9c>
    4c48:	20 e0       	ldi	r18, 0x00	; 0
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	50 e8       	ldi	r21, 0x80	; 128
    4c50:	b9 01       	movw	r22, r18
    4c52:	ca 01       	movw	r24, r20
    4c54:	2c 96       	adiw	r28, 0x0c	; 12
    4c56:	e2 e0       	ldi	r30, 0x02	; 2
    4c58:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__+0x20>

00004c5c <__clzsi2>:
    4c5c:	ef 92       	push	r14
    4c5e:	ff 92       	push	r15
    4c60:	0f 93       	push	r16
    4c62:	1f 93       	push	r17
    4c64:	7b 01       	movw	r14, r22
    4c66:	8c 01       	movw	r16, r24
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	e8 16       	cp	r14, r24
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	f8 06       	cpc	r15, r24
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	08 07       	cpc	r16, r24
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    4c76:	18 07       	cpc	r17, r24
    4c78:	88 f4       	brcc	.+34     	; 0x4c9c <__clzsi2+0x40>
    4c7a:	8f ef       	ldi	r24, 0xFF	; 255
    4c7c:	e8 16       	cp	r14, r24
    4c7e:	f1 04       	cpc	r15, r1
    4c80:	01 05       	cpc	r16, r1
    4c82:	11 05       	cpc	r17, r1
    4c84:	31 f0       	breq	.+12     	; 0x4c92 <__clzsi2+0x36>
    4c86:	28 f0       	brcs	.+10     	; 0x4c92 <__clzsi2+0x36>
    4c88:	88 e0       	ldi	r24, 0x08	; 8
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	a0 e0       	ldi	r26, 0x00	; 0
    4c8e:	b0 e0       	ldi	r27, 0x00	; 0
    4c90:	17 c0       	rjmp	.+46     	; 0x4cc0 <__clzsi2+0x64>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	a0 e0       	ldi	r26, 0x00	; 0
    4c98:	b0 e0       	ldi	r27, 0x00	; 0
    4c9a:	12 c0       	rjmp	.+36     	; 0x4cc0 <__clzsi2+0x64>
    4c9c:	80 e0       	ldi	r24, 0x00	; 0
    4c9e:	e8 16       	cp	r14, r24
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	f8 06       	cpc	r15, r24
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	08 07       	cpc	r16, r24
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	18 07       	cpc	r17, r24
    4cac:	28 f0       	brcs	.+10     	; 0x4cb8 <__clzsi2+0x5c>
    4cae:	88 e1       	ldi	r24, 0x18	; 24
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	a0 e0       	ldi	r26, 0x00	; 0
    4cb4:	b0 e0       	ldi	r27, 0x00	; 0
    4cb6:	04 c0       	rjmp	.+8      	; 0x4cc0 <__clzsi2+0x64>
    4cb8:	80 e1       	ldi	r24, 0x10	; 16
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	a0 e0       	ldi	r26, 0x00	; 0
    4cbe:	b0 e0       	ldi	r27, 0x00	; 0
    4cc0:	20 e2       	ldi	r18, 0x20	; 32
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	40 e0       	ldi	r20, 0x00	; 0
    4cc6:	50 e0       	ldi	r21, 0x00	; 0
    4cc8:	28 1b       	sub	r18, r24
    4cca:	39 0b       	sbc	r19, r25
    4ccc:	4a 0b       	sbc	r20, r26
    4cce:	5b 0b       	sbc	r21, r27
    4cd0:	04 c0       	rjmp	.+8      	; 0x4cda <__clzsi2+0x7e>
    4cd2:	16 95       	lsr	r17
    4cd4:	07 95       	ror	r16
    4cd6:	f7 94       	ror	r15
    4cd8:	e7 94       	ror	r14
    4cda:	8a 95       	dec	r24
    4cdc:	d2 f7       	brpl	.-12     	; 0x4cd2 <__clzsi2+0x76>
    4cde:	f7 01       	movw	r30, r14
    4ce0:	e1 5f       	subi	r30, 0xF1	; 241
    4ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce4:	80 81       	ld	r24, Z
    4ce6:	28 1b       	sub	r18, r24
    4ce8:	31 09       	sbc	r19, r1
    4cea:	41 09       	sbc	r20, r1
    4cec:	51 09       	sbc	r21, r1
    4cee:	c9 01       	movw	r24, r18
    4cf0:	1f 91       	pop	r17
    4cf2:	0f 91       	pop	r16
    4cf4:	ff 90       	pop	r15
    4cf6:	ef 90       	pop	r14
    4cf8:	08 95       	ret

00004cfa <__pack_f>:
    4cfa:	df 92       	push	r13
    4cfc:	ef 92       	push	r14
    4cfe:	ff 92       	push	r15
    4d00:	0f 93       	push	r16
    4d02:	1f 93       	push	r17
    4d04:	fc 01       	movw	r30, r24
    4d06:	e4 80       	ldd	r14, Z+4	; 0x04
    4d08:	f5 80       	ldd	r15, Z+5	; 0x05
    4d0a:	06 81       	ldd	r16, Z+6	; 0x06
    4d0c:	17 81       	ldd	r17, Z+7	; 0x07
    4d0e:	d1 80       	ldd	r13, Z+1	; 0x01
    4d10:	80 81       	ld	r24, Z
    4d12:	82 30       	cpi	r24, 0x02	; 2
    4d14:	48 f4       	brcc	.+18     	; 0x4d28 <__pack_f+0x2e>
    4d16:	80 e0       	ldi	r24, 0x00	; 0
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	a0 e1       	ldi	r26, 0x10	; 16
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	e8 2a       	or	r14, r24
    4d20:	f9 2a       	or	r15, r25
    4d22:	0a 2b       	or	r16, r26
    4d24:	1b 2b       	or	r17, r27
    4d26:	a5 c0       	rjmp	.+330    	; 0x4e72 <__pack_f+0x178>
    4d28:	84 30       	cpi	r24, 0x04	; 4
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <__pack_f+0x34>
    4d2c:	9f c0       	rjmp	.+318    	; 0x4e6c <__pack_f+0x172>
    4d2e:	82 30       	cpi	r24, 0x02	; 2
    4d30:	21 f4       	brne	.+8      	; 0x4d3a <__pack_f+0x40>
    4d32:	ee 24       	eor	r14, r14
    4d34:	ff 24       	eor	r15, r15
    4d36:	87 01       	movw	r16, r14
    4d38:	05 c0       	rjmp	.+10     	; 0x4d44 <__pack_f+0x4a>
    4d3a:	e1 14       	cp	r14, r1
    4d3c:	f1 04       	cpc	r15, r1
    4d3e:	01 05       	cpc	r16, r1
    4d40:	11 05       	cpc	r17, r1
    4d42:	19 f4       	brne	.+6      	; 0x4d4a <__pack_f+0x50>
    4d44:	e0 e0       	ldi	r30, 0x00	; 0
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	96 c0       	rjmp	.+300    	; 0x4e76 <__pack_f+0x17c>
    4d4a:	62 81       	ldd	r22, Z+2	; 0x02
    4d4c:	73 81       	ldd	r23, Z+3	; 0x03
    4d4e:	9f ef       	ldi	r25, 0xFF	; 255
    4d50:	62 38       	cpi	r22, 0x82	; 130
    4d52:	79 07       	cpc	r23, r25
    4d54:	0c f0       	brlt	.+2      	; 0x4d58 <__pack_f+0x5e>
    4d56:	5b c0       	rjmp	.+182    	; 0x4e0e <__pack_f+0x114>
    4d58:	22 e8       	ldi	r18, 0x82	; 130
    4d5a:	3f ef       	ldi	r19, 0xFF	; 255
    4d5c:	26 1b       	sub	r18, r22
    4d5e:	37 0b       	sbc	r19, r23
    4d60:	2a 31       	cpi	r18, 0x1A	; 26
    4d62:	31 05       	cpc	r19, r1
    4d64:	2c f0       	brlt	.+10     	; 0x4d70 <__pack_f+0x76>
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e0       	ldi	r20, 0x00	; 0
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	2a c0       	rjmp	.+84     	; 0x4dc4 <__pack_f+0xca>
    4d70:	b8 01       	movw	r22, r16
    4d72:	a7 01       	movw	r20, r14
    4d74:	02 2e       	mov	r0, r18
    4d76:	04 c0       	rjmp	.+8      	; 0x4d80 <__pack_f+0x86>
    4d78:	76 95       	lsr	r23
    4d7a:	67 95       	ror	r22
    4d7c:	57 95       	ror	r21
    4d7e:	47 95       	ror	r20
    4d80:	0a 94       	dec	r0
    4d82:	d2 f7       	brpl	.-12     	; 0x4d78 <__pack_f+0x7e>
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	a0 e0       	ldi	r26, 0x00	; 0
    4d8a:	b0 e0       	ldi	r27, 0x00	; 0
    4d8c:	04 c0       	rjmp	.+8      	; 0x4d96 <__pack_f+0x9c>
    4d8e:	88 0f       	add	r24, r24
    4d90:	99 1f       	adc	r25, r25
    4d92:	aa 1f       	adc	r26, r26
    4d94:	bb 1f       	adc	r27, r27
    4d96:	2a 95       	dec	r18
    4d98:	d2 f7       	brpl	.-12     	; 0x4d8e <__pack_f+0x94>
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	a1 09       	sbc	r26, r1
    4d9e:	b1 09       	sbc	r27, r1
    4da0:	8e 21       	and	r24, r14
    4da2:	9f 21       	and	r25, r15
    4da4:	a0 23       	and	r26, r16
    4da6:	b1 23       	and	r27, r17
    4da8:	00 97       	sbiw	r24, 0x00	; 0
    4daa:	a1 05       	cpc	r26, r1
    4dac:	b1 05       	cpc	r27, r1
    4dae:	21 f0       	breq	.+8      	; 0x4db8 <__pack_f+0xbe>
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	a0 e0       	ldi	r26, 0x00	; 0
    4db6:	b0 e0       	ldi	r27, 0x00	; 0
    4db8:	9a 01       	movw	r18, r20
    4dba:	ab 01       	movw	r20, r22
    4dbc:	28 2b       	or	r18, r24
    4dbe:	39 2b       	or	r19, r25
    4dc0:	4a 2b       	or	r20, r26
    4dc2:	5b 2b       	or	r21, r27
    4dc4:	da 01       	movw	r26, r20
    4dc6:	c9 01       	movw	r24, r18
    4dc8:	8f 77       	andi	r24, 0x7F	; 127
    4dca:	90 70       	andi	r25, 0x00	; 0
    4dcc:	a0 70       	andi	r26, 0x00	; 0
    4dce:	b0 70       	andi	r27, 0x00	; 0
    4dd0:	80 34       	cpi	r24, 0x40	; 64
    4dd2:	91 05       	cpc	r25, r1
    4dd4:	a1 05       	cpc	r26, r1
    4dd6:	b1 05       	cpc	r27, r1
    4dd8:	39 f4       	brne	.+14     	; 0x4de8 <__pack_f+0xee>
    4dda:	27 ff       	sbrs	r18, 7
    4ddc:	09 c0       	rjmp	.+18     	; 0x4df0 <__pack_f+0xf6>
    4dde:	20 5c       	subi	r18, 0xC0	; 192
    4de0:	3f 4f       	sbci	r19, 0xFF	; 255
    4de2:	4f 4f       	sbci	r20, 0xFF	; 255
    4de4:	5f 4f       	sbci	r21, 0xFF	; 255
    4de6:	04 c0       	rjmp	.+8      	; 0x4df0 <__pack_f+0xf6>
    4de8:	21 5c       	subi	r18, 0xC1	; 193
    4dea:	3f 4f       	sbci	r19, 0xFF	; 255
    4dec:	4f 4f       	sbci	r20, 0xFF	; 255
    4dee:	5f 4f       	sbci	r21, 0xFF	; 255
    4df0:	e0 e0       	ldi	r30, 0x00	; 0
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	20 30       	cpi	r18, 0x00	; 0
    4df6:	a0 e0       	ldi	r26, 0x00	; 0
    4df8:	3a 07       	cpc	r19, r26
    4dfa:	a0 e0       	ldi	r26, 0x00	; 0
    4dfc:	4a 07       	cpc	r20, r26
    4dfe:	a0 e4       	ldi	r26, 0x40	; 64
    4e00:	5a 07       	cpc	r21, r26
    4e02:	10 f0       	brcs	.+4      	; 0x4e08 <__pack_f+0x10e>
    4e04:	e1 e0       	ldi	r30, 0x01	; 1
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	79 01       	movw	r14, r18
    4e0a:	8a 01       	movw	r16, r20
    4e0c:	27 c0       	rjmp	.+78     	; 0x4e5c <__pack_f+0x162>
    4e0e:	60 38       	cpi	r22, 0x80	; 128
    4e10:	71 05       	cpc	r23, r1
    4e12:	64 f5       	brge	.+88     	; 0x4e6c <__pack_f+0x172>
    4e14:	fb 01       	movw	r30, r22
    4e16:	e1 58       	subi	r30, 0x81	; 129
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	d8 01       	movw	r26, r16
    4e1c:	c7 01       	movw	r24, r14
    4e1e:	8f 77       	andi	r24, 0x7F	; 127
    4e20:	90 70       	andi	r25, 0x00	; 0
    4e22:	a0 70       	andi	r26, 0x00	; 0
    4e24:	b0 70       	andi	r27, 0x00	; 0
    4e26:	80 34       	cpi	r24, 0x40	; 64
    4e28:	91 05       	cpc	r25, r1
    4e2a:	a1 05       	cpc	r26, r1
    4e2c:	b1 05       	cpc	r27, r1
    4e2e:	39 f4       	brne	.+14     	; 0x4e3e <__pack_f+0x144>
    4e30:	e7 fe       	sbrs	r14, 7
    4e32:	0d c0       	rjmp	.+26     	; 0x4e4e <__pack_f+0x154>
    4e34:	80 e4       	ldi	r24, 0x40	; 64
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	a0 e0       	ldi	r26, 0x00	; 0
    4e3a:	b0 e0       	ldi	r27, 0x00	; 0
    4e3c:	04 c0       	rjmp	.+8      	; 0x4e46 <__pack_f+0x14c>
    4e3e:	8f e3       	ldi	r24, 0x3F	; 63
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	a0 e0       	ldi	r26, 0x00	; 0
    4e44:	b0 e0       	ldi	r27, 0x00	; 0
    4e46:	e8 0e       	add	r14, r24
    4e48:	f9 1e       	adc	r15, r25
    4e4a:	0a 1f       	adc	r16, r26
    4e4c:	1b 1f       	adc	r17, r27
    4e4e:	17 ff       	sbrs	r17, 7
    4e50:	05 c0       	rjmp	.+10     	; 0x4e5c <__pack_f+0x162>
    4e52:	16 95       	lsr	r17
    4e54:	07 95       	ror	r16
    4e56:	f7 94       	ror	r15
    4e58:	e7 94       	ror	r14
    4e5a:	31 96       	adiw	r30, 0x01	; 1
    4e5c:	87 e0       	ldi	r24, 0x07	; 7
    4e5e:	16 95       	lsr	r17
    4e60:	07 95       	ror	r16
    4e62:	f7 94       	ror	r15
    4e64:	e7 94       	ror	r14
    4e66:	8a 95       	dec	r24
    4e68:	d1 f7       	brne	.-12     	; 0x4e5e <__pack_f+0x164>
    4e6a:	05 c0       	rjmp	.+10     	; 0x4e76 <__pack_f+0x17c>
    4e6c:	ee 24       	eor	r14, r14
    4e6e:	ff 24       	eor	r15, r15
    4e70:	87 01       	movw	r16, r14
    4e72:	ef ef       	ldi	r30, 0xFF	; 255
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	6e 2f       	mov	r22, r30
    4e78:	67 95       	ror	r22
    4e7a:	66 27       	eor	r22, r22
    4e7c:	67 95       	ror	r22
    4e7e:	90 2f       	mov	r25, r16
    4e80:	9f 77       	andi	r25, 0x7F	; 127
    4e82:	d7 94       	ror	r13
    4e84:	dd 24       	eor	r13, r13
    4e86:	d7 94       	ror	r13
    4e88:	8e 2f       	mov	r24, r30
    4e8a:	86 95       	lsr	r24
    4e8c:	49 2f       	mov	r20, r25
    4e8e:	46 2b       	or	r20, r22
    4e90:	58 2f       	mov	r21, r24
    4e92:	5d 29       	or	r21, r13
    4e94:	b7 01       	movw	r22, r14
    4e96:	ca 01       	movw	r24, r20
    4e98:	1f 91       	pop	r17
    4e9a:	0f 91       	pop	r16
    4e9c:	ff 90       	pop	r15
    4e9e:	ef 90       	pop	r14
    4ea0:	df 90       	pop	r13
    4ea2:	08 95       	ret

00004ea4 <__unpack_f>:
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	db 01       	movw	r26, r22
    4ea8:	40 81       	ld	r20, Z
    4eaa:	51 81       	ldd	r21, Z+1	; 0x01
    4eac:	22 81       	ldd	r18, Z+2	; 0x02
    4eae:	62 2f       	mov	r22, r18
    4eb0:	6f 77       	andi	r22, 0x7F	; 127
    4eb2:	70 e0       	ldi	r23, 0x00	; 0
    4eb4:	22 1f       	adc	r18, r18
    4eb6:	22 27       	eor	r18, r18
    4eb8:	22 1f       	adc	r18, r18
    4eba:	93 81       	ldd	r25, Z+3	; 0x03
    4ebc:	89 2f       	mov	r24, r25
    4ebe:	88 0f       	add	r24, r24
    4ec0:	82 2b       	or	r24, r18
    4ec2:	28 2f       	mov	r18, r24
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	99 1f       	adc	r25, r25
    4ec8:	99 27       	eor	r25, r25
    4eca:	99 1f       	adc	r25, r25
    4ecc:	11 96       	adiw	r26, 0x01	; 1
    4ece:	9c 93       	st	X, r25
    4ed0:	11 97       	sbiw	r26, 0x01	; 1
    4ed2:	21 15       	cp	r18, r1
    4ed4:	31 05       	cpc	r19, r1
    4ed6:	a9 f5       	brne	.+106    	; 0x4f42 <__unpack_f+0x9e>
    4ed8:	41 15       	cp	r20, r1
    4eda:	51 05       	cpc	r21, r1
    4edc:	61 05       	cpc	r22, r1
    4ede:	71 05       	cpc	r23, r1
    4ee0:	11 f4       	brne	.+4      	; 0x4ee6 <__unpack_f+0x42>
    4ee2:	82 e0       	ldi	r24, 0x02	; 2
    4ee4:	37 c0       	rjmp	.+110    	; 0x4f54 <__unpack_f+0xb0>
    4ee6:	82 e8       	ldi	r24, 0x82	; 130
    4ee8:	9f ef       	ldi	r25, 0xFF	; 255
    4eea:	13 96       	adiw	r26, 0x03	; 3
    4eec:	9c 93       	st	X, r25
    4eee:	8e 93       	st	-X, r24
    4ef0:	12 97       	sbiw	r26, 0x02	; 2
    4ef2:	9a 01       	movw	r18, r20
    4ef4:	ab 01       	movw	r20, r22
    4ef6:	67 e0       	ldi	r22, 0x07	; 7
    4ef8:	22 0f       	add	r18, r18
    4efa:	33 1f       	adc	r19, r19
    4efc:	44 1f       	adc	r20, r20
    4efe:	55 1f       	adc	r21, r21
    4f00:	6a 95       	dec	r22
    4f02:	d1 f7       	brne	.-12     	; 0x4ef8 <__unpack_f+0x54>
    4f04:	83 e0       	ldi	r24, 0x03	; 3
    4f06:	8c 93       	st	X, r24
    4f08:	0d c0       	rjmp	.+26     	; 0x4f24 <__unpack_f+0x80>
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	44 1f       	adc	r20, r20
    4f10:	55 1f       	adc	r21, r21
    4f12:	12 96       	adiw	r26, 0x02	; 2
    4f14:	8d 91       	ld	r24, X+
    4f16:	9c 91       	ld	r25, X
    4f18:	13 97       	sbiw	r26, 0x03	; 3
    4f1a:	01 97       	sbiw	r24, 0x01	; 1
    4f1c:	13 96       	adiw	r26, 0x03	; 3
    4f1e:	9c 93       	st	X, r25
    4f20:	8e 93       	st	-X, r24
    4f22:	12 97       	sbiw	r26, 0x02	; 2
    4f24:	20 30       	cpi	r18, 0x00	; 0
    4f26:	80 e0       	ldi	r24, 0x00	; 0
    4f28:	38 07       	cpc	r19, r24
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	48 07       	cpc	r20, r24
    4f2e:	80 e4       	ldi	r24, 0x40	; 64
    4f30:	58 07       	cpc	r21, r24
    4f32:	58 f3       	brcs	.-42     	; 0x4f0a <__unpack_f+0x66>
    4f34:	14 96       	adiw	r26, 0x04	; 4
    4f36:	2d 93       	st	X+, r18
    4f38:	3d 93       	st	X+, r19
    4f3a:	4d 93       	st	X+, r20
    4f3c:	5c 93       	st	X, r21
    4f3e:	17 97       	sbiw	r26, 0x07	; 7
    4f40:	08 95       	ret
    4f42:	2f 3f       	cpi	r18, 0xFF	; 255
    4f44:	31 05       	cpc	r19, r1
    4f46:	79 f4       	brne	.+30     	; 0x4f66 <__unpack_f+0xc2>
    4f48:	41 15       	cp	r20, r1
    4f4a:	51 05       	cpc	r21, r1
    4f4c:	61 05       	cpc	r22, r1
    4f4e:	71 05       	cpc	r23, r1
    4f50:	19 f4       	brne	.+6      	; 0x4f58 <__unpack_f+0xb4>
    4f52:	84 e0       	ldi	r24, 0x04	; 4
    4f54:	8c 93       	st	X, r24
    4f56:	08 95       	ret
    4f58:	64 ff       	sbrs	r22, 4
    4f5a:	03 c0       	rjmp	.+6      	; 0x4f62 <__unpack_f+0xbe>
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	8c 93       	st	X, r24
    4f60:	12 c0       	rjmp	.+36     	; 0x4f86 <__unpack_f+0xe2>
    4f62:	1c 92       	st	X, r1
    4f64:	10 c0       	rjmp	.+32     	; 0x4f86 <__unpack_f+0xe2>
    4f66:	2f 57       	subi	r18, 0x7F	; 127
    4f68:	30 40       	sbci	r19, 0x00	; 0
    4f6a:	13 96       	adiw	r26, 0x03	; 3
    4f6c:	3c 93       	st	X, r19
    4f6e:	2e 93       	st	-X, r18
    4f70:	12 97       	sbiw	r26, 0x02	; 2
    4f72:	83 e0       	ldi	r24, 0x03	; 3
    4f74:	8c 93       	st	X, r24
    4f76:	87 e0       	ldi	r24, 0x07	; 7
    4f78:	44 0f       	add	r20, r20
    4f7a:	55 1f       	adc	r21, r21
    4f7c:	66 1f       	adc	r22, r22
    4f7e:	77 1f       	adc	r23, r23
    4f80:	8a 95       	dec	r24
    4f82:	d1 f7       	brne	.-12     	; 0x4f78 <__unpack_f+0xd4>
    4f84:	70 64       	ori	r23, 0x40	; 64
    4f86:	14 96       	adiw	r26, 0x04	; 4
    4f88:	4d 93       	st	X+, r20
    4f8a:	5d 93       	st	X+, r21
    4f8c:	6d 93       	st	X+, r22
    4f8e:	7c 93       	st	X, r23
    4f90:	17 97       	sbiw	r26, 0x07	; 7
    4f92:	08 95       	ret

00004f94 <__prologue_saves__>:
    4f94:	2f 92       	push	r2
    4f96:	3f 92       	push	r3
    4f98:	4f 92       	push	r4
    4f9a:	5f 92       	push	r5
    4f9c:	6f 92       	push	r6
    4f9e:	7f 92       	push	r7
    4fa0:	8f 92       	push	r8
    4fa2:	9f 92       	push	r9
    4fa4:	af 92       	push	r10
    4fa6:	bf 92       	push	r11
    4fa8:	cf 92       	push	r12
    4faa:	df 92       	push	r13
    4fac:	ef 92       	push	r14
    4fae:	ff 92       	push	r15
    4fb0:	0f 93       	push	r16
    4fb2:	1f 93       	push	r17
    4fb4:	cf 93       	push	r28
    4fb6:	df 93       	push	r29
    4fb8:	cd b7       	in	r28, 0x3d	; 61
    4fba:	de b7       	in	r29, 0x3e	; 62
    4fbc:	ca 1b       	sub	r28, r26
    4fbe:	db 0b       	sbc	r29, r27
    4fc0:	0f b6       	in	r0, 0x3f	; 63
    4fc2:	f8 94       	cli
    4fc4:	de bf       	out	0x3e, r29	; 62
    4fc6:	0f be       	out	0x3f, r0	; 63
    4fc8:	cd bf       	out	0x3d, r28	; 61
    4fca:	09 94       	ijmp

00004fcc <__epilogue_restores__>:
    4fcc:	2a 88       	ldd	r2, Y+18	; 0x12
    4fce:	39 88       	ldd	r3, Y+17	; 0x11
    4fd0:	48 88       	ldd	r4, Y+16	; 0x10
    4fd2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fd4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fd6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fd8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fda:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fdc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fde:	b9 84       	ldd	r11, Y+9	; 0x09
    4fe0:	c8 84       	ldd	r12, Y+8	; 0x08
    4fe2:	df 80       	ldd	r13, Y+7	; 0x07
    4fe4:	ee 80       	ldd	r14, Y+6	; 0x06
    4fe6:	fd 80       	ldd	r15, Y+5	; 0x05
    4fe8:	0c 81       	ldd	r16, Y+4	; 0x04
    4fea:	1b 81       	ldd	r17, Y+3	; 0x03
    4fec:	aa 81       	ldd	r26, Y+2	; 0x02
    4fee:	b9 81       	ldd	r27, Y+1	; 0x01
    4ff0:	ce 0f       	add	r28, r30
    4ff2:	d1 1d       	adc	r29, r1
    4ff4:	0f b6       	in	r0, 0x3f	; 63
    4ff6:	f8 94       	cli
    4ff8:	de bf       	out	0x3e, r29	; 62
    4ffa:	0f be       	out	0x3f, r0	; 63
    4ffc:	cd bf       	out	0x3d, r28	; 61
    4ffe:	ed 01       	movw	r28, r26
    5000:	08 95       	ret

00005002 <_exit>:
    5002:	f8 94       	cli

00005004 <__stop_program>:
    5004:	ff cf       	rjmp	.-2      	; 0x5004 <__stop_program>

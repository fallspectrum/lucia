
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00005f22  00005fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  000060c6  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000060c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  00006146  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00006728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  000082e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00009f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  0000ac98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000c027  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__ctors_end>
       4:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
       8:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
       c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      10:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      14:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      18:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      1c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      20:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      24:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      28:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      2c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      30:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      34:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      38:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      3c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      40:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      44:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      48:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      4c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      50:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      54:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      58:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      5c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      60:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      64:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      68:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      6c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      70:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      74:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      78:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      7c:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      80:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      84:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>
      88:	0c 94 78 1a 	jmp	0x34f0	; 0x34f0 <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 69 00 06 09 00 00 ff 00 00 00 ff ff 02 00 00     .i..............
      9c:	08 02 00 ff 00 00 00 00 00 02 00 00 00 00 00 00     ................
      ac:	00 28 00 01 08 02 00 ff 00 00 00 00 00 02 00 00     .(..............
      bc:	00 00 00 00 00 28 00 02 08 02 00 ff 00 00 00 00     .....(..........
      cc:	00 02 00 00 00 00 00 00 00 28 00 03 08 02 00 ff     .........(......
      dc:	00 00 00 00 00 02 00 00 00 00 00 00 00 28 00 04     .............(..
      ec:	08 02 00 ff 00 00 00 00 00 02 00 00 00 00 00 00     ................
      fc:	00 28 00 05 08 02 00 ff 00 00 00 00 00 02 00 00     .(..............
     10c:	00 00 00 00 00 28 00 ff ff 08 00 00 08 04 00 40     .....(.........@
     11c:	00 00 00 80 00 01 00 00 00 00 00 00 00 01 00 60     ...............`
     12c:	00 60 00 60 00 01 00 00 00 00 00 00 00 01 00 01     .`.`............
     13c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     14c:	00 01 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     15c:	00 01 00 02 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     16c:	00 00 00 00 00 01 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     17c:	00 00 00 00 00 01 00 03 08 04 00 40 00 00 00 80     ...........@....
     18c:	00 01 00 00 00 00 00 00 00 01 00 60 00 60 00 60     ...........`.`.`
     19c:	00 01 00 00 00 00 00 00 00 01 00 04 08 08 00 80     ................
     1ac:	00 00 00 ff 00 08 00 00 00 00 00 00 00 20 00 ff     ............. ..
     1bc:	00 00 00 00 00 08 00 00 00 00 00 00 00 20 00 ff     ............. ..
     1cc:	00 1e 00 00 00 08 00 00 00 00 00 00 00 20 00 ff     ............. ..
     1dc:	00 3c 00 00 00 08 00 00 00 00 00 00 00 20 00 05     .<........... ..
     1ec:	03 ff 00 00 00 80 00 01 00 10 00 06 03 ff 00 00     ................
     1fc:	00 80 00 01 00 10 00 07 08 08 00 80 00 00 00 ff     ................
     20c:	00 08 00 00 00 00 00 00 00 20 00 ff 00 00 00 00     ......... ......
     21c:	00 08 00 00 00 00 00 00 00 20 00 ff 00 1e 00 00     ......... ......
     22c:	00 08 00 00 00 00 00 00 00 20 00 ff 00 3c 00 00     ......... ...<..
     23c:	00 08 00 00 00 00 00 00 00 20 00 08 08 04 00 40     ......... .....@
     24c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     25c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 09     .`.`............
     26c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     27c:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     28c:	00 08 00 0a 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     29c:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     2ac:	00 00 00 00 00 08 00 0b 08 04 00 40 00 00 00 80     ...........@....
     2bc:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     2cc:	00 01 00 00 00 00 00 00 00 08 00 ff ff 01 00 04     ................
     2dc:	08 04 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     ................
     2ec:	00 10 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     ................
     2fc:	00 10 00 05 03 ff 00 00 00 80 00 01 00 10 00 06     ................
     30c:	03 ff 00 00 00 80 00 01 00 10 00 07 08 04 00 00     ................
     31c:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 00     ................
     32c:	00 ff 00 00 00 04 00 00 00 00 00 00 00 10 00 ff     ................
     33c:	ff 02 00 05 08 02 00 ff 00 ff 00 ff 00 01 00 00     ................
     34c:	00 00 00 00 00 01 00 06 08 02 00 ff 00 ff 00 ff     ................
     35c:	00 01 00 00 00 00 00 00 00 01 00 ff ff 01 00 04     ................
     36c:	08 02 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
     37c:	00 01 00 07 08 02 00 ff 00 ff 00 ff 00 01 00 00     ................
     38c:	00 00 00 00 00 01 00 ff ff 01 00 04 08 04 00 ff     ................
     39c:	00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 00     ................
     3ac:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 05     ................
     3bc:	03 00 00 ff 00 00 00 01 00 10 00 06 03 00 00 ff     ................
     3cc:	00 00 00 01 00 10 00 07 08 04 00 00 00 00 00 ff     ................
     3dc:	00 04 00 00 00 00 00 00 00 10 00 ff 00 00 00 00     ................
     3ec:	00 04 00 00 00 00 00 00 00 10 00 ff ff 02 00 00     ................
     3fc:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     40c:	00 01 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     41c:	00 01 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     42c:	00 01 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     43c:	00 01 00 01 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     44c:	00 00 00 00 00 01 00 ff 00 1e 00 00 00 01 00 00     ................
     45c:	00 00 00 00 00 01 00 ff 00 3c 00 00 00 01 00 00     .........<......
     46c:	00 00 00 00 00 01 00 ff 00 00 00 1e 00 01 00 00     ................
     47c:	00 00 00 00 00 01 00 02 08 08 00 ff 00 00 00 00     ................
     48c:	00 01 00 00 00 00 00 00 00 01 00 ff 00 1e 00 00     ................
     49c:	00 01 00 00 00 00 00 00 00 01 00 ff 00 3c 00 00     .............<..
     4ac:	00 01 00 00 00 00 00 00 00 01 00 ff 00 00 00 1e     ................
     4bc:	00 01 00 00 00 00 00 00 00 01 00 03 08 08 00 ff     ................
     4cc:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 ff     ................
     4dc:	00 1e 00 00 00 01 00 00 00 00 00 00 00 01 00 ff     ................
     4ec:	00 3c 00 00 00 01 00 00 00 00 00 00 00 01 00 ff     .<..............
     4fc:	00 00 00 1e 00 01 00 00 00 00 00 00 00 01 00 04     ................
     50c:	08 04 00 ff 00 80 00 00 00 04 00 00 00 00 00 00     ................
     51c:	00 10 00 ff 00 00 00 00 00 04 00 00 00 00 00 00     ................
     52c:	00 10 00 07 08 04 00 7d 00 3f 00 00 00 04 00 00     .......}.?......
     53c:	00 00 00 00 00 10 00 ff 00 00 00 00 00 04 00 00     ................
     54c:	00 00 00 00 00 10 00 08 08 08 00 ff 00 00 00 00     ................
     55c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     56c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     57c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     58c:	00 01 00 00 00 00 00 00 00 0c 00 09 08 08 00 ff     ................
     59c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     5ac:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     5bc:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     5cc:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 0a     ................
     5dc:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     5ec:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     5fc:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     60c:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     61c:	00 0c 00 0b 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     62c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     63c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     64c:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     65c:	00 00 00 00 00 0c 00 ff ff 01 00 ff ff 01 00 ff     ................
     66c:	ff 01 00 ff ff 0f 00 00 08 04 00 00 00 ff 00 00     ................
     67c:	00 01 00 00 00 00 00 00 00 02 00 00 00 ff 00 5a     ...............Z
     68c:	00 01 00 00 00 00 00 00 00 02 00 01 08 06 00 00     ................
     69c:	00 ff 00 00 00 02 00 00 00 00 00 00 00 02 00 ff     ................
     6ac:	00 ff 00 ff 00 02 00 00 00 00 00 00 00 02 00 00     ................
     6bc:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 02 00 02     ...Z............
     6cc:	08 06 00 00 00 ff 00 00 00 02 00 00 00 00 00 00     ................
     6dc:	00 02 00 ff 00 ff 00 ff 00 02 00 00 00 00 00 00     ................
     6ec:	00 02 00 00 00 ff 00 5a 00 02 00 00 00 00 00 00     .......Z........
     6fc:	00 02 00 03 08 04 00 00 00 ff 00 00 00 01 00 00     ................
     70c:	00 00 00 00 00 02 00 00 00 ff 00 5a 00 01 00 00     ...........Z....
     71c:	00 00 00 00 00 02 00 04 08 02 00 ff 00 ff 00 ff     ................
     72c:	00 08 00 00 00 00 00 00 00 20 00 07 08 02 00 60     ......... .....`
     73c:	00 60 00 60 00 08 00 00 00 00 00 00 00 20 00 08     .`.`......... ..
     74c:	08 04 00 00 00 ff 00 00 00 02 00 00 00 00 00 00     ................
     75c:	00 10 00 00 00 ff 00 5a 00 02 00 00 00 00 00 00     .......Z........
     76c:	00 10 00 09 08 06 00 00 00 ff 00 00 00 02 00 00     ................
     77c:	00 00 00 00 00 10 00 60 00 60 00 60 00 02 00 00     .......`.`.`....
     78c:	00 00 00 00 00 20 00 00 00 ff 00 5a 00 02 00 00     ..... .....Z....
     79c:	00 00 00 00 00 10 00 0a 08 06 00 00 00 ff 00 00     ................
     7ac:	00 02 00 00 00 00 00 00 00 10 00 60 00 60 00 60     ...........`.`.`
     7bc:	00 02 00 00 00 00 00 00 00 20 00 00 00 ff 00 5a     ......... .....Z
     7cc:	00 02 00 00 00 00 00 00 00 10 00 0b 08 04 00 00     ................
     7dc:	00 ff 00 00 00 02 00 00 00 00 00 00 00 10 00 00     ................
     7ec:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 10 00 ff     ...Z............
     7fc:	ff 14 00 00 08 03 00 80 00 00 00 ff 00 01 00 ff     ................
     80c:	00 00 00 00 00 01 00 00 00 00 00 00 00 02 00 01     ................
     81c:	08 03 00 80 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
     82c:	00 01 00 00 00 00 00 00 00 02 00 02 08 03 00 80     ................
     83c:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     84c:	00 00 00 00 00 02 00 03 08 03 00 80 00 00 00 ff     ................
     85c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     86c:	00 02 00 04 08 02 00 00 00 ff 00 ff 00 10 00 00     ................
     87c:	00 00 00 00 00 20 00 07 08 02 00 00 00 ff 00 ff     ..... ..........
     88c:	00 10 00 00 00 00 00 00 00 20 00 08 08 03 00 80     ......... ......
     89c:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     8ac:	00 00 00 00 00 06 00 09 08 03 00 80 00 00 00 ff     ................
     8bc:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     8cc:	00 06 00 0a 08 03 00 80 00 00 00 ff 00 01 00 ff     ................
     8dc:	00 00 00 00 00 01 00 00 00 00 00 00 00 06 00 0b     ................
     8ec:	08 03 00 80 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
     8fc:	00 01 00 00 00 00 00 00 00 06 00 ff ff 0a 00 00     ................
     90c:	08 04 00 33 00 33 00 ff 00 01 00 00 00 00 00 00     ...3.3..........
     91c:	00 01 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     92c:	00 01 00 01 08 04 00 ff 00 c8 00 00 00 01 00 00     ................
     93c:	00 00 00 00 00 01 00 32 00 32 00 ff 00 01 00 00     .......2.2......
     94c:	00 00 00 00 00 01 00 02 08 04 00 32 00 32 00 ff     ...........2.2..
     95c:	00 01 00 00 00 00 00 00 00 01 00 ff 00 c8 00 00     ................
     96c:	00 01 00 00 00 00 00 00 00 01 00 03 08 04 00 ff     ................
     97c:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 32     ...............2
     98c:	00 32 00 ff 00 01 00 00 00 00 00 00 00 01 00 05     .2..............
     99c:	08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00 00 00     ................
     9ac:	00 20 00 06 08 02 00 ff 00 ff 00 ff 00 10 00 00     . ..............
     9bc:	00 00 00 00 00 20 00 08 08 04 00 ff 00 c8 00 00     ..... ..........
     9cc:	00 01 00 00 00 00 00 00 00 01 00 32 00 32 00 ff     ...........2.2..
     9dc:	00 01 00 00 00 00 00 00 00 01 00 09 08 04 00 32     ...............2
     9ec:	00 32 00 ff 00 01 00 00 00 00 00 00 00 01 00 ff     .2..............
     9fc:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 0a     ................
     a0c:	08 04 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     a1c:	00 01 00 32 00 32 00 ff 00 01 00 00 00 00 00 00     ...2.2..........
     a2c:	00 01 00 0b 08 04 00 32 00 32 00 ff 00 01 00 00     .......2.2......
     a3c:	00 00 00 00 00 01 00 ff 00 c8 00 00 00 01 00 00     ................
     a4c:	00 00 00 00 00 01 00 ff ff 05 00 00 08 0a 00 ff     ................
     a5c:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     a6c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     a7c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     a8c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     a9c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 01     ................
     aac:	08 0a 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     abc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     acc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     adc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     aec:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     afc:	00 01 00 02 08 0a 00 ff 00 00 00 00 00 01 00 00     ................
     b0c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     b1c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     b2c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     b3c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     b4c:	00 00 00 00 00 01 00 03 08 0a 00 ff 00 00 00 00     ................
     b5c:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     b6c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     b7c:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     b8c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     b9c:	00 01 00 00 00 00 00 00 00 01 00 05 08 0a 00 ff     ................
     bac:	00 00 00 00 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     bbc:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     bcc:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     bdc:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     bec:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 06     ............. ..
     bfc:	08 0a 00 ff 00 00 00 00 00 04 00 00 00 00 00 00     ................
     c0c:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
     c1c:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
     c2c:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
     c3c:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
     c4c:	00 20 00 08 08 0a 00 ff 00 00 00 00 00 01 00 00     . ..............
     c5c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     c6c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     c7c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     c8c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     c9c:	00 00 00 00 00 01 00 09 08 0a 00 ff 00 00 00 00     ................
     cac:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     cbc:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     ccc:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     cdc:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     cec:	00 01 00 00 00 00 00 00 00 01 00 0a 08 0a 00 ff     ................
     cfc:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     d0c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     d1c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     d2c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     d3c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 0b     ................
     d4c:	08 0a 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     d5c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     d6c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     d7c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     d8c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     d9c:	00 01 00 ff ff 05 00 00 08 06 00 ff 00 ff 00 ff     ................
     dac:	00 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00     ................
     dbc:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     dcc:	00 01 00 00 00 00 00 00 00 01 00 01 08 06 00 ff     ................
     ddc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 03 00 00     ................
     dec:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     dfc:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 02     ................
     e0c:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
     e1c:	00 03 00 00 00 00 00 00 00 01 00 ff 00 00 00 00     ................
     e2c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     e3c:	00 01 00 03 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
     e4c:	00 00 00 00 00 03 00 00 00 00 00 00 00 01 00 00     ................
     e5c:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     e6c:	00 00 00 00 00 01 00 04 08 04 00 ff 00 00 00 00     ................
     e7c:	00 20 00 00 00 00 00 00 00 40 00 00 00 00 00 ff     . .......@......
     e8c:	00 20 00 00 00 00 00 00 00 40 00 07 08 04 00 00     . .......@......
     e9c:	00 00 00 ff 00 20 00 00 00 00 00 00 00 40 00 ff     ..... .......@..
     eac:	00 00 00 00 00 20 00 00 00 00 00 00 00 40 00 08     ..... .......@..
     ebc:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
     ecc:	00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     edc:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     eec:	00 01 00 09 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
     efc:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 ff     ................
     f0c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     f1c:	00 00 00 00 00 01 00 0a 08 06 00 ff 00 ff 00 ff     ................
     f2c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     f3c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
     f4c:	00 01 00 00 00 00 00 00 00 01 00 0b 08 06 00 ff     ................
     f5c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
     f6c:	00 00 00 00 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     f7c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 ff     ................
     f8c:	ff 0a 00 00 08 06 00 80 00 00 00 ff 00 01 00 00     ................
     f9c:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
     fac:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
     fbc:	00 00 00 00 00 04 00 01 08 06 00 80 00 00 00 ff     ................
     fcc:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
     fdc:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
     fec:	00 01 00 00 00 00 00 00 00 04 00 02 08 06 00 80     ................
     ffc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    100c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    101c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 03     ................
    102c:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 01     ................
    103c:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 01     ................
    104c:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 01     ................
    105c:	00 04 00 04 03 80 00 00 00 ff 00 01 00 40 00 07     .............@..
    106c:	03 80 00 00 00 ff 00 01 00 40 00 08 08 06 00 80     .........@......
    107c:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    108c:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    109c:	00 ff 00 00 00 01 00 00 00 00 00 01 00 04 00 09     ................
    10ac:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    10bc:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    10cc:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    10dc:	00 04 00 0a 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    10ec:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    10fc:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    110c:	00 00 00 00 00 04 00 0b 08 06 00 80 00 00 00 ff     ................
    111c:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    112c:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    113c:	00 01 00 00 00 00 00 00 00 04 00 ff ff d2 00 00     ................
    114c:	03 40 00 00 00 80 00 01 00 04 00 01 08 02 00 40     .@.............@
    115c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 02     ................
    116c:	08 03 00 40 00 00 00 80 00 04 00 64 00 14 00 00     ...@.......d....
    117c:	00 04 00 02 00 00 00 01 00 18 00 03 08 02 00 40     ...............@
    118c:	00 00 00 80 00 19 00 64 00 14 00 00 00 19 00 05     .......d........
    119c:	08 03 00 64 00 00 00 00 00 03 00 ff 00 3c 00 00     ...d.........<..
    11ac:	00 03 00 00 00 00 00 00 00 23 00 06 08 03 00 64     .........#.....d
    11bc:	00 00 00 00 00 03 00 ff 00 3c 00 00 00 03 00 00     .........<......
    11cc:	00 00 00 00 00 23 00 08 08 02 00 40 00 00 00 80     .....#.....@....
    11dc:	00 19 00 64 00 14 00 00 00 19 00 09 08 03 00 40     ...d...........@
    11ec:	00 00 00 80 00 04 00 64 00 14 00 00 00 04 00 02     .......d........
    11fc:	00 00 00 01 00 18 00 0a 08 02 00 40 00 00 00 80     ...........@....
    120c:	00 01 00 00 00 00 00 00 00 08 00 0b 03 40 00 00     .............@..
    121c:	00 80 00 01 00 04 00 ff ff 6e 00 00 08 03 00 c8     .........n......
    122c:	00 14 00 00 00 04 00 00 00 01 00 01 00 20 00 00     ............. ..
    123c:	00 00 00 00 00 04 00 01 03 00 00 ff 00 ff 00 01     ................
    124c:	00 0c 00 02 03 00 00 ff 00 ff 00 01 00 0c 00 03     ................
    125c:	08 02 00 c8 00 28 00 00 00 01 00 00 00 01 00 01     .....(..........
    126c:	00 10 00 04 03 00 00 ff 00 ff 00 01 00 18 00 07     ................
    127c:	03 00 00 ff 00 ff 00 01 00 18 00 08 08 02 00 c8     ................
    128c:	00 28 00 00 00 01 00 00 00 01 00 01 00 10 00 09     .(..............
    129c:	03 00 00 ff 00 ff 00 01 00 0c 00 0a 03 00 00 ff     ................
    12ac:	00 ff 00 01 00 0c 00 0b 08 03 00 c8 00 28 00 00     .............(..
    12bc:	00 04 00 00 00 01 00 01 00 20 00 00 00 00 00 00     ......... ......
    12cc:	00 04 00 ff ff 14 00 00 08 04 00 00 00 ff 00 ff     ................
    12dc:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 ff     ................
    12ec:	00 01 00 00 00 00 00 00 00 10 00 01 08 02 00 00     ................
    12fc:	00 ff 00 ff 00 04 00 00 00 01 00 01 00 20 00 02     ............. ..
    130c:	03 00 00 ff 00 ff 00 01 00 10 00 03 08 04 00 00     ................
    131c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    132c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 10 00 05     ................
    133c:	08 02 00 00 00 ff 00 ff 00 20 00 00 00 00 00 00     ......... ......
    134c:	00 20 00 06 08 02 00 00 00 00 00 ff 00 20 00 00     . ........... ..
    135c:	00 00 00 00 00 20 00 08 08 04 00 00 00 ff 00 ff     ..... ..........
    136c:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    137c:	00 01 00 00 00 00 00 00 00 10 00 09 03 00 00 00     ................
    138c:	00 ff 00 01 00 10 00 0a 08 02 00 00 00 00 00 ff     ................
    139c:	00 04 00 00 00 00 00 01 00 20 00 0b 08 04 00 00     ......... ......
    13ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    13bc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    13cc:	ff 0a 00 00 08 04 00 00 00 ff 00 ff 00 01 00 00     ................
    13dc:	00 00 00 00 00 04 00 00 00 ff 00 ff 00 01 00 00     ................
    13ec:	00 00 00 00 00 10 00 01 08 02 00 00 00 ff 00 ff     ................
    13fc:	00 04 00 00 00 01 00 01 00 20 00 02 03 00 00 ff     ......... ......
    140c:	00 ff 00 01 00 10 00 03 08 04 00 00 00 ff 00 ff     ................
    141c:	00 01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00     ................
    142c:	00 01 00 00 00 00 00 00 00 10 00 05 08 02 00 00     ................
    143c:	00 ff 00 ff 00 20 00 00 00 00 00 00 00 20 00 06     ..... ....... ..
    144c:	08 02 00 ff 00 ff 00 00 00 20 00 00 00 00 00 00     ......... ......
    145c:	00 20 00 08 08 04 00 00 00 ff 00 ff 00 01 00 00     . ..............
    146c:	00 00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00     ................
    147c:	00 00 00 00 00 10 00 09 03 ff 00 ff 00 00 00 01     ................
    148c:	00 10 00 0a 08 02 00 ff 00 ff 00 00 00 04 00 01     ................
    149c:	00 01 00 00 00 20 00 0b 08 04 00 ff 00 ff 00 00     ..... ..........
    14ac:	00 01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00     ................
    14bc:	00 01 00 00 00 00 00 00 00 10 00 ff ff 0a 00 00     ................
    14cc:	08 04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00     ................
    14dc:	00 04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00     ................
    14ec:	00 10 00 01 08 02 00 ff 00 00 00 80 00 04 00 02     ................
    14fc:	00 00 00 01 00 20 00 02 03 ff 00 00 00 80 00 01     ..... ..........
    150c:	00 10 00 03 08 04 00 ff 00 00 00 80 00 01 00 00     ................
    151c:	00 00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00     ................
    152c:	00 00 00 00 00 10 00 05 08 02 00 ff 00 00 00 80     ................
    153c:	00 20 00 00 00 00 00 00 00 20 00 06 08 02 00 ff     . ....... ......
    154c:	00 ff 00 00 00 20 00 00 00 00 00 00 00 20 00 08     ..... ....... ..
    155c:	08 04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00     ................
    156c:	00 04 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    157c:	00 10 00 09 03 ff 00 ff 00 00 00 01 00 10 00 0a     ................
    158c:	08 02 00 ff 00 ff 00 00 00 04 00 01 00 01 00 00     ................
    159c:	00 20 00 0b 08 04 00 ff 00 ff 00 00 00 01 00 00     . ..............
    15ac:	00 00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00     ................
    15bc:	00 00 00 00 00 10 00 ff ff 0a 00 00 08 04 00 ff     ................
    15cc:	00 00 00 80 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    15dc:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 01     ................
    15ec:	08 02 00 ff 00 00 00 80 00 04 00 02 00 00 00 01     ................
    15fc:	00 20 00 02 03 ff 00 00 00 80 00 01 00 10 00 03     . ..............
    160c:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    161c:	00 04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00     ................
    162c:	00 10 00 05 08 02 00 ff 00 00 00 80 00 20 00 00     ............. ..
    163c:	00 00 00 00 00 20 00 06 08 02 00 ff 00 00 00 00     ..... ..........
    164c:	00 20 00 00 00 00 00 00 00 20 00 08 08 04 00 ff     . ....... ......
    165c:	00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    166c:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 09     ................
    167c:	03 ff 00 00 00 00 00 01 00 10 00 0a 08 02 00 ff     ................
    168c:	00 00 00 00 00 04 00 01 00 00 00 00 00 20 00 0b     ............. ..
    169c:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    16ac:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    16bc:	00 10 00 ff ff 28 00 00 08 02 00 00 00 80 00 80     .....(..........
    16cc:	00 01 00 00 00 00 00 00 00 08 00 01 08 02 00 00     ................
    16dc:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 02     ................
    16ec:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    16fc:	00 08 00 03 08 04 00 00 00 80 00 1e 00 08 00 00     ................
    170c:	00 00 00 ff 00 08 00 ff 00 ff 00 ff 00 02 00 00     ................
    171c:	00 00 00 00 00 18 00 08 08 04 00 00 00 80 00 1e     ................
    172c:	00 08 00 00 00 00 00 ff 00 08 00 ff 00 ff 00 ff     ................
    173c:	00 02 00 00 00 00 00 00 00 18 00 09 08 02 00 00     ................
    174c:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 0a     ................
    175c:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    176c:	00 08 00 0b 08 02 00 00 00 80 00 80 00 01 00 00     ................
    177c:	00 00 00 00 00 08 00 ff ff 64 00 00 08 02 00 00     .........d......
    178c:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 01     ................
    179c:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    17ac:	00 08 00 02 08 02 00 00 00 80 00 80 00 01 00 00     ................
    17bc:	00 00 00 00 00 08 00 03 08 02 00 00 00 80 00 80     ................
    17cc:	00 01 00 00 00 00 00 00 00 08 00 05 08 04 00 00     ................
    17dc:	00 80 00 1e 00 08 00 00 00 00 00 00 00 20 00 00     ............. ..
    17ec:	00 00 00 ff 00 08 00 00 00 00 00 00 00 20 00 06     ............. ..
    17fc:	08 04 00 00 00 80 00 1e 00 08 00 00 00 00 00 00     ................
    180c:	00 20 00 00 00 00 00 ff 00 08 00 00 00 00 00 00     . ..............
    181c:	00 20 00 08 08 02 00 00 00 80 00 80 00 01 00 00     . ..............
    182c:	00 00 00 00 00 08 00 09 08 02 00 00 00 80 00 80     ................
    183c:	00 01 00 00 00 00 00 00 00 08 00 0a 08 02 00 00     ................
    184c:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 0b     ................
    185c:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    186c:	00 08 00 ff ff 64 00 00 08 02 00 00 00 00 00 ff     .....d..........
    187c:	00 02 00 00 00 00 00 00 00 10 00 01 08 04 00 00     ................
    188c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 18 00 00     ................
    189c:	00 80 00 1e 00 01 00 00 00 00 00 00 00 08 00 02     ................
    18ac:	08 02 00 00 00 00 00 ff 00 02 00 00 00 00 00 00     ................
    18bc:	00 10 00 03 08 04 00 00 00 00 00 ff 00 01 00 00     ................
    18cc:	00 00 00 00 00 08 00 00 00 80 00 1e 00 01 00 00     ................
    18dc:	00 00 00 00 00 08 00 05 08 02 00 00 00 80 00 80     ................
    18ec:	00 08 00 00 00 00 00 00 00 20 00 06 08 02 00 00     ......... ......
    18fc:	00 80 00 80 00 08 00 00 00 00 00 00 00 20 00 08     ............. ..
    190c:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    191c:	00 08 00 00 00 80 00 1e 00 01 00 00 00 00 00 00     ................
    192c:	00 08 00 09 08 02 00 00 00 00 00 ff 00 02 00 00     ................
    193c:	00 00 00 00 00 10 00 0a 08 04 00 00 00 00 00 ff     ................
    194c:	00 01 00 00 00 00 00 00 00 18 00 00 00 80 00 1e     ................
    195c:	00 01 00 00 00 00 00 00 00 08 00 0b 08 02 00 00     ................
    196c:	00 00 00 ff 00 02 00 00 00 00 00 00 00 10 00 ff     ................
    197c:	ff 64 00 00 08 02 00 00 00 00 00 ff 00 01 00 00     .d..............
    198c:	00 00 00 00 00 08 00 01 08 04 00 00 00 00 00 ff     ................
    199c:	00 01 00 00 00 00 00 00 00 08 00 00 00 80 00 1e     ................
    19ac:	00 01 00 00 00 00 00 00 00 08 00 02 08 02 00 00     ................
    19bc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 03     ................
    19cc:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    19dc:	00 08 00 00 00 80 00 1e 00 01 00 00 00 00 00 00     ................
    19ec:	00 08 00 08 08 04 00 00 00 00 00 ff 00 01 00 00     ................
    19fc:	00 00 00 00 00 08 00 00 00 80 00 1e 00 01 00 00     ................
    1a0c:	00 00 00 00 00 08 00 09 08 02 00 00 00 00 00 ff     ................
    1a1c:	00 01 00 00 00 00 00 00 00 08 00 0a 08 04 00 00     ................
    1a2c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1a3c:	00 80 00 1e 00 01 00 00 00 00 00 00 00 08 00 0b     ................
    1a4c:	08 02 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1a5c:	00 08 00 ff ff 64 00 00 08 08 00 80 00 1e 00 00     .....d..........
    1a6c:	00 01 00 00 00 00 00 00 00 08 00 80 00 1e 00 00     ................
    1a7c:	00 01 00 00 00 00 00 00 00 08 00 80 00 1e 00 00     ................
    1a8c:	00 01 00 00 00 00 00 00 00 08 00 ff 00 00 00 00     ................
    1a9c:	00 01 00 00 00 00 00 00 00 08 00 01 08 02 00 80     ................
    1aac:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 02     ................
    1abc:	08 02 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1acc:	00 0c 00 03 08 08 00 80 00 1e 00 00 00 01 00 00     ................
    1adc:	00 00 00 00 00 08 00 80 00 1e 00 00 00 01 00 00     ................
    1aec:	00 00 00 00 00 08 00 80 00 1e 00 00 00 01 00 00     ................
    1afc:	00 00 00 00 00 08 00 40 00 00 00 80 00 04 00 00     .......@........
    1b0c:	00 00 00 00 00 08 00 05 08 02 00 ff 00 00 00 00     ................
    1b1c:	00 01 00 00 00 00 00 00 00 01 00 06 08 04 00 40     ...............@
    1b2c:	00 00 00 80 00 04 00 00 00 00 00 00 00 20 00 ff     ............. ..
    1b3c:	00 00 00 00 00 04 00 00 00 00 00 00 00 20 00 08     ............. ..
    1b4c:	08 08 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1b5c:	00 08 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1b6c:	00 08 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1b7c:	00 08 00 40 00 00 00 80 00 04 00 00 00 00 00 00     ...@............
    1b8c:	00 08 00 09 08 02 00 80 00 1e 00 00 00 01 00 00     ................
    1b9c:	00 00 00 00 00 08 00 0a 08 02 00 80 00 1e 00 00     ................
    1bac:	00 01 00 00 00 00 00 00 00 08 00 0b 08 08 00 80     ................
    1bbc:	00 1e 00 00 00 01 00 00 00 00 00 00 00 08 00 80     ................
    1bcc:	00 20 00 00 00 01 00 00 00 00 00 00 00 08 00 80     . ..............
    1bdc:	00 20 00 00 00 01 00 00 00 00 00 00 00 08 00 ff     . ..............
    1bec:	00 00 00 00 00 01 00 00 00 00 00 00 00 08 00 ff     ................
    1bfc:	ff c8 00 00 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    1c0c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1c1c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1c2c:	00 00 00 00 00 01 00 01 08 06 00 ff 00 00 00 00     ................
    1c3c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1c4c:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1c5c:	00 08 00 00 00 00 00 00 00 01 00 02 08 06 00 ff     ................
    1c6c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1c7c:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1c8c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 03     ................
    1c9c:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1cac:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1cbc:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1ccc:	00 01 00 05 05 ff 00 00 00 00 00 00 00 00 00 ff     ................
    1cdc:	00 0a 00 14 00 4b 00 06 05 ff 00 00 00 00 00 00     .....K..........
    1cec:	00 00 00 ff 00 0a 00 14 00 4b 00 08 08 06 00 ff     .........K......
    1cfc:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1d0c:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1d1c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 09     ................
    1d2c:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1d3c:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1d4c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1d5c:	00 01 00 0a 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    1d6c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1d7c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1d8c:	00 00 00 00 00 01 00 0b 08 06 00 ff 00 00 00 00     ................
    1d9c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1dac:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1dbc:	00 08 00 00 00 00 00 00 00 01 00 ff ff 32 00 05     .............2..
    1dcc:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 ff 00 00     ................
    1ddc:	00 02 00 00 00 00 00 ff 00 02 00 ff 00 00 00 00     ................
    1dec:	00 01 00 00 00 00 00 00 00 20 00 00 00 00 00 00     ......... ......
    1dfc:	00 01 00 06 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    1e0c:	00 ff 00 00 00 02 00 00 00 00 00 ff 00 02 00 ff     ................
    1e1c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 00     ............. ..
    1e2c:	00 00 00 00 00 01 00 ff ff 0a 00 00 08 03 00 ff     ................
    1e3c:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1e4c:	00 00 00 00 00 0c 00 01 08 03 00 ff 00 ff 00 ff     ................
    1e5c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1e6c:	00 0c 00 02 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1e7c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 03     ................
    1e8c:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1e9c:	00 01 00 00 00 00 00 00 00 0c 00 05 08 04 00 40     ...............@
    1eac:	00 00 00 80 00 06 00 00 00 00 00 00 00 20 00 00     ............. ..
    1ebc:	00 00 00 ff 00 06 00 00 00 00 00 00 00 20 00 06     ............. ..
    1ecc:	08 04 00 40 00 00 00 80 00 06 00 00 00 00 00 00     ...@............
    1edc:	00 20 00 00 00 00 00 ff 00 06 00 00 00 00 00 00     . ..............
    1eec:	00 20 00 08 08 03 00 ff 00 ff 00 ff 00 01 00 ff     . ..............
    1efc:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 09     ................
    1f0c:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1f1c:	00 01 00 00 00 00 00 00 00 0c 00 0a 08 03 00 ff     ................
    1f2c:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1f3c:	00 00 00 00 00 0c 00 0b 08 03 00 ff 00 ff 00 ff     ................
    1f4c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1f5c:	00 0c 00 ff ff 28 00 00 08 0a 00 40 00 00 00 80     .....(.....@....
    1f6c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1f7c:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 ff     ................
    1f8c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 ff     ................
    1f9c:	00 01 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1fac:	00 14 00 00 00 00 00 00 00 01 00 01 08 0a 00 40     ...............@
    1fbc:	00 00 00 80 00 02 00 00 00 ff 00 00 00 01 00 00     ................
    1fcc:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    1fdc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    1fec:	00 00 00 ff 00 01 00 80 00 00 00 ff 00 02 00 00     ................
    1ffc:	00 00 00 00 00 14 00 00 00 00 00 00 00 01 00 02     ................
    200c:	08 0a 00 40 00 00 00 80 00 01 00 00 00 ff 00 00     ...@............
    201c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    202c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    203c:	00 0c 00 00 00 00 00 ff 00 01 00 40 00 00 00 80     ...........@....
    204c:	00 02 00 00 00 00 00 00 00 14 00 00 00 00 00 00     ................
    205c:	00 01 00 03 08 0a 00 40 00 00 00 80 00 01 00 00     .......@........
    206c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    207c:	00 ff 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    208c:	00 00 00 00 00 0c 00 00 00 00 00 ff 00 01 00 40     ...............@
    209c:	00 00 00 80 00 02 00 00 00 00 00 00 00 14 00 00     ................
    20ac:	00 00 00 00 00 01 00 05 08 04 00 00 00 ff 00 00     ................
    20bc:	00 20 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     . ....... ......
    20cc:	00 20 00 00 00 00 00 00 00 20 00 06 08 04 00 00     . ....... ......
    20dc:	00 ff 00 00 00 20 00 00 00 00 00 00 00 20 00 00     ..... ....... ..
    20ec:	00 00 00 ff 00 20 00 00 00 00 00 00 00 20 00 08     ..... ....... ..
    20fc:	08 0a 00 40 00 00 00 80 00 01 00 00 00 ff 00 00     ...@............
    210c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    211c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    212c:	00 0c 00 00 00 00 00 ff 00 01 00 40 00 00 00 80     ...........@....
    213c:	00 02 00 00 00 00 00 00 00 14 00 00 00 00 00 00     ................
    214c:	00 01 00 09 08 0a 00 40 00 00 00 80 00 01 00 00     .......@........
    215c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    216c:	00 ff 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    217c:	00 00 00 00 00 0c 00 00 00 00 00 ff 00 01 00 40     ...............@
    218c:	00 00 00 80 00 02 00 00 00 00 00 00 00 14 00 00     ................
    219c:	00 00 00 00 00 01 00 0a 08 0a 00 40 00 00 00 80     ...........@....
    21ac:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    21bc:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 ff     ................
    21cc:	00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 ff     ................
    21dc:	00 01 00 40 00 00 00 80 00 02 00 00 00 00 00 00     ...@............
    21ec:	00 14 00 00 00 00 00 00 00 01 00 0b 08 0a 00 40     ...............@
    21fc:	00 00 00 80 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    220c:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    221c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    222c:	00 00 00 ff 00 01 00 40 00 00 00 80 00 02 00 00     .......@........
    223c:	00 00 00 00 00 14 00 00 00 00 00 00 00 01 00 ff     ................
    224c:	ff 32 00 00 08 03 00 00 00 00 00 ff 00 01 00 00     .2..............
    225c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 0c 00 01     ................
    226c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    227c:	00 0c 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    228c:	00 24 00 02 08 04 00 40 00 00 00 80 00 01 00 00     .$.....@........
    229c:	00 00 00 00 00 0c 00 40 00 00 00 80 00 01 00 00     .......@........
    22ac:	00 00 00 00 00 24 00 03 08 03 00 00 00 00 00 ff     .....$..........
    22bc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    22cc:	00 0c 00 05 08 04 00 00 00 ff 00 00 00 20 00 00     ............. ..
    22dc:	00 00 00 00 00 20 00 00 00 00 00 ff 00 20 00 00     ..... ....... ..
    22ec:	00 00 00 00 00 20 00 06 08 04 00 00 00 ff 00 00     ..... ..........
    22fc:	00 20 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     . ....... ......
    230c:	00 20 00 00 00 00 00 00 00 20 00 08 08 03 00 00     . ....... ......
    231c:	00 00 00 ff 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    232c:	00 00 00 00 00 0c 00 09 08 04 00 40 00 00 00 80     ...........@....
    233c:	00 01 00 00 00 00 00 00 00 0c 00 40 00 00 00 80     ...........@....
    234c:	00 01 00 00 00 00 00 00 00 24 00 0a 08 04 00 40     .........$.....@
    235c:	00 00 00 80 00 01 00 00 00 00 00 00 00 0c 00 40     ...............@
    236c:	00 00 00 80 00 01 00 00 00 00 00 00 00 24 00 0b     .............$..
    237c:	08 03 00 00 00 00 00 ff 00 01 00 00 00 ff 00 00     ................
    238c:	00 01 00 00 00 00 00 00 00 0c 00 ff ff 32 00 00     .............2..
    239c:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    23ac:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    23bc:	00 11 00 01 08 02 00 40 00 00 00 80 00 01 00 00     .......@........
    23cc:	00 00 00 00 00 08 00 02 08 06 00 00 00 00 00 ff     ................
    23dc:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    23ec:	00 01 00 00 00 00 00 00 00 08 00 ff 00 ff 00 ff     ................
    23fc:	00 01 00 00 00 00 00 00 00 08 00 03 08 04 00 40     ...............@
    240c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 00     ................
    241c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 11 00 05     ................
    242c:	03 1e 00 00 00 3c 00 10 00 10 00 06 03 1e 00 00     .....<..........
    243c:	00 3c 00 10 00 10 00 08 08 04 00 40 00 00 00 80     .<.........@....
    244c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 ff     ................
    245c:	00 01 00 00 00 00 00 00 00 11 00 09 08 06 00 00     ................
    246c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    247c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 ff     ................
    248c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 0a     ................
    249c:	08 02 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    24ac:	00 08 00 0b 08 04 00 00 00 00 00 ff 00 01 00 00     ................
    24bc:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    24cc:	00 00 00 00 00 11 00 ff ff c8 00 05 03 1e 00 00     ................
    24dc:	00 3c 00 10 00 10 00 06 03 1e 00 00 00 3c 00 10     .<...........<..
    24ec:	00 10 00 ff ff 64 00 03 08 04 00 00 00 80 00 80     .....d..........
    24fc:	00 01 00 02 00 00 00 01 00 10 00 00 00 00 00 c8     ................
    250c:	00 01 00 02 00 00 00 01 00 18 00 05 03 1e 00 00     ................
    251c:	00 3c 00 10 00 10 00 06 03 1e 00 00 00 3c 00 10     .<...........<..
    252c:	00 10 00 08 08 04 00 00 00 80 00 80 00 01 00 02     ................
    253c:	00 00 00 01 00 10 00 00 00 00 00 c8 00 01 00 02     ................
    254c:	00 00 00 01 00 18 00 ff ff 64 00 03 08 04 00 00     .........d......
    255c:	00 80 00 80 00 01 00 02 00 00 00 01 00 10 00 00     ................
    256c:	00 00 00 c8 00 01 00 02 00 00 00 01 00 18 00 04     ................
    257c:	03 40 00 00 00 80 00 01 00 04 00 07 03 40 00 00     .@...........@..
    258c:	00 80 00 01 00 04 00 08 08 04 00 00 00 80 00 80     ................
    259c:	00 01 00 02 00 00 00 01 00 10 00 00 00 00 00 c8     ................
    25ac:	00 01 00 02 00 00 00 01 00 18 00 ff ff 64 00 04     .............d..
    25bc:	03 40 00 00 00 80 00 01 00 04 00 07 03 40 00 00     .@...........@..
    25cc:	00 80 00 01 00 04 00 ff ff 64 00 03 08 03 00 96     .........d......
    25dc:	00 00 00 00 00 02 00 00 00 00 00 64 00 02 00 02     ...........d....
    25ec:	00 00 00 01 00 1e 00 04 03 40 00 00 00 80 00 01     .........@......
    25fc:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 08     .....@..........
    260c:	08 03 00 96 00 00 00 00 00 02 00 00 00 00 00 64     ...............d
    261c:	00 02 00 02 00 00 00 01 00 1e 00 ff ff 64 00 03     .............d..
    262c:	08 03 00 ff 00 00 00 00 00 10 00 00 00 00 00 ff     ................
    263c:	00 10 00 60 00 60 00 60 00 04 00 08 08 03 00 80     ...`.`.`........
    264c:	00 00 00 ff 00 10 00 00 00 80 00 80 00 10 00 60     ...............`
    265c:	00 60 00 60 00 04 00 ff ff 64 00 05 08 03 00 ff     .`.`.....d......
    266c:	00 00 00 00 00 04 00 00 00 00 00 ff 00 04 00 00     ................
    267c:	00 00 00 00 00 18 00 06 08 03 00 80 00 00 00 ff     ................
    268c:	00 04 00 00 00 80 00 80 00 04 00 00 00 00 00 00     ................
    269c:	00 18 00 ff ff 64 00 00 03 00 00 00 00 ff 00 01     .....d..........
    26ac:	00 20 00 01 03 80 00 00 00 ff 00 01 00 20 00 02     . ........... ..
    26bc:	03 00 00 00 00 ff 00 01 00 20 00 03 03 80 00 00     ......... ......
    26cc:	00 ff 00 01 00 20 00 05 08 04 00 80 00 00 00 ff     ..... ..........
    26dc:	00 10 00 00 00 00 00 00 00 10 00 00 00 00 00 ff     ................
    26ec:	00 10 00 00 00 00 00 00 00 10 00 06 08 04 00 00     ................
    26fc:	00 00 00 ff 00 10 00 00 00 00 00 00 00 10 00 80     ................
    270c:	00 00 00 ff 00 10 00 00 00 00 00 00 00 10 00 08     ................
    271c:	03 80 00 00 00 ff 00 01 00 20 00 09 03 00 00 00     ......... ......
    272c:	00 ff 00 01 00 20 00 0a 03 80 00 00 00 ff 00 01     ..... ..........
    273c:	00 20 00 0b 03 00 00 00 00 ff 00 01 00 20 00 ff     . ........... ..
    274c:	ff 64 00 00 08 06 00 ff 00 ff 00 ff 00 01 00 00     .d..............
    275c:	00 00 00 00 00 10 00 ff 00 ff 00 ff 00 01 00 00     ................
    276c:	00 00 00 00 00 10 00 ff 00 ff 00 00 00 01 00 00     ................
    277c:	00 00 00 00 00 10 00 01 08 06 00 ff 00 ff 00 ff     ................
    278c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 ff     ................
    279c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 00     ................
    27ac:	00 01 00 00 00 00 00 00 00 30 00 02 08 06 00 ff     .........0......
    27bc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    27cc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    27dc:	00 ff 00 00 00 01 00 00 00 00 00 00 00 30 00 03     .............0..
    27ec:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    27fc:	00 10 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    280c:	00 10 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    281c:	00 30 00 05 08 02 00 ff 00 c8 00 00 00 01 00 00     .0..............
    282c:	00 00 00 00 00 18 00 06 08 02 00 ff 00 c8 00 00     ................
    283c:	00 01 00 00 00 00 00 00 00 18 00 08 08 06 00 ff     ................
    284c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    285c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    286c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 30 00 09     .............0..
    287c:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    288c:	00 10 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    289c:	00 10 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    28ac:	00 30 00 0a 08 06 00 ff 00 ff 00 ff 00 01 00 00     .0..............
    28bc:	00 00 00 00 00 10 00 ff 00 ff 00 ff 00 01 00 00     ................
    28cc:	00 00 00 00 00 10 00 ff 00 ff 00 00 00 01 00 00     ................
    28dc:	00 00 00 00 00 30 00 0b 08 06 00 ff 00 ff 00 ff     .....0..........
    28ec:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 ff     ................
    28fc:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 00     ................
    290c:	00 01 00 00 00 00 00 00 00 10 00 ff ff 64 00 00     .............d..
    291c:	03 14 00 14 00 00 00 01 00 20 00 01 03 14 00 14     ......... ......
    292c:	00 00 00 01 00 20 00 02 03 14 00 14 00 00 00 01     ..... ..........
    293c:	00 20 00 03 03 14 00 14 00 00 00 01 00 20 00 05     . ........... ..
    294c:	08 03 00 ff 00 ff 00 00 00 10 00 ff 00 ff 00 ff     ................
    295c:	00 02 00 00 00 00 00 00 00 20 00 06 08 03 00 ff     ......... ......
    296c:	00 ff 00 00 00 10 00 ff 00 ff 00 ff 00 02 00 00     ................
    297c:	00 00 00 00 00 20 00 08 03 14 00 14 00 00 00 01     ..... ..........
    298c:	00 20 00 09 03 14 00 14 00 00 00 01 00 20 00 0a     . ........... ..
    299c:	03 14 00 14 00 00 00 01 00 20 00 0b 03 14 00 14     ......... ......
    29ac:	00 00 00 01 00 20 00 ff ff 64 00 00 05 14 00 14     ..... ...d......
    29bc:	00 00 00 ff 00 80 00 00 00 c8 00 02 00 10 00 01     ................
    29cc:	05 14 00 14 00 00 00 40 00 00 00 80 00 c8 00 02     .......@........
    29dc:	00 10 00 02 05 14 00 14 00 00 00 ff 00 80 00 00     ................
    29ec:	00 c8 00 02 00 10 00 03 05 14 00 14 00 00 00 40     ...............@
    29fc:	00 00 00 80 00 c8 00 02 00 10 00 04 05 40 00 00     .............@..
    2a0c:	00 80 00 ff 00 80 00 00 00 c8 00 02 00 10 00 07     ................
    2a1c:	05 40 00 00 00 80 00 ff 00 80 00 00 00 c8 00 02     .@..............
    2a2c:	00 10 00 08 05 14 00 14 00 00 00 40 00 00 00 80     ...........@....
    2a3c:	00 c8 00 02 00 10 00 09 05 14 00 14 00 00 00 ff     ................
    2a4c:	00 80 00 00 00 c8 00 02 00 10 00 0a 05 14 00 14     ................
    2a5c:	00 00 00 40 00 00 00 80 00 c8 00 02 00 10 00 0b     ...@............
    2a6c:	05 14 00 14 00 00 00 ff 00 80 00 00 00 c8 00 02     ................
    2a7c:	00 10 00 ff ff 64 00 00 08 04 00 ff 00 00 00 00     .....d..........
    2a8c:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2a9c:	00 01 00 00 00 00 00 00 00 10 00 01 08 04 00 40     ...............@
    2aac:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    2abc:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 02     ................
    2acc:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2adc:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    2aec:	00 10 00 03 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    2afc:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    2b0c:	00 00 00 00 00 10 00 05 07 ff 00 00 00 00 00 00     ................
    2b1c:	00 00 00 ff 00 00 00 ff 00 00 00 2c 01 01 00 01     ...........,....
    2b2c:	00 06 07 ff 00 00 00 00 00 00 00 00 00 ff 00 00     ................
    2b3c:	00 ff 00 00 00 2c 01 01 00 01 00 08 08 04 00 40     .....,.........@
    2b4c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    2b5c:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 09     ................
    2b6c:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2b7c:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    2b8c:	00 10 00 0a 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    2b9c:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    2bac:	00 00 00 00 00 10 00 0b 08 04 00 ff 00 00 00 00     ................
    2bbc:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2bcc:	00 01 00 00 00 00 00 00 00 10 00 ff ff 64 00 00     .............d..
    2bdc:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2bec:	00 20 00 01 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    2bfc:	00 00 00 00 00 20 00 02 08 02 00 14 00 00 00 00     ..... ..........
    2c0c:	00 01 00 00 00 00 00 00 00 20 00 03 08 02 00 14     ......... ......
    2c1c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 04     ............. ..
    2c2c:	08 04 00 ff 00 00 00 00 00 01 00 02 00 00 00 00     ................
    2c3c:	00 08 00 40 00 00 00 80 00 01 00 02 00 00 00 00     ...@............
    2c4c:	00 10 00 07 08 04 00 ff 00 00 00 00 00 01 00 02     ................
    2c5c:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 02     .......@........
    2c6c:	00 00 00 00 00 10 00 08 08 02 00 14 00 00 00 00     ................
    2c7c:	00 01 00 00 00 00 00 00 00 20 00 09 08 02 00 14     ......... ......
    2c8c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 0a     ............. ..
    2c9c:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2cac:	00 20 00 0b 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    2cbc:	00 00 00 00 00 20 00 ff ff 64 00 00 08 02 00 ff     ..... ...d......
    2ccc:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 01     ............. ..
    2cdc:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2cec:	00 20 00 02 08 02 00 ff 00 00 00 00 00 01 00 00     . ..............
    2cfc:	00 00 00 00 00 20 00 03 08 02 00 ff 00 00 00 00     ..... ..........
    2d0c:	00 01 00 0a 00 00 00 0a 00 10 00 05 08 03 00 7d     ...............}
    2d1c:	00 00 00 fa 00 10 00 7d 00 00 00 00 00 10 00 00     .......}........
    2d2c:	00 00 00 00 00 20 00 06 08 03 00 7d 00 00 00 fa     ..... .....}....
    2d3c:	00 10 00 7d 00 00 00 00 00 10 00 00 00 00 00 00     ...}............
    2d4c:	00 20 00 08 08 02 00 ff 00 00 00 00 00 01 00 0a     . ..............
    2d5c:	00 00 00 0a 00 10 00 09 08 02 00 ff 00 00 00 00     ................
    2d6c:	00 01 00 00 00 00 00 00 00 20 00 0a 08 02 00 ff     ......... ......
    2d7c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 0b     ............. ..
    2d8c:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2d9c:	00 20 00 ff ff 64 00 00 08 02 00 28 00 00 00 00     . ...d.....(....
    2dac:	00 01 00 00 00 00 00 00 00 10 00 01 08 02 00 28     ...............(
    2dbc:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 02     ................
    2dcc:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2ddc:	00 10 00 03 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2dec:	00 00 00 00 00 10 00 05 08 03 00 7d 00 00 00 00     ...........}....
    2dfc:	00 10 00 7d 00 7d 00 00 00 10 00 00 00 00 00 00     ...}.}..........
    2e0c:	00 20 00 06 08 03 00 7d 00 00 00 00 00 10 00 7d     . .....}.......}
    2e1c:	00 7d 00 00 00 10 00 00 00 00 00 00 00 20 00 08     .}........... ..
    2e2c:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2e3c:	00 10 00 09 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2e4c:	00 00 00 00 00 10 00 0a 08 02 00 28 00 00 00 00     ...........(....
    2e5c:	00 01 00 00 00 00 00 00 00 10 00 0b 08 02 00 28     ...............(
    2e6c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    2e7c:	ff 64 00 00 08 04 00 28 00 00 00 00 00 01 00 00     .d.....(........
    2e8c:	00 00 00 00 00 10 00 ff 00 80 00 40 00 01 00 00     ...........@....
    2e9c:	00 00 00 00 00 10 00 01 08 02 00 00 00 00 00 00     ................
    2eac:	00 01 00 00 00 00 00 00 00 10 00 02 08 02 00 00     ................
    2ebc:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 03     ................
    2ecc:	08 04 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2edc:	00 10 00 ff 00 80 00 40 00 01 00 00 00 00 00 00     .......@........
    2eec:	00 10 00 08 08 04 00 28 00 00 00 00 00 01 00 00     .......(........
    2efc:	00 00 00 00 00 10 00 ff 00 80 00 40 00 01 00 00     ...........@....
    2f0c:	00 00 00 00 00 10 00 09 08 02 00 28 00 00 00 00     ...........(....
    2f1c:	00 01 00 00 00 00 00 00 00 10 00 0a 08 02 00 28     ...............(
    2f2c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 0b     ................
    2f3c:	08 04 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2f4c:	00 10 00 ff 00 80 00 40 00 01 00 00 00 00 00 00     .......@........
    2f5c:	00 10 00 ff ff 64 00 05 09 ff 00 ff 00 ff 00 ff     .....d..........
    2f6c:	ff 64 00 00 03 80 00 00 00 ff 00 01 00 10 00 01     .d..............
    2f7c:	03 80 00 00 00 ff 00 01 00 10 00 02 03 80 00 00     ................
    2f8c:	00 ff 00 01 00 10 00 03 03 ff 00 00 00 00 00 01     ................
    2f9c:	00 10 00 04 03 00 00 ff 00 80 00 04 00 10 00 07     ................
    2fac:	03 00 00 ff 00 80 00 04 00 10 00 08 03 ff 00 00     ................
    2fbc:	00 00 00 01 00 10 00 09 03 80 00 00 00 ff 00 01     ................
    2fcc:	00 10 00 0a 03 80 00 00 00 ff 00 01 00 10 00 0b     ................
    2fdc:	03 80 00 00 00 ff 00 01 00 10 00 ff ff 64 00 00     .............d..
    2fec:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2ffc:	00 09 00 01 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    300c:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    301c:	00 00 00 00 00 04 00 02 08 02 00 80 00 00 00 ff     ................
    302c:	00 01 00 00 00 00 00 00 00 04 00 03 08 04 00 80     ................
    303c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    304c:	00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 05     ................
    305c:	08 02 00 00 00 ff 00 80 00 04 00 00 00 00 00 00     ................
    306c:	00 08 00 06 08 02 00 00 00 ff 00 80 00 04 00 00     ................
    307c:	00 00 00 00 00 08 00 08 08 04 00 80 00 00 00 ff     ................
    308c:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    309c:	00 01 00 00 00 00 00 00 00 04 00 09 08 02 00 80     ................
    30ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 0a     ................
    30bc:	08 04 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    30cc:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    30dc:	00 04 00 0b 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    30ec:	00 00 00 00 00 09 00 ff ff 32 00 00 08 08 00 ff     .........2......
    30fc:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    310c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    311c:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 1e     .<..............
    312c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 01     ................
    313c:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    314c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    315c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    316c:	00 0c 00 1e 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    317c:	00 01 00 02 08 08 00 ff 00 00 00 00 00 01 00 00     ................
    318c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    319c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    31ac:	00 00 00 00 00 0c 00 1e 00 00 00 ff 00 01 00 00     ................
    31bc:	00 00 00 00 00 01 00 03 08 08 00 ff 00 00 00 00     ................
    31cc:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    31dc:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    31ec:	00 01 00 00 00 00 00 00 00 0c 00 1e 00 00 00 ff     ................
    31fc:	00 01 00 00 00 00 00 00 00 01 00 04 03 00 00 00     ................
    320c:	00 3c 00 01 00 20 00 05 08 04 00 80 00 40 00 00     .<... .......@..
    321c:	00 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
    322c:	00 04 00 00 00 00 00 00 00 20 00 06 08 04 00 80     ......... ......
    323c:	00 40 00 00 00 04 00 00 00 00 00 00 00 20 00 00     .@........... ..
    324c:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 07     ............. ..
    325c:	03 00 00 3c 00 00 00 01 00 20 00 08 08 08 00 ff     ...<..... ......
    326c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    327c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    328c:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     .<..............
    329c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 09     ................
    32ac:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    32bc:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    32cc:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    32dc:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    32ec:	00 01 00 0a 08 08 00 ff 00 00 00 00 00 01 00 00     ................
    32fc:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    330c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    331c:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    332c:	00 00 00 00 00 01 00 0b 08 08 00 ff 00 00 00 00     ................
    333c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    334c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    335c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    336c:	00 01 00 00 00 00 00 00 00 01 00 ff ff 0a 00 00     ................
    337c:	08 04 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    338c:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    339c:	00 04 00 01 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    33ac:	00 00 00 00 00 04 00 02 08 02 00 80 00 00 00 ff     ................
    33bc:	00 01 00 00 00 00 00 00 00 04 00 03 08 02 00 80     ................
    33cc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 05     ................
    33dc:	08 03 00 ff 00 00 00 00 00 08 00 80 00 00 00 ff     ................
    33ec:	00 08 00 00 00 00 00 00 00 20 00 06 08 03 00 ff     ......... ......
    33fc:	00 00 00 00 00 08 00 80 00 00 00 ff 00 08 00 00     ................
    340c:	00 00 00 00 00 20 00 08 08 02 00 80 00 00 00 ff     ..... ..........
    341c:	00 01 00 00 00 00 00 00 00 04 00 09 08 02 00 80     ................
    342c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 0a     ................
    343c:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    344c:	00 04 00 0b 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    345c:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    346c:	00 00 00 00 00 04 00 ff ff 8c 00 ff ff 64 00 ff     .............d..
    347c:	ff 64 00 ff ff 64 00 ff ff 64 00 ff ff 64 00 ff     .d...d...d...d..
    348c:	ff 64 00 ff ff 64 00 ff ff 64 00 ff ff 64 00 ff     .d...d...d...d..
    349c:	ff 64 00 ff ff 64 00 ff ff 64 00 ff ff 64 00 ff     .d...d...d...d..
    34ac:	ff 64 00 ff 00 00                                   .d....

000034b2 <__ctors_end>:
    34b2:	11 24       	eor	r1, r1
    34b4:	1f be       	out	0x3f, r1	; 63
    34b6:	cf ef       	ldi	r28, 0xFF	; 255
    34b8:	d0 e1       	ldi	r29, 0x10	; 16
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	cd bf       	out	0x3d, r28	; 61

000034be <__do_copy_data>:
    34be:	12 e0       	ldi	r17, 0x02	; 2
    34c0:	a0 e0       	ldi	r26, 0x00	; 0
    34c2:	b1 e0       	ldi	r27, 0x01	; 1
    34c4:	e2 e2       	ldi	r30, 0x22	; 34
    34c6:	ff e5       	ldi	r31, 0x5F	; 95
    34c8:	00 e0       	ldi	r16, 0x00	; 0
    34ca:	0b bf       	out	0x3b, r16	; 59
    34cc:	02 c0       	rjmp	.+4      	; 0x34d2 <__do_copy_data+0x14>
    34ce:	07 90       	elpm	r0, Z+
    34d0:	0d 92       	st	X+, r0
    34d2:	a0 31       	cpi	r26, 0x10	; 16
    34d4:	b1 07       	cpc	r27, r17
    34d6:	d9 f7       	brne	.-10     	; 0x34ce <__do_copy_data+0x10>

000034d8 <__do_clear_bss>:
    34d8:	1e e0       	ldi	r17, 0x0E	; 14
    34da:	a0 e1       	ldi	r26, 0x10	; 16
    34dc:	b2 e0       	ldi	r27, 0x02	; 2
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <.do_clear_bss_start>

000034e0 <.do_clear_bss_loop>:
    34e0:	1d 92       	st	X+, r1

000034e2 <.do_clear_bss_start>:
    34e2:	a5 3f       	cpi	r26, 0xF5	; 245
    34e4:	b1 07       	cpc	r27, r17
    34e6:	e1 f7       	brne	.-8      	; 0x34e0 <.do_clear_bss_loop>
    34e8:	0e 94 ca 1a 	call	0x3594	; 0x3594 <main>
    34ec:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <_exit>

000034f0 <__bad_interrupt>:
    34f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000034f4 <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
    34f4:	ef 92       	push	r14
    34f6:	ff 92       	push	r15
    34f8:	0f 93       	push	r16
    34fa:	1f 93       	push	r17
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	ec 01       	movw	r28, r24
    3502:	00 e0       	ldi	r16, 0x00	; 0
    3504:	10 e0       	ldi	r17, 0x00	; 0
    3506:	ee 24       	eor	r14, r14
    3508:	ff 24       	eor	r15, r15
    350a:	0c c0       	rjmp	.+24     	; 0x3524 <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
    350c:	80 91 10 02 	lds	r24, 0x0210
    3510:	90 91 11 02 	lds	r25, 0x0211
    3514:	0a 97       	sbiw	r24, 0x0a	; 10
    3516:	4c f5       	brge	.+82     	; 0x356a <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    3518:	0f 5f       	subi	r16, 0xFF	; 255
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	27 96       	adiw	r28, 0x07	; 7
    351e:	0c 30       	cpi	r16, 0x0C	; 12
    3520:	11 05       	cpc	r17, r1
    3522:	79 f0       	breq	.+30     	; 0x3542 <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
    3524:	8e 81       	ldd	r24, Y+6	; 0x06
    3526:	81 30       	cpi	r24, 0x01	; 1
    3528:	89 f3       	breq	.-30     	; 0x350c <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    352a:	6c 81       	ldd	r22, Y+4	; 0x04
    352c:	7d 81       	ldd	r23, Y+5	; 0x05
    352e:	e8 81       	ld	r30, Y
    3530:	f9 81       	ldd	r31, Y+1	; 0x01
    3532:	c8 01       	movw	r24, r16
    3534:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    3536:	0f 5f       	subi	r16, 0xFF	; 255
    3538:	1f 4f       	sbci	r17, 0xFF	; 255
    353a:	27 96       	adiw	r28, 0x07	; 7
    353c:	0c 30       	cpi	r16, 0x0C	; 12
    353e:	11 05       	cpc	r17, r1
    3540:	89 f7       	brne	.-30     	; 0x3524 <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	e8 16       	cp	r14, r24
    3546:	f1 04       	cpc	r15, r1
    3548:	d1 f0       	breq	.+52     	; 0x357e <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
    354a:	80 91 10 02 	lds	r24, 0x0210
    354e:	90 91 11 02 	lds	r25, 0x0211
    3552:	01 96       	adiw	r24, 0x01	; 1
    3554:	90 93 11 02 	sts	0x0211, r25
    3558:	80 93 10 02 	sts	0x0210, r24
	}
}
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    356a:	6c 81       	ldd	r22, Y+4	; 0x04
    356c:	7d 81       	ldd	r23, Y+5	; 0x05
    356e:	e8 81       	ld	r30, Y
    3570:	f9 81       	ldd	r31, Y+1	; 0x01
    3572:	c8 01       	movw	r24, r16
    3574:	09 95       	icall
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	e8 2e       	mov	r14, r24
    357a:	f1 2c       	mov	r15, r1
    357c:	cd cf       	rjmp	.-102    	; 0x3518 <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
    357e:	10 92 11 02 	sts	0x0211, r1
    3582:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	08 95       	ret

00003594 <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
    3594:	2f 92       	push	r2
    3596:	3f 92       	push	r3
    3598:	4f 92       	push	r4
    359a:	5f 92       	push	r5
    359c:	6f 92       	push	r6
    359e:	7f 92       	push	r7
    35a0:	8f 92       	push	r8
    35a2:	9f 92       	push	r9
    35a4:	af 92       	push	r10
    35a6:	bf 92       	push	r11
    35a8:	cf 92       	push	r12
    35aa:	df 92       	push	r13
    35ac:	ef 92       	push	r14
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	c0 56       	subi	r28, 0x60	; 96
    35be:	d0 40       	sbci	r29, 0x00	; 0
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
    35ca:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
    35ce:	8f ef       	ldi	r24, 0xFF	; 255
    35d0:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
    35d4:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
    35d6:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
    35d8:	8b b3       	in	r24, 0x1b	; 27
    35da:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
    35dc:	8e b5       	in	r24, 0x2e	; 46
    35de:	88 60       	ori	r24, 0x08	; 8
    35e0:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
    35e2:	80 e4       	ldi	r24, 0x40	; 64
    35e4:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
    35e6:	80 ea       	ldi	r24, 0xA0	; 160
    35e8:	9f e0       	ldi	r25, 0x0F	; 15
    35ea:	9b bd       	out	0x2b, r25	; 43
    35ec:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
    35ee:	8e b5       	in	r24, 0x2e	; 46
    35f0:	82 60       	ori	r24, 0x02	; 2
    35f2:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
    35f4:	0e 94 7d 28 	call	0x50fa	; 0x50fa <initDecoder>
    35f8:	4d e0       	ldi	r20, 0x0D	; 13
    35fa:	64 2e       	mov	r6, r20
    35fc:	71 2c       	mov	r7, r1
    35fe:	6c 0e       	add	r6, r28
    3600:	7d 1e       	adc	r7, r29
    3602:	f3 01       	movw	r30, r6
    3604:	87 e0       	ldi	r24, 0x07	; 7
    3606:	9c e1       	ldi	r25, 0x1C	; 28
    3608:	9e 01       	movw	r18, r28
    360a:	2f 59       	subi	r18, 0x9F	; 159
    360c:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    360e:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
    3610:	6c e6       	ldi	r22, 0x6C	; 108
    3612:	7c e1       	ldi	r23, 0x1C	; 28
    3614:	71 83       	std	Z+1, r23	; 0x01
    3616:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
    3618:	93 83       	std	Z+3, r25	; 0x03
    361a:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
    361c:	15 82       	std	Z+5, r1	; 0x05
    361e:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    3620:	4b 8b       	std	Y+19, r20	; 0x13
    3622:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
    3624:	e2 17       	cp	r30, r18
    3626:	f3 07       	cpc	r31, r19
    3628:	99 f7       	brne	.-26     	; 0x3610 <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
    362a:	0e 94 53 28 	call	0x50a6	; 0x50a6 <getNextGroup>
    362e:	fc 01       	movw	r30, r24
    3630:	ee 24       	eor	r14, r14
    3632:	ff 24       	eor	r15, r15
    3634:	88 24       	eor	r8, r8
    3636:	8a 94       	dec	r8
    3638:	98 2c       	mov	r9, r8
    363a:	2e 01       	movw	r4, r28
    363c:	08 94       	sec
    363e:	41 1c       	adc	r4, r1
    3640:	51 1c       	adc	r5, r1
    3642:	aa 24       	eor	r10, r10
    3644:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    3646:	3c e0       	ldi	r19, 0x0C	; 12
    3648:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
    364a:	33 24       	eor	r3, r3
    364c:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
    364e:	02 81       	ldd	r16, Z+2	; 0x02
    3650:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    3652:	d2 01       	movw	r26, r4
    3654:	e2 2d       	mov	r30, r2
    3656:	1d 92       	st	X+, r1
    3658:	ea 95       	dec	r30
    365a:	e9 f7       	brne	.-6      	; 0x3656 <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
    365c:	d8 01       	movw	r26, r16
    365e:	8c 91       	ld	r24, X
    3660:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
    3662:	f2 01       	movw	r30, r4
    3664:	e8 0f       	add	r30, r24
    3666:	f9 1f       	adc	r31, r25
    3668:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
    366a:	fc 01       	movw	r30, r24
    366c:	ee 0f       	add	r30, r30
    366e:	ff 1f       	adc	r31, r31
    3670:	ee 0f       	add	r30, r30
    3672:	ff 1f       	adc	r31, r31
    3674:	ee 0f       	add	r30, r30
    3676:	ff 1f       	adc	r31, r31
    3678:	e8 1b       	sub	r30, r24
    367a:	f9 0b       	sbc	r31, r25
    367c:	e4 0d       	add	r30, r4
    367e:	f5 1d       	adc	r31, r5
    3680:	12 96       	adiw	r26, 0x02	; 2
    3682:	2d 91       	ld	r18, X+
    3684:	3c 91       	ld	r19, X
    3686:	13 97       	sbiw	r26, 0x03	; 3
    3688:	35 87       	std	Z+13, r19	; 0x0d
    368a:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
    368c:	16 96       	adiw	r26, 0x06	; 6
    368e:	6d 91       	ld	r22, X+
    3690:	7c 91       	ld	r23, X
    3692:	17 97       	sbiw	r26, 0x07	; 7
    3694:	71 8b       	std	Z+17, r23	; 0x11
    3696:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
    3698:	18 96       	adiw	r26, 0x08	; 8
    369a:	2c 91       	ld	r18, X
    369c:	18 97       	sbiw	r26, 0x08	; 8
    369e:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
    36a0:	14 96       	adiw	r26, 0x04	; 4
    36a2:	ed 91       	ld	r30, X+
    36a4:	fc 91       	ld	r31, X
    36a6:	15 97       	sbiw	r26, 0x05	; 5
    36a8:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
    36aa:	f8 01       	movw	r30, r16
    36ac:	01 85       	ldd	r16, Z+9	; 0x09
    36ae:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
    36b0:	01 15       	cp	r16, r1
    36b2:	11 05       	cpc	r17, r1
    36b4:	99 f6       	brne	.-90     	; 0x365c <main+0xc8>
    36b6:	f2 01       	movw	r30, r4
    36b8:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
    36ba:	80 81       	ld	r24, Z
    36bc:	88 23       	and	r24, r24
    36be:	61 f4       	brne	.+24     	; 0x36d8 <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
    36c0:	6c e6       	ldi	r22, 0x6C	; 108
    36c2:	7c e1       	ldi	r23, 0x1C	; 28
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	7c 93       	st	X, r23
    36c8:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
    36ca:	15 96       	adiw	r26, 0x05	; 5
    36cc:	1c 92       	st	X, r1
    36ce:	1e 92       	st	-X, r1
    36d0:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
    36d2:	16 96       	adiw	r26, 0x06	; 6
    36d4:	3c 92       	st	X, r3
    36d6:	16 97       	sbiw	r26, 0x06	; 6
    36d8:	31 96       	adiw	r30, 0x01	; 1
    36da:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
    36dc:	e6 15       	cp	r30, r6
    36de:	f7 05       	cpc	r31, r7
    36e0:	61 f7       	brne	.-40     	; 0x36ba <main+0x126>
    36e2:	00 e0       	ldi	r16, 0x00	; 0
    36e4:	10 e0       	ldi	r17, 0x00	; 0
    36e6:	cc 24       	eor	r12, r12
    36e8:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    36ea:	e1 14       	cp	r14, r1
    36ec:	f1 04       	cpc	r15, r1
    36ee:	19 f4       	brne	.+6      	; 0x36f6 <main+0x162>
    36f0:	88 24       	eor	r8, r8
    36f2:	8a 94       	dec	r8
    36f4:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
    36f6:	c3 01       	movw	r24, r6
    36f8:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <doEffects>
			waitForTimer();
    36fc:	0e 94 89 29 	call	0x5312	; 0x5312 <waitForTimer>
			displayColors();
    3700:	0e 94 d6 28 	call	0x51ac	; 0x51ac <displayColors>
			deltaTimer++;
    3704:	0f 5f       	subi	r16, 0xFF	; 255
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
    3708:	0a 30       	cpi	r16, 0x0A	; 10
    370a:	11 05       	cpc	r17, r1
    370c:	74 f3       	brlt	.-36     	; 0x36ea <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
    370e:	80 91 63 00 	lds	r24, 0x0063
    3712:	81 fd       	sbrc	r24, 1
    3714:	1a c0       	rjmp	.+52     	; 0x374a <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
    3716:	ab 28       	or	r10, r11
    3718:	09 f4       	brne	.+2      	; 0x371c <main+0x188>
    371a:	4d c0       	rjmp	.+154    	; 0x37b6 <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    371c:	80 91 63 00 	lds	r24, 0x0063
    3720:	80 fd       	sbrc	r24, 0
    3722:	21 c0       	rjmp	.+66     	; 0x3766 <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
    3724:	e0 fe       	sbrs	r14, 0
    3726:	59 c0       	rjmp	.+178    	; 0x37da <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    3728:	c1 fe       	sbrs	r12, 1
    372a:	29 c0       	rjmp	.+82     	; 0x377e <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
    372c:	b1 e0       	ldi	r27, 0x01	; 1
    372e:	8b 16       	cp	r8, r27
    3730:	91 04       	cpc	r9, r1
    3732:	b1 f1       	breq	.+108    	; 0x37a0 <main+0x20c>
    3734:	22 e0       	ldi	r18, 0x02	; 2
    3736:	a2 2e       	mov	r10, r18
    3738:	b1 2c       	mov	r11, r1
    373a:	ae 20       	and	r10, r14
    373c:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
    373e:	00 e0       	ldi	r16, 0x00	; 0
    3740:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    3742:	e1 14       	cp	r14, r1
    3744:	f1 04       	cpc	r15, r1
    3746:	b9 f6       	brne	.-82     	; 0x36f6 <main+0x162>
    3748:	d3 cf       	rjmp	.-90     	; 0x36f0 <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
    374a:	ab 28       	or	r10, r11
    374c:	21 f0       	breq	.+8      	; 0x3756 <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
    374e:	a2 e0       	ldi	r26, 0x02	; 2
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	ca 2a       	or	r12, r26
    3754:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
    3756:	ed ef       	ldi	r30, 0xFD	; 253
    3758:	ff ef       	ldi	r31, 0xFF	; 255
    375a:	ee 22       	and	r14, r30
    375c:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    375e:	80 91 63 00 	lds	r24, 0x0063
    3762:	80 ff       	sbrs	r24, 0
    3764:	df cf       	rjmp	.-66     	; 0x3724 <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
    3766:	e0 fe       	sbrs	r14, 0
    3768:	04 c0       	rjmp	.+8      	; 0x3772 <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	c8 2a       	or	r12, r24
    3770:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
    3772:	ae ef       	ldi	r26, 0xFE	; 254
    3774:	bf ef       	ldi	r27, 0xFF	; 255
    3776:	ea 22       	and	r14, r26
    3778:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    377a:	c1 fc       	sbrc	r12, 1
    377c:	d7 cf       	rjmp	.-82     	; 0x372c <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
    377e:	c0 fe       	sbrs	r12, 0
    3780:	d9 cf       	rjmp	.-78     	; 0x3734 <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
    3782:	e2 e0       	ldi	r30, 0x02	; 2
    3784:	8e 16       	cp	r8, r30
    3786:	91 04       	cpc	r9, r1
    3788:	a9 f6       	brne	.-86     	; 0x3734 <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
    378a:	92 e0       	ldi	r25, 0x02	; 2
    378c:	a9 2e       	mov	r10, r25
    378e:	b1 2c       	mov	r11, r1
    3790:	ae 20       	and	r10, r14
    3792:	bf 20       	and	r11, r15
    3794:	e1 fe       	sbrs	r14, 1
    3796:	d3 cf       	rjmp	.-90     	; 0x373e <main+0x1aa>

							groupNew = getNextGroup();
    3798:	0e 94 53 28 	call	0x50a6	; 0x50a6 <getNextGroup>
    379c:	fc 01       	movw	r30, r24
    379e:	57 cf       	rjmp	.-338    	; 0x364e <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
    37a0:	e0 fe       	sbrs	r14, 0
    37a2:	c8 cf       	rjmp	.-112    	; 0x3734 <main+0x1a0>
							groupNew = getPreviousGroup();
    37a4:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <getPreviousGroup>
    37a8:	fc 01       	movw	r30, r24
    37aa:	32 e0       	ldi	r19, 0x02	; 2
    37ac:	a3 2e       	mov	r10, r19
    37ae:	b1 2c       	mov	r11, r1
    37b0:	ae 20       	and	r10, r14
    37b2:	bf 20       	and	r11, r15
    37b4:	4c cf       	rjmp	.-360    	; 0x364e <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    37b6:	7f ef       	ldi	r23, 0xFF	; 255
    37b8:	87 16       	cp	r8, r23
    37ba:	7f ef       	ldi	r23, 0xFF	; 255
    37bc:	97 06       	cpc	r9, r23
    37be:	11 f1       	breq	.+68     	; 0x3804 <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
    37c0:	82 e0       	ldi	r24, 0x02	; 2
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	e8 2a       	or	r14, r24
    37c6:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
    37c8:	0e 94 53 28 	call	0x50a6	; 0x50a6 <getNextGroup>
    37cc:	fc 01       	movw	r30, r24
    37ce:	62 e0       	ldi	r22, 0x02	; 2
    37d0:	a6 2e       	mov	r10, r22
    37d2:	b1 2c       	mov	r11, r1
    37d4:	ae 20       	and	r10, r14
    37d6:	bf 20       	and	r11, r15
    37d8:	3a cf       	rjmp	.-396    	; 0x364e <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
    37da:	61 e0       	ldi	r22, 0x01	; 1
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	e6 2a       	or	r14, r22
    37e0:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
    37e2:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <getPreviousGroup>
    37e6:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
    37e8:	7f ef       	ldi	r23, 0xFF	; 255
    37ea:	87 16       	cp	r8, r23
    37ec:	7f ef       	ldi	r23, 0xFF	; 255
    37ee:	97 06       	cpc	r9, r23
    37f0:	e1 f6       	brne	.-72     	; 0x37aa <main+0x216>
    37f2:	51 e0       	ldi	r21, 0x01	; 1
    37f4:	85 2e       	mov	r8, r21
    37f6:	91 2c       	mov	r9, r1
    37f8:	42 e0       	ldi	r20, 0x02	; 2
    37fa:	a4 2e       	mov	r10, r20
    37fc:	b1 2c       	mov	r11, r1
    37fe:	ae 20       	and	r10, r14
    3800:	bf 20       	and	r11, r15
    3802:	25 cf       	rjmp	.-438    	; 0x364e <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    3804:	72 e0       	ldi	r23, 0x02	; 2
    3806:	87 2e       	mov	r8, r23
    3808:	91 2c       	mov	r9, r1
    380a:	da cf       	rjmp	.-76     	; 0x37c0 <main+0x22c>

0000380c <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
    380c:	08 95       	ret

0000380e <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
    380e:	08 95       	ret

00003810 <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
    3810:	08 95       	ret

00003812 <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
    3812:	08 95       	ret

00003814 <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
    3814:	fc 01       	movw	r30, r24
    3816:	ee 0f       	add	r30, r30
    3818:	ff 1f       	adc	r31, r31
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	ed 51       	subi	r30, 0x1D	; 29
    3820:	fb 4f       	sbci	r31, 0xFB	; 251
    3822:	11 82       	std	Z+1, r1	; 0x01
    3824:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
    3826:	13 82       	std	Z+3, r1	; 0x03
    3828:	12 82       	std	Z+2, r1	; 0x02
}	
    382a:	08 95       	ret

0000382c <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
    3834:	8c 01       	movw	r16, r24
    3836:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
    3838:	dc 01       	movw	r26, r24
    383a:	aa 0f       	add	r26, r26
    383c:	bb 1f       	adc	r27, r27
    383e:	aa 0f       	add	r26, r26
    3840:	bb 1f       	adc	r27, r27
    3842:	ad 51       	subi	r26, 0x1D	; 29
    3844:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
    3846:	6e 5f       	subi	r22, 0xFE	; 254
    3848:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
    384a:	12 96       	adiw	r26, 0x02	; 2
    384c:	2d 91       	ld	r18, X+
    384e:	3c 91       	ld	r19, X
    3850:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
    3852:	4d 91       	ld	r20, X+
    3854:	5c 91       	ld	r21, X
    3856:	11 97       	sbiw	r26, 0x01	; 1
    3858:	f9 01       	movw	r30, r18
    385a:	ee 0f       	add	r30, r30
    385c:	ff 1f       	adc	r31, r31
    385e:	ee 0f       	add	r30, r30
    3860:	ff 1f       	adc	r31, r31
    3862:	ee 0f       	add	r30, r30
    3864:	ff 1f       	adc	r31, r31
    3866:	e6 0f       	add	r30, r22
    3868:	f7 1f       	adc	r31, r23
    386a:	86 81       	ldd	r24, Z+6	; 0x06
    386c:	97 81       	ldd	r25, Z+7	; 0x07
    386e:	84 17       	cp	r24, r20
    3870:	95 07       	cpc	r25, r21
    3872:	6c f5       	brge	.+90     	; 0x38ce <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
    3874:	2f 5f       	subi	r18, 0xFF	; 255
    3876:	3f 4f       	sbci	r19, 0xFF	; 255
    3878:	13 96       	adiw	r26, 0x03	; 3
    387a:	3c 93       	st	X, r19
    387c:	2e 93       	st	-X, r18
    387e:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
    3880:	88 81       	ld	r24, Y
    3882:	99 81       	ldd	r25, Y+1	; 0x01
    3884:	28 17       	cp	r18, r24
    3886:	39 07       	cpc	r19, r25
    3888:	24 f0       	brlt	.+8      	; 0x3892 <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
    388a:	13 96       	adiw	r26, 0x03	; 3
    388c:	1c 92       	st	X, r1
    388e:	1e 92       	st	-X, r1
    3890:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
    3892:	11 96       	adiw	r26, 0x01	; 1
    3894:	1c 92       	st	X, r1
    3896:	1e 92       	st	-X, r1
    3898:	12 96       	adiw	r26, 0x02	; 2
    389a:	2d 91       	ld	r18, X+
    389c:	3c 91       	ld	r19, X
    389e:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
    38a0:	f9 01       	movw	r30, r18
    38a2:	ee 0f       	add	r30, r30
    38a4:	ff 1f       	adc	r31, r31
    38a6:	ee 0f       	add	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	ee 0f       	add	r30, r30
    38ac:	ff 1f       	adc	r31, r31
    38ae:	e6 0f       	add	r30, r22
    38b0:	f7 1f       	adc	r31, r23
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	42 81       	ldd	r20, Z+2	; 0x02
    38b8:	53 81       	ldd	r21, Z+3	; 0x03
    38ba:	24 81       	ldd	r18, Z+4	; 0x04
    38bc:	35 81       	ldd	r19, Z+5	; 0x05
    38be:	c8 01       	movw	r24, r16
    38c0:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
    38ce:	4f 5f       	subi	r20, 0xFF	; 255
    38d0:	5f 4f       	sbci	r21, 0xFF	; 255
    38d2:	4d 93       	st	X+, r20
    38d4:	5c 93       	st	X, r21
    38d6:	e4 cf       	rjmp	.-56     	; 0x38a0 <lightBeamEffect+0x74>

000038d8 <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
}
    38e8:	08 95       	ret

000038ea <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
    38ea:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	42 81       	ldd	r20, Z+2	; 0x02
    38f2:	53 81       	ldd	r21, Z+3	; 0x03
    38f4:	24 81       	ldd	r18, Z+4	; 0x04
    38f6:	35 81       	ldd	r19, Z+5	; 0x05
    38f8:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
}
    38fc:	08 95       	ret

000038fe <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
    38fe:	0f 93       	push	r16
    3900:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
    3902:	fc 01       	movw	r30, r24
    3904:	ee 0f       	add	r30, r30
    3906:	ff 1f       	adc	r31, r31
    3908:	df 01       	movw	r26, r30
    390a:	a5 5b       	subi	r26, 0xB5	; 181
    390c:	bc 4f       	sbci	r27, 0xFC	; 252
    390e:	1d 92       	st	X+, r1
    3910:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
    3912:	ed 59       	subi	r30, 0x9D	; 157
    3914:	fc 4f       	sbci	r31, 0xFC	; 252
    3916:	21 e0       	ldi	r18, 0x01	; 1
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	31 83       	std	Z+1, r19	; 0x01
    391c:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    391e:	fb 01       	movw	r30, r22
    3920:	60 81       	ld	r22, Z
    3922:	71 81       	ldd	r23, Z+1	; 0x01
    3924:	42 81       	ldd	r20, Z+2	; 0x02
    3926:	53 81       	ldd	r21, Z+3	; 0x03
    3928:	24 81       	ldd	r18, Z+4	; 0x04
    392a:	35 81       	ldd	r19, Z+5	; 0x05
    392c:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
}
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	08 95       	ret

00003936 <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	9c 01       	movw	r18, r24
    3944:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
    3946:	88 0f       	add	r24, r24
    3948:	99 1f       	adc	r25, r25
    394a:	8c 01       	movw	r16, r24
    394c:	05 5b       	subi	r16, 0xB5	; 181
    394e:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
    3950:	ec 01       	movw	r28, r24
    3952:	cd 59       	subi	r28, 0x9D	; 157
    3954:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
    395a:	42 81       	ldd	r20, Z+2	; 0x02
    395c:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
    395e:	e4 80       	ldd	r14, Z+4	; 0x04
    3960:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
    3962:	a6 81       	ldd	r26, Z+6	; 0x06
    3964:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
    3966:	00 84       	ldd	r0, Z+8	; 0x08
    3968:	f1 85       	ldd	r31, Z+9	; 0x09
    396a:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
    396c:	88 81       	ld	r24, Y
    396e:	99 81       	ldd	r25, Y+1	; 0x01
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	91 05       	cpc	r25, r1
    3974:	09 f1       	breq	.+66     	; 0x39b8 <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
    3976:	89 2b       	or	r24, r25
    3978:	c1 f4       	brne	.+48     	; 0x39aa <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
    397a:	31 97       	sbiw	r30, 0x01	; 1
    397c:	d8 01       	movw	r26, r16
    397e:	8d 91       	ld	r24, X+
    3980:	9c 91       	ld	r25, X
    3982:	11 97       	sbiw	r26, 0x01	; 1
    3984:	8e 17       	cp	r24, r30
    3986:	9f 07       	cpc	r25, r31
    3988:	0c f0       	brlt	.+2      	; 0x398c <pwmEffect+0x56>
    398a:	43 c0       	rjmp	.+134    	; 0x3a12 <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
    398c:	c9 01       	movw	r24, r18
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	40 e0       	ldi	r20, 0x00	; 0
    3994:	50 e0       	ldi	r21, 0x00	; 0
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
			*curCounter +=1;
    399e:	f8 01       	movw	r30, r16
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	01 96       	adiw	r24, 0x01	; 1
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
		}

	}
	
}
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	1f 91       	pop	r17
    39b0:	0f 91       	pop	r16
    39b2:	ff 90       	pop	r15
    39b4:	ef 90       	pop	r14
    39b6:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
    39b8:	11 97       	sbiw	r26, 0x01	; 1
    39ba:	f8 01       	movw	r30, r16
    39bc:	80 81       	ld	r24, Z
    39be:	91 81       	ldd	r25, Z+1	; 0x01
    39c0:	8a 17       	cp	r24, r26
    39c2:	9b 07       	cpc	r25, r27
    39c4:	a4 f0       	brlt	.+40     	; 0x39ee <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
    39c6:	19 82       	std	Y+1, r1	; 0x01
    39c8:	18 82       	st	Y, r1
			*curCounter = 0;
    39ca:	11 82       	std	Z+1, r1	; 0x01
    39cc:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
    39ce:	c9 01       	movw	r24, r18
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	40 e0       	ldi	r20, 0x00	; 0
    39d6:	50 e0       	ldi	r21, 0x00	; 0
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    39ee:	c9 01       	movw	r24, r18
    39f0:	97 01       	movw	r18, r14
    39f2:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
			*curCounter += 1;
    39f6:	d8 01       	movw	r26, r16
    39f8:	8d 91       	ld	r24, X+
    39fa:	9c 91       	ld	r25, X
    39fc:	11 97       	sbiw	r26, 0x01	; 1
    39fe:	01 96       	adiw	r24, 0x01	; 1
    3a00:	8d 93       	st	X+, r24
    3a02:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	1f 91       	pop	r17
    3a0a:	0f 91       	pop	r16
    3a0c:	ff 90       	pop	r15
    3a0e:	ef 90       	pop	r14
    3a10:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	99 83       	std	Y+1, r25	; 0x01
    3a18:	88 83       	st	Y, r24
			*curCounter = 0;
    3a1a:	1d 92       	st	X+, r1
    3a1c:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    3a1e:	c9 01       	movw	r24, r18
    3a20:	97 01       	movw	r18, r14
    3a22:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	08 95       	ret

00003a34 <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
    3a34:	2f 92       	push	r2
    3a36:	3f 92       	push	r3
    3a38:	4f 92       	push	r4
    3a3a:	5f 92       	push	r5
    3a3c:	6f 92       	push	r6
    3a3e:	7f 92       	push	r7
    3a40:	8f 92       	push	r8
    3a42:	9f 92       	push	r9
    3a44:	af 92       	push	r10
    3a46:	bf 92       	push	r11
    3a48:	cf 92       	push	r12
    3a4a:	df 92       	push	r13
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	df 93       	push	r29
    3a56:	cf 93       	push	r28
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	6e 97       	sbiw	r28, 0x1e	; 30
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	9e 8f       	std	Y+30, r25	; 0x1e
    3a6a:	8d 8f       	std	Y+29, r24	; 0x1d
    3a6c:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
    3a6e:	20 81       	ld	r18, Z
    3a70:	31 81       	ldd	r19, Z+1	; 0x01
    3a72:	3c 8f       	std	Y+28, r19	; 0x1c
    3a74:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
    3a76:	82 81       	ldd	r24, Z+2	; 0x02
    3a78:	93 81       	ldd	r25, Z+3	; 0x03
    3a7a:	9a 8f       	std	Y+26, r25	; 0x1a
    3a7c:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
    3a7e:	a4 81       	ldd	r26, Z+4	; 0x04
    3a80:	b5 81       	ldd	r27, Z+5	; 0x05
    3a82:	b8 8f       	std	Y+24, r27	; 0x18
    3a84:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
    3a86:	26 81       	ldd	r18, Z+6	; 0x06
    3a88:	37 81       	ldd	r19, Z+7	; 0x07
    3a8a:	3e 8b       	std	Y+22, r19	; 0x16
    3a8c:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
    3a8e:	80 85       	ldd	r24, Z+8	; 0x08
    3a90:	91 85       	ldd	r25, Z+9	; 0x09
    3a92:	9c 8b       	std	Y+20, r25	; 0x14
    3a94:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
    3a96:	a2 85       	ldd	r26, Z+10	; 0x0a
    3a98:	b3 85       	ldd	r27, Z+11	; 0x0b
    3a9a:	ba 8b       	std	Y+18, r27	; 0x12
    3a9c:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
    3a9e:	24 85       	ldd	r18, Z+12	; 0x0c
    3aa0:	35 85       	ldd	r19, Z+13	; 0x0d
    3aa2:	38 8b       	std	Y+16, r19	; 0x10
    3aa4:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
    3aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3aaa:	88 0f       	add	r24, r24
    3aac:	99 1f       	adc	r25, r25
    3aae:	dc 01       	movw	r26, r24
    3ab0:	ad 5c       	subi	r26, 0xCD	; 205
    3ab2:	bc 4f       	sbci	r27, 0xFC	; 252
    3ab4:	be 87       	std	Y+14, r27	; 0x0e
    3ab6:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
    3ab8:	fc 01       	movw	r30, r24
    3aba:	e5 58       	subi	r30, 0x85	; 133
    3abc:	fc 4f       	sbci	r31, 0xFC	; 252
    3abe:	fc 87       	std	Y+12, r31	; 0x0c
    3ac0:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
    3ac2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3ac4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3ac6:	82 0f       	add	r24, r18
    3ac8:	93 1f       	adc	r25, r19
    3aca:	88 0f       	add	r24, r24
    3acc:	99 1f       	adc	r25, r25
    3ace:	88 0f       	add	r24, r24
    3ad0:	99 1f       	adc	r25, r25
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	ae 5e       	subi	r26, 0xEE	; 238
    3ad6:	bd 4f       	sbci	r27, 0xFD	; 253
    3ad8:	ba 87       	std	Y+10, r27	; 0x0a
    3ada:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
    3adc:	fc 01       	movw	r30, r24
    3ade:	ea 5e       	subi	r30, 0xEA	; 234
    3ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae2:	f8 87       	std	Y+8, r31	; 0x08
    3ae4:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
    3ae6:	9c 01       	movw	r18, r24
    3ae8:	26 5e       	subi	r18, 0xE6	; 230
    3aea:	3d 4f       	sbci	r19, 0xFD	; 253
    3aec:	3e 83       	std	Y+6, r19	; 0x06
    3aee:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
    3af0:	80 91 ea 02 	lds	r24, 0x02EA
    3af4:	81 30       	cpi	r24, 0x01	; 1
    3af6:	09 f4       	brne	.+2      	; 0x3afa <fadeBetweenColors+0xc6>
    3af8:	09 c1       	rjmp	.+530    	; 0x3d0c <fadeBetweenColors+0x2d8>
    3afa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3afc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3afe:	bd 01       	movw	r22, r26
    3b00:	88 27       	eor	r24, r24
    3b02:	77 fd       	sbrc	r23, 7
    3b04:	80 95       	com	r24
    3b06:	98 2f       	mov	r25, r24
    3b08:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3b0c:	3b 01       	movw	r6, r22
    3b0e:	4c 01       	movw	r8, r24
    3b10:	e9 8d       	ldd	r30, Y+25	; 0x19
    3b12:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3b14:	bf 01       	movw	r22, r30
    3b16:	88 27       	eor	r24, r24
    3b18:	77 fd       	sbrc	r23, 7
    3b1a:	80 95       	com	r24
    3b1c:	98 2f       	mov	r25, r24
    3b1e:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3b22:	1b 01       	movw	r2, r22
    3b24:	2c 01       	movw	r4, r24
    3b26:	2f 89       	ldd	r18, Y+23	; 0x17
    3b28:	38 8d       	ldd	r19, Y+24	; 0x18
    3b2a:	b9 01       	movw	r22, r18
    3b2c:	88 27       	eor	r24, r24
    3b2e:	77 fd       	sbrc	r23, 7
    3b30:	80 95       	com	r24
    3b32:	98 2f       	mov	r25, r24
    3b34:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3b38:	69 83       	std	Y+1, r22	; 0x01
    3b3a:	7a 83       	std	Y+2, r23	; 0x02
    3b3c:	8b 83       	std	Y+3, r24	; 0x03
    3b3e:	9c 83       	std	Y+4, r25	; 0x04
    3b40:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b42:	be 85       	ldd	r27, Y+14	; 0x0e
    3b44:	cd 90       	ld	r12, X+
    3b46:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
    3b48:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b4a:	f8 89       	ldd	r31, Y+16	; 0x10
    3b4c:	bf 01       	movw	r22, r30
    3b4e:	88 27       	eor	r24, r24
    3b50:	77 fd       	sbrc	r23, 7
    3b52:	80 95       	com	r24
    3b54:	98 2f       	mov	r25, r24
    3b56:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3b5a:	7b 01       	movw	r14, r22
    3b5c:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
    3b5e:	b6 01       	movw	r22, r12
    3b60:	88 27       	eor	r24, r24
    3b62:	77 fd       	sbrc	r23, 7
    3b64:	80 95       	com	r24
    3b66:	98 2f       	mov	r25, r24
    3b68:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3b6c:	5b 01       	movw	r10, r22
    3b6e:	6c 01       	movw	r12, r24
    3b70:	2d 89       	ldd	r18, Y+21	; 0x15
    3b72:	3e 89       	ldd	r19, Y+22	; 0x16
    3b74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b78:	28 1b       	sub	r18, r24
    3b7a:	39 0b       	sbc	r19, r25
    3b7c:	b9 01       	movw	r22, r18
    3b7e:	88 27       	eor	r24, r24
    3b80:	77 fd       	sbrc	r23, 7
    3b82:	80 95       	com	r24
    3b84:	98 2f       	mov	r25, r24
    3b86:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3b8a:	a8 01       	movw	r20, r16
    3b8c:	97 01       	movw	r18, r14
    3b8e:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__divsf3>
    3b92:	9b 01       	movw	r18, r22
    3b94:	ac 01       	movw	r20, r24
    3b96:	c6 01       	movw	r24, r12
    3b98:	b5 01       	movw	r22, r10
    3b9a:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__mulsf3>
    3b9e:	a4 01       	movw	r20, r8
    3ba0:	93 01       	movw	r18, r6
    3ba2:	0e 94 37 2b 	call	0x566e	; 0x566e <__addsf3>
    3ba6:	a9 85       	ldd	r26, Y+9	; 0x09
    3ba8:	ba 85       	ldd	r27, Y+10	; 0x0a
    3baa:	6d 93       	st	X+, r22
    3bac:	7d 93       	st	X+, r23
    3bae:	8d 93       	st	X+, r24
    3bb0:	9c 93       	st	X, r25
    3bb2:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
    3bb4:	eb 89       	ldd	r30, Y+19	; 0x13
    3bb6:	fc 89       	ldd	r31, Y+20	; 0x14
    3bb8:	29 8d       	ldd	r18, Y+25	; 0x19
    3bba:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3bbc:	e2 1b       	sub	r30, r18
    3bbe:	f3 0b       	sbc	r31, r19
    3bc0:	bf 01       	movw	r22, r30
    3bc2:	88 27       	eor	r24, r24
    3bc4:	77 fd       	sbrc	r23, 7
    3bc6:	80 95       	com	r24
    3bc8:	98 2f       	mov	r25, r24
    3bca:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3bce:	a8 01       	movw	r20, r16
    3bd0:	97 01       	movw	r18, r14
    3bd2:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__divsf3>
    3bd6:	a6 01       	movw	r20, r12
    3bd8:	95 01       	movw	r18, r10
    3bda:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__mulsf3>
    3bde:	a2 01       	movw	r20, r4
    3be0:	91 01       	movw	r18, r2
    3be2:	0e 94 37 2b 	call	0x566e	; 0x566e <__addsf3>
    3be6:	af 81       	ldd	r26, Y+7	; 0x07
    3be8:	b8 85       	ldd	r27, Y+8	; 0x08
    3bea:	6d 93       	st	X+, r22
    3bec:	7d 93       	st	X+, r23
    3bee:	8d 93       	st	X+, r24
    3bf0:	9c 93       	st	X, r25
    3bf2:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
    3bf4:	e9 89       	ldd	r30, Y+17	; 0x11
    3bf6:	fa 89       	ldd	r31, Y+18	; 0x12
    3bf8:	2f 89       	ldd	r18, Y+23	; 0x17
    3bfa:	38 8d       	ldd	r19, Y+24	; 0x18
    3bfc:	e2 1b       	sub	r30, r18
    3bfe:	f3 0b       	sbc	r31, r19
    3c00:	bf 01       	movw	r22, r30
    3c02:	88 27       	eor	r24, r24
    3c04:	77 fd       	sbrc	r23, 7
    3c06:	80 95       	com	r24
    3c08:	98 2f       	mov	r25, r24
    3c0a:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3c0e:	a8 01       	movw	r20, r16
    3c10:	97 01       	movw	r18, r14
    3c12:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <__divsf3>
    3c16:	a6 01       	movw	r20, r12
    3c18:	95 01       	movw	r18, r10
    3c1a:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <__mulsf3>
    3c1e:	29 81       	ldd	r18, Y+1	; 0x01
    3c20:	3a 81       	ldd	r19, Y+2	; 0x02
    3c22:	4b 81       	ldd	r20, Y+3	; 0x03
    3c24:	5c 81       	ldd	r21, Y+4	; 0x04
    3c26:	0e 94 37 2b 	call	0x566e	; 0x566e <__addsf3>
    3c2a:	7b 01       	movw	r14, r22
    3c2c:	8c 01       	movw	r16, r24
    3c2e:	ad 81       	ldd	r26, Y+5	; 0x05
    3c30:	be 81       	ldd	r27, Y+6	; 0x06
    3c32:	6d 93       	st	X+, r22
    3c34:	7d 93       	st	X+, r23
    3c36:	8d 93       	st	X+, r24
    3c38:	9c 93       	st	X, r25
    3c3a:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
    3c3c:	e9 85       	ldd	r30, Y+9	; 0x09
    3c3e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c40:	60 81       	ld	r22, Z
    3c42:	71 81       	ldd	r23, Z+1	; 0x01
    3c44:	82 81       	ldd	r24, Z+2	; 0x02
    3c46:	93 81       	ldd	r25, Z+3	; 0x03
    3c48:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__fixsfsi>
    3c4c:	3b 01       	movw	r6, r22
    3c4e:	4c 01       	movw	r8, r24
    3c50:	af 81       	ldd	r26, Y+7	; 0x07
    3c52:	b8 85       	ldd	r27, Y+8	; 0x08
    3c54:	6d 91       	ld	r22, X+
    3c56:	7d 91       	ld	r23, X+
    3c58:	8d 91       	ld	r24, X+
    3c5a:	9c 91       	ld	r25, X
    3c5c:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__fixsfsi>
    3c60:	5b 01       	movw	r10, r22
    3c62:	6c 01       	movw	r12, r24
    3c64:	c8 01       	movw	r24, r16
    3c66:	b7 01       	movw	r22, r14
    3c68:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__fixsfsi>
    3c6c:	8b 01       	movw	r16, r22
    3c6e:	9c 01       	movw	r18, r24
    3c70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c74:	b3 01       	movw	r22, r6
    3c76:	a5 01       	movw	r20, r10
    3c78:	98 01       	movw	r18, r16
    3c7a:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
    3c7e:	eb 85       	ldd	r30, Y+11	; 0x0b
    3c80:	fc 85       	ldd	r31, Y+12	; 0x0c
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	59 f1       	breq	.+86     	; 0x3ce0 <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
    3c8a:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c8c:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c8e:	80 81       	ld	r24, Z
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	91 83       	std	Z+1, r25	; 0x01
    3c96:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
    3c98:	97 fd       	sbrc	r25, 7
    3c9a:	19 c0       	rjmp	.+50     	; 0x3cce <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
    3c9c:	6e 96       	adiw	r28, 0x1e	; 30
    3c9e:	0f b6       	in	r0, 0x3f	; 63
    3ca0:	f8 94       	cli
    3ca2:	de bf       	out	0x3e, r29	; 62
    3ca4:	0f be       	out	0x3f, r0	; 63
    3ca6:	cd bf       	out	0x3d, r28	; 61
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	1f 91       	pop	r17
    3cae:	0f 91       	pop	r16
    3cb0:	ff 90       	pop	r15
    3cb2:	ef 90       	pop	r14
    3cb4:	df 90       	pop	r13
    3cb6:	cf 90       	pop	r12
    3cb8:	bf 90       	pop	r11
    3cba:	af 90       	pop	r10
    3cbc:	9f 90       	pop	r9
    3cbe:	8f 90       	pop	r8
    3cc0:	7f 90       	pop	r7
    3cc2:	6f 90       	pop	r6
    3cc4:	5f 90       	pop	r5
    3cc6:	4f 90       	pop	r4
    3cc8:	3f 90       	pop	r3
    3cca:	2f 90       	pop	r2
    3ccc:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
    3cce:	11 82       	std	Z+1, r1	; 0x01
    3cd0:	10 82       	st	Z, r1
			*direction = 1;
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cd8:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cda:	8d 93       	st	X+, r24
    3cdc:	9c 93       	st	X, r25
    3cde:	de cf       	rjmp	.-68     	; 0x3c9c <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
    3ce0:	ad 85       	ldd	r26, Y+13	; 0x0d
    3ce2:	be 85       	ldd	r27, Y+14	; 0x0e
    3ce4:	8d 91       	ld	r24, X+
    3ce6:	9c 91       	ld	r25, X
    3ce8:	11 97       	sbiw	r26, 0x01	; 1
    3cea:	01 96       	adiw	r24, 0x01	; 1
    3cec:	8d 93       	st	X+, r24
    3cee:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
    3cf0:	ef 85       	ldd	r30, Y+15	; 0x0f
    3cf2:	f8 89       	ldd	r31, Y+16	; 0x10
    3cf4:	e8 17       	cp	r30, r24
    3cf6:	f9 07       	cpc	r31, r25
    3cf8:	8c f6       	brge	.-94     	; 0x3c9c <fadeBetweenColors+0x268>
			*direction = 0;
    3cfa:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cfc:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cfe:	1d 92       	st	X+, r1
    3d00:	1c 92       	st	X, r1
			*currentStep = stepCount;
    3d02:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d04:	be 85       	ldd	r27, Y+14	; 0x0e
    3d06:	ed 93       	st	X+, r30
    3d08:	fc 93       	st	X, r31
    3d0a:	c8 cf       	rjmp	.-112    	; 0x3c9c <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
    3d0c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3d0e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3d10:	bf 01       	movw	r22, r30
    3d12:	88 27       	eor	r24, r24
    3d14:	77 fd       	sbrc	r23, 7
    3d16:	80 95       	com	r24
    3d18:	98 2f       	mov	r25, r24
    3d1a:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3d1e:	3b 01       	movw	r6, r22
    3d20:	4c 01       	movw	r8, r24
    3d22:	a9 85       	ldd	r26, Y+9	; 0x09
    3d24:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d26:	6d 93       	st	X+, r22
    3d28:	7d 93       	st	X+, r23
    3d2a:	8d 93       	st	X+, r24
    3d2c:	9c 93       	st	X, r25
    3d2e:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
    3d30:	e9 8d       	ldd	r30, Y+25	; 0x19
    3d32:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3d34:	bf 01       	movw	r22, r30
    3d36:	88 27       	eor	r24, r24
    3d38:	77 fd       	sbrc	r23, 7
    3d3a:	80 95       	com	r24
    3d3c:	98 2f       	mov	r25, r24
    3d3e:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3d42:	1b 01       	movw	r2, r22
    3d44:	2c 01       	movw	r4, r24
    3d46:	af 81       	ldd	r26, Y+7	; 0x07
    3d48:	b8 85       	ldd	r27, Y+8	; 0x08
    3d4a:	6d 93       	st	X+, r22
    3d4c:	7d 93       	st	X+, r23
    3d4e:	8d 93       	st	X+, r24
    3d50:	9c 93       	st	X, r25
    3d52:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
    3d54:	ef 89       	ldd	r30, Y+23	; 0x17
    3d56:	f8 8d       	ldd	r31, Y+24	; 0x18
    3d58:	bf 01       	movw	r22, r30
    3d5a:	88 27       	eor	r24, r24
    3d5c:	77 fd       	sbrc	r23, 7
    3d5e:	80 95       	com	r24
    3d60:	98 2f       	mov	r25, r24
    3d62:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__floatsisf>
    3d66:	69 83       	std	Y+1, r22	; 0x01
    3d68:	7a 83       	std	Y+2, r23	; 0x02
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
    3d6c:	9c 83       	std	Y+4, r25	; 0x04
    3d6e:	ad 81       	ldd	r26, Y+5	; 0x05
    3d70:	be 81       	ldd	r27, Y+6	; 0x06
    3d72:	6d 93       	st	X+, r22
    3d74:	7d 93       	st	X+, r23
    3d76:	8d 93       	st	X+, r24
    3d78:	9c 93       	st	X, r25
    3d7a:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    3d7c:	ed 85       	ldd	r30, Y+13	; 0x0d
    3d7e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3d80:	11 82       	std	Z+1, r1	; 0x01
    3d82:	10 82       	st	Z, r1
		*direction = 1;	
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d8a:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d8c:	8d 93       	st	X+, r24
    3d8e:	9c 93       	st	X, r25
    3d90:	cc 24       	eor	r12, r12
    3d92:	dd 24       	eor	r13, r13
    3d94:	d9 ce       	rjmp	.-590    	; 0x3b48 <fadeBetweenColors+0x114>

00003d96 <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    3d96:	21 e0       	ldi	r18, 0x01	; 1
    3d98:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    3d9c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fadeBetweenColors>
	resetEffect = FALSE;
    3da0:	10 92 ea 02 	sts	0x02EA, r1
}
    3da4:	08 95       	ret

00003da6 <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	df 93       	push	r29
    3dac:	cf 93       	push	r28
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	2e 97       	sbiw	r28, 0x0e	; 14
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	9c 01       	movw	r18, r24
    3dc0:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    3dc2:	8c 01       	movw	r16, r24
    3dc4:	00 0f       	add	r16, r16
    3dc6:	11 1f       	adc	r17, r17
    3dc8:	0d 56       	subi	r16, 0x6D	; 109
    3dca:	1c 4f       	sbci	r17, 0xFC	; 252
    3dcc:	d8 01       	movw	r26, r16
    3dce:	8d 91       	ld	r24, X+
    3dd0:	9c 91       	ld	r25, X
    3dd2:	42 97       	sbiw	r24, 0x12	; 18
    3dd4:	14 f5       	brge	.+68     	; 0x3e1a <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    3dd6:	80 81       	ld	r24, Z
    3dd8:	91 81       	ldd	r25, Z+1	; 0x01
    3dda:	9a 83       	std	Y+2, r25	; 0x02
    3ddc:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	93 81       	ldd	r25, Z+3	; 0x03
    3de2:	9c 83       	std	Y+4, r25	; 0x04
    3de4:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    3de6:	84 81       	ldd	r24, Z+4	; 0x04
    3de8:	95 81       	ldd	r25, Z+5	; 0x05
    3dea:	9e 83       	std	Y+6, r25	; 0x06
    3dec:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    3dee:	18 86       	std	Y+8, r1	; 0x08
    3df0:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    3df2:	1a 86       	std	Y+10, r1	; 0x0a
    3df4:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    3df6:	1c 86       	std	Y+12, r1	; 0x0c
    3df8:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    3dfa:	82 e1       	ldi	r24, 0x12	; 18
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	9e 87       	std	Y+14, r25	; 0x0e
    3e00:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    3e02:	c9 01       	movw	r24, r18
    3e04:	be 01       	movw	r22, r28
    3e06:	6f 5f       	subi	r22, 0xFF	; 255
    3e08:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0a:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    3e0e:	f8 01       	movw	r30, r16
    3e10:	80 81       	ld	r24, Z
    3e12:	91 81       	ldd	r25, Z+1	; 0x01
    3e14:	01 96       	adiw	r24, 0x01	; 1
    3e16:	91 83       	std	Z+1, r25	; 0x01
    3e18:	80 83       	st	Z, r24
	
}
    3e1a:	2e 96       	adiw	r28, 0x0e	; 14
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	de bf       	out	0x3e, r29	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	cf 91       	pop	r28
    3e28:	df 91       	pop	r29
    3e2a:	1f 91       	pop	r17
    3e2c:	0f 91       	pop	r16
    3e2e:	08 95       	ret

00003e30 <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    3e30:	df 93       	push	r29
    3e32:	cf 93       	push	r28
    3e34:	cd b7       	in	r28, 0x3d	; 61
    3e36:	de b7       	in	r29, 0x3e	; 62
    3e38:	2e 97       	sbiw	r28, 0x0e	; 14
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    3e46:	fc 01       	movw	r30, r24
    3e48:	ee 0f       	add	r30, r30
    3e4a:	ff 1f       	adc	r31, r31
    3e4c:	ed 56       	subi	r30, 0x6D	; 109
    3e4e:	fc 4f       	sbci	r31, 0xFC	; 252
    3e50:	11 82       	std	Z+1, r1	; 0x01
    3e52:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    3e54:	2d 91       	ld	r18, X+
    3e56:	3c 91       	ld	r19, X
    3e58:	11 97       	sbiw	r26, 0x01	; 1
    3e5a:	3a 83       	std	Y+2, r19	; 0x02
    3e5c:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    3e5e:	12 96       	adiw	r26, 0x02	; 2
    3e60:	2d 91       	ld	r18, X+
    3e62:	3c 91       	ld	r19, X
    3e64:	13 97       	sbiw	r26, 0x03	; 3
    3e66:	3c 83       	std	Y+4, r19	; 0x04
    3e68:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    3e6a:	14 96       	adiw	r26, 0x04	; 4
    3e6c:	2d 91       	ld	r18, X+
    3e6e:	3c 91       	ld	r19, X
    3e70:	15 97       	sbiw	r26, 0x05	; 5
    3e72:	3e 83       	std	Y+6, r19	; 0x06
    3e74:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    3e76:	18 86       	std	Y+8, r1	; 0x08
    3e78:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    3e7a:	1a 86       	std	Y+10, r1	; 0x0a
    3e7c:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    3e7e:	1c 86       	std	Y+12, r1	; 0x0c
    3e80:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    3e82:	22 e1       	ldi	r18, 0x12	; 18
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	3e 87       	std	Y+14, r19	; 0x0e
    3e88:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    3e8a:	21 e0       	ldi	r18, 0x01	; 1
    3e8c:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    3e90:	be 01       	movw	r22, r28
    3e92:	6f 5f       	subi	r22, 0xFF	; 255
    3e94:	7f 4f       	sbci	r23, 0xFF	; 255
    3e96:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fadeBetweenColors>
	resetEffect=FALSE;
    3e9a:	10 92 ea 02 	sts	0x02EA, r1
}
    3e9e:	2e 96       	adiw	r28, 0x0e	; 14
    3ea0:	0f b6       	in	r0, 0x3f	; 63
    3ea2:	f8 94       	cli
    3ea4:	de bf       	out	0x3e, r29	; 62
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	cd bf       	out	0x3d, r28	; 61
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    3eb0:	cf 92       	push	r12
    3eb2:	df 92       	push	r13
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	7c 01       	movw	r14, r24
    3ebe:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    3ec0:	8c 01       	movw	r16, r24
    3ec2:	00 0f       	add	r16, r16
    3ec4:	11 1f       	adc	r17, r17
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	e5 5b       	subi	r30, 0xB5	; 181
    3eca:	fc 4f       	sbci	r31, 0xFC	; 252
    3ecc:	11 82       	std	Z+1, r1	; 0x01
    3ece:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    3ed0:	f8 01       	movw	r30, r16
    3ed2:	ed 59       	subi	r30, 0x9D	; 157
    3ed4:	fc 4f       	sbci	r31, 0xFC	; 252
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    3ede:	f8 01       	movw	r30, r16
    3ee0:	e5 55       	subi	r30, 0x55	; 85
    3ee2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ee4:	11 82       	std	Z+1, r1	; 0x01
    3ee6:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    3ee8:	c7 01       	movw	r24, r14
    3eea:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    3eee:	c7 01       	movw	r24, r14
    3ef0:	b6 01       	movw	r22, r12
    3ef2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    3ef6:	0e 0d       	add	r16, r14
    3ef8:	1f 1d       	adc	r17, r15
    3efa:	00 0f       	add	r16, r16
    3efc:	11 1f       	adc	r17, r17
    3efe:	0e 55       	subi	r16, 0x5E	; 94
    3f00:	1d 4f       	sbci	r17, 0xFD	; 253
    3f02:	c7 01       	movw	r24, r14
    3f04:	b8 01       	movw	r22, r16
    3f06:	0e 94 b0 28 	call	0x5160	; 0x5160 <getRGBColor>
}
    3f0a:	1f 91       	pop	r17
    3f0c:	0f 91       	pop	r16
    3f0e:	ff 90       	pop	r15
    3f10:	ef 90       	pop	r14
    3f12:	df 90       	pop	r13
    3f14:	cf 90       	pop	r12
    3f16:	08 95       	ret

00003f18 <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    3f18:	af 92       	push	r10
    3f1a:	bf 92       	push	r11
    3f1c:	cf 92       	push	r12
    3f1e:	df 92       	push	r13
    3f20:	ef 92       	push	r14
    3f22:	ff 92       	push	r15
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	2a 97       	sbiw	r28, 0x0a	; 10
    3f32:	0f b6       	in	r0, 0x3f	; 63
    3f34:	f8 94       	cli
    3f36:	de bf       	out	0x3e, r29	; 62
    3f38:	0f be       	out	0x3f, r0	; 63
    3f3a:	cd bf       	out	0x3d, r28	; 61
    3f3c:	6c 01       	movw	r12, r24
    3f3e:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    3f40:	88 0f       	add	r24, r24
    3f42:	99 1f       	adc	r25, r25
    3f44:	8c 01       	movw	r16, r24
    3f46:	0c 0d       	add	r16, r12
    3f48:	1d 1d       	adc	r17, r13
    3f4a:	00 0f       	add	r16, r16
    3f4c:	11 1f       	adc	r17, r17
    3f4e:	0e 55       	subi	r16, 0x5E	; 94
    3f50:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    3f52:	5b ea       	ldi	r21, 0xAB	; 171
    3f54:	e5 2e       	mov	r14, r21
    3f56:	53 e0       	ldi	r21, 0x03	; 3
    3f58:	f5 2e       	mov	r15, r21
    3f5a:	e8 0e       	add	r14, r24
    3f5c:	f9 1e       	adc	r15, r25
    3f5e:	d7 01       	movw	r26, r14
    3f60:	8d 91       	ld	r24, X+
    3f62:	9c 91       	ld	r25, X
    3f64:	8a 30       	cpi	r24, 0x0A	; 10
    3f66:	91 05       	cpc	r25, r1
    3f68:	b4 f5       	brge	.+108    	; 0x3fd6 <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    3f6a:	01 96       	adiw	r24, 0x01	; 1
    3f6c:	d7 01       	movw	r26, r14
    3f6e:	8d 93       	st	X+, r24
    3f70:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    3f72:	f8 01       	movw	r30, r16
    3f74:	22 81       	ldd	r18, Z+2	; 0x02
    3f76:	33 81       	ldd	r19, Z+3	; 0x03
    3f78:	44 81       	ldd	r20, Z+4	; 0x04
    3f7a:	55 81       	ldd	r21, Z+5	; 0x05
    3f7c:	d5 01       	movw	r26, r10
    3f7e:	1e 96       	adiw	r26, 0x0e	; 14
    3f80:	6d 91       	ld	r22, X+
    3f82:	7c 91       	ld	r23, X
    3f84:	1f 97       	sbiw	r26, 0x0f	; 15
    3f86:	50 96       	adiw	r26, 0x10	; 16
    3f88:	ed 91       	ld	r30, X+
    3f8a:	fc 91       	ld	r31, X
    3f8c:	51 97       	sbiw	r26, 0x11	; 17
    3f8e:	d8 01       	movw	r26, r16
    3f90:	8d 91       	ld	r24, X+
    3f92:	9c 91       	ld	r25, X
    3f94:	9a 83       	std	Y+2, r25	; 0x02
    3f96:	89 83       	std	Y+1, r24	; 0x01
    3f98:	3c 83       	std	Y+4, r19	; 0x04
    3f9a:	2b 83       	std	Y+3, r18	; 0x03
    3f9c:	5e 83       	std	Y+6, r21	; 0x06
    3f9e:	4d 83       	std	Y+5, r20	; 0x05
    3fa0:	78 87       	std	Y+8, r23	; 0x08
    3fa2:	6f 83       	std	Y+7, r22	; 0x07
    3fa4:	fa 87       	std	Y+10, r31	; 0x0a
    3fa6:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    3fa8:	c6 01       	movw	r24, r12
    3faa:	be 01       	movw	r22, r28
    3fac:	6f 5f       	subi	r22, 0xFF	; 255
    3fae:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb0:	0e 94 9b 1c 	call	0x3936	; 0x3936 <pwmEffect>

	
	
}
    3fb4:	2a 96       	adiw	r28, 0x0a	; 10
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
    3fc0:	cf 91       	pop	r28
    3fc2:	df 91       	pop	r29
    3fc4:	1f 91       	pop	r17
    3fc6:	0f 91       	pop	r16
    3fc8:	ff 90       	pop	r15
    3fca:	ef 90       	pop	r14
    3fcc:	df 90       	pop	r13
    3fce:	cf 90       	pop	r12
    3fd0:	bf 90       	pop	r11
    3fd2:	af 90       	pop	r10
    3fd4:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    3fd6:	c6 01       	movw	r24, r12
    3fd8:	b5 01       	movw	r22, r10
    3fda:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    3fde:	c6 01       	movw	r24, r12
    3fe0:	b8 01       	movw	r22, r16
    3fe2:	0e 94 b0 28 	call	0x5160	; 0x5160 <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    3fe6:	f7 01       	movw	r30, r14
    3fe8:	11 82       	std	Z+1, r1	; 0x01
    3fea:	10 82       	st	Z, r1
    3fec:	c2 cf       	rjmp	.-124    	; 0x3f72 <fadeBetweenColorsWithPwm+0x5a>

00003fee <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	0f 93       	push	r16
    3ff4:	1f 93       	push	r17
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	62 97       	sbiw	r28, 0x12	; 18
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
    400a:	f8 2e       	mov	r15, r24
    400c:	e9 2e       	mov	r14, r25
    400e:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    4010:	1e 96       	adiw	r26, 0x0e	; 14
    4012:	8d 91       	ld	r24, X+
    4014:	9c 91       	ld	r25, X
    4016:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    4018:	81 30       	cpi	r24, 0x01	; 1
    401a:	91 05       	cpc	r25, r1
    401c:	09 f4       	brne	.+2      	; 0x4020 <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    401e:	a6 c0       	rjmp	.+332    	; 0x416c <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    4020:	89 2b       	or	r24, r25
    4022:	31 f5       	brne	.+76     	; 0x4070 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    4024:	8f 2d       	mov	r24, r15
    4026:	9e 2d       	mov	r25, r14
    4028:	fc 01       	movw	r30, r24
    402a:	ee 0f       	add	r30, r30
    402c:	ff 1f       	adc	r31, r31
    402e:	ee 0f       	add	r30, r30
    4030:	ff 1f       	adc	r31, r31
    4032:	ee 0f       	add	r30, r30
    4034:	ff 1f       	adc	r31, r31
    4036:	88 0f       	add	r24, r24
    4038:	99 1f       	adc	r25, r25
    403a:	e8 0f       	add	r30, r24
    403c:	f9 1f       	adc	r31, r25
    403e:	e5 59       	subi	r30, 0x95	; 149
    4040:	fb 4f       	sbci	r31, 0xFB	; 251
    4042:	80 e2       	ldi	r24, 0x20	; 32
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	91 83       	std	Z+1, r25	; 0x01
    4048:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    404a:	8f 2d       	mov	r24, r15
    404c:	9e 2d       	mov	r25, r14
    404e:	fc 01       	movw	r30, r24
    4050:	ee 0f       	add	r30, r30
    4052:	ff 1f       	adc	r31, r31
    4054:	ee 0f       	add	r30, r30
    4056:	ff 1f       	adc	r31, r31
    4058:	ee 0f       	add	r30, r30
    405a:	ff 1f       	adc	r31, r31
    405c:	88 0f       	add	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	e8 0f       	add	r30, r24
    4062:	f9 1f       	adc	r31, r25
    4064:	e5 59       	subi	r30, 0x95	; 149
    4066:	fb 4f       	sbci	r31, 0xFB	; 251
    4068:	82 e0       	ldi	r24, 0x02	; 2
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	93 83       	std	Z+3, r25	; 0x03
    406e:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    4070:	8f 2d       	mov	r24, r15
    4072:	9e 2d       	mov	r25, r14
    4074:	fc 01       	movw	r30, r24
    4076:	ee 0f       	add	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	ee 0f       	add	r30, r30
    407c:	ff 1f       	adc	r31, r31
    407e:	ee 0f       	add	r30, r30
    4080:	ff 1f       	adc	r31, r31
    4082:	88 0f       	add	r24, r24
    4084:	99 1f       	adc	r25, r25
    4086:	e8 0f       	add	r30, r24
    4088:	f9 1f       	adc	r31, r25
    408a:	e5 59       	subi	r30, 0x95	; 149
    408c:	fb 4f       	sbci	r31, 0xFB	; 251
    408e:	15 82       	std	Z+5, r1	; 0x05
    4090:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    4092:	8f 2d       	mov	r24, r15
    4094:	9e 2d       	mov	r25, r14
    4096:	fc 01       	movw	r30, r24
    4098:	ee 0f       	add	r30, r30
    409a:	ff 1f       	adc	r31, r31
    409c:	ee 0f       	add	r30, r30
    409e:	ff 1f       	adc	r31, r31
    40a0:	ee 0f       	add	r30, r30
    40a2:	ff 1f       	adc	r31, r31
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	e8 0f       	add	r30, r24
    40aa:	f9 1f       	adc	r31, r25
    40ac:	e5 59       	subi	r30, 0x95	; 149
    40ae:	fb 4f       	sbci	r31, 0xFB	; 251
    40b0:	50 96       	adiw	r26, 0x10	; 16
    40b2:	8c 91       	ld	r24, X
    40b4:	50 97       	sbiw	r26, 0x10	; 16
    40b6:	51 96       	adiw	r26, 0x11	; 17
    40b8:	9c 91       	ld	r25, X
    40ba:	51 97       	sbiw	r26, 0x11	; 17
    40bc:	9c 01       	movw	r18, r24
    40be:	22 0f       	add	r18, r18
    40c0:	33 1f       	adc	r19, r19
    40c2:	22 0f       	add	r18, r18
    40c4:	33 1f       	adc	r19, r19
    40c6:	22 0f       	add	r18, r18
    40c8:	33 1f       	adc	r19, r19
    40ca:	88 0f       	add	r24, r24
    40cc:	99 1f       	adc	r25, r25
    40ce:	28 0f       	add	r18, r24
    40d0:	39 1f       	adc	r19, r25
    40d2:	31 87       	std	Z+9, r19	; 0x09
    40d4:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    40d6:	8e 01       	movw	r16, r28
    40d8:	0f 5f       	subi	r16, 0xFF	; 255
    40da:	1f 4f       	sbci	r17, 0xFF	; 255
    40dc:	c8 01       	movw	r24, r16
    40de:	bd 01       	movw	r22, r26
    40e0:	47 e0       	ldi	r20, 0x07	; 7
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	0e 94 a9 29 	call	0x5352	; 0x5352 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    40e8:	8f 2d       	mov	r24, r15
    40ea:	9e 2d       	mov	r25, r14
    40ec:	fc 01       	movw	r30, r24
    40ee:	ee 0f       	add	r30, r30
    40f0:	ff 1f       	adc	r31, r31
    40f2:	ee 0f       	add	r30, r30
    40f4:	ff 1f       	adc	r31, r31
    40f6:	ee 0f       	add	r30, r30
    40f8:	ff 1f       	adc	r31, r31
    40fa:	88 0f       	add	r24, r24
    40fc:	99 1f       	adc	r25, r25
    40fe:	e8 0f       	add	r30, r24
    4100:	f9 1f       	adc	r31, r25
    4102:	e5 59       	subi	r30, 0x95	; 149
    4104:	fb 4f       	sbci	r31, 0xFB	; 251
    4106:	80 81       	ld	r24, Z
    4108:	91 81       	ldd	r25, Z+1	; 0x01
    410a:	98 8b       	std	Y+16, r25	; 0x10
    410c:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    410e:	8f 2d       	mov	r24, r15
    4110:	9e 2d       	mov	r25, r14
    4112:	fc 01       	movw	r30, r24
    4114:	ee 0f       	add	r30, r30
    4116:	ff 1f       	adc	r31, r31
    4118:	ee 0f       	add	r30, r30
    411a:	ff 1f       	adc	r31, r31
    411c:	ee 0f       	add	r30, r30
    411e:	ff 1f       	adc	r31, r31
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	e8 0f       	add	r30, r24
    4126:	f9 1f       	adc	r31, r25
    4128:	e5 59       	subi	r30, 0x95	; 149
    412a:	fb 4f       	sbci	r31, 0xFB	; 251
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	9a 8b       	std	Y+18, r25	; 0x12
    4132:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    4134:	8f 2d       	mov	r24, r15
    4136:	9e 2d       	mov	r25, r14
    4138:	b8 01       	movw	r22, r16
    413a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    413e:	8f 2d       	mov	r24, r15
    4140:	9e 2d       	mov	r25, r14
    4142:	60 e0       	ldi	r22, 0x00	; 0
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>

}
    4152:	62 96       	adiw	r28, 0x12	; 18
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	f8 94       	cli
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	0f be       	out	0x3f, r0	; 63
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	1f 91       	pop	r17
    4164:	0f 91       	pop	r16
    4166:	ff 90       	pop	r15
    4168:	ef 90       	pop	r14
    416a:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    416c:	8f 2d       	mov	r24, r15
    416e:	9e 2d       	mov	r25, r14
    4170:	fc 01       	movw	r30, r24
    4172:	ee 0f       	add	r30, r30
    4174:	ff 1f       	adc	r31, r31
    4176:	ee 0f       	add	r30, r30
    4178:	ff 1f       	adc	r31, r31
    417a:	ee 0f       	add	r30, r30
    417c:	ff 1f       	adc	r31, r31
    417e:	88 0f       	add	r24, r24
    4180:	99 1f       	adc	r25, r25
    4182:	e8 0f       	add	r30, r24
    4184:	f9 1f       	adc	r31, r25
    4186:	e5 59       	subi	r30, 0x95	; 149
    4188:	fb 4f       	sbci	r31, 0xFB	; 251
    418a:	11 82       	std	Z+1, r1	; 0x01
    418c:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    418e:	8f 2d       	mov	r24, r15
    4190:	9e 2d       	mov	r25, r14
    4192:	fc 01       	movw	r30, r24
    4194:	ee 0f       	add	r30, r30
    4196:	ff 1f       	adc	r31, r31
    4198:	ee 0f       	add	r30, r30
    419a:	ff 1f       	adc	r31, r31
    419c:	ee 0f       	add	r30, r30
    419e:	ff 1f       	adc	r31, r31
    41a0:	88 0f       	add	r24, r24
    41a2:	99 1f       	adc	r25, r25
    41a4:	e8 0f       	add	r30, r24
    41a6:	f9 1f       	adc	r31, r25
    41a8:	e5 59       	subi	r30, 0x95	; 149
    41aa:	fb 4f       	sbci	r31, 0xFB	; 251
    41ac:	80 e2       	ldi	r24, 0x20	; 32
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	93 83       	std	Z+3, r25	; 0x03
    41b2:	82 83       	std	Z+2, r24	; 0x02
    41b4:	5d cf       	rjmp	.-326    	; 0x4070 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

000041b6 <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    41b6:	ef 92       	push	r14
    41b8:	ff 92       	push	r15
    41ba:	0f 93       	push	r16
    41bc:	1f 93       	push	r17
    41be:	df 93       	push	r29
    41c0:	cf 93       	push	r28
    41c2:	cd b7       	in	r28, 0x3d	; 61
    41c4:	de b7       	in	r29, 0x3e	; 62
    41c6:	62 97       	sbiw	r28, 0x12	; 18
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	f8 94       	cli
    41cc:	de bf       	out	0x3e, r29	; 62
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	cd bf       	out	0x3d, r28	; 61
    41d2:	f8 2e       	mov	r15, r24
    41d4:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    41d6:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    41d8:	fb 01       	movw	r30, r22
    41da:	80 81       	ld	r24, Z
    41dc:	91 81       	ldd	r25, Z+1	; 0x01
    41de:	9a 83       	std	Y+2, r25	; 0x02
    41e0:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    41e2:	82 81       	ldd	r24, Z+2	; 0x02
    41e4:	93 81       	ldd	r25, Z+3	; 0x03
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    41ea:	84 81       	ldd	r24, Z+4	; 0x04
    41ec:	95 81       	ldd	r25, Z+5	; 0x05
    41ee:	9e 83       	std	Y+6, r25	; 0x06
    41f0:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    41f2:	86 81       	ldd	r24, Z+6	; 0x06
    41f4:	97 81       	ldd	r25, Z+7	; 0x07
    41f6:	98 87       	std	Y+8, r25	; 0x08
    41f8:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    41fa:	80 85       	ldd	r24, Z+8	; 0x08
    41fc:	91 85       	ldd	r25, Z+9	; 0x09
    41fe:	9a 87       	std	Y+10, r25	; 0x0a
    4200:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    4202:	82 85       	ldd	r24, Z+10	; 0x0a
    4204:	93 85       	ldd	r25, Z+11	; 0x0b
    4206:	9c 87       	std	Y+12, r25	; 0x0c
    4208:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    420a:	82 89       	ldd	r24, Z+18	; 0x12
    420c:	93 89       	ldd	r25, Z+19	; 0x13
    420e:	9e 87       	std	Y+14, r25	; 0x0e
    4210:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    4212:	84 89       	ldd	r24, Z+20	; 0x14
    4214:	95 89       	ldd	r25, Z+21	; 0x15
    4216:	98 8b       	std	Y+16, r25	; 0x10
    4218:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    421a:	86 89       	ldd	r24, Z+22	; 0x16
    421c:	97 89       	ldd	r25, Z+23	; 0x17
    421e:	9a 8b       	std	Y+18, r25	; 0x12
    4220:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    4222:	8f 2d       	mov	r24, r15
    4224:	9e 2d       	mov	r25, r14
    4226:	be 01       	movw	r22, r28
    4228:	6f 5f       	subi	r22, 0xFF	; 255
    422a:	7f 4f       	sbci	r23, 0xFF	; 255
    422c:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    4230:	a3 ec       	ldi	r26, 0xC3	; 195
    4232:	b3 e0       	ldi	r27, 0x03	; 3
    4234:	8f 2d       	mov	r24, r15
    4236:	9e 2d       	mov	r25, r14
    4238:	88 0f       	add	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	fc 01       	movw	r30, r24
    423e:	ee 0f       	add	r30, r30
    4240:	ff 1f       	adc	r31, r31
    4242:	ee 0f       	add	r30, r30
    4244:	ff 1f       	adc	r31, r31
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	e8 1b       	sub	r30, r24
    424c:	f9 0b       	sbc	r31, r25
    424e:	ea 0f       	add	r30, r26
    4250:	fb 1f       	adc	r31, r27
    4252:	11 82       	std	Z+1, r1	; 0x01
    4254:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    4256:	8f 2d       	mov	r24, r15
    4258:	9e 2d       	mov	r25, r14
    425a:	88 0f       	add	r24, r24
    425c:	99 1f       	adc	r25, r25
    425e:	fc 01       	movw	r30, r24
    4260:	ee 0f       	add	r30, r30
    4262:	ff 1f       	adc	r31, r31
    4264:	ee 0f       	add	r30, r30
    4266:	ff 1f       	adc	r31, r31
    4268:	ee 0f       	add	r30, r30
    426a:	ff 1f       	adc	r31, r31
    426c:	e8 1b       	sub	r30, r24
    426e:	f9 0b       	sbc	r31, r25
    4270:	ea 0f       	add	r30, r26
    4272:	fb 1f       	adc	r31, r27
    4274:	8d 85       	ldd	r24, Y+13	; 0x0d
    4276:	9e 85       	ldd	r25, Y+14	; 0x0e
    4278:	95 83       	std	Z+5, r25	; 0x05
    427a:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    427c:	8f 2d       	mov	r24, r15
    427e:	9e 2d       	mov	r25, r14
    4280:	88 0f       	add	r24, r24
    4282:	99 1f       	adc	r25, r25
    4284:	fc 01       	movw	r30, r24
    4286:	ee 0f       	add	r30, r30
    4288:	ff 1f       	adc	r31, r31
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	ee 0f       	add	r30, r30
    4290:	ff 1f       	adc	r31, r31
    4292:	e8 1b       	sub	r30, r24
    4294:	f9 0b       	sbc	r31, r25
    4296:	ea 0f       	add	r30, r26
    4298:	fb 1f       	adc	r31, r27
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	93 83       	std	Z+3, r25	; 0x03
    42a0:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    42a2:	8f 2d       	mov	r24, r15
    42a4:	9e 2d       	mov	r25, r14
    42a6:	88 0f       	add	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	fc 01       	movw	r30, r24
    42ac:	ee 0f       	add	r30, r30
    42ae:	ff 1f       	adc	r31, r31
    42b0:	ee 0f       	add	r30, r30
    42b2:	ff 1f       	adc	r31, r31
    42b4:	ee 0f       	add	r30, r30
    42b6:	ff 1f       	adc	r31, r31
    42b8:	e8 1b       	sub	r30, r24
    42ba:	f9 0b       	sbc	r31, r25
    42bc:	ea 0f       	add	r30, r26
    42be:	fb 1f       	adc	r31, r27
    42c0:	17 82       	std	Z+7, r1	; 0x07
    42c2:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    42c4:	8f 2d       	mov	r24, r15
    42c6:	9e 2d       	mov	r25, r14
    42c8:	88 0f       	add	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	fc 01       	movw	r30, r24
    42ce:	ee 0f       	add	r30, r30
    42d0:	ff 1f       	adc	r31, r31
    42d2:	ee 0f       	add	r30, r30
    42d4:	ff 1f       	adc	r31, r31
    42d6:	ee 0f       	add	r30, r30
    42d8:	ff 1f       	adc	r31, r31
    42da:	e8 1b       	sub	r30, r24
    42dc:	f9 0b       	sbc	r31, r25
    42de:	ea 0f       	add	r30, r26
    42e0:	fb 1f       	adc	r31, r27
    42e2:	13 87       	std	Z+11, r17	; 0x0b
    42e4:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    42e6:	8f 2d       	mov	r24, r15
    42e8:	9e 2d       	mov	r25, r14
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	9c 01       	movw	r18, r24
    42f0:	22 0f       	add	r18, r18
    42f2:	33 1f       	adc	r19, r19
    42f4:	22 0f       	add	r18, r18
    42f6:	33 1f       	adc	r19, r19
    42f8:	22 0f       	add	r18, r18
    42fa:	33 1f       	adc	r19, r19
    42fc:	28 1b       	sub	r18, r24
    42fe:	39 0b       	sbc	r19, r25
    4300:	a2 0f       	add	r26, r18
    4302:	b3 1f       	adc	r27, r19
    4304:	0a 5f       	subi	r16, 0xFA	; 250
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
    4308:	1d 96       	adiw	r26, 0x0d	; 13
    430a:	1c 93       	st	X, r17
    430c:	0e 93       	st	-X, r16
    430e:	1c 97       	sbiw	r26, 0x0c	; 12


}
    4310:	62 96       	adiw	r28, 0x12	; 18
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	f8 94       	cli
    4316:	de bf       	out	0x3e, r29	; 62
    4318:	0f be       	out	0x3f, r0	; 63
    431a:	cd bf       	out	0x3d, r28	; 61
    431c:	cf 91       	pop	r28
    431e:	df 91       	pop	r29
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	ff 90       	pop	r15
    4326:	ef 90       	pop	r14
    4328:	08 95       	ret

0000432a <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	df 93       	push	r29
    4334:	cf 93       	push	r28
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	62 97       	sbiw	r28, 0x12	; 18
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	f8 2e       	mov	r15, r24
    4348:	e9 2e       	mov	r14, r25
    434a:	db 01       	movw	r26, r22
	short direction = data[7];
    434c:	1e 96       	adiw	r26, 0x0e	; 14
    434e:	6d 91       	ld	r22, X+
    4350:	7c 91       	ld	r23, X
    4352:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    4354:	fc 01       	movw	r30, r24
    4356:	ee 0f       	add	r30, r30
    4358:	ff 1f       	adc	r31, r31
    435a:	ee 0f       	add	r30, r30
    435c:	ff 1f       	adc	r31, r31
    435e:	ee 0f       	add	r30, r30
    4360:	ff 1f       	adc	r31, r31
    4362:	88 0f       	add	r24, r24
    4364:	99 1f       	adc	r25, r25
    4366:	e8 0f       	add	r30, r24
    4368:	f9 1f       	adc	r31, r25
    436a:	e5 59       	subi	r30, 0x95	; 149
    436c:	fb 4f       	sbci	r31, 0xFB	; 251
    436e:	40 85       	ldd	r20, Z+8	; 0x08
    4370:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    4372:	8f 2d       	mov	r24, r15
    4374:	9e 2d       	mov	r25, r14
    4376:	fc 01       	movw	r30, r24
    4378:	ee 0f       	add	r30, r30
    437a:	ff 1f       	adc	r31, r31
    437c:	ee 0f       	add	r30, r30
    437e:	ff 1f       	adc	r31, r31
    4380:	ee 0f       	add	r30, r30
    4382:	ff 1f       	adc	r31, r31
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	e8 0f       	add	r30, r24
    438a:	f9 1f       	adc	r31, r25
    438c:	e5 59       	subi	r30, 0x95	; 149
    438e:	fb 4f       	sbci	r31, 0xFB	; 251
    4390:	86 81       	ldd	r24, Z+6	; 0x06
    4392:	97 81       	ldd	r25, Z+7	; 0x07
    4394:	01 97       	sbiw	r24, 0x01	; 1
    4396:	09 f4       	brne	.+2      	; 0x439a <fadeBetweenColorsWithScalingPwmEffect+0x70>
    4398:	aa c0       	rjmp	.+340    	; 0x44ee <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    439a:	8f 2d       	mov	r24, r15
    439c:	9e 2d       	mov	r25, r14
    439e:	fc 01       	movw	r30, r24
    43a0:	ee 0f       	add	r30, r30
    43a2:	ff 1f       	adc	r31, r31
    43a4:	ee 0f       	add	r30, r30
    43a6:	ff 1f       	adc	r31, r31
    43a8:	ee 0f       	add	r30, r30
    43aa:	ff 1f       	adc	r31, r31
    43ac:	88 0f       	add	r24, r24
    43ae:	99 1f       	adc	r25, r25
    43b0:	e8 0f       	add	r30, r24
    43b2:	f9 1f       	adc	r31, r25
    43b4:	e5 59       	subi	r30, 0x95	; 149
    43b6:	fb 4f       	sbci	r31, 0xFB	; 251
    43b8:	24 81       	ldd	r18, Z+4	; 0x04
    43ba:	35 81       	ldd	r19, Z+5	; 0x05
    43bc:	24 17       	cp	r18, r20
    43be:	35 07       	cpc	r19, r21
    43c0:	0c f0       	brlt	.+2      	; 0x43c4 <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    43c2:	54 c0       	rjmp	.+168    	; 0x446c <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    43c4:	8f 2d       	mov	r24, r15
    43c6:	9e 2d       	mov	r25, r14
    43c8:	fc 01       	movw	r30, r24
    43ca:	ee 0f       	add	r30, r30
    43cc:	ff 1f       	adc	r31, r31
    43ce:	ee 0f       	add	r30, r30
    43d0:	ff 1f       	adc	r31, r31
    43d2:	ee 0f       	add	r30, r30
    43d4:	ff 1f       	adc	r31, r31
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	e8 0f       	add	r30, r24
    43dc:	f9 1f       	adc	r31, r25
    43de:	e5 59       	subi	r30, 0x95	; 149
    43e0:	fb 4f       	sbci	r31, 0xFB	; 251
    43e2:	2f 5f       	subi	r18, 0xFF	; 255
    43e4:	3f 4f       	sbci	r19, 0xFF	; 255
    43e6:	35 83       	std	Z+5, r19	; 0x05
    43e8:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    43ea:	8e 01       	movw	r16, r28
    43ec:	0f 5f       	subi	r16, 0xFF	; 255
    43ee:	1f 4f       	sbci	r17, 0xFF	; 255
    43f0:	c8 01       	movw	r24, r16
    43f2:	bd 01       	movw	r22, r26
    43f4:	47 e0       	ldi	r20, 0x07	; 7
    43f6:	50 e0       	ldi	r21, 0x00	; 0
    43f8:	0e 94 a9 29 	call	0x5352	; 0x5352 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    43fc:	8f 2d       	mov	r24, r15
    43fe:	9e 2d       	mov	r25, r14
    4400:	fc 01       	movw	r30, r24
    4402:	ee 0f       	add	r30, r30
    4404:	ff 1f       	adc	r31, r31
    4406:	ee 0f       	add	r30, r30
    4408:	ff 1f       	adc	r31, r31
    440a:	ee 0f       	add	r30, r30
    440c:	ff 1f       	adc	r31, r31
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	e8 0f       	add	r30, r24
    4414:	f9 1f       	adc	r31, r25
    4416:	e5 59       	subi	r30, 0x95	; 149
    4418:	fb 4f       	sbci	r31, 0xFB	; 251
    441a:	80 81       	ld	r24, Z
    441c:	91 81       	ldd	r25, Z+1	; 0x01
    441e:	98 8b       	std	Y+16, r25	; 0x10
    4420:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    4422:	8f 2d       	mov	r24, r15
    4424:	9e 2d       	mov	r25, r14
    4426:	fc 01       	movw	r30, r24
    4428:	ee 0f       	add	r30, r30
    442a:	ff 1f       	adc	r31, r31
    442c:	ee 0f       	add	r30, r30
    442e:	ff 1f       	adc	r31, r31
    4430:	ee 0f       	add	r30, r30
    4432:	ff 1f       	adc	r31, r31
    4434:	88 0f       	add	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	e8 0f       	add	r30, r24
    443a:	f9 1f       	adc	r31, r25
    443c:	e5 59       	subi	r30, 0x95	; 149
    443e:	fb 4f       	sbci	r31, 0xFB	; 251
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	93 81       	ldd	r25, Z+3	; 0x03
    4444:	9a 8b       	std	Y+18, r25	; 0x12
    4446:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    4448:	8f 2d       	mov	r24, r15
    444a:	9e 2d       	mov	r25, r14
    444c:	b8 01       	movw	r22, r16
    444e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <fadeBetweenColorsWithPwm>
	

}
    4452:	62 96       	adiw	r28, 0x12	; 18
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	cf 91       	pop	r28
    4460:	df 91       	pop	r29
    4462:	1f 91       	pop	r17
    4464:	0f 91       	pop	r16
    4466:	ff 90       	pop	r15
    4468:	ef 90       	pop	r14
    446a:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    446c:	8f 2d       	mov	r24, r15
    446e:	9e 2d       	mov	r25, r14
    4470:	fc 01       	movw	r30, r24
    4472:	ee 0f       	add	r30, r30
    4474:	ff 1f       	adc	r31, r31
    4476:	ee 0f       	add	r30, r30
    4478:	ff 1f       	adc	r31, r31
    447a:	ee 0f       	add	r30, r30
    447c:	ff 1f       	adc	r31, r31
    447e:	88 0f       	add	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	e8 0f       	add	r30, r24
    4484:	f9 1f       	adc	r31, r25
    4486:	e5 59       	subi	r30, 0x95	; 149
    4488:	fb 4f       	sbci	r31, 0xFB	; 251
    448a:	15 82       	std	Z+5, r1	; 0x05
    448c:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    448e:	61 30       	cpi	r22, 0x01	; 1
    4490:	71 05       	cpc	r23, r1
    4492:	09 f4       	brne	.+2      	; 0x4496 <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    4494:	86 c0       	rjmp	.+268    	; 0x45a2 <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    4496:	67 2b       	or	r22, r23
    4498:	09 f0       	breq	.+2      	; 0x449c <fadeBetweenColorsWithScalingPwmEffect+0x172>
    449a:	a7 cf       	rjmp	.-178    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    449c:	8f 2d       	mov	r24, r15
    449e:	9e 2d       	mov	r25, r14
    44a0:	fc 01       	movw	r30, r24
    44a2:	ee 0f       	add	r30, r30
    44a4:	ff 1f       	adc	r31, r31
    44a6:	ee 0f       	add	r30, r30
    44a8:	ff 1f       	adc	r31, r31
    44aa:	ee 0f       	add	r30, r30
    44ac:	ff 1f       	adc	r31, r31
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	e8 0f       	add	r30, r24
    44b4:	f9 1f       	adc	r31, r25
    44b6:	e5 59       	subi	r30, 0x95	; 149
    44b8:	fb 4f       	sbci	r31, 0xFB	; 251
    44ba:	20 81       	ld	r18, Z
    44bc:	31 81       	ldd	r19, Z+1	; 0x01
    44be:	23 30       	cpi	r18, 0x03	; 3
    44c0:	31 05       	cpc	r19, r1
    44c2:	0c f4       	brge	.+2      	; 0x44c6 <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    44c4:	97 c0       	rjmp	.+302    	; 0x45f4 <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    44c6:	8f 2d       	mov	r24, r15
    44c8:	9e 2d       	mov	r25, r14
    44ca:	fc 01       	movw	r30, r24
    44cc:	ee 0f       	add	r30, r30
    44ce:	ff 1f       	adc	r31, r31
    44d0:	ee 0f       	add	r30, r30
    44d2:	ff 1f       	adc	r31, r31
    44d4:	ee 0f       	add	r30, r30
    44d6:	ff 1f       	adc	r31, r31
    44d8:	88 0f       	add	r24, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	e8 0f       	add	r30, r24
    44de:	f9 1f       	adc	r31, r25
    44e0:	e5 59       	subi	r30, 0x95	; 149
    44e2:	fb 4f       	sbci	r31, 0xFB	; 251
    44e4:	22 50       	subi	r18, 0x02	; 2
    44e6:	30 40       	sbci	r19, 0x00	; 0
    44e8:	31 83       	std	Z+1, r19	; 0x01
    44ea:	20 83       	st	Z, r18
    44ec:	7e cf       	rjmp	.-260    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    44ee:	8f 2d       	mov	r24, r15
    44f0:	9e 2d       	mov	r25, r14
    44f2:	fc 01       	movw	r30, r24
    44f4:	ee 0f       	add	r30, r30
    44f6:	ff 1f       	adc	r31, r31
    44f8:	ee 0f       	add	r30, r30
    44fa:	ff 1f       	adc	r31, r31
    44fc:	ee 0f       	add	r30, r30
    44fe:	ff 1f       	adc	r31, r31
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	e8 0f       	add	r30, r24
    4506:	f9 1f       	adc	r31, r25
    4508:	e5 59       	subi	r30, 0x95	; 149
    450a:	fb 4f       	sbci	r31, 0xFB	; 251
    450c:	84 81       	ldd	r24, Z+4	; 0x04
    450e:	95 81       	ldd	r25, Z+5	; 0x05
    4510:	0a 97       	sbiw	r24, 0x0a	; 10
    4512:	0c f1       	brlt	.+66     	; 0x4556 <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    4514:	61 30       	cpi	r22, 0x01	; 1
    4516:	71 05       	cpc	r23, r1
    4518:	09 f4       	brne	.+2      	; 0x451c <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    451a:	e6 c0       	rjmp	.+460    	; 0x46e8 <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    451c:	67 2b       	or	r22, r23
    451e:	51 f4       	brne	.+20     	; 0x4534 <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    4520:	8f 2d       	mov	r24, r15
    4522:	9e 2d       	mov	r25, r14
    4524:	60 e0       	ldi	r22, 0x00	; 0
    4526:	70 e0       	ldi	r23, 0x00	; 0
    4528:	40 e0       	ldi	r20, 0x00	; 0
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	0e 94 96 28 	call	0x512c	; 0x512c <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    4534:	8f 2d       	mov	r24, r15
    4536:	9e 2d       	mov	r25, r14
    4538:	fc 01       	movw	r30, r24
    453a:	ee 0f       	add	r30, r30
    453c:	ff 1f       	adc	r31, r31
    453e:	ee 0f       	add	r30, r30
    4540:	ff 1f       	adc	r31, r31
    4542:	ee 0f       	add	r30, r30
    4544:	ff 1f       	adc	r31, r31
    4546:	88 0f       	add	r24, r24
    4548:	99 1f       	adc	r25, r25
    454a:	e8 0f       	add	r30, r24
    454c:	f9 1f       	adc	r31, r25
    454e:	e5 59       	subi	r30, 0x95	; 149
    4550:	fb 4f       	sbci	r31, 0xFB	; 251
    4552:	15 82       	std	Z+5, r1	; 0x05
    4554:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    4556:	8f 2d       	mov	r24, r15
    4558:	9e 2d       	mov	r25, r14
    455a:	dc 01       	movw	r26, r24
    455c:	aa 0f       	add	r26, r26
    455e:	bb 1f       	adc	r27, r27
    4560:	aa 0f       	add	r26, r26
    4562:	bb 1f       	adc	r27, r27
    4564:	aa 0f       	add	r26, r26
    4566:	bb 1f       	adc	r27, r27
    4568:	88 0f       	add	r24, r24
    456a:	99 1f       	adc	r25, r25
    456c:	a8 0f       	add	r26, r24
    456e:	b9 1f       	adc	r27, r25
    4570:	a5 59       	subi	r26, 0x95	; 149
    4572:	bb 4f       	sbci	r27, 0xFB	; 251
    4574:	8f 2d       	mov	r24, r15
    4576:	9e 2d       	mov	r25, r14
    4578:	fc 01       	movw	r30, r24
    457a:	ee 0f       	add	r30, r30
    457c:	ff 1f       	adc	r31, r31
    457e:	ee 0f       	add	r30, r30
    4580:	ff 1f       	adc	r31, r31
    4582:	ee 0f       	add	r30, r30
    4584:	ff 1f       	adc	r31, r31
    4586:	88 0f       	add	r24, r24
    4588:	99 1f       	adc	r25, r25
    458a:	e8 0f       	add	r30, r24
    458c:	f9 1f       	adc	r31, r25
    458e:	e5 59       	subi	r30, 0x95	; 149
    4590:	fb 4f       	sbci	r31, 0xFB	; 251
    4592:	84 81       	ldd	r24, Z+4	; 0x04
    4594:	95 81       	ldd	r25, Z+5	; 0x05
    4596:	01 96       	adiw	r24, 0x01	; 1
    4598:	15 96       	adiw	r26, 0x05	; 5
    459a:	9c 93       	st	X, r25
    459c:	8e 93       	st	-X, r24
    459e:	14 97       	sbiw	r26, 0x04	; 4
    45a0:	58 cf       	rjmp	.-336    	; 0x4452 <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    45a2:	8f 2d       	mov	r24, r15
    45a4:	9e 2d       	mov	r25, r14
    45a6:	fc 01       	movw	r30, r24
    45a8:	ee 0f       	add	r30, r30
    45aa:	ff 1f       	adc	r31, r31
    45ac:	ee 0f       	add	r30, r30
    45ae:	ff 1f       	adc	r31, r31
    45b0:	ee 0f       	add	r30, r30
    45b2:	ff 1f       	adc	r31, r31
    45b4:	88 0f       	add	r24, r24
    45b6:	99 1f       	adc	r25, r25
    45b8:	e8 0f       	add	r30, r24
    45ba:	f9 1f       	adc	r31, r25
    45bc:	e5 59       	subi	r30, 0x95	; 149
    45be:	fb 4f       	sbci	r31, 0xFB	; 251
    45c0:	22 81       	ldd	r18, Z+2	; 0x02
    45c2:	33 81       	ldd	r19, Z+3	; 0x03
    45c4:	23 30       	cpi	r18, 0x03	; 3
    45c6:	31 05       	cpc	r19, r1
    45c8:	0c f4       	brge	.+2      	; 0x45cc <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    45ca:	52 c0       	rjmp	.+164    	; 0x4670 <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    45cc:	8f 2d       	mov	r24, r15
    45ce:	9e 2d       	mov	r25, r14
    45d0:	fc 01       	movw	r30, r24
    45d2:	ee 0f       	add	r30, r30
    45d4:	ff 1f       	adc	r31, r31
    45d6:	ee 0f       	add	r30, r30
    45d8:	ff 1f       	adc	r31, r31
    45da:	ee 0f       	add	r30, r30
    45dc:	ff 1f       	adc	r31, r31
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	e8 0f       	add	r30, r24
    45e4:	f9 1f       	adc	r31, r25
    45e6:	e5 59       	subi	r30, 0x95	; 149
    45e8:	fb 4f       	sbci	r31, 0xFB	; 251
    45ea:	22 50       	subi	r18, 0x02	; 2
    45ec:	30 40       	sbci	r19, 0x00	; 0
    45ee:	33 83       	std	Z+3, r19	; 0x03
    45f0:	22 83       	std	Z+2, r18	; 0x02
    45f2:	fb ce       	rjmp	.-522    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    45f4:	8f 2d       	mov	r24, r15
    45f6:	9e 2d       	mov	r25, r14
    45f8:	fc 01       	movw	r30, r24
    45fa:	ee 0f       	add	r30, r30
    45fc:	ff 1f       	adc	r31, r31
    45fe:	ee 0f       	add	r30, r30
    4600:	ff 1f       	adc	r31, r31
    4602:	ee 0f       	add	r30, r30
    4604:	ff 1f       	adc	r31, r31
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	e8 0f       	add	r30, r24
    460c:	f9 1f       	adc	r31, r25
    460e:	e5 59       	subi	r30, 0x95	; 149
    4610:	fb 4f       	sbci	r31, 0xFB	; 251
    4612:	82 81       	ldd	r24, Z+2	; 0x02
    4614:	93 81       	ldd	r25, Z+3	; 0x03
    4616:	80 32       	cpi	r24, 0x20	; 32
    4618:	91 05       	cpc	r25, r1
    461a:	0c f0       	brlt	.+2      	; 0x461e <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    461c:	e6 ce       	rjmp	.-564    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    461e:	02 96       	adiw	r24, 0x02	; 2
    4620:	2f 2d       	mov	r18, r15
    4622:	3e 2d       	mov	r19, r14
    4624:	f9 01       	movw	r30, r18
    4626:	ee 0f       	add	r30, r30
    4628:	ff 1f       	adc	r31, r31
    462a:	ee 0f       	add	r30, r30
    462c:	ff 1f       	adc	r31, r31
    462e:	ee 0f       	add	r30, r30
    4630:	ff 1f       	adc	r31, r31
    4632:	22 0f       	add	r18, r18
    4634:	33 1f       	adc	r19, r19
    4636:	e2 0f       	add	r30, r18
    4638:	f3 1f       	adc	r31, r19
    463a:	e5 59       	subi	r30, 0x95	; 149
    463c:	fb 4f       	sbci	r31, 0xFB	; 251
    463e:	93 83       	std	Z+3, r25	; 0x03
    4640:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    4642:	80 97       	sbiw	r24, 0x20	; 32
    4644:	09 f0       	breq	.+2      	; 0x4648 <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    4646:	d1 ce       	rjmp	.-606    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    4648:	8f 2d       	mov	r24, r15
    464a:	9e 2d       	mov	r25, r14
    464c:	fc 01       	movw	r30, r24
    464e:	ee 0f       	add	r30, r30
    4650:	ff 1f       	adc	r31, r31
    4652:	ee 0f       	add	r30, r30
    4654:	ff 1f       	adc	r31, r31
    4656:	ee 0f       	add	r30, r30
    4658:	ff 1f       	adc	r31, r31
    465a:	88 0f       	add	r24, r24
    465c:	99 1f       	adc	r25, r25
    465e:	e8 0f       	add	r30, r24
    4660:	f9 1f       	adc	r31, r25
    4662:	e5 59       	subi	r30, 0x95	; 149
    4664:	fb 4f       	sbci	r31, 0xFB	; 251
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	97 83       	std	Z+7, r25	; 0x07
    466c:	86 83       	std	Z+6, r24	; 0x06
    466e:	bd ce       	rjmp	.-646    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    4670:	8f 2d       	mov	r24, r15
    4672:	9e 2d       	mov	r25, r14
    4674:	fc 01       	movw	r30, r24
    4676:	ee 0f       	add	r30, r30
    4678:	ff 1f       	adc	r31, r31
    467a:	ee 0f       	add	r30, r30
    467c:	ff 1f       	adc	r31, r31
    467e:	ee 0f       	add	r30, r30
    4680:	ff 1f       	adc	r31, r31
    4682:	88 0f       	add	r24, r24
    4684:	99 1f       	adc	r25, r25
    4686:	e8 0f       	add	r30, r24
    4688:	f9 1f       	adc	r31, r25
    468a:	e5 59       	subi	r30, 0x95	; 149
    468c:	fb 4f       	sbci	r31, 0xFB	; 251
    468e:	80 81       	ld	r24, Z
    4690:	91 81       	ldd	r25, Z+1	; 0x01
    4692:	80 32       	cpi	r24, 0x20	; 32
    4694:	91 05       	cpc	r25, r1
    4696:	0c f0       	brlt	.+2      	; 0x469a <fadeBetweenColorsWithScalingPwmEffect+0x370>
    4698:	a8 ce       	rjmp	.-688    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    469a:	02 96       	adiw	r24, 0x02	; 2
    469c:	2f 2d       	mov	r18, r15
    469e:	3e 2d       	mov	r19, r14
    46a0:	f9 01       	movw	r30, r18
    46a2:	ee 0f       	add	r30, r30
    46a4:	ff 1f       	adc	r31, r31
    46a6:	ee 0f       	add	r30, r30
    46a8:	ff 1f       	adc	r31, r31
    46aa:	ee 0f       	add	r30, r30
    46ac:	ff 1f       	adc	r31, r31
    46ae:	22 0f       	add	r18, r18
    46b0:	33 1f       	adc	r19, r19
    46b2:	e2 0f       	add	r30, r18
    46b4:	f3 1f       	adc	r31, r19
    46b6:	e5 59       	subi	r30, 0x95	; 149
    46b8:	fb 4f       	sbci	r31, 0xFB	; 251
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    46be:	80 97       	sbiw	r24, 0x20	; 32
    46c0:	09 f0       	breq	.+2      	; 0x46c4 <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    46c2:	93 ce       	rjmp	.-730    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    46c4:	8f 2d       	mov	r24, r15
    46c6:	9e 2d       	mov	r25, r14
    46c8:	fc 01       	movw	r30, r24
    46ca:	ee 0f       	add	r30, r30
    46cc:	ff 1f       	adc	r31, r31
    46ce:	ee 0f       	add	r30, r30
    46d0:	ff 1f       	adc	r31, r31
    46d2:	ee 0f       	add	r30, r30
    46d4:	ff 1f       	adc	r31, r31
    46d6:	88 0f       	add	r24, r24
    46d8:	99 1f       	adc	r25, r25
    46da:	e8 0f       	add	r30, r24
    46dc:	f9 1f       	adc	r31, r25
    46de:	e5 59       	subi	r30, 0x95	; 149
    46e0:	fb 4f       	sbci	r31, 0xFB	; 251
    46e2:	77 83       	std	Z+7, r23	; 0x07
    46e4:	66 83       	std	Z+6, r22	; 0x06
    46e6:	81 ce       	rjmp	.-766    	; 0x43ea <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    46e8:	8f 2d       	mov	r24, r15
    46ea:	9e 2d       	mov	r25, r14
    46ec:	bd 01       	movw	r22, r26
    46ee:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fadeBetweenColors>
    46f2:	20 cf       	rjmp	.-448    	; 0x4534 <fadeBetweenColorsWithScalingPwmEffect+0x20a>

000046f4 <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	a6 97       	sbiw	r28, 0x26	; 38
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	f8 2e       	mov	r15, r24
    4712:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    4714:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    4716:	88 0f       	add	r24, r24
    4718:	99 1f       	adc	r25, r25
    471a:	fc 01       	movw	r30, r24
    471c:	ee 0f       	add	r30, r30
    471e:	ff 1f       	adc	r31, r31
    4720:	ee 0f       	add	r30, r30
    4722:	ff 1f       	adc	r31, r31
    4724:	ee 0f       	add	r30, r30
    4726:	ff 1f       	adc	r31, r31
    4728:	e8 1b       	sub	r30, r24
    472a:	f9 0b       	sbc	r31, r25
    472c:	ed 53       	subi	r30, 0x3D	; 61
    472e:	fc 4f       	sbci	r31, 0xFC	; 252
    4730:	20 85       	ldd	r18, Z+8	; 0x08
    4732:	31 85       	ldd	r19, Z+9	; 0x09
    4734:	2a 30       	cpi	r18, 0x0A	; 10
    4736:	31 05       	cpc	r19, r1
    4738:	0c f4       	brge	.+2      	; 0x473c <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    473a:	4b c0       	rjmp	.+150    	; 0x47d2 <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    473c:	8f 2d       	mov	r24, r15
    473e:	9e 2d       	mov	r25, r14
    4740:	88 0f       	add	r24, r24
    4742:	99 1f       	adc	r25, r25
    4744:	fc 01       	movw	r30, r24
    4746:	ee 0f       	add	r30, r30
    4748:	ff 1f       	adc	r31, r31
    474a:	ee 0f       	add	r30, r30
    474c:	ff 1f       	adc	r31, r31
    474e:	ee 0f       	add	r30, r30
    4750:	ff 1f       	adc	r31, r31
    4752:	e8 1b       	sub	r30, r24
    4754:	f9 0b       	sbc	r31, r25
    4756:	ed 53       	subi	r30, 0x3D	; 61
    4758:	fc 4f       	sbci	r31, 0xFC	; 252
    475a:	26 81       	ldd	r18, Z+6	; 0x06
    475c:	37 81       	ldd	r19, Z+7	; 0x07
    475e:	8f 2d       	mov	r24, r15
    4760:	9e 2d       	mov	r25, r14
    4762:	88 0f       	add	r24, r24
    4764:	99 1f       	adc	r25, r25
    4766:	fc 01       	movw	r30, r24
    4768:	ee 0f       	add	r30, r30
    476a:	ff 1f       	adc	r31, r31
    476c:	ee 0f       	add	r30, r30
    476e:	ff 1f       	adc	r31, r31
    4770:	ee 0f       	add	r30, r30
    4772:	ff 1f       	adc	r31, r31
    4774:	e8 1b       	sub	r30, r24
    4776:	f9 0b       	sbc	r31, r25
    4778:	ed 53       	subi	r30, 0x3D	; 61
    477a:	fc 4f       	sbci	r31, 0xFC	; 252
    477c:	84 81       	ldd	r24, Z+4	; 0x04
    477e:	95 81       	ldd	r25, Z+5	; 0x05
    4780:	28 17       	cp	r18, r24
    4782:	39 07       	cpc	r19, r25
    4784:	0c f0       	brlt	.+2      	; 0x4788 <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    4786:	95 c0       	rjmp	.+298    	; 0x48b2 <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    4788:	8f 2d       	mov	r24, r15
    478a:	9e 2d       	mov	r25, r14
    478c:	88 0f       	add	r24, r24
    478e:	99 1f       	adc	r25, r25
    4790:	fc 01       	movw	r30, r24
    4792:	ee 0f       	add	r30, r30
    4794:	ff 1f       	adc	r31, r31
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	ee 0f       	add	r30, r30
    479c:	ff 1f       	adc	r31, r31
    479e:	e8 1b       	sub	r30, r24
    47a0:	f9 0b       	sbc	r31, r25
    47a2:	ed 53       	subi	r30, 0x3D	; 61
    47a4:	fc 4f       	sbci	r31, 0xFC	; 252
    47a6:	2f 5f       	subi	r18, 0xFF	; 255
    47a8:	3f 4f       	sbci	r19, 0xFF	; 255
    47aa:	37 83       	std	Z+7, r19	; 0x07
    47ac:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    47ae:	8f 2d       	mov	r24, r15
    47b0:	9e 2d       	mov	r25, r14
    47b2:	88 0f       	add	r24, r24
    47b4:	99 1f       	adc	r25, r25
    47b6:	fc 01       	movw	r30, r24
    47b8:	ee 0f       	add	r30, r30
    47ba:	ff 1f       	adc	r31, r31
    47bc:	ee 0f       	add	r30, r30
    47be:	ff 1f       	adc	r31, r31
    47c0:	ee 0f       	add	r30, r30
    47c2:	ff 1f       	adc	r31, r31
    47c4:	e8 1b       	sub	r30, r24
    47c6:	f9 0b       	sbc	r31, r25
    47c8:	ed 53       	subi	r30, 0x3D	; 61
    47ca:	fc 4f       	sbci	r31, 0xFC	; 252
    47cc:	11 86       	std	Z+9, r1	; 0x09
    47ce:	10 86       	std	Z+8, r1	; 0x08
    47d0:	13 c0       	rjmp	.+38     	; 0x47f8 <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    47d2:	8f 2d       	mov	r24, r15
    47d4:	9e 2d       	mov	r25, r14
    47d6:	88 0f       	add	r24, r24
    47d8:	99 1f       	adc	r25, r25
    47da:	fc 01       	movw	r30, r24
    47dc:	ee 0f       	add	r30, r30
    47de:	ff 1f       	adc	r31, r31
    47e0:	ee 0f       	add	r30, r30
    47e2:	ff 1f       	adc	r31, r31
    47e4:	ee 0f       	add	r30, r30
    47e6:	ff 1f       	adc	r31, r31
    47e8:	e8 1b       	sub	r30, r24
    47ea:	f9 0b       	sbc	r31, r25
    47ec:	ed 53       	subi	r30, 0x3D	; 61
    47ee:	fc 4f       	sbci	r31, 0xFC	; 252
    47f0:	2f 5f       	subi	r18, 0xFF	; 255
    47f2:	3f 4f       	sbci	r19, 0xFF	; 255
    47f4:	31 87       	std	Z+9, r19	; 0x09
    47f6:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    47f8:	8f 2d       	mov	r24, r15
    47fa:	9e 2d       	mov	r25, r14
    47fc:	88 0f       	add	r24, r24
    47fe:	99 1f       	adc	r25, r25
    4800:	fc 01       	movw	r30, r24
    4802:	ee 0f       	add	r30, r30
    4804:	ff 1f       	adc	r31, r31
    4806:	ee 0f       	add	r30, r30
    4808:	ff 1f       	adc	r31, r31
    480a:	ee 0f       	add	r30, r30
    480c:	ff 1f       	adc	r31, r31
    480e:	e8 1b       	sub	r30, r24
    4810:	f9 0b       	sbc	r31, r25
    4812:	ed 53       	subi	r30, 0x3D	; 61
    4814:	fc 4f       	sbci	r31, 0xFC	; 252
    4816:	02 84       	ldd	r0, Z+10	; 0x0a
    4818:	f3 85       	ldd	r31, Z+11	; 0x0b
    481a:	e0 2d       	mov	r30, r0
    481c:	80 81       	ld	r24, Z
    481e:	91 81       	ldd	r25, Z+1	; 0x01
    4820:	9e 8b       	std	Y+22, r25	; 0x16
    4822:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    4824:	82 81       	ldd	r24, Z+2	; 0x02
    4826:	93 81       	ldd	r25, Z+3	; 0x03
    4828:	98 8f       	std	Y+24, r25	; 0x18
    482a:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    482c:	84 81       	ldd	r24, Z+4	; 0x04
    482e:	95 81       	ldd	r25, Z+5	; 0x05
    4830:	9a 8f       	std	Y+26, r25	; 0x1a
    4832:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    4834:	8f 2d       	mov	r24, r15
    4836:	9e 2d       	mov	r25, r14
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	fc 01       	movw	r30, r24
    483e:	ee 0f       	add	r30, r30
    4840:	ff 1f       	adc	r31, r31
    4842:	ee 0f       	add	r30, r30
    4844:	ff 1f       	adc	r31, r31
    4846:	ee 0f       	add	r30, r30
    4848:	ff 1f       	adc	r31, r31
    484a:	e8 1b       	sub	r30, r24
    484c:	f9 0b       	sbc	r31, r25
    484e:	ed 53       	subi	r30, 0x3D	; 61
    4850:	fc 4f       	sbci	r31, 0xFC	; 252
    4852:	04 84       	ldd	r0, Z+12	; 0x0c
    4854:	f5 85       	ldd	r31, Z+13	; 0x0d
    4856:	e0 2d       	mov	r30, r0
    4858:	80 81       	ld	r24, Z
    485a:	91 81       	ldd	r25, Z+1	; 0x01
    485c:	9c 8f       	std	Y+28, r25	; 0x1c
    485e:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	93 81       	ldd	r25, Z+3	; 0x03
    4864:	9e 8f       	std	Y+30, r25	; 0x1e
    4866:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    4868:	84 81       	ldd	r24, Z+4	; 0x04
    486a:	95 81       	ldd	r25, Z+5	; 0x05
    486c:	98 a3       	std	Y+32, r25	; 0x20
    486e:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    4870:	f8 01       	movw	r30, r16
    4872:	82 89       	ldd	r24, Z+18	; 0x12
    4874:	93 89       	ldd	r25, Z+19	; 0x13
    4876:	9a a3       	std	Y+34, r25	; 0x22
    4878:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    487a:	84 89       	ldd	r24, Z+20	; 0x14
    487c:	95 89       	ldd	r25, Z+21	; 0x15
    487e:	9c a3       	std	Y+36, r25	; 0x24
    4880:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    4882:	86 89       	ldd	r24, Z+22	; 0x16
    4884:	97 89       	ldd	r25, Z+23	; 0x17
    4886:	9e a3       	std	Y+38, r25	; 0x26
    4888:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    488a:	8f 2d       	mov	r24, r15
    488c:	9e 2d       	mov	r25, r14
    488e:	be 01       	movw	r22, r28
    4890:	6b 5e       	subi	r22, 0xEB	; 235
    4892:	7f 4f       	sbci	r23, 0xFF	; 255
    4894:	0e 94 95 21 	call	0x432a	; 0x432a <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    4898:	a6 96       	adiw	r28, 0x26	; 38
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	ff 90       	pop	r15
    48ae:	ef 90       	pop	r14
    48b0:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    48b2:	8f 2d       	mov	r24, r15
    48b4:	9e 2d       	mov	r25, r14
    48b6:	88 0f       	add	r24, r24
    48b8:	99 1f       	adc	r25, r25
    48ba:	fc 01       	movw	r30, r24
    48bc:	ee 0f       	add	r30, r30
    48be:	ff 1f       	adc	r31, r31
    48c0:	ee 0f       	add	r30, r30
    48c2:	ff 1f       	adc	r31, r31
    48c4:	ee 0f       	add	r30, r30
    48c6:	ff 1f       	adc	r31, r31
    48c8:	e8 1b       	sub	r30, r24
    48ca:	f9 0b       	sbc	r31, r25
    48cc:	ed 53       	subi	r30, 0x3D	; 61
    48ce:	fc 4f       	sbci	r31, 0xFC	; 252
    48d0:	42 81       	ldd	r20, Z+2	; 0x02
    48d2:	53 81       	ldd	r21, Z+3	; 0x03
    48d4:	41 30       	cpi	r20, 0x01	; 1
    48d6:	51 05       	cpc	r21, r1
    48d8:	09 f4       	brne	.+2      	; 0x48dc <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    48da:	6a c0       	rjmp	.+212    	; 0x49b0 <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    48dc:	45 2b       	or	r20, r21
    48de:	09 f0       	breq	.+2      	; 0x48e2 <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    48e0:	f2 c0       	rjmp	.+484    	; 0x4ac6 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    48e2:	8f 2d       	mov	r24, r15
    48e4:	9e 2d       	mov	r25, r14
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	fc 01       	movw	r30, r24
    48ec:	ee 0f       	add	r30, r30
    48ee:	ff 1f       	adc	r31, r31
    48f0:	ee 0f       	add	r30, r30
    48f2:	ff 1f       	adc	r31, r31
    48f4:	ee 0f       	add	r30, r30
    48f6:	ff 1f       	adc	r31, r31
    48f8:	e8 1b       	sub	r30, r24
    48fa:	f9 0b       	sbc	r31, r25
    48fc:	ed 53       	subi	r30, 0x3D	; 61
    48fe:	fc 4f       	sbci	r31, 0xFC	; 252
    4900:	20 81       	ld	r18, Z
    4902:	31 81       	ldd	r19, Z+1	; 0x01
    4904:	21 50       	subi	r18, 0x01	; 1
    4906:	30 40       	sbci	r19, 0x00	; 0
    4908:	8f 2d       	mov	r24, r15
    490a:	9e 2d       	mov	r25, r14
    490c:	88 0f       	add	r24, r24
    490e:	99 1f       	adc	r25, r25
    4910:	fc 01       	movw	r30, r24
    4912:	ee 0f       	add	r30, r30
    4914:	ff 1f       	adc	r31, r31
    4916:	ee 0f       	add	r30, r30
    4918:	ff 1f       	adc	r31, r31
    491a:	ee 0f       	add	r30, r30
    491c:	ff 1f       	adc	r31, r31
    491e:	e8 1b       	sub	r30, r24
    4920:	f9 0b       	sbc	r31, r25
    4922:	ed 53       	subi	r30, 0x3D	; 61
    4924:	fc 4f       	sbci	r31, 0xFC	; 252
    4926:	31 83       	std	Z+1, r19	; 0x01
    4928:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    492a:	23 2b       	or	r18, r19
    492c:	09 f0       	breq	.+2      	; 0x4930 <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    492e:	f7 c0       	rjmp	.+494    	; 0x4b1e <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    4930:	8f 2d       	mov	r24, r15
    4932:	9e 2d       	mov	r25, r14
    4934:	88 0f       	add	r24, r24
    4936:	99 1f       	adc	r25, r25
    4938:	fc 01       	movw	r30, r24
    493a:	ee 0f       	add	r30, r30
    493c:	ff 1f       	adc	r31, r31
    493e:	ee 0f       	add	r30, r30
    4940:	ff 1f       	adc	r31, r31
    4942:	ee 0f       	add	r30, r30
    4944:	ff 1f       	adc	r31, r31
    4946:	e8 1b       	sub	r30, r24
    4948:	f9 0b       	sbc	r31, r25
    494a:	ed 53       	subi	r30, 0x3D	; 61
    494c:	fc 4f       	sbci	r31, 0xFC	; 252
    494e:	0a 5f       	subi	r16, 0xFA	; 250
    4950:	1f 4f       	sbci	r17, 0xFF	; 255
    4952:	13 87       	std	Z+11, r17	; 0x0b
    4954:	02 87       	std	Z+10, r16	; 0x0a
    4956:	06 50       	subi	r16, 0x06	; 6
    4958:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    495a:	8f 2d       	mov	r24, r15
    495c:	9e 2d       	mov	r25, r14
    495e:	88 0f       	add	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	fc 01       	movw	r30, r24
    4964:	ee 0f       	add	r30, r30
    4966:	ff 1f       	adc	r31, r31
    4968:	ee 0f       	add	r30, r30
    496a:	ff 1f       	adc	r31, r31
    496c:	ee 0f       	add	r30, r30
    496e:	ff 1f       	adc	r31, r31
    4970:	e8 1b       	sub	r30, r24
    4972:	f9 0b       	sbc	r31, r25
    4974:	ed 53       	subi	r30, 0x3D	; 61
    4976:	fc 4f       	sbci	r31, 0xFC	; 252
    4978:	15 87       	std	Z+13, r17	; 0x0d
    497a:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    497c:	f8 01       	movw	r30, r16
    497e:	86 81       	ldd	r24, Z+6	; 0x06
    4980:	97 81       	ldd	r25, Z+7	; 0x07
    4982:	98 87       	std	Y+8, r25	; 0x08
    4984:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    4986:	80 85       	ldd	r24, Z+8	; 0x08
    4988:	91 85       	ldd	r25, Z+9	; 0x09
    498a:	9a 87       	std	Y+10, r25	; 0x0a
    498c:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    498e:	82 85       	ldd	r24, Z+10	; 0x0a
    4990:	93 85       	ldd	r25, Z+11	; 0x0b
    4992:	9c 87       	std	Y+12, r25	; 0x0c
    4994:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    4996:	80 81       	ld	r24, Z
    4998:	91 81       	ldd	r25, Z+1	; 0x01
    499a:	9e 87       	std	Y+14, r25	; 0x0e
    499c:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    499e:	82 81       	ldd	r24, Z+2	; 0x02
    49a0:	93 81       	ldd	r25, Z+3	; 0x03
    49a2:	98 8b       	std	Y+16, r25	; 0x10
    49a4:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    49a6:	84 81       	ldd	r24, Z+4	; 0x04
    49a8:	95 81       	ldd	r25, Z+5	; 0x05
    49aa:	9a 8b       	std	Y+18, r25	; 0x12
    49ac:	89 8b       	std	Y+17, r24	; 0x11
    49ae:	8b c0       	rjmp	.+278    	; 0x4ac6 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    49b0:	8f 2d       	mov	r24, r15
    49b2:	9e 2d       	mov	r25, r14
    49b4:	88 0f       	add	r24, r24
    49b6:	99 1f       	adc	r25, r25
    49b8:	fc 01       	movw	r30, r24
    49ba:	ee 0f       	add	r30, r30
    49bc:	ff 1f       	adc	r31, r31
    49be:	ee 0f       	add	r30, r30
    49c0:	ff 1f       	adc	r31, r31
    49c2:	ee 0f       	add	r30, r30
    49c4:	ff 1f       	adc	r31, r31
    49c6:	e8 1b       	sub	r30, r24
    49c8:	f9 0b       	sbc	r31, r25
    49ca:	ed 53       	subi	r30, 0x3D	; 61
    49cc:	fc 4f       	sbci	r31, 0xFC	; 252
    49ce:	20 81       	ld	r18, Z
    49d0:	31 81       	ldd	r19, Z+1	; 0x01
    49d2:	2f 5f       	subi	r18, 0xFF	; 255
    49d4:	3f 4f       	sbci	r19, 0xFF	; 255
    49d6:	8f 2d       	mov	r24, r15
    49d8:	9e 2d       	mov	r25, r14
    49da:	88 0f       	add	r24, r24
    49dc:	99 1f       	adc	r25, r25
    49de:	fc 01       	movw	r30, r24
    49e0:	ee 0f       	add	r30, r30
    49e2:	ff 1f       	adc	r31, r31
    49e4:	ee 0f       	add	r30, r30
    49e6:	ff 1f       	adc	r31, r31
    49e8:	ee 0f       	add	r30, r30
    49ea:	ff 1f       	adc	r31, r31
    49ec:	e8 1b       	sub	r30, r24
    49ee:	f9 0b       	sbc	r31, r25
    49f0:	ed 53       	subi	r30, 0x3D	; 61
    49f2:	fc 4f       	sbci	r31, 0xFC	; 252
    49f4:	31 83       	std	Z+1, r19	; 0x01
    49f6:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    49f8:	21 30       	cpi	r18, 0x01	; 1
    49fa:	31 05       	cpc	r19, r1
    49fc:	09 f4       	brne	.+2      	; 0x4a00 <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    49fe:	e5 c0       	rjmp	.+458    	; 0x4bca <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    4a00:	8f 2d       	mov	r24, r15
    4a02:	9e 2d       	mov	r25, r14
    4a04:	88 0f       	add	r24, r24
    4a06:	99 1f       	adc	r25, r25
    4a08:	fc 01       	movw	r30, r24
    4a0a:	ee 0f       	add	r30, r30
    4a0c:	ff 1f       	adc	r31, r31
    4a0e:	ee 0f       	add	r30, r30
    4a10:	ff 1f       	adc	r31, r31
    4a12:	ee 0f       	add	r30, r30
    4a14:	ff 1f       	adc	r31, r31
    4a16:	e8 1b       	sub	r30, r24
    4a18:	f9 0b       	sbc	r31, r25
    4a1a:	ed 53       	subi	r30, 0x3D	; 61
    4a1c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a1e:	13 82       	std	Z+3, r1	; 0x03
    4a20:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    4a22:	8f 2d       	mov	r24, r15
    4a24:	9e 2d       	mov	r25, r14
    4a26:	88 0f       	add	r24, r24
    4a28:	99 1f       	adc	r25, r25
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	ee 0f       	add	r30, r30
    4a2e:	ff 1f       	adc	r31, r31
    4a30:	ee 0f       	add	r30, r30
    4a32:	ff 1f       	adc	r31, r31
    4a34:	ee 0f       	add	r30, r30
    4a36:	ff 1f       	adc	r31, r31
    4a38:	e8 1b       	sub	r30, r24
    4a3a:	f9 0b       	sbc	r31, r25
    4a3c:	ed 53       	subi	r30, 0x3D	; 61
    4a3e:	fc 4f       	sbci	r31, 0xFC	; 252
    4a40:	51 83       	std	Z+1, r21	; 0x01
    4a42:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    4a44:	8f 2d       	mov	r24, r15
    4a46:	9e 2d       	mov	r25, r14
    4a48:	88 0f       	add	r24, r24
    4a4a:	99 1f       	adc	r25, r25
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	ee 0f       	add	r30, r30
    4a50:	ff 1f       	adc	r31, r31
    4a52:	ee 0f       	add	r30, r30
    4a54:	ff 1f       	adc	r31, r31
    4a56:	ee 0f       	add	r30, r30
    4a58:	ff 1f       	adc	r31, r31
    4a5a:	e8 1b       	sub	r30, r24
    4a5c:	f9 0b       	sbc	r31, r25
    4a5e:	ed 53       	subi	r30, 0x3D	; 61
    4a60:	fc 4f       	sbci	r31, 0xFC	; 252
    4a62:	04 5f       	subi	r16, 0xF4	; 244
    4a64:	1f 4f       	sbci	r17, 0xFF	; 255
    4a66:	13 87       	std	Z+11, r17	; 0x0b
    4a68:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4a6a:	8f 2d       	mov	r24, r15
    4a6c:	9e 2d       	mov	r25, r14
    4a6e:	88 0f       	add	r24, r24
    4a70:	99 1f       	adc	r25, r25
    4a72:	fc 01       	movw	r30, r24
    4a74:	ee 0f       	add	r30, r30
    4a76:	ff 1f       	adc	r31, r31
    4a78:	ee 0f       	add	r30, r30
    4a7a:	ff 1f       	adc	r31, r31
    4a7c:	ee 0f       	add	r30, r30
    4a7e:	ff 1f       	adc	r31, r31
    4a80:	e8 1b       	sub	r30, r24
    4a82:	f9 0b       	sbc	r31, r25
    4a84:	ed 53       	subi	r30, 0x3D	; 61
    4a86:	fc 4f       	sbci	r31, 0xFC	; 252
    4a88:	06 50       	subi	r16, 0x06	; 6
    4a8a:	10 40       	sbci	r17, 0x00	; 0
    4a8c:	15 87       	std	Z+13, r17	; 0x0d
    4a8e:	04 87       	std	Z+12, r16	; 0x0c
    4a90:	06 50       	subi	r16, 0x06	; 6
    4a92:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    4a94:	f8 01       	movw	r30, r16
    4a96:	84 85       	ldd	r24, Z+12	; 0x0c
    4a98:	95 85       	ldd	r25, Z+13	; 0x0d
    4a9a:	98 87       	std	Y+8, r25	; 0x08
    4a9c:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    4a9e:	86 85       	ldd	r24, Z+14	; 0x0e
    4aa0:	97 85       	ldd	r25, Z+15	; 0x0f
    4aa2:	9a 87       	std	Y+10, r25	; 0x0a
    4aa4:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    4aa6:	80 89       	ldd	r24, Z+16	; 0x10
    4aa8:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    4aaa:	9c 87       	std	Y+12, r25	; 0x0c
    4aac:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    4aae:	86 81       	ldd	r24, Z+6	; 0x06
    4ab0:	97 81       	ldd	r25, Z+7	; 0x07
    4ab2:	9e 87       	std	Y+14, r25	; 0x0e
    4ab4:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    4ab6:	80 85       	ldd	r24, Z+8	; 0x08
    4ab8:	91 85       	ldd	r25, Z+9	; 0x09
    4aba:	98 8b       	std	Y+16, r25	; 0x10
    4abc:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    4abe:	82 85       	ldd	r24, Z+10	; 0x0a
    4ac0:	93 85       	ldd	r25, Z+11	; 0x0b
    4ac2:	9a 8b       	std	Y+18, r25	; 0x12
    4ac4:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    4ac6:	8f 2d       	mov	r24, r15
    4ac8:	9e 2d       	mov	r25, r14
    4aca:	be 01       	movw	r22, r28
    4acc:	6f 5f       	subi	r22, 0xFF	; 255
    4ace:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad0:	0e 94 b0 28 	call	0x5160	; 0x5160 <getRGBColor>
			resetData.beginRed = curColors.red;
    4ad4:	89 81       	ldd	r24, Y+1	; 0x01
    4ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad8:	98 87       	std	Y+8, r25	; 0x08
    4ada:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    4adc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ade:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae0:	9a 87       	std	Y+10, r25	; 0x0a
    4ae2:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    4ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae8:	9c 87       	std	Y+12, r25	; 0x0c
    4aea:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    4aec:	8f 2d       	mov	r24, r15
    4aee:	9e 2d       	mov	r25, r14
    4af0:	be 01       	movw	r22, r28
    4af2:	69 5f       	subi	r22, 0xF9	; 249
    4af4:	7f 4f       	sbci	r23, 0xFF	; 255
    4af6:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    4afa:	8f 2d       	mov	r24, r15
    4afc:	9e 2d       	mov	r25, r14
    4afe:	88 0f       	add	r24, r24
    4b00:	99 1f       	adc	r25, r25
    4b02:	fc 01       	movw	r30, r24
    4b04:	ee 0f       	add	r30, r30
    4b06:	ff 1f       	adc	r31, r31
    4b08:	ee 0f       	add	r30, r30
    4b0a:	ff 1f       	adc	r31, r31
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	e8 1b       	sub	r30, r24
    4b12:	f9 0b       	sbc	r31, r25
    4b14:	ed 53       	subi	r30, 0x3D	; 61
    4b16:	fc 4f       	sbci	r31, 0xFC	; 252
    4b18:	17 82       	std	Z+7, r1	; 0x07
    4b1a:	16 82       	std	Z+6, r1	; 0x06
    4b1c:	48 ce       	rjmp	.-880    	; 0x47ae <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    4b1e:	8f 2d       	mov	r24, r15
    4b20:	9e 2d       	mov	r25, r14
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	fc 01       	movw	r30, r24
    4b28:	ee 0f       	add	r30, r30
    4b2a:	ff 1f       	adc	r31, r31
    4b2c:	ee 0f       	add	r30, r30
    4b2e:	ff 1f       	adc	r31, r31
    4b30:	ee 0f       	add	r30, r30
    4b32:	ff 1f       	adc	r31, r31
    4b34:	e8 1b       	sub	r30, r24
    4b36:	f9 0b       	sbc	r31, r25
    4b38:	ed 53       	subi	r30, 0x3D	; 61
    4b3a:	fc 4f       	sbci	r31, 0xFC	; 252
    4b3c:	11 82       	std	Z+1, r1	; 0x01
    4b3e:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    4b40:	8f 2d       	mov	r24, r15
    4b42:	9e 2d       	mov	r25, r14
    4b44:	88 0f       	add	r24, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	fc 01       	movw	r30, r24
    4b4a:	ee 0f       	add	r30, r30
    4b4c:	ff 1f       	adc	r31, r31
    4b4e:	ee 0f       	add	r30, r30
    4b50:	ff 1f       	adc	r31, r31
    4b52:	ee 0f       	add	r30, r30
    4b54:	ff 1f       	adc	r31, r31
    4b56:	e8 1b       	sub	r30, r24
    4b58:	f9 0b       	sbc	r31, r25
    4b5a:	ed 53       	subi	r30, 0x3D	; 61
    4b5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	93 83       	std	Z+3, r25	; 0x03
    4b64:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    4b66:	8f 2d       	mov	r24, r15
    4b68:	9e 2d       	mov	r25, r14
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	fc 01       	movw	r30, r24
    4b70:	ee 0f       	add	r30, r30
    4b72:	ff 1f       	adc	r31, r31
    4b74:	ee 0f       	add	r30, r30
    4b76:	ff 1f       	adc	r31, r31
    4b78:	ee 0f       	add	r30, r30
    4b7a:	ff 1f       	adc	r31, r31
    4b7c:	e8 1b       	sub	r30, r24
    4b7e:	f9 0b       	sbc	r31, r25
    4b80:	ed 53       	subi	r30, 0x3D	; 61
    4b82:	fc 4f       	sbci	r31, 0xFC	; 252
    4b84:	13 87       	std	Z+11, r17	; 0x0b
    4b86:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4b88:	8f 2d       	mov	r24, r15
    4b8a:	9e 2d       	mov	r25, r14
    4b8c:	88 0f       	add	r24, r24
    4b8e:	99 1f       	adc	r25, r25
    4b90:	fc 01       	movw	r30, r24
    4b92:	ee 0f       	add	r30, r30
    4b94:	ff 1f       	adc	r31, r31
    4b96:	ee 0f       	add	r30, r30
    4b98:	ff 1f       	adc	r31, r31
    4b9a:	ee 0f       	add	r30, r30
    4b9c:	ff 1f       	adc	r31, r31
    4b9e:	e8 1b       	sub	r30, r24
    4ba0:	f9 0b       	sbc	r31, r25
    4ba2:	ed 53       	subi	r30, 0x3D	; 61
    4ba4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ba6:	0a 5f       	subi	r16, 0xFA	; 250
    4ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    4baa:	15 87       	std	Z+13, r17	; 0x0d
    4bac:	04 87       	std	Z+12, r16	; 0x0c
    4bae:	06 50       	subi	r16, 0x06	; 6
    4bb0:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    4bb2:	f8 01       	movw	r30, r16
    4bb4:	80 81       	ld	r24, Z
    4bb6:	91 81       	ldd	r25, Z+1	; 0x01
    4bb8:	98 87       	std	Y+8, r25	; 0x08
    4bba:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    4bbc:	82 81       	ldd	r24, Z+2	; 0x02
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	9a 87       	std	Y+10, r25	; 0x0a
    4bc2:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    4bc4:	84 81       	ldd	r24, Z+4	; 0x04
    4bc6:	95 81       	ldd	r25, Z+5	; 0x05
    4bc8:	70 cf       	rjmp	.-288    	; 0x4aaa <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    4bca:	8f 2d       	mov	r24, r15
    4bcc:	9e 2d       	mov	r25, r14
    4bce:	88 0f       	add	r24, r24
    4bd0:	99 1f       	adc	r25, r25
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	ee 0f       	add	r30, r30
    4bd6:	ff 1f       	adc	r31, r31
    4bd8:	ee 0f       	add	r30, r30
    4bda:	ff 1f       	adc	r31, r31
    4bdc:	ee 0f       	add	r30, r30
    4bde:	ff 1f       	adc	r31, r31
    4be0:	e8 1b       	sub	r30, r24
    4be2:	f9 0b       	sbc	r31, r25
    4be4:	ed 53       	subi	r30, 0x3D	; 61
    4be6:	fc 4f       	sbci	r31, 0xFC	; 252
    4be8:	0a 5f       	subi	r16, 0xFA	; 250
    4bea:	1f 4f       	sbci	r17, 0xFF	; 255
    4bec:	13 87       	std	Z+11, r17	; 0x0b
    4bee:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    4bf0:	8f 2d       	mov	r24, r15
    4bf2:	9e 2d       	mov	r25, r14
    4bf4:	88 0f       	add	r24, r24
    4bf6:	99 1f       	adc	r25, r25
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	ee 0f       	add	r30, r30
    4bfc:	ff 1f       	adc	r31, r31
    4bfe:	ee 0f       	add	r30, r30
    4c00:	ff 1f       	adc	r31, r31
    4c02:	ee 0f       	add	r30, r30
    4c04:	ff 1f       	adc	r31, r31
    4c06:	e8 1b       	sub	r30, r24
    4c08:	f9 0b       	sbc	r31, r25
    4c0a:	ed 53       	subi	r30, 0x3D	; 61
    4c0c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c0e:	0a 5f       	subi	r16, 0xFA	; 250
    4c10:	1f 4f       	sbci	r17, 0xFF	; 255
    4c12:	15 87       	std	Z+13, r17	; 0x0d
    4c14:	04 87       	std	Z+12, r16	; 0x0c
    4c16:	0c 50       	subi	r16, 0x0C	; 12
    4c18:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    4c1a:	f8 01       	movw	r30, r16
    4c1c:	86 81       	ldd	r24, Z+6	; 0x06
    4c1e:	97 81       	ldd	r25, Z+7	; 0x07
    4c20:	98 87       	std	Y+8, r25	; 0x08
    4c22:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    4c24:	80 85       	ldd	r24, Z+8	; 0x08
    4c26:	91 85       	ldd	r25, Z+9	; 0x09
    4c28:	9a 87       	std	Y+10, r25	; 0x0a
    4c2a:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    4c2c:	82 85       	ldd	r24, Z+10	; 0x0a
    4c2e:	93 85       	ldd	r25, Z+11	; 0x0b
    4c30:	9c 87       	std	Y+12, r25	; 0x0c
    4c32:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    4c34:	84 85       	ldd	r24, Z+12	; 0x0c
    4c36:	95 85       	ldd	r25, Z+13	; 0x0d
    4c38:	9e 87       	std	Y+14, r25	; 0x0e
    4c3a:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    4c3c:	86 85       	ldd	r24, Z+14	; 0x0e
    4c3e:	97 85       	ldd	r25, Z+15	; 0x0f
    4c40:	98 8b       	std	Y+16, r25	; 0x10
    4c42:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    4c44:	80 89       	ldd	r24, Z+16	; 0x10
    4c46:	91 89       	ldd	r25, Z+17	; 0x11
    4c48:	9a 8b       	std	Y+18, r25	; 0x12
    4c4a:	89 8b       	std	Y+17, r24	; 0x11
    4c4c:	3c cf       	rjmp	.-392    	; 0x4ac6 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00004c4e <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    4c4e:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    4c50:	2d 91       	ld	r18, X+
    4c52:	3c 91       	ld	r19, X
    4c54:	11 97       	sbiw	r26, 0x01	; 1
    4c56:	f9 01       	movw	r30, r18
    4c58:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4c5a:	2f 5f       	subi	r18, 0xFF	; 255
    4c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5e:	2d 93       	st	X+, r18
    4c60:	3c 93       	st	X, r19
    return returnVal;
}
    4c62:	08 95       	ret

00004c64 <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    4c64:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    4c66:	8d 91       	ld	r24, X+
    4c68:	9c 91       	ld	r25, X
    4c6a:	11 97       	sbiw	r26, 0x01	; 1
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	25 91       	lpm	r18, Z+
    4c70:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    4c72:	02 96       	adiw	r24, 0x02	; 2
    4c74:	8d 93       	st	X+, r24
    4c76:	9c 93       	st	X, r25
    return returnVal;
}
    4c78:	c9 01       	movw	r24, r18
    4c7a:	08 95       	ret

00004c7c <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    4c7c:	cf 93       	push	r28
    4c7e:	df 93       	push	r29
    4c80:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4c82:	14 16       	cp	r1, r20
    4c84:	15 06       	cpc	r1, r21
    4c86:	64 f4       	brge	.+24     	; 0x4ca0 <copyFromFlash+0x24>
    4c88:	db 01       	movw	r26, r22
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    4c8e:	fe 01       	movw	r30, r28
    4c90:	e8 0f       	add	r30, r24
    4c92:	f9 1f       	adc	r31, r25
    4c94:	e4 91       	lpm	r30, Z+
    4c96:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	84 17       	cp	r24, r20
    4c9c:	95 07       	cpc	r25, r21
    4c9e:	bc f3       	brlt	.-18     	; 0x4c8e <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    4ca0:	df 91       	pop	r29
    4ca2:	cf 91       	pop	r28
    4ca4:	08 95       	ret

00004ca6 <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    4ca6:	2f 92       	push	r2
    4ca8:	3f 92       	push	r3
    4caa:	4f 92       	push	r4
    4cac:	5f 92       	push	r5
    4cae:	6f 92       	push	r6
    4cb0:	7f 92       	push	r7
    4cb2:	8f 92       	push	r8
    4cb4:	9f 92       	push	r9
    4cb6:	af 92       	push	r10
    4cb8:	bf 92       	push	r11
    4cba:	cf 92       	push	r12
    4cbc:	df 92       	push	r13
    4cbe:	ef 92       	push	r14
    4cc0:	ff 92       	push	r15
    4cc2:	1f 93       	push	r17
    4cc4:	df 93       	push	r29
    4cc6:	cf 93       	push	r28
    4cc8:	00 d0       	rcall	.+0      	; 0x4cca <getInstructionGroup+0x24>
    4cca:	00 d0       	rcall	.+0      	; 0x4ccc <getInstructionGroup+0x26>
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    4cd0:	83 ef       	ldi	r24, 0xF3	; 243
    4cd2:	98 e0       	ldi	r25, 0x08	; 8
    4cd4:	90 93 f4 0e 	sts	0x0EF4, r25
    4cd8:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4cdc:	40 91 04 01 	lds	r20, 0x0104
    4ce0:	50 91 05 01 	lds	r21, 0x0105
    4ce4:	fa 01       	movw	r30, r20
    4ce6:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4ce8:	31 96       	adiw	r30, 0x01	; 1
    4cea:	f0 93 05 01 	sts	0x0105, r31
    4cee:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    4cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    4cf4:	c9 f0       	breq	.+50     	; 0x4d28 <getInstructionGroup+0x82>
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	0f 90       	pop	r0
    4d04:	cf 91       	pop	r28
    4d06:	df 91       	pop	r29
    4d08:	1f 91       	pop	r17
    4d0a:	ff 90       	pop	r15
    4d0c:	ef 90       	pop	r14
    4d0e:	df 90       	pop	r13
    4d10:	cf 90       	pop	r12
    4d12:	bf 90       	pop	r11
    4d14:	af 90       	pop	r10
    4d16:	9f 90       	pop	r9
    4d18:	8f 90       	pop	r8
    4d1a:	7f 90       	pop	r7
    4d1c:	6f 90       	pop	r6
    4d1e:	5f 90       	pop	r5
    4d20:	4f 90       	pop	r4
    4d22:	3f 90       	pop	r3
    4d24:	2f 90       	pop	r2
    4d26:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    4d28:	80 91 00 01 	lds	r24, 0x0100
    4d2c:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    4d30:	20 91 02 01 	lds	r18, 0x0102
    4d34:	30 91 03 01 	lds	r19, 0x0103
    4d38:	20 93 00 01 	sts	0x0100, r18
    4d3c:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    4d40:	90 93 03 01 	sts	0x0103, r25
    4d44:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    4d48:	c9 01       	movw	r24, r18
    4d4a:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4d4c:	85 91       	lpm	r24, Z+
    4d4e:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    4d50:	9c 01       	movw	r18, r24
    4d52:	22 0f       	add	r18, r18
    4d54:	33 1f       	adc	r19, r19
    4d56:	22 0f       	add	r18, r18
    4d58:	33 1f       	adc	r19, r19
    4d5a:	22 0f       	add	r18, r18
    4d5c:	33 1f       	adc	r19, r19
    4d5e:	88 0f       	add	r24, r24
    4d60:	99 1f       	adc	r25, r25
    4d62:	28 0f       	add	r18, r24
    4d64:	39 1f       	adc	r19, r25
    4d66:	fb 01       	movw	r30, r22
    4d68:	31 83       	std	Z+1, r19	; 0x01
    4d6a:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    4d6c:	db 01       	movw	r26, r22
    4d6e:	14 96       	adiw	r26, 0x04	; 4
    4d70:	b3 83       	std	Z+3, r27	; 0x03
    4d72:	a2 83       	std	Z+2, r26	; 0x02
    4d74:	4d 5f       	subi	r20, 0xFD	; 253
    4d76:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4d78:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4d7a:	9a e1       	ldi	r25, 0x1A	; 26
    4d7c:	c9 2e       	mov	r12, r25
    4d7e:	9d e1       	ldi	r25, 0x1D	; 29
    4d80:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    4d82:	8b ec       	ldi	r24, 0xCB	; 203
    4d84:	a8 2e       	mov	r10, r24
    4d86:	8e e1       	ldi	r24, 0x1E	; 30
    4d88:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4d8a:	fb e9       	ldi	r31, 0x9B	; 155
    4d8c:	8f 2e       	mov	r8, r31
    4d8e:	fc e1       	ldi	r31, 0x1C	; 28
    4d90:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    4d92:	ef e7       	ldi	r30, 0x7F	; 127
    4d94:	6e 2e       	mov	r6, r30
    4d96:	ec e1       	ldi	r30, 0x1C	; 28
    4d98:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4d9a:	33 ed       	ldi	r19, 0xD3	; 211
    4d9c:	43 2e       	mov	r4, r19
    4d9e:	3e e1       	ldi	r19, 0x1E	; 30
    4da0:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4da2:	28 e1       	ldi	r18, 0x18	; 24
    4da4:	22 2e       	mov	r2, r18
    4da6:	2f e1       	ldi	r18, 0x1F	; 31
    4da8:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    4daa:	99 e0       	ldi	r25, 0x09	; 9
    4dac:	e9 2e       	mov	r14, r25
    4dae:	9c e1       	ldi	r25, 0x1C	; 28
    4db0:	f9 2e       	mov	r15, r25
    4db2:	23 c0       	rjmp	.+70     	; 0x4dfa <getInstructionGroup+0x154>
    4db4:	13 96       	adiw	r26, 0x03	; 3
    4db6:	fc 92       	st	X, r15
    4db8:	ee 92       	st	-X, r14
    4dba:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4dbc:	18 96       	adiw	r26, 0x08	; 8
    4dbe:	1c 93       	st	X, r17
    4dc0:	18 97       	sbiw	r26, 0x08	; 8
    4dc2:	80 91 f3 0e 	lds	r24, 0x0EF3
    4dc6:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4dca:	20 e0       	ldi	r18, 0x00	; 0
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    4dce:	82 0f       	add	r24, r18
    4dd0:	93 1f       	adc	r25, r19
    4dd2:	90 93 f4 0e 	sts	0x0EF4, r25
    4dd6:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    4dda:	40 91 04 01 	lds	r20, 0x0104
    4dde:	50 91 05 01 	lds	r21, 0x0105
    4de2:	42 0f       	add	r20, r18
    4de4:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    4de6:	fa 01       	movw	r30, r20
    4de8:	84 91       	lpm	r24, Z+
    4dea:	8f 3f       	cpi	r24, 0xFF	; 255
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <getInstructionGroup+0x14a>
    4dee:	b4 c0       	rjmp	.+360    	; 0x4f58 <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    4df0:	1b 96       	adiw	r26, 0x0b	; 11
    4df2:	fd 01       	movw	r30, r26
    4df4:	32 97       	sbiw	r30, 0x02	; 2
    4df6:	b1 83       	std	Z+1, r27	; 0x01
    4df8:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4dfa:	fa 01       	movw	r30, r20
    4dfc:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4dfe:	4f 5f       	subi	r20, 0xFF	; 255
    4e00:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    4e02:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4e04:	fa 01       	movw	r30, r20
    4e06:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4e08:	ca 01       	movw	r24, r20
    4e0a:	01 96       	adiw	r24, 0x01	; 1
    4e0c:	9a 83       	std	Y+2, r25	; 0x02
    4e0e:	89 83       	std	Y+1, r24	; 0x01
    4e10:	90 93 05 01 	sts	0x0105, r25
    4e14:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    4e18:	11 96       	adiw	r26, 0x01	; 1
    4e1a:	2c 93       	st	X, r18
    4e1c:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    4e1e:	80 91 f3 0e 	lds	r24, 0x0EF3
    4e22:	90 91 f4 0e 	lds	r25, 0x0EF4
    4e26:	9c 83       	std	Y+4, r25	; 0x04
    4e28:	8b 83       	std	Y+3, r24	; 0x03
    4e2a:	17 96       	adiw	r26, 0x07	; 7
    4e2c:	9c 93       	st	X, r25
    4e2e:	8e 93       	st	-X, r24
    4e30:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    4e32:	22 23       	and	r18, r18
    4e34:	09 f4       	brne	.+2      	; 0x4e38 <getInstructionGroup+0x192>
    4e36:	be cf       	rjmp	.-132    	; 0x4db4 <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    4e38:	22 30       	cpi	r18, 0x02	; 2
    4e3a:	39 f1       	breq	.+78     	; 0x4e8a <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    4e3c:	23 30       	cpi	r18, 0x03	; 3
    4e3e:	09 f4       	brne	.+2      	; 0x4e42 <getInstructionGroup+0x19c>
    4e40:	4b c0       	rjmp	.+150    	; 0x4ed8 <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    4e42:	24 30       	cpi	r18, 0x04	; 4
    4e44:	09 f4       	brne	.+2      	; 0x4e48 <getInstructionGroup+0x1a2>
    4e46:	68 c0       	rjmp	.+208    	; 0x4f18 <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    4e48:	25 30       	cpi	r18, 0x05	; 5
    4e4a:	09 f4       	brne	.+2      	; 0x4e4e <getInstructionGroup+0x1a8>
    4e4c:	73 c0       	rjmp	.+230    	; 0x4f34 <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    4e4e:	26 30       	cpi	r18, 0x06	; 6
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <getInstructionGroup+0x1ae>
    4e52:	50 c0       	rjmp	.+160    	; 0x4ef4 <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    4e54:	27 30       	cpi	r18, 0x07	; 7
    4e56:	09 f4       	brne	.+2      	; 0x4e5a <getInstructionGroup+0x1b4>
    4e58:	8a c0       	rjmp	.+276    	; 0x4f6e <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    4e5a:	28 30       	cpi	r18, 0x08	; 8
    4e5c:	09 f4       	brne	.+2      	; 0x4e60 <getInstructionGroup+0x1ba>
    4e5e:	99 c0       	rjmp	.+306    	; 0x4f92 <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    4e60:	29 30       	cpi	r18, 0x09	; 9
    4e62:	09 f0       	breq	.+2      	; 0x4e66 <getInstructionGroup+0x1c0>
    4e64:	b2 cf       	rjmp	.-156    	; 0x4dca <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    4e66:	85 e7       	ldi	r24, 0x75	; 117
    4e68:	9c e1       	ldi	r25, 0x1C	; 28
    4e6a:	13 96       	adiw	r26, 0x03	; 3
    4e6c:	9c 93       	st	X, r25
    4e6e:	8e 93       	st	-X, r24
    4e70:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    4e72:	e6 e0       	ldi	r30, 0x06	; 6
    4e74:	fc e1       	ldi	r31, 0x1C	; 28
    4e76:	15 96       	adiw	r26, 0x05	; 5
    4e78:	fc 93       	st	X, r31
    4e7a:	ee 93       	st	-X, r30
    4e7c:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4e7e:	18 96       	adiw	r26, 0x08	; 8
    4e80:	1c 93       	st	X, r17
    4e82:	18 97       	sbiw	r26, 0x08	; 8
    4e84:	46 e0       	ldi	r20, 0x06	; 6
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	0d c0       	rjmp	.+26     	; 0x4ea4 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4e8a:	13 96       	adiw	r26, 0x03	; 3
    4e8c:	5c 92       	st	X, r5
    4e8e:	4e 92       	st	-X, r4
    4e90:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4e92:	15 96       	adiw	r26, 0x05	; 5
    4e94:	3c 92       	st	X, r3
    4e96:	2e 92       	st	-X, r2
    4e98:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4e9a:	18 96       	adiw	r26, 0x08	; 8
    4e9c:	1c 93       	st	X, r17
    4e9e:	18 97       	sbiw	r26, 0x08	; 8
    4ea0:	46 e0       	ldi	r20, 0x06	; 6
    4ea2:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    4ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    4eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    4eac:	84 91       	lpm	r24, Z+
    4eae:	eb 81       	ldd	r30, Y+3	; 0x03
    4eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    4eb2:	81 93       	st	Z+, r24
    4eb4:	fc 83       	std	Y+4, r31	; 0x04
    4eb6:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	9a 81       	ldd	r25, Y+2	; 0x02
    4ebc:	01 96       	adiw	r24, 0x01	; 1
    4ebe:	9a 83       	std	Y+2, r25	; 0x02
    4ec0:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4ec2:	2f 5f       	subi	r18, 0xFF	; 255
    4ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec6:	24 17       	cp	r18, r20
    4ec8:	35 07       	cpc	r19, r21
    4eca:	74 f3       	brlt	.-36     	; 0x4ea8 <getInstructionGroup+0x202>
    4ecc:	9a 01       	movw	r18, r20
    4ece:	80 91 f3 0e 	lds	r24, 0x0EF3
    4ed2:	90 91 f4 0e 	lds	r25, 0x0EF4
    4ed6:	7b cf       	rjmp	.-266    	; 0x4dce <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4ed8:	13 96       	adiw	r26, 0x03	; 3
    4eda:	9c 92       	st	X, r9
    4edc:	8e 92       	st	-X, r8
    4ede:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    4ee0:	15 96       	adiw	r26, 0x05	; 5
    4ee2:	7c 92       	st	X, r7
    4ee4:	6e 92       	st	-X, r6
    4ee6:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4ee8:	18 96       	adiw	r26, 0x08	; 8
    4eea:	1c 92       	st	X, r1
    4eec:	18 97       	sbiw	r26, 0x08	; 8
    4eee:	4a e0       	ldi	r20, 0x0A	; 10
    4ef0:	50 e0       	ldi	r21, 0x00	; 0
    4ef2:	d8 cf       	rjmp	.-80     	; 0x4ea4 <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    4ef4:	e5 e9       	ldi	r30, 0x95	; 149
    4ef6:	f1 e2       	ldi	r31, 0x21	; 33
    4ef8:	13 96       	adiw	r26, 0x03	; 3
    4efa:	fc 93       	st	X, r31
    4efc:	ee 93       	st	-X, r30
    4efe:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    4f00:	87 ef       	ldi	r24, 0xF7	; 247
    4f02:	9f e1       	ldi	r25, 0x1F	; 31
    4f04:	15 96       	adiw	r26, 0x05	; 5
    4f06:	9c 93       	st	X, r25
    4f08:	8e 93       	st	-X, r24
    4f0a:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4f0c:	18 96       	adiw	r26, 0x08	; 8
    4f0e:	1c 92       	st	X, r1
    4f10:	18 97       	sbiw	r26, 0x08	; 8
    4f12:	42 e1       	ldi	r20, 0x12	; 18
    4f14:	50 e0       	ldi	r21, 0x00	; 0
    4f16:	c6 cf       	rjmp	.-116    	; 0x4ea4 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4f18:	18 96       	adiw	r26, 0x08	; 8
    4f1a:	1c 93       	st	X, r17
    4f1c:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4f1e:	13 96       	adiw	r26, 0x03	; 3
    4f20:	dc 92       	st	X, r13
    4f22:	ce 92       	st	-X, r12
    4f24:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    4f26:	15 96       	adiw	r26, 0x05	; 5
    4f28:	bc 92       	st	X, r11
    4f2a:	ae 92       	st	-X, r10
    4f2c:	14 97       	sbiw	r26, 0x04	; 4
    4f2e:	4e e0       	ldi	r20, 0x0E	; 14
    4f30:	50 e0       	ldi	r21, 0x00	; 0
    4f32:	b8 cf       	rjmp	.-144    	; 0x4ea4 <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    4f34:	ec e8       	ldi	r30, 0x8C	; 140
    4f36:	ff e1       	ldi	r31, 0x1F	; 31
    4f38:	13 96       	adiw	r26, 0x03	; 3
    4f3a:	fc 93       	st	X, r31
    4f3c:	ee 93       	st	-X, r30
    4f3e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    4f40:	88 e5       	ldi	r24, 0x58	; 88
    4f42:	9f e1       	ldi	r25, 0x1F	; 31
    4f44:	15 96       	adiw	r26, 0x05	; 5
    4f46:	9c 93       	st	X, r25
    4f48:	8e 93       	st	-X, r24
    4f4a:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4f4c:	18 96       	adiw	r26, 0x08	; 8
    4f4e:	1c 92       	st	X, r1
    4f50:	18 97       	sbiw	r26, 0x08	; 8
    4f52:	42 e1       	ldi	r20, 0x12	; 18
    4f54:	50 e0       	ldi	r21, 0x00	; 0
    4f56:	a6 cf       	rjmp	.-180    	; 0x4ea4 <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    4f58:	1a 96       	adiw	r26, 0x0a	; 10
    4f5a:	1c 92       	st	X, r1
    4f5c:	1e 92       	st	-X, r1
    4f5e:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4f60:	4f 5f       	subi	r20, 0xFF	; 255
    4f62:	5f 4f       	sbci	r21, 0xFF	; 255
    4f64:	50 93 05 01 	sts	0x0105, r21
    4f68:	40 93 04 01 	sts	0x0104, r20
    4f6c:	c6 ce       	rjmp	.-628    	; 0x4cfa <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    4f6e:	ea e7       	ldi	r30, 0x7A	; 122
    4f70:	f3 e2       	ldi	r31, 0x23	; 35
    4f72:	13 96       	adiw	r26, 0x03	; 3
    4f74:	fc 93       	st	X, r31
    4f76:	ee 93       	st	-X, r30
    4f78:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    4f7a:	8b ed       	ldi	r24, 0xDB	; 219
    4f7c:	90 e2       	ldi	r25, 0x20	; 32
    4f7e:	15 96       	adiw	r26, 0x05	; 5
    4f80:	9c 93       	st	X, r25
    4f82:	8e 93       	st	-X, r24
    4f84:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4f86:	18 96       	adiw	r26, 0x08	; 8
    4f88:	1c 92       	st	X, r1
    4f8a:	18 97       	sbiw	r26, 0x08	; 8
    4f8c:	48 e1       	ldi	r20, 0x18	; 24
    4f8e:	50 e0       	ldi	r21, 0x00	; 0
    4f90:	89 cf       	rjmp	.-238    	; 0x4ea4 <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    4f92:	e6 e1       	ldi	r30, 0x16	; 22
    4f94:	fc e1       	ldi	r31, 0x1C	; 28
    4f96:	13 96       	adiw	r26, 0x03	; 3
    4f98:	fc 93       	st	X, r31
    4f9a:	ee 93       	st	-X, r30
    4f9c:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    4f9e:	8a e0       	ldi	r24, 0x0A	; 10
    4fa0:	9c e1       	ldi	r25, 0x1C	; 28
    4fa2:	15 96       	adiw	r26, 0x05	; 5
    4fa4:	9c 93       	st	X, r25
    4fa6:	8e 93       	st	-X, r24
    4fa8:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4faa:	89 81       	ldd	r24, Y+1	; 0x01
    4fac:	9a 81       	ldd	r25, Y+2	; 0x02
    4fae:	fc 01       	movw	r30, r24
    4fb0:	45 91       	lpm	r20, Z+
    4fb2:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    4fb4:	90 93 05 01 	sts	0x0105, r25
    4fb8:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    4fbc:	44 0f       	add	r20, r20
    4fbe:	55 1f       	adc	r21, r21
    4fc0:	44 0f       	add	r20, r20
    4fc2:	55 1f       	adc	r21, r21
    4fc4:	44 0f       	add	r20, r20
    4fc6:	55 1f       	adc	r21, r21
    4fc8:	4e 5f       	subi	r20, 0xFE	; 254
    4fca:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4fcc:	18 96       	adiw	r26, 0x08	; 8
    4fce:	1c 92       	st	X, r1
    4fd0:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4fd2:	14 16       	cp	r1, r20
    4fd4:	15 06       	cpc	r1, r21
    4fd6:	0c f4       	brge	.+2      	; 0x4fda <getInstructionGroup+0x334>
    4fd8:	65 cf       	rjmp	.-310    	; 0x4ea4 <getInstructionGroup+0x1fe>
    4fda:	78 cf       	rjmp	.-272    	; 0x4ecc <getInstructionGroup+0x226>

00004fdc <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    4fdc:	cf 93       	push	r28
    4fde:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    4fe0:	a0 91 f3 0c 	lds	r26, 0x0CF3
    4fe4:	b0 91 f4 0c 	lds	r27, 0x0CF4
    4fe8:	a2 30       	cpi	r26, 0x02	; 2
    4fea:	b1 05       	cpc	r27, r1
    4fec:	78 f4       	brcc	.+30     	; 0x500c <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    4fee:	11 97       	sbiw	r26, 0x01	; 1
    4ff0:	81 f1       	breq	.+96     	; 0x5052 <getPreviousGroup+0x76>
    4ff2:	c0 91 04 01 	lds	r28, 0x0104
    4ff6:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    4ffa:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <getInstructionGroup>
			dataPtr = tmpPtr;
    4ffe:	d0 93 05 01 	sts	0x0105, r29
    5002:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    500c:	fd 01       	movw	r30, r26
    500e:	31 97       	sbiw	r30, 0x01	; 1
    5010:	f0 93 f4 0c 	sts	0x0CF4, r31
    5014:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    5018:	aa 0f       	add	r26, r26
    501a:	bb 1f       	adc	r27, r27
    501c:	af 50       	subi	r26, 0x0F	; 15
    501e:	b3 4f       	sbci	r27, 0xF3	; 243
    5020:	ee 0f       	add	r30, r30
    5022:	ff 1f       	adc	r31, r31
    5024:	eb 50       	subi	r30, 0x0B	; 11
    5026:	f3 4f       	sbci	r31, 0xF3	; 243
    5028:	2d 91       	ld	r18, X+
    502a:	3c 91       	ld	r19, X
    502c:	80 81       	ld	r24, Z
    502e:	91 81       	ldd	r25, Z+1	; 0x01
    5030:	28 0f       	add	r18, r24
    5032:	39 1f       	adc	r19, r25
    5034:	80 91 04 01 	lds	r24, 0x0104
    5038:	90 91 05 01 	lds	r25, 0x0105
    503c:	82 1b       	sub	r24, r18
    503e:	93 0b       	sbc	r25, r19
    5040:	90 93 05 01 	sts	0x0105, r25
    5044:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    5048:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    504c:	df 91       	pop	r29
    504e:	cf 91       	pop	r28
    5050:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    5052:	80 91 f5 0c 	lds	r24, 0x0CF5
    5056:	90 91 f6 0c 	lds	r25, 0x0CF6
    505a:	c0 91 04 01 	lds	r28, 0x0104
    505e:	d0 91 05 01 	lds	r29, 0x0105
    5062:	c8 1b       	sub	r28, r24
    5064:	d9 0b       	sbc	r29, r25
    5066:	d0 93 05 01 	sts	0x0105, r29
    506a:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    506e:	10 92 f4 0c 	sts	0x0CF4, r1
    5072:	10 92 f3 0c 	sts	0x0CF3, r1
    5076:	c1 cf       	rjmp	.-126    	; 0x4ffa <getPreviousGroup+0x1e>

00005078 <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    5078:	e0 91 f3 0c 	lds	r30, 0x0CF3
    507c:	f0 91 f4 0c 	lds	r31, 0x0CF4
    5080:	ee 0f       	add	r30, r30
    5082:	ff 1f       	adc	r31, r31
    5084:	ed 50       	subi	r30, 0x0D	; 13
    5086:	f3 4f       	sbci	r31, 0xF3	; 243
    5088:	20 81       	ld	r18, Z
    508a:	31 81       	ldd	r19, Z+1	; 0x01
    508c:	80 91 04 01 	lds	r24, 0x0104
    5090:	90 91 05 01 	lds	r25, 0x0105
    5094:	82 1b       	sub	r24, r18
    5096:	93 0b       	sbc	r25, r19
    5098:	90 93 05 01 	sts	0x0105, r25
    509c:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    50a0:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <getInstructionGroup>
}
    50a4:	08 95       	ret

000050a6 <getNextGroup>:

struct instruction_group *getNextGroup() {
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    50aa:	c0 91 04 01 	lds	r28, 0x0104
    50ae:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    50b2:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <getInstructionGroup>
    50b6:	ac 01       	movw	r20, r24

	if(ig != 0) {
    50b8:	00 97       	sbiw	r24, 0x00	; 0
    50ba:	d9 f0       	breq	.+54     	; 0x50f2 <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    50bc:	20 91 f3 0c 	lds	r18, 0x0CF3
    50c0:	30 91 f4 0c 	lds	r19, 0x0CF4
    50c4:	f9 01       	movw	r30, r18
    50c6:	ee 0f       	add	r30, r30
    50c8:	ff 1f       	adc	r31, r31
    50ca:	eb 50       	subi	r30, 0x0B	; 11
    50cc:	f3 4f       	sbci	r31, 0xF3	; 243
    50ce:	80 91 04 01 	lds	r24, 0x0104
    50d2:	90 91 05 01 	lds	r25, 0x0105
    50d6:	8c 1b       	sub	r24, r28
    50d8:	9d 0b       	sbc	r25, r29
    50da:	91 83       	std	Z+1, r25	; 0x01
    50dc:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    50de:	2f 5f       	subi	r18, 0xFF	; 255
    50e0:	3f 4f       	sbci	r19, 0xFF	; 255
    50e2:	30 93 f4 0c 	sts	0x0CF4, r19
    50e6:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    50ea:	ca 01       	movw	r24, r20
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    50f2:	0e 94 3c 28 	call	0x5078	; 0x5078 <getLastGroup>
    50f6:	ac 01       	movw	r20, r24
    50f8:	f8 cf       	rjmp	.-16     	; 0x50ea <getNextGroup+0x44>

000050fa <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    50fa:	10 92 f4 0c 	sts	0x0CF4, r1
    50fe:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    5102:	8e ef       	ldi	r24, 0xFE	; 254
    5104:	91 e0       	ldi	r25, 0x01	; 1
    5106:	e5 ef       	ldi	r30, 0xF5	; 245
    5108:	fc e0       	ldi	r31, 0x0C	; 12
    510a:	df 01       	movw	r26, r30
    510c:	9c 01       	movw	r18, r24
    510e:	1d 92       	st	X+, r1
    5110:	21 50       	subi	r18, 0x01	; 1
    5112:	30 40       	sbci	r19, 0x00	; 0
    5114:	e1 f7       	brne	.-8      	; 0x510e <initDecoder+0x14>
}
    5116:	08 95       	ret

00005118 <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    5118:	9c 01       	movw	r18, r24
    511a:	97 fd       	sbrc	r25, 7
    511c:	02 c0       	rjmp	.+4      	; 0x5122 <abs+0xa>
    511e:	c9 01       	movw	r24, r18
    5120:	08 95       	ret
    5122:	30 95       	com	r19
    5124:	21 95       	neg	r18
    5126:	3f 4f       	sbci	r19, 0xFF	; 255
    5128:	c9 01       	movw	r24, r18
    512a:	08 95       	ret

0000512c <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    512c:	86 30       	cpi	r24, 0x06	; 6
    512e:	91 05       	cpc	r25, r1
    5130:	24 f0       	brlt	.+8      	; 0x513a <setRGBColor+0xe>
		if(led == 6) {
    5132:	86 30       	cpi	r24, 0x06	; 6
    5134:	91 05       	cpc	r25, r1
    5136:	89 f0       	breq	.+34     	; 0x515a <setRGBColor+0x2e>
    5138:	01 97       	sbiw	r24, 0x01	; 1
    513a:	fc 01       	movw	r30, r24
    513c:	ee 0f       	add	r30, r30
    513e:	ff 1f       	adc	r31, r31
    5140:	e8 0f       	add	r30, r24
    5142:	f9 1f       	adc	r31, r25
    5144:	ee 0f       	add	r30, r30
    5146:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    5148:	e5 51       	subi	r30, 0x15	; 21
    514a:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    514c:	71 83       	std	Z+1, r23	; 0x01
    514e:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    5150:	55 83       	std	Z+5, r21	; 0x05
    5152:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    5154:	33 83       	std	Z+3, r19	; 0x03
    5156:	22 83       	std	Z+2, r18	; 0x02



}
    5158:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    515a:	e2 e4       	ldi	r30, 0x42	; 66
    515c:	f0 e0       	ldi	r31, 0x00	; 0
    515e:	f4 cf       	rjmp	.-24     	; 0x5148 <setRGBColor+0x1c>

00005160 <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    5160:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    5162:	86 30       	cpi	r24, 0x06	; 6
    5164:	91 05       	cpc	r25, r1
    5166:	24 f0       	brlt	.+8      	; 0x5170 <getRGBColor+0x10>
		if(led == 6) {
    5168:	86 30       	cpi	r24, 0x06	; 6
    516a:	91 05       	cpc	r25, r1
    516c:	e1 f0       	breq	.+56     	; 0x51a6 <getRGBColor+0x46>
    516e:	01 97       	sbiw	r24, 0x01	; 1
    5170:	fc 01       	movw	r30, r24
    5172:	ee 0f       	add	r30, r30
    5174:	ff 1f       	adc	r31, r31
    5176:	e8 0f       	add	r30, r24
    5178:	f9 1f       	adc	r31, r25
    517a:	ee 0f       	add	r30, r30
    517c:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    517e:	e5 51       	subi	r30, 0x15	; 21
    5180:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    5182:	80 81       	ld	r24, Z
    5184:	91 81       	ldd	r25, Z+1	; 0x01
    5186:	11 96       	adiw	r26, 0x01	; 1
    5188:	9c 93       	st	X, r25
    518a:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    518c:	84 81       	ldd	r24, Z+4	; 0x04
    518e:	95 81       	ldd	r25, Z+5	; 0x05
    5190:	13 96       	adiw	r26, 0x03	; 3
    5192:	9c 93       	st	X, r25
    5194:	8e 93       	st	-X, r24
    5196:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    5198:	82 81       	ldd	r24, Z+2	; 0x02
    519a:	93 81       	ldd	r25, Z+3	; 0x03
    519c:	15 96       	adiw	r26, 0x05	; 5
    519e:	9c 93       	st	X, r25
    51a0:	8e 93       	st	-X, r24
    51a2:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    51a4:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    51a6:	e2 e4       	ldi	r30, 0x42	; 66
    51a8:	f0 e0       	ldi	r31, 0x00	; 0
    51aa:	e9 cf       	rjmp	.-46     	; 0x517e <getRGBColor+0x1e>

000051ac <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    51ac:	43 e2       	ldi	r20, 0x23	; 35
    51ae:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    51b0:	fa 01       	movw	r30, r20
    51b2:	ee 0f       	add	r30, r30
    51b4:	ff 1f       	adc	r31, r31
    51b6:	e5 51       	subi	r30, 0x15	; 21
    51b8:	fd 4f       	sbci	r31, 0xFD	; 253
    51ba:	01 90       	ld	r0, Z+
    51bc:	f0 81       	ld	r31, Z
    51be:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    51c0:	e2 95       	swap	r30
    51c2:	f2 95       	swap	r31
    51c4:	f0 7f       	andi	r31, 0xF0	; 240
    51c6:	fe 27       	eor	r31, r30
    51c8:	e0 7f       	andi	r30, 0xF0	; 240
    51ca:	fe 27       	eor	r31, r30
    51cc:	2c e0       	ldi	r18, 0x0C	; 12
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	08 c0       	rjmp	.+16     	; 0x51e2 <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    51d2:	8b b3       	in	r24, 0x1b	; 27
    51d4:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    51d6:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    51d8:	8b b3       	in	r24, 0x1b	; 27
    51da:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    51dc:	21 15       	cp	r18, r1
    51de:	31 05       	cpc	r19, r1
    51e0:	91 f0       	breq	.+36     	; 0x5206 <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    51e2:	21 50       	subi	r18, 0x01	; 1
    51e4:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    51e6:	cf 01       	movw	r24, r30
    51e8:	02 2e       	mov	r0, r18
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <displayColors+0x44>
    51ec:	95 95       	asr	r25
    51ee:	87 95       	ror	r24
    51f0:	0a 94       	dec	r0
    51f2:	e2 f7       	brpl	.-8      	; 0x51ec <displayColors+0x40>
    51f4:	80 ff       	sbrs	r24, 0
    51f6:	ed cf       	rjmp	.-38     	; 0x51d2 <displayColors+0x26>
				PINHIGH(BDI);
    51f8:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    51fa:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    51fc:	8b b3       	in	r24, 0x1b	; 27
    51fe:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    5200:	21 15       	cp	r18, r1
    5202:	31 05       	cpc	r19, r1
    5204:	71 f7       	brne	.-36     	; 0x51e2 <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    5206:	42 31       	cpi	r20, 0x12	; 18
    5208:	51 05       	cpc	r21, r1
    520a:	41 f0       	breq	.+16     	; 0x521c <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    520c:	41 50       	subi	r20, 0x01	; 1
    520e:	50 40       	sbci	r21, 0x00	; 0
    5210:	57 ff       	sbrs	r21, 7
    5212:	ce cf       	rjmp	.-100    	; 0x51b0 <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    5214:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    5216:	8b b3       	in	r24, 0x1b	; 27
    5218:	1b ba       	out	0x1b, r1	; 27
}
    521a:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    521c:	8b b3       	in	r24, 0x1b	; 27
    521e:	1b ba       	out	0x1b, r1	; 27
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    5224:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    5226:	2b b3       	in	r18, 0x1b	; 27
    5228:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    522a:	01 96       	adiw	r24, 0x01	; 1
    522c:	88 34       	cpi	r24, 0x48	; 72
    522e:	91 05       	cpc	r25, r1
    5230:	c9 f7       	brne	.-14     	; 0x5224 <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    5232:	41 e1       	ldi	r20, 0x11	; 17
    5234:	50 e0       	ldi	r21, 0x00	; 0
    5236:	bc cf       	rjmp	.-136    	; 0x51b0 <displayColors+0x4>

00005238 <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    5238:	10 92 ec 02 	sts	0x02EC, r1
    523c:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    5240:	10 92 f0 02 	sts	0x02F0, r1
    5244:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    5248:	10 92 ee 02 	sts	0x02EE, r1
    524c:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    5250:	10 92 f2 02 	sts	0x02F2, r1
    5254:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    5258:	10 92 f6 02 	sts	0x02F6, r1
    525c:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    5260:	10 92 f4 02 	sts	0x02F4, r1
    5264:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    5268:	0e 94 d6 28 	call	0x51ac	; 0x51ac <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    526c:	84 e6       	ldi	r24, 0x64	; 100
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	90 93 ec 02 	sts	0x02EC, r25
    5274:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    5278:	10 92 f0 02 	sts	0x02F0, r1
    527c:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    5280:	10 92 ee 02 	sts	0x02EE, r1
    5284:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    5288:	90 93 f2 02 	sts	0x02F2, r25
    528c:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    5290:	10 92 f6 02 	sts	0x02F6, r1
    5294:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    5298:	10 92 f4 02 	sts	0x02F4, r1
    529c:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    52a0:	90 91 06 01 	lds	r25, 0x0106
    52a4:	20 e0       	ldi	r18, 0x00	; 0
    52a6:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    52a8:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    52aa:	86 b7       	in	r24, 0x36	; 54
    52ac:	89 23       	and	r24, r25
    52ae:	e9 f3       	breq	.-6      	; 0x52aa <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    52b0:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    52b2:	2f 5f       	subi	r18, 0xFF	; 255
    52b4:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    52b6:	22 33       	cpi	r18, 0x32	; 50
    52b8:	31 05       	cpc	r19, r1
    52ba:	b9 f7       	brne	.-18     	; 0x52aa <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    52bc:	0e 94 d6 28 	call	0x51ac	; 0x51ac <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    52c0:	10 92 ec 02 	sts	0x02EC, r1
    52c4:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    52c8:	10 92 f0 02 	sts	0x02F0, r1
    52cc:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    52d0:	10 92 ee 02 	sts	0x02EE, r1
    52d4:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    52d8:	10 92 f2 02 	sts	0x02F2, r1
    52dc:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    52e0:	10 92 f6 02 	sts	0x02F6, r1
    52e4:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    52e8:	10 92 f4 02 	sts	0x02F4, r1
    52ec:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    52f0:	90 91 06 01 	lds	r25, 0x0106
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    52f8:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    52fa:	86 b7       	in	r24, 0x36	; 54
    52fc:	89 23       	and	r24, r25
    52fe:	e9 f3       	breq	.-6      	; 0x52fa <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    5300:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    5302:	2f 5f       	subi	r18, 0xFF	; 255
    5304:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    5306:	22 33       	cpi	r18, 0x32	; 50
    5308:	31 05       	cpc	r19, r1
    530a:	b9 f7       	brne	.-18     	; 0x52fa <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    530c:	0e 94 d6 28 	call	0x51ac	; 0x51ac <displayColors>
}
    5310:	08 95       	ret

00005312 <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    5312:	90 91 06 01 	lds	r25, 0x0106
    5316:	86 b7       	in	r24, 0x36	; 54
    5318:	89 23       	and	r24, r25
    531a:	e9 f3       	breq	.-6      	; 0x5316 <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    531c:	80 e1       	ldi	r24, 0x10	; 16
    531e:	86 bf       	out	0x36, r24	; 54
}
    5320:	08 95       	ret

00005322 <copy_data>:

void copy_data(char *dest, char *src, short length) {
    5322:	cf 93       	push	r28
    5324:	df 93       	push	r29
    5326:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    5328:	14 16       	cp	r1, r20
    532a:	15 06       	cpc	r1, r21
    532c:	7c f4       	brge	.+30     	; 0x534c <copy_data+0x2a>
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    5332:	fe 01       	movw	r30, r28
    5334:	e2 0f       	add	r30, r18
    5336:	f3 1f       	adc	r31, r19
    5338:	db 01       	movw	r26, r22
    533a:	a2 0f       	add	r26, r18
    533c:	b3 1f       	adc	r27, r19
    533e:	8c 91       	ld	r24, X
    5340:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    5342:	2f 5f       	subi	r18, 0xFF	; 255
    5344:	3f 4f       	sbci	r19, 0xFF	; 255
    5346:	24 17       	cp	r18, r20
    5348:	35 07       	cpc	r19, r21
    534a:	9c f3       	brlt	.-26     	; 0x5332 <copy_data+0x10>
		dest[i] = src[i];
	}
}
    534c:	df 91       	pop	r29
    534e:	cf 91       	pop	r28
    5350:	08 95       	ret

00005352 <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    5352:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    5354:	14 16       	cp	r1, r20
    5356:	15 06       	cpc	r1, r21
    5358:	64 f4       	brge	.+24     	; 0x5372 <copy_short_data+0x20>
    535a:	db 01       	movw	r26, r22
    535c:	20 e0       	ldi	r18, 0x00	; 0
    535e:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    5360:	8d 91       	ld	r24, X+
    5362:	9d 91       	ld	r25, X+
    5364:	81 93       	st	Z+, r24
    5366:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    5368:	2f 5f       	subi	r18, 0xFF	; 255
    536a:	3f 4f       	sbci	r19, 0xFF	; 255
    536c:	24 17       	cp	r18, r20
    536e:	35 07       	cpc	r19, r21
    5370:	bc f3       	brlt	.-18     	; 0x5360 <copy_short_data+0xe>
    5372:	08 95       	ret

00005374 <_fpadd_parts>:
    5374:	a0 e0       	ldi	r26, 0x00	; 0
    5376:	b0 e0       	ldi	r27, 0x00	; 0
    5378:	e0 ec       	ldi	r30, 0xC0	; 192
    537a:	f9 e2       	ldi	r31, 0x29	; 41
    537c:	0c 94 58 2f 	jmp	0x5eb0	; 0x5eb0 <__prologue_saves__>
    5380:	dc 01       	movw	r26, r24
    5382:	2b 01       	movw	r4, r22
    5384:	fa 01       	movw	r30, r20
    5386:	9c 91       	ld	r25, X
    5388:	92 30       	cpi	r25, 0x02	; 2
    538a:	08 f4       	brcc	.+2      	; 0x538e <_fpadd_parts+0x1a>
    538c:	39 c1       	rjmp	.+626    	; 0x5600 <_fpadd_parts+0x28c>
    538e:	eb 01       	movw	r28, r22
    5390:	88 81       	ld	r24, Y
    5392:	82 30       	cpi	r24, 0x02	; 2
    5394:	08 f4       	brcc	.+2      	; 0x5398 <_fpadd_parts+0x24>
    5396:	33 c1       	rjmp	.+614    	; 0x55fe <_fpadd_parts+0x28a>
    5398:	94 30       	cpi	r25, 0x04	; 4
    539a:	69 f4       	brne	.+26     	; 0x53b6 <_fpadd_parts+0x42>
    539c:	84 30       	cpi	r24, 0x04	; 4
    539e:	09 f0       	breq	.+2      	; 0x53a2 <_fpadd_parts+0x2e>
    53a0:	2f c1       	rjmp	.+606    	; 0x5600 <_fpadd_parts+0x28c>
    53a2:	11 96       	adiw	r26, 0x01	; 1
    53a4:	9c 91       	ld	r25, X
    53a6:	11 97       	sbiw	r26, 0x01	; 1
    53a8:	89 81       	ldd	r24, Y+1	; 0x01
    53aa:	98 17       	cp	r25, r24
    53ac:	09 f4       	brne	.+2      	; 0x53b0 <_fpadd_parts+0x3c>
    53ae:	28 c1       	rjmp	.+592    	; 0x5600 <_fpadd_parts+0x28c>
    53b0:	a7 e0       	ldi	r26, 0x07	; 7
    53b2:	b1 e0       	ldi	r27, 0x01	; 1
    53b4:	25 c1       	rjmp	.+586    	; 0x5600 <_fpadd_parts+0x28c>
    53b6:	84 30       	cpi	r24, 0x04	; 4
    53b8:	09 f4       	brne	.+2      	; 0x53bc <_fpadd_parts+0x48>
    53ba:	21 c1       	rjmp	.+578    	; 0x55fe <_fpadd_parts+0x28a>
    53bc:	82 30       	cpi	r24, 0x02	; 2
    53be:	a9 f4       	brne	.+42     	; 0x53ea <_fpadd_parts+0x76>
    53c0:	92 30       	cpi	r25, 0x02	; 2
    53c2:	09 f0       	breq	.+2      	; 0x53c6 <_fpadd_parts+0x52>
    53c4:	1d c1       	rjmp	.+570    	; 0x5600 <_fpadd_parts+0x28c>
    53c6:	9a 01       	movw	r18, r20
    53c8:	ad 01       	movw	r20, r26
    53ca:	88 e0       	ldi	r24, 0x08	; 8
    53cc:	ea 01       	movw	r28, r20
    53ce:	09 90       	ld	r0, Y+
    53d0:	ae 01       	movw	r20, r28
    53d2:	e9 01       	movw	r28, r18
    53d4:	09 92       	st	Y+, r0
    53d6:	9e 01       	movw	r18, r28
    53d8:	81 50       	subi	r24, 0x01	; 1
    53da:	c1 f7       	brne	.-16     	; 0x53cc <_fpadd_parts+0x58>
    53dc:	e2 01       	movw	r28, r4
    53de:	89 81       	ldd	r24, Y+1	; 0x01
    53e0:	11 96       	adiw	r26, 0x01	; 1
    53e2:	9c 91       	ld	r25, X
    53e4:	89 23       	and	r24, r25
    53e6:	81 83       	std	Z+1, r24	; 0x01
    53e8:	08 c1       	rjmp	.+528    	; 0x55fa <_fpadd_parts+0x286>
    53ea:	92 30       	cpi	r25, 0x02	; 2
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <_fpadd_parts+0x7c>
    53ee:	07 c1       	rjmp	.+526    	; 0x55fe <_fpadd_parts+0x28a>
    53f0:	12 96       	adiw	r26, 0x02	; 2
    53f2:	2d 90       	ld	r2, X+
    53f4:	3c 90       	ld	r3, X
    53f6:	13 97       	sbiw	r26, 0x03	; 3
    53f8:	eb 01       	movw	r28, r22
    53fa:	8a 81       	ldd	r24, Y+2	; 0x02
    53fc:	9b 81       	ldd	r25, Y+3	; 0x03
    53fe:	14 96       	adiw	r26, 0x04	; 4
    5400:	ad 90       	ld	r10, X+
    5402:	bd 90       	ld	r11, X+
    5404:	cd 90       	ld	r12, X+
    5406:	dc 90       	ld	r13, X
    5408:	17 97       	sbiw	r26, 0x07	; 7
    540a:	ec 80       	ldd	r14, Y+4	; 0x04
    540c:	fd 80       	ldd	r15, Y+5	; 0x05
    540e:	0e 81       	ldd	r16, Y+6	; 0x06
    5410:	1f 81       	ldd	r17, Y+7	; 0x07
    5412:	91 01       	movw	r18, r2
    5414:	28 1b       	sub	r18, r24
    5416:	39 0b       	sbc	r19, r25
    5418:	b9 01       	movw	r22, r18
    541a:	37 ff       	sbrs	r19, 7
    541c:	04 c0       	rjmp	.+8      	; 0x5426 <_fpadd_parts+0xb2>
    541e:	66 27       	eor	r22, r22
    5420:	77 27       	eor	r23, r23
    5422:	62 1b       	sub	r22, r18
    5424:	73 0b       	sbc	r23, r19
    5426:	60 32       	cpi	r22, 0x20	; 32
    5428:	71 05       	cpc	r23, r1
    542a:	0c f0       	brlt	.+2      	; 0x542e <_fpadd_parts+0xba>
    542c:	61 c0       	rjmp	.+194    	; 0x54f0 <_fpadd_parts+0x17c>
    542e:	12 16       	cp	r1, r18
    5430:	13 06       	cpc	r1, r19
    5432:	6c f5       	brge	.+90     	; 0x548e <_fpadd_parts+0x11a>
    5434:	37 01       	movw	r6, r14
    5436:	48 01       	movw	r8, r16
    5438:	06 2e       	mov	r0, r22
    543a:	04 c0       	rjmp	.+8      	; 0x5444 <_fpadd_parts+0xd0>
    543c:	96 94       	lsr	r9
    543e:	87 94       	ror	r8
    5440:	77 94       	ror	r7
    5442:	67 94       	ror	r6
    5444:	0a 94       	dec	r0
    5446:	d2 f7       	brpl	.-12     	; 0x543c <_fpadd_parts+0xc8>
    5448:	21 e0       	ldi	r18, 0x01	; 1
    544a:	30 e0       	ldi	r19, 0x00	; 0
    544c:	40 e0       	ldi	r20, 0x00	; 0
    544e:	50 e0       	ldi	r21, 0x00	; 0
    5450:	04 c0       	rjmp	.+8      	; 0x545a <_fpadd_parts+0xe6>
    5452:	22 0f       	add	r18, r18
    5454:	33 1f       	adc	r19, r19
    5456:	44 1f       	adc	r20, r20
    5458:	55 1f       	adc	r21, r21
    545a:	6a 95       	dec	r22
    545c:	d2 f7       	brpl	.-12     	; 0x5452 <_fpadd_parts+0xde>
    545e:	21 50       	subi	r18, 0x01	; 1
    5460:	30 40       	sbci	r19, 0x00	; 0
    5462:	40 40       	sbci	r20, 0x00	; 0
    5464:	50 40       	sbci	r21, 0x00	; 0
    5466:	2e 21       	and	r18, r14
    5468:	3f 21       	and	r19, r15
    546a:	40 23       	and	r20, r16
    546c:	51 23       	and	r21, r17
    546e:	21 15       	cp	r18, r1
    5470:	31 05       	cpc	r19, r1
    5472:	41 05       	cpc	r20, r1
    5474:	51 05       	cpc	r21, r1
    5476:	21 f0       	breq	.+8      	; 0x5480 <_fpadd_parts+0x10c>
    5478:	21 e0       	ldi	r18, 0x01	; 1
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	40 e0       	ldi	r20, 0x00	; 0
    547e:	50 e0       	ldi	r21, 0x00	; 0
    5480:	79 01       	movw	r14, r18
    5482:	8a 01       	movw	r16, r20
    5484:	e6 28       	or	r14, r6
    5486:	f7 28       	or	r15, r7
    5488:	08 29       	or	r16, r8
    548a:	19 29       	or	r17, r9
    548c:	3c c0       	rjmp	.+120    	; 0x5506 <_fpadd_parts+0x192>
    548e:	23 2b       	or	r18, r19
    5490:	d1 f1       	breq	.+116    	; 0x5506 <_fpadd_parts+0x192>
    5492:	26 0e       	add	r2, r22
    5494:	37 1e       	adc	r3, r23
    5496:	35 01       	movw	r6, r10
    5498:	46 01       	movw	r8, r12
    549a:	06 2e       	mov	r0, r22
    549c:	04 c0       	rjmp	.+8      	; 0x54a6 <_fpadd_parts+0x132>
    549e:	96 94       	lsr	r9
    54a0:	87 94       	ror	r8
    54a2:	77 94       	ror	r7
    54a4:	67 94       	ror	r6
    54a6:	0a 94       	dec	r0
    54a8:	d2 f7       	brpl	.-12     	; 0x549e <_fpadd_parts+0x12a>
    54aa:	21 e0       	ldi	r18, 0x01	; 1
    54ac:	30 e0       	ldi	r19, 0x00	; 0
    54ae:	40 e0       	ldi	r20, 0x00	; 0
    54b0:	50 e0       	ldi	r21, 0x00	; 0
    54b2:	04 c0       	rjmp	.+8      	; 0x54bc <_fpadd_parts+0x148>
    54b4:	22 0f       	add	r18, r18
    54b6:	33 1f       	adc	r19, r19
    54b8:	44 1f       	adc	r20, r20
    54ba:	55 1f       	adc	r21, r21
    54bc:	6a 95       	dec	r22
    54be:	d2 f7       	brpl	.-12     	; 0x54b4 <_fpadd_parts+0x140>
    54c0:	21 50       	subi	r18, 0x01	; 1
    54c2:	30 40       	sbci	r19, 0x00	; 0
    54c4:	40 40       	sbci	r20, 0x00	; 0
    54c6:	50 40       	sbci	r21, 0x00	; 0
    54c8:	2a 21       	and	r18, r10
    54ca:	3b 21       	and	r19, r11
    54cc:	4c 21       	and	r20, r12
    54ce:	5d 21       	and	r21, r13
    54d0:	21 15       	cp	r18, r1
    54d2:	31 05       	cpc	r19, r1
    54d4:	41 05       	cpc	r20, r1
    54d6:	51 05       	cpc	r21, r1
    54d8:	21 f0       	breq	.+8      	; 0x54e2 <_fpadd_parts+0x16e>
    54da:	21 e0       	ldi	r18, 0x01	; 1
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	40 e0       	ldi	r20, 0x00	; 0
    54e0:	50 e0       	ldi	r21, 0x00	; 0
    54e2:	59 01       	movw	r10, r18
    54e4:	6a 01       	movw	r12, r20
    54e6:	a6 28       	or	r10, r6
    54e8:	b7 28       	or	r11, r7
    54ea:	c8 28       	or	r12, r8
    54ec:	d9 28       	or	r13, r9
    54ee:	0b c0       	rjmp	.+22     	; 0x5506 <_fpadd_parts+0x192>
    54f0:	82 15       	cp	r24, r2
    54f2:	93 05       	cpc	r25, r3
    54f4:	2c f0       	brlt	.+10     	; 0x5500 <_fpadd_parts+0x18c>
    54f6:	1c 01       	movw	r2, r24
    54f8:	aa 24       	eor	r10, r10
    54fa:	bb 24       	eor	r11, r11
    54fc:	65 01       	movw	r12, r10
    54fe:	03 c0       	rjmp	.+6      	; 0x5506 <_fpadd_parts+0x192>
    5500:	ee 24       	eor	r14, r14
    5502:	ff 24       	eor	r15, r15
    5504:	87 01       	movw	r16, r14
    5506:	11 96       	adiw	r26, 0x01	; 1
    5508:	9c 91       	ld	r25, X
    550a:	d2 01       	movw	r26, r4
    550c:	11 96       	adiw	r26, 0x01	; 1
    550e:	8c 91       	ld	r24, X
    5510:	98 17       	cp	r25, r24
    5512:	09 f4       	brne	.+2      	; 0x5516 <_fpadd_parts+0x1a2>
    5514:	45 c0       	rjmp	.+138    	; 0x55a0 <_fpadd_parts+0x22c>
    5516:	99 23       	and	r25, r25
    5518:	39 f0       	breq	.+14     	; 0x5528 <_fpadd_parts+0x1b4>
    551a:	a8 01       	movw	r20, r16
    551c:	97 01       	movw	r18, r14
    551e:	2a 19       	sub	r18, r10
    5520:	3b 09       	sbc	r19, r11
    5522:	4c 09       	sbc	r20, r12
    5524:	5d 09       	sbc	r21, r13
    5526:	06 c0       	rjmp	.+12     	; 0x5534 <_fpadd_parts+0x1c0>
    5528:	a6 01       	movw	r20, r12
    552a:	95 01       	movw	r18, r10
    552c:	2e 19       	sub	r18, r14
    552e:	3f 09       	sbc	r19, r15
    5530:	40 0b       	sbc	r20, r16
    5532:	51 0b       	sbc	r21, r17
    5534:	57 fd       	sbrc	r21, 7
    5536:	08 c0       	rjmp	.+16     	; 0x5548 <_fpadd_parts+0x1d4>
    5538:	11 82       	std	Z+1, r1	; 0x01
    553a:	33 82       	std	Z+3, r3	; 0x03
    553c:	22 82       	std	Z+2, r2	; 0x02
    553e:	24 83       	std	Z+4, r18	; 0x04
    5540:	35 83       	std	Z+5, r19	; 0x05
    5542:	46 83       	std	Z+6, r20	; 0x06
    5544:	57 83       	std	Z+7, r21	; 0x07
    5546:	1d c0       	rjmp	.+58     	; 0x5582 <_fpadd_parts+0x20e>
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	81 83       	std	Z+1, r24	; 0x01
    554c:	33 82       	std	Z+3, r3	; 0x03
    554e:	22 82       	std	Z+2, r2	; 0x02
    5550:	88 27       	eor	r24, r24
    5552:	99 27       	eor	r25, r25
    5554:	dc 01       	movw	r26, r24
    5556:	82 1b       	sub	r24, r18
    5558:	93 0b       	sbc	r25, r19
    555a:	a4 0b       	sbc	r26, r20
    555c:	b5 0b       	sbc	r27, r21
    555e:	84 83       	std	Z+4, r24	; 0x04
    5560:	95 83       	std	Z+5, r25	; 0x05
    5562:	a6 83       	std	Z+6, r26	; 0x06
    5564:	b7 83       	std	Z+7, r27	; 0x07
    5566:	0d c0       	rjmp	.+26     	; 0x5582 <_fpadd_parts+0x20e>
    5568:	22 0f       	add	r18, r18
    556a:	33 1f       	adc	r19, r19
    556c:	44 1f       	adc	r20, r20
    556e:	55 1f       	adc	r21, r21
    5570:	24 83       	std	Z+4, r18	; 0x04
    5572:	35 83       	std	Z+5, r19	; 0x05
    5574:	46 83       	std	Z+6, r20	; 0x06
    5576:	57 83       	std	Z+7, r21	; 0x07
    5578:	82 81       	ldd	r24, Z+2	; 0x02
    557a:	93 81       	ldd	r25, Z+3	; 0x03
    557c:	01 97       	sbiw	r24, 0x01	; 1
    557e:	93 83       	std	Z+3, r25	; 0x03
    5580:	82 83       	std	Z+2, r24	; 0x02
    5582:	24 81       	ldd	r18, Z+4	; 0x04
    5584:	35 81       	ldd	r19, Z+5	; 0x05
    5586:	46 81       	ldd	r20, Z+6	; 0x06
    5588:	57 81       	ldd	r21, Z+7	; 0x07
    558a:	da 01       	movw	r26, r20
    558c:	c9 01       	movw	r24, r18
    558e:	01 97       	sbiw	r24, 0x01	; 1
    5590:	a1 09       	sbc	r26, r1
    5592:	b1 09       	sbc	r27, r1
    5594:	8f 5f       	subi	r24, 0xFF	; 255
    5596:	9f 4f       	sbci	r25, 0xFF	; 255
    5598:	af 4f       	sbci	r26, 0xFF	; 255
    559a:	bf 43       	sbci	r27, 0x3F	; 63
    559c:	28 f3       	brcs	.-54     	; 0x5568 <_fpadd_parts+0x1f4>
    559e:	0b c0       	rjmp	.+22     	; 0x55b6 <_fpadd_parts+0x242>
    55a0:	91 83       	std	Z+1, r25	; 0x01
    55a2:	33 82       	std	Z+3, r3	; 0x03
    55a4:	22 82       	std	Z+2, r2	; 0x02
    55a6:	ea 0c       	add	r14, r10
    55a8:	fb 1c       	adc	r15, r11
    55aa:	0c 1d       	adc	r16, r12
    55ac:	1d 1d       	adc	r17, r13
    55ae:	e4 82       	std	Z+4, r14	; 0x04
    55b0:	f5 82       	std	Z+5, r15	; 0x05
    55b2:	06 83       	std	Z+6, r16	; 0x06
    55b4:	17 83       	std	Z+7, r17	; 0x07
    55b6:	83 e0       	ldi	r24, 0x03	; 3
    55b8:	80 83       	st	Z, r24
    55ba:	24 81       	ldd	r18, Z+4	; 0x04
    55bc:	35 81       	ldd	r19, Z+5	; 0x05
    55be:	46 81       	ldd	r20, Z+6	; 0x06
    55c0:	57 81       	ldd	r21, Z+7	; 0x07
    55c2:	57 ff       	sbrs	r21, 7
    55c4:	1a c0       	rjmp	.+52     	; 0x55fa <_fpadd_parts+0x286>
    55c6:	c9 01       	movw	r24, r18
    55c8:	aa 27       	eor	r26, r26
    55ca:	97 fd       	sbrc	r25, 7
    55cc:	a0 95       	com	r26
    55ce:	ba 2f       	mov	r27, r26
    55d0:	81 70       	andi	r24, 0x01	; 1
    55d2:	90 70       	andi	r25, 0x00	; 0
    55d4:	a0 70       	andi	r26, 0x00	; 0
    55d6:	b0 70       	andi	r27, 0x00	; 0
    55d8:	56 95       	lsr	r21
    55da:	47 95       	ror	r20
    55dc:	37 95       	ror	r19
    55de:	27 95       	ror	r18
    55e0:	82 2b       	or	r24, r18
    55e2:	93 2b       	or	r25, r19
    55e4:	a4 2b       	or	r26, r20
    55e6:	b5 2b       	or	r27, r21
    55e8:	84 83       	std	Z+4, r24	; 0x04
    55ea:	95 83       	std	Z+5, r25	; 0x05
    55ec:	a6 83       	std	Z+6, r26	; 0x06
    55ee:	b7 83       	std	Z+7, r27	; 0x07
    55f0:	82 81       	ldd	r24, Z+2	; 0x02
    55f2:	93 81       	ldd	r25, Z+3	; 0x03
    55f4:	01 96       	adiw	r24, 0x01	; 1
    55f6:	93 83       	std	Z+3, r25	; 0x03
    55f8:	82 83       	std	Z+2, r24	; 0x02
    55fa:	df 01       	movw	r26, r30
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <_fpadd_parts+0x28c>
    55fe:	d2 01       	movw	r26, r4
    5600:	cd 01       	movw	r24, r26
    5602:	cd b7       	in	r28, 0x3d	; 61
    5604:	de b7       	in	r29, 0x3e	; 62
    5606:	e2 e1       	ldi	r30, 0x12	; 18
    5608:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <__epilogue_restores__>

0000560c <__subsf3>:
    560c:	a0 e2       	ldi	r26, 0x20	; 32
    560e:	b0 e0       	ldi	r27, 0x00	; 0
    5610:	ec e0       	ldi	r30, 0x0C	; 12
    5612:	fb e2       	ldi	r31, 0x2B	; 43
    5614:	0c 94 64 2f 	jmp	0x5ec8	; 0x5ec8 <__prologue_saves__+0x18>
    5618:	69 83       	std	Y+1, r22	; 0x01
    561a:	7a 83       	std	Y+2, r23	; 0x02
    561c:	8b 83       	std	Y+3, r24	; 0x03
    561e:	9c 83       	std	Y+4, r25	; 0x04
    5620:	2d 83       	std	Y+5, r18	; 0x05
    5622:	3e 83       	std	Y+6, r19	; 0x06
    5624:	4f 83       	std	Y+7, r20	; 0x07
    5626:	58 87       	std	Y+8, r21	; 0x08
    5628:	e9 e0       	ldi	r30, 0x09	; 9
    562a:	ee 2e       	mov	r14, r30
    562c:	f1 2c       	mov	r15, r1
    562e:	ec 0e       	add	r14, r28
    5630:	fd 1e       	adc	r15, r29
    5632:	ce 01       	movw	r24, r28
    5634:	01 96       	adiw	r24, 0x01	; 1
    5636:	b7 01       	movw	r22, r14
    5638:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    563c:	8e 01       	movw	r16, r28
    563e:	0f 5e       	subi	r16, 0xEF	; 239
    5640:	1f 4f       	sbci	r17, 0xFF	; 255
    5642:	ce 01       	movw	r24, r28
    5644:	05 96       	adiw	r24, 0x05	; 5
    5646:	b8 01       	movw	r22, r16
    5648:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    564c:	8a 89       	ldd	r24, Y+18	; 0x12
    564e:	91 e0       	ldi	r25, 0x01	; 1
    5650:	89 27       	eor	r24, r25
    5652:	8a 8b       	std	Y+18, r24	; 0x12
    5654:	c7 01       	movw	r24, r14
    5656:	b8 01       	movw	r22, r16
    5658:	ae 01       	movw	r20, r28
    565a:	47 5e       	subi	r20, 0xE7	; 231
    565c:	5f 4f       	sbci	r21, 0xFF	; 255
    565e:	0e 94 ba 29 	call	0x5374	; 0x5374 <_fpadd_parts>
    5662:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__pack_f>
    5666:	a0 96       	adiw	r28, 0x20	; 32
    5668:	e6 e0       	ldi	r30, 0x06	; 6
    566a:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__epilogue_restores__+0x18>

0000566e <__addsf3>:
    566e:	a0 e2       	ldi	r26, 0x20	; 32
    5670:	b0 e0       	ldi	r27, 0x00	; 0
    5672:	ed e3       	ldi	r30, 0x3D	; 61
    5674:	fb e2       	ldi	r31, 0x2B	; 43
    5676:	0c 94 64 2f 	jmp	0x5ec8	; 0x5ec8 <__prologue_saves__+0x18>
    567a:	69 83       	std	Y+1, r22	; 0x01
    567c:	7a 83       	std	Y+2, r23	; 0x02
    567e:	8b 83       	std	Y+3, r24	; 0x03
    5680:	9c 83       	std	Y+4, r25	; 0x04
    5682:	2d 83       	std	Y+5, r18	; 0x05
    5684:	3e 83       	std	Y+6, r19	; 0x06
    5686:	4f 83       	std	Y+7, r20	; 0x07
    5688:	58 87       	std	Y+8, r21	; 0x08
    568a:	f9 e0       	ldi	r31, 0x09	; 9
    568c:	ef 2e       	mov	r14, r31
    568e:	f1 2c       	mov	r15, r1
    5690:	ec 0e       	add	r14, r28
    5692:	fd 1e       	adc	r15, r29
    5694:	ce 01       	movw	r24, r28
    5696:	01 96       	adiw	r24, 0x01	; 1
    5698:	b7 01       	movw	r22, r14
    569a:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    569e:	8e 01       	movw	r16, r28
    56a0:	0f 5e       	subi	r16, 0xEF	; 239
    56a2:	1f 4f       	sbci	r17, 0xFF	; 255
    56a4:	ce 01       	movw	r24, r28
    56a6:	05 96       	adiw	r24, 0x05	; 5
    56a8:	b8 01       	movw	r22, r16
    56aa:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    56ae:	c7 01       	movw	r24, r14
    56b0:	b8 01       	movw	r22, r16
    56b2:	ae 01       	movw	r20, r28
    56b4:	47 5e       	subi	r20, 0xE7	; 231
    56b6:	5f 4f       	sbci	r21, 0xFF	; 255
    56b8:	0e 94 ba 29 	call	0x5374	; 0x5374 <_fpadd_parts>
    56bc:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__pack_f>
    56c0:	a0 96       	adiw	r28, 0x20	; 32
    56c2:	e6 e0       	ldi	r30, 0x06	; 6
    56c4:	0c 94 80 2f 	jmp	0x5f00	; 0x5f00 <__epilogue_restores__+0x18>

000056c8 <__mulsf3>:
    56c8:	a0 e2       	ldi	r26, 0x20	; 32
    56ca:	b0 e0       	ldi	r27, 0x00	; 0
    56cc:	ea e6       	ldi	r30, 0x6A	; 106
    56ce:	fb e2       	ldi	r31, 0x2B	; 43
    56d0:	0c 94 58 2f 	jmp	0x5eb0	; 0x5eb0 <__prologue_saves__>
    56d4:	69 83       	std	Y+1, r22	; 0x01
    56d6:	7a 83       	std	Y+2, r23	; 0x02
    56d8:	8b 83       	std	Y+3, r24	; 0x03
    56da:	9c 83       	std	Y+4, r25	; 0x04
    56dc:	2d 83       	std	Y+5, r18	; 0x05
    56de:	3e 83       	std	Y+6, r19	; 0x06
    56e0:	4f 83       	std	Y+7, r20	; 0x07
    56e2:	58 87       	std	Y+8, r21	; 0x08
    56e4:	ce 01       	movw	r24, r28
    56e6:	01 96       	adiw	r24, 0x01	; 1
    56e8:	be 01       	movw	r22, r28
    56ea:	67 5f       	subi	r22, 0xF7	; 247
    56ec:	7f 4f       	sbci	r23, 0xFF	; 255
    56ee:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    56f2:	ce 01       	movw	r24, r28
    56f4:	05 96       	adiw	r24, 0x05	; 5
    56f6:	be 01       	movw	r22, r28
    56f8:	6f 5e       	subi	r22, 0xEF	; 239
    56fa:	7f 4f       	sbci	r23, 0xFF	; 255
    56fc:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    5700:	99 85       	ldd	r25, Y+9	; 0x09
    5702:	92 30       	cpi	r25, 0x02	; 2
    5704:	88 f0       	brcs	.+34     	; 0x5728 <__mulsf3+0x60>
    5706:	89 89       	ldd	r24, Y+17	; 0x11
    5708:	82 30       	cpi	r24, 0x02	; 2
    570a:	c8 f0       	brcs	.+50     	; 0x573e <__mulsf3+0x76>
    570c:	94 30       	cpi	r25, 0x04	; 4
    570e:	19 f4       	brne	.+6      	; 0x5716 <__mulsf3+0x4e>
    5710:	82 30       	cpi	r24, 0x02	; 2
    5712:	51 f4       	brne	.+20     	; 0x5728 <__mulsf3+0x60>
    5714:	04 c0       	rjmp	.+8      	; 0x571e <__mulsf3+0x56>
    5716:	84 30       	cpi	r24, 0x04	; 4
    5718:	29 f4       	brne	.+10     	; 0x5724 <__mulsf3+0x5c>
    571a:	92 30       	cpi	r25, 0x02	; 2
    571c:	81 f4       	brne	.+32     	; 0x573e <__mulsf3+0x76>
    571e:	87 e0       	ldi	r24, 0x07	; 7
    5720:	91 e0       	ldi	r25, 0x01	; 1
    5722:	c6 c0       	rjmp	.+396    	; 0x58b0 <__mulsf3+0x1e8>
    5724:	92 30       	cpi	r25, 0x02	; 2
    5726:	49 f4       	brne	.+18     	; 0x573a <__mulsf3+0x72>
    5728:	20 e0       	ldi	r18, 0x00	; 0
    572a:	9a 85       	ldd	r25, Y+10	; 0x0a
    572c:	8a 89       	ldd	r24, Y+18	; 0x12
    572e:	98 13       	cpse	r25, r24
    5730:	21 e0       	ldi	r18, 0x01	; 1
    5732:	2a 87       	std	Y+10, r18	; 0x0a
    5734:	ce 01       	movw	r24, r28
    5736:	09 96       	adiw	r24, 0x09	; 9
    5738:	bb c0       	rjmp	.+374    	; 0x58b0 <__mulsf3+0x1e8>
    573a:	82 30       	cpi	r24, 0x02	; 2
    573c:	49 f4       	brne	.+18     	; 0x5750 <__mulsf3+0x88>
    573e:	20 e0       	ldi	r18, 0x00	; 0
    5740:	9a 85       	ldd	r25, Y+10	; 0x0a
    5742:	8a 89       	ldd	r24, Y+18	; 0x12
    5744:	98 13       	cpse	r25, r24
    5746:	21 e0       	ldi	r18, 0x01	; 1
    5748:	2a 8b       	std	Y+18, r18	; 0x12
    574a:	ce 01       	movw	r24, r28
    574c:	41 96       	adiw	r24, 0x11	; 17
    574e:	b0 c0       	rjmp	.+352    	; 0x58b0 <__mulsf3+0x1e8>
    5750:	2d 84       	ldd	r2, Y+13	; 0x0d
    5752:	3e 84       	ldd	r3, Y+14	; 0x0e
    5754:	4f 84       	ldd	r4, Y+15	; 0x0f
    5756:	58 88       	ldd	r5, Y+16	; 0x10
    5758:	6d 88       	ldd	r6, Y+21	; 0x15
    575a:	7e 88       	ldd	r7, Y+22	; 0x16
    575c:	8f 88       	ldd	r8, Y+23	; 0x17
    575e:	98 8c       	ldd	r9, Y+24	; 0x18
    5760:	ee 24       	eor	r14, r14
    5762:	ff 24       	eor	r15, r15
    5764:	87 01       	movw	r16, r14
    5766:	aa 24       	eor	r10, r10
    5768:	bb 24       	eor	r11, r11
    576a:	65 01       	movw	r12, r10
    576c:	40 e0       	ldi	r20, 0x00	; 0
    576e:	50 e0       	ldi	r21, 0x00	; 0
    5770:	60 e0       	ldi	r22, 0x00	; 0
    5772:	70 e0       	ldi	r23, 0x00	; 0
    5774:	e0 e0       	ldi	r30, 0x00	; 0
    5776:	f0 e0       	ldi	r31, 0x00	; 0
    5778:	c1 01       	movw	r24, r2
    577a:	81 70       	andi	r24, 0x01	; 1
    577c:	90 70       	andi	r25, 0x00	; 0
    577e:	89 2b       	or	r24, r25
    5780:	e9 f0       	breq	.+58     	; 0x57bc <__mulsf3+0xf4>
    5782:	e6 0c       	add	r14, r6
    5784:	f7 1c       	adc	r15, r7
    5786:	08 1d       	adc	r16, r8
    5788:	19 1d       	adc	r17, r9
    578a:	9a 01       	movw	r18, r20
    578c:	ab 01       	movw	r20, r22
    578e:	2a 0d       	add	r18, r10
    5790:	3b 1d       	adc	r19, r11
    5792:	4c 1d       	adc	r20, r12
    5794:	5d 1d       	adc	r21, r13
    5796:	80 e0       	ldi	r24, 0x00	; 0
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	a0 e0       	ldi	r26, 0x00	; 0
    579c:	b0 e0       	ldi	r27, 0x00	; 0
    579e:	e6 14       	cp	r14, r6
    57a0:	f7 04       	cpc	r15, r7
    57a2:	08 05       	cpc	r16, r8
    57a4:	19 05       	cpc	r17, r9
    57a6:	20 f4       	brcc	.+8      	; 0x57b0 <__mulsf3+0xe8>
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	a0 e0       	ldi	r26, 0x00	; 0
    57ae:	b0 e0       	ldi	r27, 0x00	; 0
    57b0:	ba 01       	movw	r22, r20
    57b2:	a9 01       	movw	r20, r18
    57b4:	48 0f       	add	r20, r24
    57b6:	59 1f       	adc	r21, r25
    57b8:	6a 1f       	adc	r22, r26
    57ba:	7b 1f       	adc	r23, r27
    57bc:	aa 0c       	add	r10, r10
    57be:	bb 1c       	adc	r11, r11
    57c0:	cc 1c       	adc	r12, r12
    57c2:	dd 1c       	adc	r13, r13
    57c4:	97 fe       	sbrs	r9, 7
    57c6:	08 c0       	rjmp	.+16     	; 0x57d8 <__mulsf3+0x110>
    57c8:	81 e0       	ldi	r24, 0x01	; 1
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	a0 e0       	ldi	r26, 0x00	; 0
    57ce:	b0 e0       	ldi	r27, 0x00	; 0
    57d0:	a8 2a       	or	r10, r24
    57d2:	b9 2a       	or	r11, r25
    57d4:	ca 2a       	or	r12, r26
    57d6:	db 2a       	or	r13, r27
    57d8:	31 96       	adiw	r30, 0x01	; 1
    57da:	e0 32       	cpi	r30, 0x20	; 32
    57dc:	f1 05       	cpc	r31, r1
    57de:	49 f0       	breq	.+18     	; 0x57f2 <__mulsf3+0x12a>
    57e0:	66 0c       	add	r6, r6
    57e2:	77 1c       	adc	r7, r7
    57e4:	88 1c       	adc	r8, r8
    57e6:	99 1c       	adc	r9, r9
    57e8:	56 94       	lsr	r5
    57ea:	47 94       	ror	r4
    57ec:	37 94       	ror	r3
    57ee:	27 94       	ror	r2
    57f0:	c3 cf       	rjmp	.-122    	; 0x5778 <__mulsf3+0xb0>
    57f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    57f4:	ea 89       	ldd	r30, Y+18	; 0x12
    57f6:	2b 89       	ldd	r18, Y+19	; 0x13
    57f8:	3c 89       	ldd	r19, Y+20	; 0x14
    57fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    57fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    57fe:	28 0f       	add	r18, r24
    5800:	39 1f       	adc	r19, r25
    5802:	2e 5f       	subi	r18, 0xFE	; 254
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
    5806:	17 c0       	rjmp	.+46     	; 0x5836 <__mulsf3+0x16e>
    5808:	ca 01       	movw	r24, r20
    580a:	81 70       	andi	r24, 0x01	; 1
    580c:	90 70       	andi	r25, 0x00	; 0
    580e:	89 2b       	or	r24, r25
    5810:	61 f0       	breq	.+24     	; 0x582a <__mulsf3+0x162>
    5812:	16 95       	lsr	r17
    5814:	07 95       	ror	r16
    5816:	f7 94       	ror	r15
    5818:	e7 94       	ror	r14
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	a0 e0       	ldi	r26, 0x00	; 0
    5820:	b0 e8       	ldi	r27, 0x80	; 128
    5822:	e8 2a       	or	r14, r24
    5824:	f9 2a       	or	r15, r25
    5826:	0a 2b       	or	r16, r26
    5828:	1b 2b       	or	r17, r27
    582a:	76 95       	lsr	r23
    582c:	67 95       	ror	r22
    582e:	57 95       	ror	r21
    5830:	47 95       	ror	r20
    5832:	2f 5f       	subi	r18, 0xFF	; 255
    5834:	3f 4f       	sbci	r19, 0xFF	; 255
    5836:	77 fd       	sbrc	r23, 7
    5838:	e7 cf       	rjmp	.-50     	; 0x5808 <__mulsf3+0x140>
    583a:	0c c0       	rjmp	.+24     	; 0x5854 <__mulsf3+0x18c>
    583c:	44 0f       	add	r20, r20
    583e:	55 1f       	adc	r21, r21
    5840:	66 1f       	adc	r22, r22
    5842:	77 1f       	adc	r23, r23
    5844:	17 fd       	sbrc	r17, 7
    5846:	41 60       	ori	r20, 0x01	; 1
    5848:	ee 0c       	add	r14, r14
    584a:	ff 1c       	adc	r15, r15
    584c:	00 1f       	adc	r16, r16
    584e:	11 1f       	adc	r17, r17
    5850:	21 50       	subi	r18, 0x01	; 1
    5852:	30 40       	sbci	r19, 0x00	; 0
    5854:	40 30       	cpi	r20, 0x00	; 0
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	59 07       	cpc	r21, r25
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	69 07       	cpc	r22, r25
    585e:	90 e4       	ldi	r25, 0x40	; 64
    5860:	79 07       	cpc	r23, r25
    5862:	60 f3       	brcs	.-40     	; 0x583c <__mulsf3+0x174>
    5864:	2b 8f       	std	Y+27, r18	; 0x1b
    5866:	3c 8f       	std	Y+28, r19	; 0x1c
    5868:	db 01       	movw	r26, r22
    586a:	ca 01       	movw	r24, r20
    586c:	8f 77       	andi	r24, 0x7F	; 127
    586e:	90 70       	andi	r25, 0x00	; 0
    5870:	a0 70       	andi	r26, 0x00	; 0
    5872:	b0 70       	andi	r27, 0x00	; 0
    5874:	80 34       	cpi	r24, 0x40	; 64
    5876:	91 05       	cpc	r25, r1
    5878:	a1 05       	cpc	r26, r1
    587a:	b1 05       	cpc	r27, r1
    587c:	61 f4       	brne	.+24     	; 0x5896 <__mulsf3+0x1ce>
    587e:	47 fd       	sbrc	r20, 7
    5880:	0a c0       	rjmp	.+20     	; 0x5896 <__mulsf3+0x1ce>
    5882:	e1 14       	cp	r14, r1
    5884:	f1 04       	cpc	r15, r1
    5886:	01 05       	cpc	r16, r1
    5888:	11 05       	cpc	r17, r1
    588a:	29 f0       	breq	.+10     	; 0x5896 <__mulsf3+0x1ce>
    588c:	40 5c       	subi	r20, 0xC0	; 192
    588e:	5f 4f       	sbci	r21, 0xFF	; 255
    5890:	6f 4f       	sbci	r22, 0xFF	; 255
    5892:	7f 4f       	sbci	r23, 0xFF	; 255
    5894:	40 78       	andi	r20, 0x80	; 128
    5896:	1a 8e       	std	Y+26, r1	; 0x1a
    5898:	fe 17       	cp	r31, r30
    589a:	11 f0       	breq	.+4      	; 0x58a0 <__mulsf3+0x1d8>
    589c:	81 e0       	ldi	r24, 0x01	; 1
    589e:	8a 8f       	std	Y+26, r24	; 0x1a
    58a0:	4d 8f       	std	Y+29, r20	; 0x1d
    58a2:	5e 8f       	std	Y+30, r21	; 0x1e
    58a4:	6f 8f       	std	Y+31, r22	; 0x1f
    58a6:	78 a3       	std	Y+32, r23	; 0x20
    58a8:	83 e0       	ldi	r24, 0x03	; 3
    58aa:	89 8f       	std	Y+25, r24	; 0x19
    58ac:	ce 01       	movw	r24, r28
    58ae:	49 96       	adiw	r24, 0x19	; 25
    58b0:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__pack_f>
    58b4:	a0 96       	adiw	r28, 0x20	; 32
    58b6:	e2 e1       	ldi	r30, 0x12	; 18
    58b8:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <__epilogue_restores__>

000058bc <__divsf3>:
    58bc:	a8 e1       	ldi	r26, 0x18	; 24
    58be:	b0 e0       	ldi	r27, 0x00	; 0
    58c0:	e4 e6       	ldi	r30, 0x64	; 100
    58c2:	fc e2       	ldi	r31, 0x2C	; 44
    58c4:	0c 94 60 2f 	jmp	0x5ec0	; 0x5ec0 <__prologue_saves__+0x10>
    58c8:	69 83       	std	Y+1, r22	; 0x01
    58ca:	7a 83       	std	Y+2, r23	; 0x02
    58cc:	8b 83       	std	Y+3, r24	; 0x03
    58ce:	9c 83       	std	Y+4, r25	; 0x04
    58d0:	2d 83       	std	Y+5, r18	; 0x05
    58d2:	3e 83       	std	Y+6, r19	; 0x06
    58d4:	4f 83       	std	Y+7, r20	; 0x07
    58d6:	58 87       	std	Y+8, r21	; 0x08
    58d8:	b9 e0       	ldi	r27, 0x09	; 9
    58da:	eb 2e       	mov	r14, r27
    58dc:	f1 2c       	mov	r15, r1
    58de:	ec 0e       	add	r14, r28
    58e0:	fd 1e       	adc	r15, r29
    58e2:	ce 01       	movw	r24, r28
    58e4:	01 96       	adiw	r24, 0x01	; 1
    58e6:	b7 01       	movw	r22, r14
    58e8:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    58ec:	8e 01       	movw	r16, r28
    58ee:	0f 5e       	subi	r16, 0xEF	; 239
    58f0:	1f 4f       	sbci	r17, 0xFF	; 255
    58f2:	ce 01       	movw	r24, r28
    58f4:	05 96       	adiw	r24, 0x05	; 5
    58f6:	b8 01       	movw	r22, r16
    58f8:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    58fc:	29 85       	ldd	r18, Y+9	; 0x09
    58fe:	22 30       	cpi	r18, 0x02	; 2
    5900:	08 f4       	brcc	.+2      	; 0x5904 <__divsf3+0x48>
    5902:	7e c0       	rjmp	.+252    	; 0x5a00 <__divsf3+0x144>
    5904:	39 89       	ldd	r19, Y+17	; 0x11
    5906:	32 30       	cpi	r19, 0x02	; 2
    5908:	10 f4       	brcc	.+4      	; 0x590e <__divsf3+0x52>
    590a:	b8 01       	movw	r22, r16
    590c:	7c c0       	rjmp	.+248    	; 0x5a06 <__divsf3+0x14a>
    590e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5910:	9a 89       	ldd	r25, Y+18	; 0x12
    5912:	89 27       	eor	r24, r25
    5914:	8a 87       	std	Y+10, r24	; 0x0a
    5916:	24 30       	cpi	r18, 0x04	; 4
    5918:	11 f0       	breq	.+4      	; 0x591e <__divsf3+0x62>
    591a:	22 30       	cpi	r18, 0x02	; 2
    591c:	31 f4       	brne	.+12     	; 0x592a <__divsf3+0x6e>
    591e:	23 17       	cp	r18, r19
    5920:	09 f0       	breq	.+2      	; 0x5924 <__divsf3+0x68>
    5922:	6e c0       	rjmp	.+220    	; 0x5a00 <__divsf3+0x144>
    5924:	67 e0       	ldi	r22, 0x07	; 7
    5926:	71 e0       	ldi	r23, 0x01	; 1
    5928:	6e c0       	rjmp	.+220    	; 0x5a06 <__divsf3+0x14a>
    592a:	34 30       	cpi	r19, 0x04	; 4
    592c:	39 f4       	brne	.+14     	; 0x593c <__divsf3+0x80>
    592e:	1d 86       	std	Y+13, r1	; 0x0d
    5930:	1e 86       	std	Y+14, r1	; 0x0e
    5932:	1f 86       	std	Y+15, r1	; 0x0f
    5934:	18 8a       	std	Y+16, r1	; 0x10
    5936:	1c 86       	std	Y+12, r1	; 0x0c
    5938:	1b 86       	std	Y+11, r1	; 0x0b
    593a:	04 c0       	rjmp	.+8      	; 0x5944 <__divsf3+0x88>
    593c:	32 30       	cpi	r19, 0x02	; 2
    593e:	21 f4       	brne	.+8      	; 0x5948 <__divsf3+0x8c>
    5940:	84 e0       	ldi	r24, 0x04	; 4
    5942:	89 87       	std	Y+9, r24	; 0x09
    5944:	b7 01       	movw	r22, r14
    5946:	5f c0       	rjmp	.+190    	; 0x5a06 <__divsf3+0x14a>
    5948:	2b 85       	ldd	r18, Y+11	; 0x0b
    594a:	3c 85       	ldd	r19, Y+12	; 0x0c
    594c:	8b 89       	ldd	r24, Y+19	; 0x13
    594e:	9c 89       	ldd	r25, Y+20	; 0x14
    5950:	28 1b       	sub	r18, r24
    5952:	39 0b       	sbc	r19, r25
    5954:	3c 87       	std	Y+12, r19	; 0x0c
    5956:	2b 87       	std	Y+11, r18	; 0x0b
    5958:	ed 84       	ldd	r14, Y+13	; 0x0d
    595a:	fe 84       	ldd	r15, Y+14	; 0x0e
    595c:	0f 85       	ldd	r16, Y+15	; 0x0f
    595e:	18 89       	ldd	r17, Y+16	; 0x10
    5960:	ad 88       	ldd	r10, Y+21	; 0x15
    5962:	be 88       	ldd	r11, Y+22	; 0x16
    5964:	cf 88       	ldd	r12, Y+23	; 0x17
    5966:	d8 8c       	ldd	r13, Y+24	; 0x18
    5968:	ea 14       	cp	r14, r10
    596a:	fb 04       	cpc	r15, r11
    596c:	0c 05       	cpc	r16, r12
    596e:	1d 05       	cpc	r17, r13
    5970:	40 f4       	brcc	.+16     	; 0x5982 <__divsf3+0xc6>
    5972:	ee 0c       	add	r14, r14
    5974:	ff 1c       	adc	r15, r15
    5976:	00 1f       	adc	r16, r16
    5978:	11 1f       	adc	r17, r17
    597a:	21 50       	subi	r18, 0x01	; 1
    597c:	30 40       	sbci	r19, 0x00	; 0
    597e:	3c 87       	std	Y+12, r19	; 0x0c
    5980:	2b 87       	std	Y+11, r18	; 0x0b
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	40 e0       	ldi	r20, 0x00	; 0
    5988:	50 e0       	ldi	r21, 0x00	; 0
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	a0 e0       	ldi	r26, 0x00	; 0
    5990:	b0 e4       	ldi	r27, 0x40	; 64
    5992:	60 e0       	ldi	r22, 0x00	; 0
    5994:	70 e0       	ldi	r23, 0x00	; 0
    5996:	ea 14       	cp	r14, r10
    5998:	fb 04       	cpc	r15, r11
    599a:	0c 05       	cpc	r16, r12
    599c:	1d 05       	cpc	r17, r13
    599e:	40 f0       	brcs	.+16     	; 0x59b0 <__divsf3+0xf4>
    59a0:	28 2b       	or	r18, r24
    59a2:	39 2b       	or	r19, r25
    59a4:	4a 2b       	or	r20, r26
    59a6:	5b 2b       	or	r21, r27
    59a8:	ea 18       	sub	r14, r10
    59aa:	fb 08       	sbc	r15, r11
    59ac:	0c 09       	sbc	r16, r12
    59ae:	1d 09       	sbc	r17, r13
    59b0:	b6 95       	lsr	r27
    59b2:	a7 95       	ror	r26
    59b4:	97 95       	ror	r25
    59b6:	87 95       	ror	r24
    59b8:	ee 0c       	add	r14, r14
    59ba:	ff 1c       	adc	r15, r15
    59bc:	00 1f       	adc	r16, r16
    59be:	11 1f       	adc	r17, r17
    59c0:	6f 5f       	subi	r22, 0xFF	; 255
    59c2:	7f 4f       	sbci	r23, 0xFF	; 255
    59c4:	6f 31       	cpi	r22, 0x1F	; 31
    59c6:	71 05       	cpc	r23, r1
    59c8:	31 f7       	brne	.-52     	; 0x5996 <__divsf3+0xda>
    59ca:	da 01       	movw	r26, r20
    59cc:	c9 01       	movw	r24, r18
    59ce:	8f 77       	andi	r24, 0x7F	; 127
    59d0:	90 70       	andi	r25, 0x00	; 0
    59d2:	a0 70       	andi	r26, 0x00	; 0
    59d4:	b0 70       	andi	r27, 0x00	; 0
    59d6:	80 34       	cpi	r24, 0x40	; 64
    59d8:	91 05       	cpc	r25, r1
    59da:	a1 05       	cpc	r26, r1
    59dc:	b1 05       	cpc	r27, r1
    59de:	61 f4       	brne	.+24     	; 0x59f8 <__divsf3+0x13c>
    59e0:	27 fd       	sbrc	r18, 7
    59e2:	0a c0       	rjmp	.+20     	; 0x59f8 <__divsf3+0x13c>
    59e4:	e1 14       	cp	r14, r1
    59e6:	f1 04       	cpc	r15, r1
    59e8:	01 05       	cpc	r16, r1
    59ea:	11 05       	cpc	r17, r1
    59ec:	29 f0       	breq	.+10     	; 0x59f8 <__divsf3+0x13c>
    59ee:	20 5c       	subi	r18, 0xC0	; 192
    59f0:	3f 4f       	sbci	r19, 0xFF	; 255
    59f2:	4f 4f       	sbci	r20, 0xFF	; 255
    59f4:	5f 4f       	sbci	r21, 0xFF	; 255
    59f6:	20 78       	andi	r18, 0x80	; 128
    59f8:	2d 87       	std	Y+13, r18	; 0x0d
    59fa:	3e 87       	std	Y+14, r19	; 0x0e
    59fc:	4f 87       	std	Y+15, r20	; 0x0f
    59fe:	58 8b       	std	Y+16, r21	; 0x10
    5a00:	be 01       	movw	r22, r28
    5a02:	67 5f       	subi	r22, 0xF7	; 247
    5a04:	7f 4f       	sbci	r23, 0xFF	; 255
    5a06:	cb 01       	movw	r24, r22
    5a08:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__pack_f>
    5a0c:	68 96       	adiw	r28, 0x18	; 24
    5a0e:	ea e0       	ldi	r30, 0x0A	; 10
    5a10:	0c 94 7c 2f 	jmp	0x5ef8	; 0x5ef8 <__epilogue_restores__+0x10>

00005a14 <__floatsisf>:
    5a14:	a8 e0       	ldi	r26, 0x08	; 8
    5a16:	b0 e0       	ldi	r27, 0x00	; 0
    5a18:	e0 e1       	ldi	r30, 0x10	; 16
    5a1a:	fd e2       	ldi	r31, 0x2D	; 45
    5a1c:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <__prologue_saves__+0x12>
    5a20:	9b 01       	movw	r18, r22
    5a22:	ac 01       	movw	r20, r24
    5a24:	83 e0       	ldi	r24, 0x03	; 3
    5a26:	89 83       	std	Y+1, r24	; 0x01
    5a28:	da 01       	movw	r26, r20
    5a2a:	c9 01       	movw	r24, r18
    5a2c:	88 27       	eor	r24, r24
    5a2e:	b7 fd       	sbrc	r27, 7
    5a30:	83 95       	inc	r24
    5a32:	99 27       	eor	r25, r25
    5a34:	aa 27       	eor	r26, r26
    5a36:	bb 27       	eor	r27, r27
    5a38:	b8 2e       	mov	r11, r24
    5a3a:	21 15       	cp	r18, r1
    5a3c:	31 05       	cpc	r19, r1
    5a3e:	41 05       	cpc	r20, r1
    5a40:	51 05       	cpc	r21, r1
    5a42:	19 f4       	brne	.+6      	; 0x5a4a <__floatsisf+0x36>
    5a44:	82 e0       	ldi	r24, 0x02	; 2
    5a46:	89 83       	std	Y+1, r24	; 0x01
    5a48:	3a c0       	rjmp	.+116    	; 0x5abe <__floatsisf+0xaa>
    5a4a:	88 23       	and	r24, r24
    5a4c:	a9 f0       	breq	.+42     	; 0x5a78 <__floatsisf+0x64>
    5a4e:	20 30       	cpi	r18, 0x00	; 0
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	38 07       	cpc	r19, r24
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	48 07       	cpc	r20, r24
    5a58:	80 e8       	ldi	r24, 0x80	; 128
    5a5a:	58 07       	cpc	r21, r24
    5a5c:	29 f4       	brne	.+10     	; 0x5a68 <__floatsisf+0x54>
    5a5e:	60 e0       	ldi	r22, 0x00	; 0
    5a60:	70 e0       	ldi	r23, 0x00	; 0
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	9f ec       	ldi	r25, 0xCF	; 207
    5a66:	30 c0       	rjmp	.+96     	; 0x5ac8 <__floatsisf+0xb4>
    5a68:	ee 24       	eor	r14, r14
    5a6a:	ff 24       	eor	r15, r15
    5a6c:	87 01       	movw	r16, r14
    5a6e:	e2 1a       	sub	r14, r18
    5a70:	f3 0a       	sbc	r15, r19
    5a72:	04 0b       	sbc	r16, r20
    5a74:	15 0b       	sbc	r17, r21
    5a76:	02 c0       	rjmp	.+4      	; 0x5a7c <__floatsisf+0x68>
    5a78:	79 01       	movw	r14, r18
    5a7a:	8a 01       	movw	r16, r20
    5a7c:	8e e1       	ldi	r24, 0x1E	; 30
    5a7e:	c8 2e       	mov	r12, r24
    5a80:	d1 2c       	mov	r13, r1
    5a82:	dc 82       	std	Y+4, r13	; 0x04
    5a84:	cb 82       	std	Y+3, r12	; 0x03
    5a86:	ed 82       	std	Y+5, r14	; 0x05
    5a88:	fe 82       	std	Y+6, r15	; 0x06
    5a8a:	0f 83       	std	Y+7, r16	; 0x07
    5a8c:	18 87       	std	Y+8, r17	; 0x08
    5a8e:	c8 01       	movw	r24, r16
    5a90:	b7 01       	movw	r22, r14
    5a92:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <__clzsi2>
    5a96:	01 97       	sbiw	r24, 0x01	; 1
    5a98:	18 16       	cp	r1, r24
    5a9a:	19 06       	cpc	r1, r25
    5a9c:	84 f4       	brge	.+32     	; 0x5abe <__floatsisf+0xaa>
    5a9e:	08 2e       	mov	r0, r24
    5aa0:	04 c0       	rjmp	.+8      	; 0x5aaa <__floatsisf+0x96>
    5aa2:	ee 0c       	add	r14, r14
    5aa4:	ff 1c       	adc	r15, r15
    5aa6:	00 1f       	adc	r16, r16
    5aa8:	11 1f       	adc	r17, r17
    5aaa:	0a 94       	dec	r0
    5aac:	d2 f7       	brpl	.-12     	; 0x5aa2 <__floatsisf+0x8e>
    5aae:	ed 82       	std	Y+5, r14	; 0x05
    5ab0:	fe 82       	std	Y+6, r15	; 0x06
    5ab2:	0f 83       	std	Y+7, r16	; 0x07
    5ab4:	18 87       	std	Y+8, r17	; 0x08
    5ab6:	c8 1a       	sub	r12, r24
    5ab8:	d9 0a       	sbc	r13, r25
    5aba:	dc 82       	std	Y+4, r13	; 0x04
    5abc:	cb 82       	std	Y+3, r12	; 0x03
    5abe:	ba 82       	std	Y+2, r11	; 0x02
    5ac0:	ce 01       	movw	r24, r28
    5ac2:	01 96       	adiw	r24, 0x01	; 1
    5ac4:	0e 94 0b 2e 	call	0x5c16	; 0x5c16 <__pack_f>
    5ac8:	28 96       	adiw	r28, 0x08	; 8
    5aca:	e9 e0       	ldi	r30, 0x09	; 9
    5acc:	0c 94 7d 2f 	jmp	0x5efa	; 0x5efa <__epilogue_restores__+0x12>

00005ad0 <__fixsfsi>:
    5ad0:	ac e0       	ldi	r26, 0x0C	; 12
    5ad2:	b0 e0       	ldi	r27, 0x00	; 0
    5ad4:	ee e6       	ldi	r30, 0x6E	; 110
    5ad6:	fd e2       	ldi	r31, 0x2D	; 45
    5ad8:	0c 94 68 2f 	jmp	0x5ed0	; 0x5ed0 <__prologue_saves__+0x20>
    5adc:	69 83       	std	Y+1, r22	; 0x01
    5ade:	7a 83       	std	Y+2, r23	; 0x02
    5ae0:	8b 83       	std	Y+3, r24	; 0x03
    5ae2:	9c 83       	std	Y+4, r25	; 0x04
    5ae4:	ce 01       	movw	r24, r28
    5ae6:	01 96       	adiw	r24, 0x01	; 1
    5ae8:	be 01       	movw	r22, r28
    5aea:	6b 5f       	subi	r22, 0xFB	; 251
    5aec:	7f 4f       	sbci	r23, 0xFF	; 255
    5aee:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__unpack_f>
    5af2:	8d 81       	ldd	r24, Y+5	; 0x05
    5af4:	82 30       	cpi	r24, 0x02	; 2
    5af6:	61 f1       	breq	.+88     	; 0x5b50 <__fixsfsi+0x80>
    5af8:	82 30       	cpi	r24, 0x02	; 2
    5afa:	50 f1       	brcs	.+84     	; 0x5b50 <__fixsfsi+0x80>
    5afc:	84 30       	cpi	r24, 0x04	; 4
    5afe:	21 f4       	brne	.+8      	; 0x5b08 <__fixsfsi+0x38>
    5b00:	8e 81       	ldd	r24, Y+6	; 0x06
    5b02:	88 23       	and	r24, r24
    5b04:	51 f1       	breq	.+84     	; 0x5b5a <__fixsfsi+0x8a>
    5b06:	2e c0       	rjmp	.+92     	; 0x5b64 <__fixsfsi+0x94>
    5b08:	2f 81       	ldd	r18, Y+7	; 0x07
    5b0a:	38 85       	ldd	r19, Y+8	; 0x08
    5b0c:	37 fd       	sbrc	r19, 7
    5b0e:	20 c0       	rjmp	.+64     	; 0x5b50 <__fixsfsi+0x80>
    5b10:	6e 81       	ldd	r22, Y+6	; 0x06
    5b12:	2f 31       	cpi	r18, 0x1F	; 31
    5b14:	31 05       	cpc	r19, r1
    5b16:	1c f0       	brlt	.+6      	; 0x5b1e <__fixsfsi+0x4e>
    5b18:	66 23       	and	r22, r22
    5b1a:	f9 f0       	breq	.+62     	; 0x5b5a <__fixsfsi+0x8a>
    5b1c:	23 c0       	rjmp	.+70     	; 0x5b64 <__fixsfsi+0x94>
    5b1e:	8e e1       	ldi	r24, 0x1E	; 30
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	82 1b       	sub	r24, r18
    5b24:	93 0b       	sbc	r25, r19
    5b26:	29 85       	ldd	r18, Y+9	; 0x09
    5b28:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b2a:	4b 85       	ldd	r20, Y+11	; 0x0b
    5b2c:	5c 85       	ldd	r21, Y+12	; 0x0c
    5b2e:	04 c0       	rjmp	.+8      	; 0x5b38 <__fixsfsi+0x68>
    5b30:	56 95       	lsr	r21
    5b32:	47 95       	ror	r20
    5b34:	37 95       	ror	r19
    5b36:	27 95       	ror	r18
    5b38:	8a 95       	dec	r24
    5b3a:	d2 f7       	brpl	.-12     	; 0x5b30 <__fixsfsi+0x60>
    5b3c:	66 23       	and	r22, r22
    5b3e:	b1 f0       	breq	.+44     	; 0x5b6c <__fixsfsi+0x9c>
    5b40:	50 95       	com	r21
    5b42:	40 95       	com	r20
    5b44:	30 95       	com	r19
    5b46:	21 95       	neg	r18
    5b48:	3f 4f       	sbci	r19, 0xFF	; 255
    5b4a:	4f 4f       	sbci	r20, 0xFF	; 255
    5b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b4e:	0e c0       	rjmp	.+28     	; 0x5b6c <__fixsfsi+0x9c>
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	40 e0       	ldi	r20, 0x00	; 0
    5b56:	50 e0       	ldi	r21, 0x00	; 0
    5b58:	09 c0       	rjmp	.+18     	; 0x5b6c <__fixsfsi+0x9c>
    5b5a:	2f ef       	ldi	r18, 0xFF	; 255
    5b5c:	3f ef       	ldi	r19, 0xFF	; 255
    5b5e:	4f ef       	ldi	r20, 0xFF	; 255
    5b60:	5f e7       	ldi	r21, 0x7F	; 127
    5b62:	04 c0       	rjmp	.+8      	; 0x5b6c <__fixsfsi+0x9c>
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	30 e0       	ldi	r19, 0x00	; 0
    5b68:	40 e0       	ldi	r20, 0x00	; 0
    5b6a:	50 e8       	ldi	r21, 0x80	; 128
    5b6c:	b9 01       	movw	r22, r18
    5b6e:	ca 01       	movw	r24, r20
    5b70:	2c 96       	adiw	r28, 0x0c	; 12
    5b72:	e2 e0       	ldi	r30, 0x02	; 2
    5b74:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <__epilogue_restores__+0x20>

00005b78 <__clzsi2>:
    5b78:	ef 92       	push	r14
    5b7a:	ff 92       	push	r15
    5b7c:	0f 93       	push	r16
    5b7e:	1f 93       	push	r17
    5b80:	7b 01       	movw	r14, r22
    5b82:	8c 01       	movw	r16, r24
    5b84:	80 e0       	ldi	r24, 0x00	; 0
    5b86:	e8 16       	cp	r14, r24
    5b88:	80 e0       	ldi	r24, 0x00	; 0
    5b8a:	f8 06       	cpc	r15, r24
    5b8c:	81 e0       	ldi	r24, 0x01	; 1
    5b8e:	08 07       	cpc	r16, r24
    5b90:	80 e0       	ldi	r24, 0x00	; 0
    5b92:	18 07       	cpc	r17, r24
    5b94:	88 f4       	brcc	.+34     	; 0x5bb8 <__clzsi2+0x40>
    5b96:	8f ef       	ldi	r24, 0xFF	; 255
    5b98:	e8 16       	cp	r14, r24
    5b9a:	f1 04       	cpc	r15, r1
    5b9c:	01 05       	cpc	r16, r1
    5b9e:	11 05       	cpc	r17, r1
    5ba0:	31 f0       	breq	.+12     	; 0x5bae <__clzsi2+0x36>
    5ba2:	28 f0       	brcs	.+10     	; 0x5bae <__clzsi2+0x36>
    5ba4:	88 e0       	ldi	r24, 0x08	; 8
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	a0 e0       	ldi	r26, 0x00	; 0
    5baa:	b0 e0       	ldi	r27, 0x00	; 0
    5bac:	17 c0       	rjmp	.+46     	; 0x5bdc <__clzsi2+0x64>
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	a0 e0       	ldi	r26, 0x00	; 0
    5bb4:	b0 e0       	ldi	r27, 0x00	; 0
    5bb6:	12 c0       	rjmp	.+36     	; 0x5bdc <__clzsi2+0x64>
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
    5bba:	e8 16       	cp	r14, r24
    5bbc:	80 e0       	ldi	r24, 0x00	; 0
    5bbe:	f8 06       	cpc	r15, r24
    5bc0:	80 e0       	ldi	r24, 0x00	; 0
    5bc2:	08 07       	cpc	r16, r24
    5bc4:	81 e0       	ldi	r24, 0x01	; 1
    5bc6:	18 07       	cpc	r17, r24
    5bc8:	28 f0       	brcs	.+10     	; 0x5bd4 <__clzsi2+0x5c>
    5bca:	88 e1       	ldi	r24, 0x18	; 24
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	a0 e0       	ldi	r26, 0x00	; 0
    5bd0:	b0 e0       	ldi	r27, 0x00	; 0
    5bd2:	04 c0       	rjmp	.+8      	; 0x5bdc <__clzsi2+0x64>
    5bd4:	80 e1       	ldi	r24, 0x10	; 16
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	a0 e0       	ldi	r26, 0x00	; 0
    5bda:	b0 e0       	ldi	r27, 0x00	; 0
    5bdc:	20 e2       	ldi	r18, 0x20	; 32
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	40 e0       	ldi	r20, 0x00	; 0
    5be2:	50 e0       	ldi	r21, 0x00	; 0
    5be4:	28 1b       	sub	r18, r24
    5be6:	39 0b       	sbc	r19, r25
    5be8:	4a 0b       	sbc	r20, r26
    5bea:	5b 0b       	sbc	r21, r27
    5bec:	04 c0       	rjmp	.+8      	; 0x5bf6 <__clzsi2+0x7e>
    5bee:	16 95       	lsr	r17
    5bf0:	07 95       	ror	r16
    5bf2:	f7 94       	ror	r15
    5bf4:	e7 94       	ror	r14
    5bf6:	8a 95       	dec	r24
    5bf8:	d2 f7       	brpl	.-12     	; 0x5bee <__clzsi2+0x76>
    5bfa:	f7 01       	movw	r30, r14
    5bfc:	e1 5f       	subi	r30, 0xF1	; 241
    5bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    5c00:	80 81       	ld	r24, Z
    5c02:	28 1b       	sub	r18, r24
    5c04:	31 09       	sbc	r19, r1
    5c06:	41 09       	sbc	r20, r1
    5c08:	51 09       	sbc	r21, r1
    5c0a:	c9 01       	movw	r24, r18
    5c0c:	1f 91       	pop	r17
    5c0e:	0f 91       	pop	r16
    5c10:	ff 90       	pop	r15
    5c12:	ef 90       	pop	r14
    5c14:	08 95       	ret

00005c16 <__pack_f>:
    5c16:	df 92       	push	r13
    5c18:	ef 92       	push	r14
    5c1a:	ff 92       	push	r15
    5c1c:	0f 93       	push	r16
    5c1e:	1f 93       	push	r17
    5c20:	fc 01       	movw	r30, r24
    5c22:	e4 80       	ldd	r14, Z+4	; 0x04
    5c24:	f5 80       	ldd	r15, Z+5	; 0x05
    5c26:	06 81       	ldd	r16, Z+6	; 0x06
    5c28:	17 81       	ldd	r17, Z+7	; 0x07
    5c2a:	d1 80       	ldd	r13, Z+1	; 0x01
    5c2c:	80 81       	ld	r24, Z
    5c2e:	82 30       	cpi	r24, 0x02	; 2
    5c30:	48 f4       	brcc	.+18     	; 0x5c44 <__pack_f+0x2e>
    5c32:	80 e0       	ldi	r24, 0x00	; 0
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	a0 e1       	ldi	r26, 0x10	; 16
    5c38:	b0 e0       	ldi	r27, 0x00	; 0
    5c3a:	e8 2a       	or	r14, r24
    5c3c:	f9 2a       	or	r15, r25
    5c3e:	0a 2b       	or	r16, r26
    5c40:	1b 2b       	or	r17, r27
    5c42:	a5 c0       	rjmp	.+330    	; 0x5d8e <__pack_f+0x178>
    5c44:	84 30       	cpi	r24, 0x04	; 4
    5c46:	09 f4       	brne	.+2      	; 0x5c4a <__pack_f+0x34>
    5c48:	9f c0       	rjmp	.+318    	; 0x5d88 <__pack_f+0x172>
    5c4a:	82 30       	cpi	r24, 0x02	; 2
    5c4c:	21 f4       	brne	.+8      	; 0x5c56 <__pack_f+0x40>
    5c4e:	ee 24       	eor	r14, r14
    5c50:	ff 24       	eor	r15, r15
    5c52:	87 01       	movw	r16, r14
    5c54:	05 c0       	rjmp	.+10     	; 0x5c60 <__pack_f+0x4a>
    5c56:	e1 14       	cp	r14, r1
    5c58:	f1 04       	cpc	r15, r1
    5c5a:	01 05       	cpc	r16, r1
    5c5c:	11 05       	cpc	r17, r1
    5c5e:	19 f4       	brne	.+6      	; 0x5c66 <__pack_f+0x50>
    5c60:	e0 e0       	ldi	r30, 0x00	; 0
    5c62:	f0 e0       	ldi	r31, 0x00	; 0
    5c64:	96 c0       	rjmp	.+300    	; 0x5d92 <__pack_f+0x17c>
    5c66:	62 81       	ldd	r22, Z+2	; 0x02
    5c68:	73 81       	ldd	r23, Z+3	; 0x03
    5c6a:	9f ef       	ldi	r25, 0xFF	; 255
    5c6c:	62 38       	cpi	r22, 0x82	; 130
    5c6e:	79 07       	cpc	r23, r25
    5c70:	0c f0       	brlt	.+2      	; 0x5c74 <__pack_f+0x5e>
    5c72:	5b c0       	rjmp	.+182    	; 0x5d2a <__pack_f+0x114>
    5c74:	22 e8       	ldi	r18, 0x82	; 130
    5c76:	3f ef       	ldi	r19, 0xFF	; 255
    5c78:	26 1b       	sub	r18, r22
    5c7a:	37 0b       	sbc	r19, r23
    5c7c:	2a 31       	cpi	r18, 0x1A	; 26
    5c7e:	31 05       	cpc	r19, r1
    5c80:	2c f0       	brlt	.+10     	; 0x5c8c <__pack_f+0x76>
    5c82:	20 e0       	ldi	r18, 0x00	; 0
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	40 e0       	ldi	r20, 0x00	; 0
    5c88:	50 e0       	ldi	r21, 0x00	; 0
    5c8a:	2a c0       	rjmp	.+84     	; 0x5ce0 <__pack_f+0xca>
    5c8c:	b8 01       	movw	r22, r16
    5c8e:	a7 01       	movw	r20, r14
    5c90:	02 2e       	mov	r0, r18
    5c92:	04 c0       	rjmp	.+8      	; 0x5c9c <__pack_f+0x86>
    5c94:	76 95       	lsr	r23
    5c96:	67 95       	ror	r22
    5c98:	57 95       	ror	r21
    5c9a:	47 95       	ror	r20
    5c9c:	0a 94       	dec	r0
    5c9e:	d2 f7       	brpl	.-12     	; 0x5c94 <__pack_f+0x7e>
    5ca0:	81 e0       	ldi	r24, 0x01	; 1
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	a0 e0       	ldi	r26, 0x00	; 0
    5ca6:	b0 e0       	ldi	r27, 0x00	; 0
    5ca8:	04 c0       	rjmp	.+8      	; 0x5cb2 <__pack_f+0x9c>
    5caa:	88 0f       	add	r24, r24
    5cac:	99 1f       	adc	r25, r25
    5cae:	aa 1f       	adc	r26, r26
    5cb0:	bb 1f       	adc	r27, r27
    5cb2:	2a 95       	dec	r18
    5cb4:	d2 f7       	brpl	.-12     	; 0x5caa <__pack_f+0x94>
    5cb6:	01 97       	sbiw	r24, 0x01	; 1
    5cb8:	a1 09       	sbc	r26, r1
    5cba:	b1 09       	sbc	r27, r1
    5cbc:	8e 21       	and	r24, r14
    5cbe:	9f 21       	and	r25, r15
    5cc0:	a0 23       	and	r26, r16
    5cc2:	b1 23       	and	r27, r17
    5cc4:	00 97       	sbiw	r24, 0x00	; 0
    5cc6:	a1 05       	cpc	r26, r1
    5cc8:	b1 05       	cpc	r27, r1
    5cca:	21 f0       	breq	.+8      	; 0x5cd4 <__pack_f+0xbe>
    5ccc:	81 e0       	ldi	r24, 0x01	; 1
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	a0 e0       	ldi	r26, 0x00	; 0
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	9a 01       	movw	r18, r20
    5cd6:	ab 01       	movw	r20, r22
    5cd8:	28 2b       	or	r18, r24
    5cda:	39 2b       	or	r19, r25
    5cdc:	4a 2b       	or	r20, r26
    5cde:	5b 2b       	or	r21, r27
    5ce0:	da 01       	movw	r26, r20
    5ce2:	c9 01       	movw	r24, r18
    5ce4:	8f 77       	andi	r24, 0x7F	; 127
    5ce6:	90 70       	andi	r25, 0x00	; 0
    5ce8:	a0 70       	andi	r26, 0x00	; 0
    5cea:	b0 70       	andi	r27, 0x00	; 0
    5cec:	80 34       	cpi	r24, 0x40	; 64
    5cee:	91 05       	cpc	r25, r1
    5cf0:	a1 05       	cpc	r26, r1
    5cf2:	b1 05       	cpc	r27, r1
    5cf4:	39 f4       	brne	.+14     	; 0x5d04 <__pack_f+0xee>
    5cf6:	27 ff       	sbrs	r18, 7
    5cf8:	09 c0       	rjmp	.+18     	; 0x5d0c <__pack_f+0xf6>
    5cfa:	20 5c       	subi	r18, 0xC0	; 192
    5cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    5cfe:	4f 4f       	sbci	r20, 0xFF	; 255
    5d00:	5f 4f       	sbci	r21, 0xFF	; 255
    5d02:	04 c0       	rjmp	.+8      	; 0x5d0c <__pack_f+0xf6>
    5d04:	21 5c       	subi	r18, 0xC1	; 193
    5d06:	3f 4f       	sbci	r19, 0xFF	; 255
    5d08:	4f 4f       	sbci	r20, 0xFF	; 255
    5d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d0c:	e0 e0       	ldi	r30, 0x00	; 0
    5d0e:	f0 e0       	ldi	r31, 0x00	; 0
    5d10:	20 30       	cpi	r18, 0x00	; 0
    5d12:	a0 e0       	ldi	r26, 0x00	; 0
    5d14:	3a 07       	cpc	r19, r26
    5d16:	a0 e0       	ldi	r26, 0x00	; 0
    5d18:	4a 07       	cpc	r20, r26
    5d1a:	a0 e4       	ldi	r26, 0x40	; 64
    5d1c:	5a 07       	cpc	r21, r26
    5d1e:	10 f0       	brcs	.+4      	; 0x5d24 <__pack_f+0x10e>
    5d20:	e1 e0       	ldi	r30, 0x01	; 1
    5d22:	f0 e0       	ldi	r31, 0x00	; 0
    5d24:	79 01       	movw	r14, r18
    5d26:	8a 01       	movw	r16, r20
    5d28:	27 c0       	rjmp	.+78     	; 0x5d78 <__pack_f+0x162>
    5d2a:	60 38       	cpi	r22, 0x80	; 128
    5d2c:	71 05       	cpc	r23, r1
    5d2e:	64 f5       	brge	.+88     	; 0x5d88 <__pack_f+0x172>
    5d30:	fb 01       	movw	r30, r22
    5d32:	e1 58       	subi	r30, 0x81	; 129
    5d34:	ff 4f       	sbci	r31, 0xFF	; 255
    5d36:	d8 01       	movw	r26, r16
    5d38:	c7 01       	movw	r24, r14
    5d3a:	8f 77       	andi	r24, 0x7F	; 127
    5d3c:	90 70       	andi	r25, 0x00	; 0
    5d3e:	a0 70       	andi	r26, 0x00	; 0
    5d40:	b0 70       	andi	r27, 0x00	; 0
    5d42:	80 34       	cpi	r24, 0x40	; 64
    5d44:	91 05       	cpc	r25, r1
    5d46:	a1 05       	cpc	r26, r1
    5d48:	b1 05       	cpc	r27, r1
    5d4a:	39 f4       	brne	.+14     	; 0x5d5a <__pack_f+0x144>
    5d4c:	e7 fe       	sbrs	r14, 7
    5d4e:	0d c0       	rjmp	.+26     	; 0x5d6a <__pack_f+0x154>
    5d50:	80 e4       	ldi	r24, 0x40	; 64
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	a0 e0       	ldi	r26, 0x00	; 0
    5d56:	b0 e0       	ldi	r27, 0x00	; 0
    5d58:	04 c0       	rjmp	.+8      	; 0x5d62 <__pack_f+0x14c>
    5d5a:	8f e3       	ldi	r24, 0x3F	; 63
    5d5c:	90 e0       	ldi	r25, 0x00	; 0
    5d5e:	a0 e0       	ldi	r26, 0x00	; 0
    5d60:	b0 e0       	ldi	r27, 0x00	; 0
    5d62:	e8 0e       	add	r14, r24
    5d64:	f9 1e       	adc	r15, r25
    5d66:	0a 1f       	adc	r16, r26
    5d68:	1b 1f       	adc	r17, r27
    5d6a:	17 ff       	sbrs	r17, 7
    5d6c:	05 c0       	rjmp	.+10     	; 0x5d78 <__pack_f+0x162>
    5d6e:	16 95       	lsr	r17
    5d70:	07 95       	ror	r16
    5d72:	f7 94       	ror	r15
    5d74:	e7 94       	ror	r14
    5d76:	31 96       	adiw	r30, 0x01	; 1
    5d78:	87 e0       	ldi	r24, 0x07	; 7
    5d7a:	16 95       	lsr	r17
    5d7c:	07 95       	ror	r16
    5d7e:	f7 94       	ror	r15
    5d80:	e7 94       	ror	r14
    5d82:	8a 95       	dec	r24
    5d84:	d1 f7       	brne	.-12     	; 0x5d7a <__pack_f+0x164>
    5d86:	05 c0       	rjmp	.+10     	; 0x5d92 <__pack_f+0x17c>
    5d88:	ee 24       	eor	r14, r14
    5d8a:	ff 24       	eor	r15, r15
    5d8c:	87 01       	movw	r16, r14
    5d8e:	ef ef       	ldi	r30, 0xFF	; 255
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	6e 2f       	mov	r22, r30
    5d94:	67 95       	ror	r22
    5d96:	66 27       	eor	r22, r22
    5d98:	67 95       	ror	r22
    5d9a:	90 2f       	mov	r25, r16
    5d9c:	9f 77       	andi	r25, 0x7F	; 127
    5d9e:	d7 94       	ror	r13
    5da0:	dd 24       	eor	r13, r13
    5da2:	d7 94       	ror	r13
    5da4:	8e 2f       	mov	r24, r30
    5da6:	86 95       	lsr	r24
    5da8:	49 2f       	mov	r20, r25
    5daa:	46 2b       	or	r20, r22
    5dac:	58 2f       	mov	r21, r24
    5dae:	5d 29       	or	r21, r13
    5db0:	b7 01       	movw	r22, r14
    5db2:	ca 01       	movw	r24, r20
    5db4:	1f 91       	pop	r17
    5db6:	0f 91       	pop	r16
    5db8:	ff 90       	pop	r15
    5dba:	ef 90       	pop	r14
    5dbc:	df 90       	pop	r13
    5dbe:	08 95       	ret

00005dc0 <__unpack_f>:
    5dc0:	fc 01       	movw	r30, r24
    5dc2:	db 01       	movw	r26, r22
    5dc4:	40 81       	ld	r20, Z
    5dc6:	51 81       	ldd	r21, Z+1	; 0x01
    5dc8:	22 81       	ldd	r18, Z+2	; 0x02
    5dca:	62 2f       	mov	r22, r18
    5dcc:	6f 77       	andi	r22, 0x7F	; 127
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	22 1f       	adc	r18, r18
    5dd2:	22 27       	eor	r18, r18
    5dd4:	22 1f       	adc	r18, r18
    5dd6:	93 81       	ldd	r25, Z+3	; 0x03
    5dd8:	89 2f       	mov	r24, r25
    5dda:	88 0f       	add	r24, r24
    5ddc:	82 2b       	or	r24, r18
    5dde:	28 2f       	mov	r18, r24
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	99 1f       	adc	r25, r25
    5de4:	99 27       	eor	r25, r25
    5de6:	99 1f       	adc	r25, r25
    5de8:	11 96       	adiw	r26, 0x01	; 1
    5dea:	9c 93       	st	X, r25
    5dec:	11 97       	sbiw	r26, 0x01	; 1
    5dee:	21 15       	cp	r18, r1
    5df0:	31 05       	cpc	r19, r1
    5df2:	a9 f5       	brne	.+106    	; 0x5e5e <__unpack_f+0x9e>
    5df4:	41 15       	cp	r20, r1
    5df6:	51 05       	cpc	r21, r1
    5df8:	61 05       	cpc	r22, r1
    5dfa:	71 05       	cpc	r23, r1
    5dfc:	11 f4       	brne	.+4      	; 0x5e02 <__unpack_f+0x42>
    5dfe:	82 e0       	ldi	r24, 0x02	; 2
    5e00:	37 c0       	rjmp	.+110    	; 0x5e70 <__unpack_f+0xb0>
    5e02:	82 e8       	ldi	r24, 0x82	; 130
    5e04:	9f ef       	ldi	r25, 0xFF	; 255
    5e06:	13 96       	adiw	r26, 0x03	; 3
    5e08:	9c 93       	st	X, r25
    5e0a:	8e 93       	st	-X, r24
    5e0c:	12 97       	sbiw	r26, 0x02	; 2
    5e0e:	9a 01       	movw	r18, r20
    5e10:	ab 01       	movw	r20, r22
    5e12:	67 e0       	ldi	r22, 0x07	; 7
    5e14:	22 0f       	add	r18, r18
    5e16:	33 1f       	adc	r19, r19
    5e18:	44 1f       	adc	r20, r20
    5e1a:	55 1f       	adc	r21, r21
    5e1c:	6a 95       	dec	r22
    5e1e:	d1 f7       	brne	.-12     	; 0x5e14 <__unpack_f+0x54>
    5e20:	83 e0       	ldi	r24, 0x03	; 3
    5e22:	8c 93       	st	X, r24
    5e24:	0d c0       	rjmp	.+26     	; 0x5e40 <__unpack_f+0x80>
    5e26:	22 0f       	add	r18, r18
    5e28:	33 1f       	adc	r19, r19
    5e2a:	44 1f       	adc	r20, r20
    5e2c:	55 1f       	adc	r21, r21
    5e2e:	12 96       	adiw	r26, 0x02	; 2
    5e30:	8d 91       	ld	r24, X+
    5e32:	9c 91       	ld	r25, X
    5e34:	13 97       	sbiw	r26, 0x03	; 3
    5e36:	01 97       	sbiw	r24, 0x01	; 1
    5e38:	13 96       	adiw	r26, 0x03	; 3
    5e3a:	9c 93       	st	X, r25
    5e3c:	8e 93       	st	-X, r24
    5e3e:	12 97       	sbiw	r26, 0x02	; 2
    5e40:	20 30       	cpi	r18, 0x00	; 0
    5e42:	80 e0       	ldi	r24, 0x00	; 0
    5e44:	38 07       	cpc	r19, r24
    5e46:	80 e0       	ldi	r24, 0x00	; 0
    5e48:	48 07       	cpc	r20, r24
    5e4a:	80 e4       	ldi	r24, 0x40	; 64
    5e4c:	58 07       	cpc	r21, r24
    5e4e:	58 f3       	brcs	.-42     	; 0x5e26 <__unpack_f+0x66>
    5e50:	14 96       	adiw	r26, 0x04	; 4
    5e52:	2d 93       	st	X+, r18
    5e54:	3d 93       	st	X+, r19
    5e56:	4d 93       	st	X+, r20
    5e58:	5c 93       	st	X, r21
    5e5a:	17 97       	sbiw	r26, 0x07	; 7
    5e5c:	08 95       	ret
    5e5e:	2f 3f       	cpi	r18, 0xFF	; 255
    5e60:	31 05       	cpc	r19, r1
    5e62:	79 f4       	brne	.+30     	; 0x5e82 <__unpack_f+0xc2>
    5e64:	41 15       	cp	r20, r1
    5e66:	51 05       	cpc	r21, r1
    5e68:	61 05       	cpc	r22, r1
    5e6a:	71 05       	cpc	r23, r1
    5e6c:	19 f4       	brne	.+6      	; 0x5e74 <__unpack_f+0xb4>
    5e6e:	84 e0       	ldi	r24, 0x04	; 4
    5e70:	8c 93       	st	X, r24
    5e72:	08 95       	ret
    5e74:	64 ff       	sbrs	r22, 4
    5e76:	03 c0       	rjmp	.+6      	; 0x5e7e <__unpack_f+0xbe>
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	8c 93       	st	X, r24
    5e7c:	12 c0       	rjmp	.+36     	; 0x5ea2 <__unpack_f+0xe2>
    5e7e:	1c 92       	st	X, r1
    5e80:	10 c0       	rjmp	.+32     	; 0x5ea2 <__unpack_f+0xe2>
    5e82:	2f 57       	subi	r18, 0x7F	; 127
    5e84:	30 40       	sbci	r19, 0x00	; 0
    5e86:	13 96       	adiw	r26, 0x03	; 3
    5e88:	3c 93       	st	X, r19
    5e8a:	2e 93       	st	-X, r18
    5e8c:	12 97       	sbiw	r26, 0x02	; 2
    5e8e:	83 e0       	ldi	r24, 0x03	; 3
    5e90:	8c 93       	st	X, r24
    5e92:	87 e0       	ldi	r24, 0x07	; 7
    5e94:	44 0f       	add	r20, r20
    5e96:	55 1f       	adc	r21, r21
    5e98:	66 1f       	adc	r22, r22
    5e9a:	77 1f       	adc	r23, r23
    5e9c:	8a 95       	dec	r24
    5e9e:	d1 f7       	brne	.-12     	; 0x5e94 <__unpack_f+0xd4>
    5ea0:	70 64       	ori	r23, 0x40	; 64
    5ea2:	14 96       	adiw	r26, 0x04	; 4
    5ea4:	4d 93       	st	X+, r20
    5ea6:	5d 93       	st	X+, r21
    5ea8:	6d 93       	st	X+, r22
    5eaa:	7c 93       	st	X, r23
    5eac:	17 97       	sbiw	r26, 0x07	; 7
    5eae:	08 95       	ret

00005eb0 <__prologue_saves__>:
    5eb0:	2f 92       	push	r2
    5eb2:	3f 92       	push	r3
    5eb4:	4f 92       	push	r4
    5eb6:	5f 92       	push	r5
    5eb8:	6f 92       	push	r6
    5eba:	7f 92       	push	r7
    5ebc:	8f 92       	push	r8
    5ebe:	9f 92       	push	r9
    5ec0:	af 92       	push	r10
    5ec2:	bf 92       	push	r11
    5ec4:	cf 92       	push	r12
    5ec6:	df 92       	push	r13
    5ec8:	ef 92       	push	r14
    5eca:	ff 92       	push	r15
    5ecc:	0f 93       	push	r16
    5ece:	1f 93       	push	r17
    5ed0:	cf 93       	push	r28
    5ed2:	df 93       	push	r29
    5ed4:	cd b7       	in	r28, 0x3d	; 61
    5ed6:	de b7       	in	r29, 0x3e	; 62
    5ed8:	ca 1b       	sub	r28, r26
    5eda:	db 0b       	sbc	r29, r27
    5edc:	0f b6       	in	r0, 0x3f	; 63
    5ede:	f8 94       	cli
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	0f be       	out	0x3f, r0	; 63
    5ee4:	cd bf       	out	0x3d, r28	; 61
    5ee6:	09 94       	ijmp

00005ee8 <__epilogue_restores__>:
    5ee8:	2a 88       	ldd	r2, Y+18	; 0x12
    5eea:	39 88       	ldd	r3, Y+17	; 0x11
    5eec:	48 88       	ldd	r4, Y+16	; 0x10
    5eee:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ef0:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ef2:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ef4:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ef6:	9b 84       	ldd	r9, Y+11	; 0x0b
    5ef8:	aa 84       	ldd	r10, Y+10	; 0x0a
    5efa:	b9 84       	ldd	r11, Y+9	; 0x09
    5efc:	c8 84       	ldd	r12, Y+8	; 0x08
    5efe:	df 80       	ldd	r13, Y+7	; 0x07
    5f00:	ee 80       	ldd	r14, Y+6	; 0x06
    5f02:	fd 80       	ldd	r15, Y+5	; 0x05
    5f04:	0c 81       	ldd	r16, Y+4	; 0x04
    5f06:	1b 81       	ldd	r17, Y+3	; 0x03
    5f08:	aa 81       	ldd	r26, Y+2	; 0x02
    5f0a:	b9 81       	ldd	r27, Y+1	; 0x01
    5f0c:	ce 0f       	add	r28, r30
    5f0e:	d1 1d       	adc	r29, r1
    5f10:	0f b6       	in	r0, 0x3f	; 63
    5f12:	f8 94       	cli
    5f14:	de bf       	out	0x3e, r29	; 62
    5f16:	0f be       	out	0x3f, r0	; 63
    5f18:	cd bf       	out	0x3d, r28	; 61
    5f1a:	ed 01       	movw	r28, r26
    5f1c:	08 95       	ret

00005f1e <_exit>:
    5f1e:	f8 94       	cli

00005f20 <__stop_program>:
    5f20:	ff cf       	rjmp	.-2      	; 0x5f20 <__stop_program>

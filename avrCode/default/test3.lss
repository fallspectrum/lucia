
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00002e4c  00002ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  00002ff0  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00003652  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  0000520e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  000059ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00006e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  00007bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00008f53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__ctors_end>
       4:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
       8:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
       c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      10:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      14:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      18:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      1c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      20:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      24:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      28:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      2c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      30:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      34:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      3c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      40:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      44:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      48:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      4c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      50:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      54:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      58:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      5c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      60:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      64:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      68:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      6c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      70:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      74:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      78:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      7c:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      80:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      84:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>
      88:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 02 08 02 00 ff 00 00 00 00 00 0a 00 ff     .p..............
      9c:	00 00 00 ff 00 02 00 04 09 7d 00 00 00 00 00 05     .........}......
      ac:	09 00 00 7d 00 00 00 06 09 00 00 00 00 7d 00 07     ...}.........}..
      bc:	09 01 00 00 00 00 00 08 09 00 00 01 00 00 00 09     ................
      cc:	09 00 00 00 00 01 00 0a 09 01 00 01 00 01 00 0b     ................
      dc:	09 7d 00 7d 00 7d 00 ff ff 01 00 00 09 ff 00 00     .}.}.}..........
      ec:	00 00 00 01 09 00 00 ff 00 00 00 02 09 00 00 00     ................
      fc:	00 ff 00 03 09 7d 00 7d 00 7d 00 04 03 7d 00 7d     .....}.}.}...}.}
     10c:	00 7d 00 01 00 02 00 05 04 00 00 00 00 00 00 00     .}..............
     11c:	00 00 00 00 00 01 00 06 05 00 00 00 00 00 00 00     ................
     12c:	00 00 00 00 00 01 00 01 00 01 00 07 06 00 00 00     ................
	...
     144:	00 01 00 01 00 01 00 08 07 00 00 00 00 00 00 00     ................
	...
     15c:	00 00 00 01 00 01 00 01 00 09 08 02 00 ff 00 00     ................
     16c:	00 00 00 01 00 00 00 00 00 00 00 02 00 0a 08 03     ................
     17c:	00 ff 00 00 00 00 00 01 00 00 00 ff 00 00 00 01     ................
     18c:	00 00 00 00 00 00 00 02 00 0b 08 04 00 ff 00 00     ................
     19c:	00 00 00 01 00 00 00 00 00 00 00 02 00 00 00 ff     ................
     1ac:	00 00 00 01 00 00 00 00 00 00 00 02 00 ff ff 6f     ...............o
     1bc:	17 01 08 08 00 ff 00 00 00 00 00 01 00 ff 00 ff     ................
     1cc:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 ff     ................
     1dc:	00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     1ec:	00 ff 00 01 00 00 00 00 00 00 00 26 00 00 00 00     ...........&....
     1fc:	00 00 00 01 00 02 08 08 00 ff 00 00 00 00 00 02     ................
     20c:	00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00 00 01     ................
     21c:	00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01     ................
     22c:	00 ff 00 00 00 ff 00 01 00 00 00 00 00 00 00 26     ...............&
     23c:	00 00 00 00 00 00 00 01 00 03 08 08 00 ff 00 00     ................
     24c:	00 00 00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff     ................
     25c:	00 00 00 01 00 00 00 ff 00 ff 00 01 00 00 00 00     ................
     26c:	00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00 00 00     ................
     27c:	00 00 00 26 00 00 00 00 00 00 00 01 00 09 08 08     ...&............
     28c:	00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00 00 01     ................
     29c:	00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01     ................
     2ac:	00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01     ................
     2bc:	00 00 00 00 00 00 00 26 00 00 00 00 00 00 00 01     .......&........
     2cc:	00 0a 08 08 00 ff 00 00 00 00 00 02 00 ff 00 ff     ................
     2dc:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 ff     ................
     2ec:	00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     2fc:	00 ff 00 01 00 00 00 00 00 00 00 26 00 00 00 00     ...........&....
     30c:	00 00 00 01 00 0b 08 08 00 ff 00 00 00 00 00 02     ................
     31c:	00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00 00 01     ................
     32c:	00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01     ................
     33c:	00 ff 00 00 00 ff 00 01 00 00 00 00 00 00 00 26     ...............&
     34c:	00 00 00 00 00 00 00 01 00 ff ff 38 18 05 03 7d     ...........8...}
     35c:	00 00 00 00 00 01 00 1e 00 06 03 7d 00 00 00 00     ...........}....
     36c:	00 01 00 1e 00 ff ff 0a 00 05 03 7d 00 00 00 00     ...........}....
     37c:	00 01 00 0a 00 06 03 7d 00 00 00 00 00 01 00 0a     .......}........
     38c:	00 ff ff 01 00 05 03 ff 00 00 00 00 00 01 00 05     ................
     39c:	00 06 03 ff 00 00 00 00 00 01 00 05 00 ff ff 09     ................
     3ac:	00 05 05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03     ...........}....
     3bc:	00 01 00 0a 00 06 05 ff 00 00 00 00 00 ff 00 7d     ...............}
     3cc:	00 00 00 03 00 01 00 0a 00 ff ff 0a 00 ff 00 00     ................

000003dc <__ctors_end>:
     3dc:	11 24       	eor	r1, r1
     3de:	1f be       	out	0x3f, r1	; 63
     3e0:	cf ef       	ldi	r28, 0xFF	; 255
     3e2:	d0 e1       	ldi	r29, 0x10	; 16
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	cd bf       	out	0x3d, r28	; 61

000003e8 <__do_copy_data>:
     3e8:	12 e0       	ldi	r17, 0x02	; 2
     3ea:	a0 e0       	ldi	r26, 0x00	; 0
     3ec:	b1 e0       	ldi	r27, 0x01	; 1
     3ee:	ec e4       	ldi	r30, 0x4C	; 76
     3f0:	fe e2       	ldi	r31, 0x2E	; 46
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	0b bf       	out	0x3b, r16	; 59
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <__do_copy_data+0x14>
     3f8:	07 90       	elpm	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	a0 31       	cpi	r26, 0x10	; 16
     3fe:	b1 07       	cpc	r27, r17
     400:	d9 f7       	brne	.-10     	; 0x3f8 <__do_copy_data+0x10>

00000402 <__do_clear_bss>:
     402:	1e e0       	ldi	r17, 0x0E	; 14
     404:	a0 e1       	ldi	r26, 0x10	; 16
     406:	b2 e0       	ldi	r27, 0x02	; 2
     408:	01 c0       	rjmp	.+2      	; 0x40c <.do_clear_bss_start>

0000040a <.do_clear_bss_loop>:
     40a:	1d 92       	st	X+, r1

0000040c <.do_clear_bss_start>:
     40c:	a5 3f       	cpi	r26, 0xF5	; 245
     40e:	b1 07       	cpc	r27, r17
     410:	e1 f7       	brne	.-8      	; 0x40a <.do_clear_bss_loop>
     412:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
     416:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <_exit>

0000041a <__bad_interrupt>:
     41a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041e <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	00 e0       	ldi	r16, 0x00	; 0
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	ee 24       	eor	r14, r14
     432:	ff 24       	eor	r15, r15
     434:	0c c0       	rjmp	.+24     	; 0x44e <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
     436:	80 91 10 02 	lds	r24, 0x0210
     43a:	90 91 11 02 	lds	r25, 0x0211
     43e:	0a 97       	sbiw	r24, 0x0a	; 10
     440:	4c f5       	brge	.+82     	; 0x494 <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
     442:	0f 5f       	subi	r16, 0xFF	; 255
     444:	1f 4f       	sbci	r17, 0xFF	; 255
     446:	27 96       	adiw	r28, 0x07	; 7
     448:	0c 30       	cpi	r16, 0x0C	; 12
     44a:	11 05       	cpc	r17, r1
     44c:	79 f0       	breq	.+30     	; 0x46c <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
     44e:	8e 81       	ldd	r24, Y+6	; 0x06
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	89 f3       	breq	.-30     	; 0x436 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
     454:	6c 81       	ldd	r22, Y+4	; 0x04
     456:	7d 81       	ldd	r23, Y+5	; 0x05
     458:	e8 81       	ld	r30, Y
     45a:	f9 81       	ldd	r31, Y+1	; 0x01
     45c:	c8 01       	movw	r24, r16
     45e:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
     460:	0f 5f       	subi	r16, 0xFF	; 255
     462:	1f 4f       	sbci	r17, 0xFF	; 255
     464:	27 96       	adiw	r28, 0x07	; 7
     466:	0c 30       	cpi	r16, 0x0C	; 12
     468:	11 05       	cpc	r17, r1
     46a:	89 f7       	brne	.-30     	; 0x44e <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	e8 16       	cp	r14, r24
     470:	f1 04       	cpc	r15, r1
     472:	d1 f0       	breq	.+52     	; 0x4a8 <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
     474:	80 91 10 02 	lds	r24, 0x0210
     478:	90 91 11 02 	lds	r25, 0x0211
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	90 93 11 02 	sts	0x0211, r25
     482:	80 93 10 02 	sts	0x0210, r24
	}
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
     494:	6c 81       	ldd	r22, Y+4	; 0x04
     496:	7d 81       	ldd	r23, Y+5	; 0x05
     498:	e8 81       	ld	r30, Y
     49a:	f9 81       	ldd	r31, Y+1	; 0x01
     49c:	c8 01       	movw	r24, r16
     49e:	09 95       	icall
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	e8 2e       	mov	r14, r24
     4a4:	f1 2c       	mov	r15, r1
     4a6:	cd cf       	rjmp	.-102    	; 0x442 <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
     4a8:	10 92 11 02 	sts	0x0211, r1
     4ac:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	08 95       	ret

000004be <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
     4be:	2f 92       	push	r2
     4c0:	3f 92       	push	r3
     4c2:	4f 92       	push	r4
     4c4:	5f 92       	push	r5
     4c6:	6f 92       	push	r6
     4c8:	7f 92       	push	r7
     4ca:	8f 92       	push	r8
     4cc:	9f 92       	push	r9
     4ce:	af 92       	push	r10
     4d0:	bf 92       	push	r11
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	df 93       	push	r29
     4e0:	cf 93       	push	r28
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	c0 56       	subi	r28, 0x60	; 96
     4e8:	d0 40       	sbci	r29, 0x00	; 0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
     4f4:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
     4f8:	8f ef       	ldi	r24, 0xFF	; 255
     4fa:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
     4fe:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
     500:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
     502:	8b b3       	in	r24, 0x1b	; 27
     504:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
     506:	8e b5       	in	r24, 0x2e	; 46
     508:	88 60       	ori	r24, 0x08	; 8
     50a:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
     50c:	80 e4       	ldi	r24, 0x40	; 64
     50e:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
     510:	80 ea       	ldi	r24, 0xA0	; 160
     512:	9f e0       	ldi	r25, 0x0F	; 15
     514:	9b bd       	out	0x2b, r25	; 43
     516:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
     518:	8e b5       	in	r24, 0x2e	; 46
     51a:	82 60       	ori	r24, 0x02	; 2
     51c:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
     51e:	0e 94 12 10 	call	0x2024	; 0x2024 <initDecoder>
     522:	4d e0       	ldi	r20, 0x0D	; 13
     524:	64 2e       	mov	r6, r20
     526:	71 2c       	mov	r7, r1
     528:	6c 0e       	add	r6, r28
     52a:	7d 1e       	adc	r7, r29
     52c:	f3 01       	movw	r30, r6
     52e:	8c e9       	ldi	r24, 0x9C	; 156
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	9e 01       	movw	r18, r28
     534:	2f 59       	subi	r18, 0x9F	; 159
     536:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
     538:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	74 e0       	ldi	r23, 0x04	; 4
     53e:	71 83       	std	Z+1, r23	; 0x01
     540:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
     542:	93 83       	std	Z+3, r25	; 0x03
     544:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
     546:	15 82       	std	Z+5, r1	; 0x05
     548:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
     54a:	4b 8b       	std	Y+19, r20	; 0x13
     54c:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
     54e:	e2 17       	cp	r30, r18
     550:	f3 07       	cpc	r31, r19
     552:	99 f7       	brne	.-26     	; 0x53a <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
     554:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <getNextGroup>
     558:	fc 01       	movw	r30, r24
     55a:	ee 24       	eor	r14, r14
     55c:	ff 24       	eor	r15, r15
     55e:	88 24       	eor	r8, r8
     560:	8a 94       	dec	r8
     562:	98 2c       	mov	r9, r8
     564:	2e 01       	movw	r4, r28
     566:	08 94       	sec
     568:	41 1c       	adc	r4, r1
     56a:	51 1c       	adc	r5, r1
     56c:	aa 24       	eor	r10, r10
     56e:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
     570:	3c e0       	ldi	r19, 0x0C	; 12
     572:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
     574:	33 24       	eor	r3, r3
     576:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
     578:	02 81       	ldd	r16, Z+2	; 0x02
     57a:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
     57c:	d2 01       	movw	r26, r4
     57e:	e2 2d       	mov	r30, r2
     580:	1d 92       	st	X+, r1
     582:	ea 95       	dec	r30
     584:	e9 f7       	brne	.-6      	; 0x580 <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
     586:	d8 01       	movw	r26, r16
     588:	8c 91       	ld	r24, X
     58a:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
     58c:	f2 01       	movw	r30, r4
     58e:	e8 0f       	add	r30, r24
     590:	f9 1f       	adc	r31, r25
     592:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
     594:	fc 01       	movw	r30, r24
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	e8 1b       	sub	r30, r24
     5a4:	f9 0b       	sbc	r31, r25
     5a6:	e4 0d       	add	r30, r4
     5a8:	f5 1d       	adc	r31, r5
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	2d 91       	ld	r18, X+
     5ae:	3c 91       	ld	r19, X
     5b0:	13 97       	sbiw	r26, 0x03	; 3
     5b2:	35 87       	std	Z+13, r19	; 0x0d
     5b4:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
     5b6:	16 96       	adiw	r26, 0x06	; 6
     5b8:	6d 91       	ld	r22, X+
     5ba:	7c 91       	ld	r23, X
     5bc:	17 97       	sbiw	r26, 0x07	; 7
     5be:	71 8b       	std	Z+17, r23	; 0x11
     5c0:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
     5c2:	18 96       	adiw	r26, 0x08	; 8
     5c4:	2c 91       	ld	r18, X
     5c6:	18 97       	sbiw	r26, 0x08	; 8
     5c8:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
     5ca:	14 96       	adiw	r26, 0x04	; 4
     5cc:	ed 91       	ld	r30, X+
     5ce:	fc 91       	ld	r31, X
     5d0:	15 97       	sbiw	r26, 0x05	; 5
     5d2:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
     5d4:	f8 01       	movw	r30, r16
     5d6:	01 85       	ldd	r16, Z+9	; 0x09
     5d8:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
     5da:	01 15       	cp	r16, r1
     5dc:	11 05       	cpc	r17, r1
     5de:	99 f6       	brne	.-90     	; 0x586 <main+0xc8>
     5e0:	f2 01       	movw	r30, r4
     5e2:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
     5e4:	80 81       	ld	r24, Z
     5e6:	88 23       	and	r24, r24
     5e8:	61 f4       	brne	.+24     	; 0x602 <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	74 e0       	ldi	r23, 0x04	; 4
     5ee:	11 96       	adiw	r26, 0x01	; 1
     5f0:	7c 93       	st	X, r23
     5f2:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
     5f4:	15 96       	adiw	r26, 0x05	; 5
     5f6:	1c 92       	st	X, r1
     5f8:	1e 92       	st	-X, r1
     5fa:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
     5fc:	16 96       	adiw	r26, 0x06	; 6
     5fe:	3c 92       	st	X, r3
     600:	16 97       	sbiw	r26, 0x06	; 6
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
     606:	e6 15       	cp	r30, r6
     608:	f7 05       	cpc	r31, r7
     60a:	61 f7       	brne	.-40     	; 0x5e4 <main+0x126>
     60c:	00 e0       	ldi	r16, 0x00	; 0
     60e:	10 e0       	ldi	r17, 0x00	; 0
     610:	cc 24       	eor	r12, r12
     612:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
     614:	e1 14       	cp	r14, r1
     616:	f1 04       	cpc	r15, r1
     618:	19 f4       	brne	.+6      	; 0x620 <main+0x162>
     61a:	88 24       	eor	r8, r8
     61c:	8a 94       	dec	r8
     61e:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
     620:	c3 01       	movw	r24, r6
     622:	0e 94 0f 02 	call	0x41e	; 0x41e <doEffects>
			waitForTimer();
     626:	0e 94 1e 11 	call	0x223c	; 0x223c <waitForTimer>
			displayColors();
     62a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <displayColors>
			deltaTimer++;
     62e:	0f 5f       	subi	r16, 0xFF	; 255
     630:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
     632:	0a 30       	cpi	r16, 0x0A	; 10
     634:	11 05       	cpc	r17, r1
     636:	74 f3       	brlt	.-36     	; 0x614 <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
     638:	80 91 63 00 	lds	r24, 0x0063
     63c:	81 fd       	sbrc	r24, 1
     63e:	1a c0       	rjmp	.+52     	; 0x674 <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
     640:	ab 28       	or	r10, r11
     642:	09 f4       	brne	.+2      	; 0x646 <main+0x188>
     644:	4d c0       	rjmp	.+154    	; 0x6e0 <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
     646:	80 91 63 00 	lds	r24, 0x0063
     64a:	80 fd       	sbrc	r24, 0
     64c:	21 c0       	rjmp	.+66     	; 0x690 <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
     64e:	e0 fe       	sbrs	r14, 0
     650:	59 c0       	rjmp	.+178    	; 0x704 <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
     652:	c1 fe       	sbrs	r12, 1
     654:	29 c0       	rjmp	.+82     	; 0x6a8 <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
     656:	b1 e0       	ldi	r27, 0x01	; 1
     658:	8b 16       	cp	r8, r27
     65a:	91 04       	cpc	r9, r1
     65c:	b1 f1       	breq	.+108    	; 0x6ca <main+0x20c>
     65e:	22 e0       	ldi	r18, 0x02	; 2
     660:	a2 2e       	mov	r10, r18
     662:	b1 2c       	mov	r11, r1
     664:	ae 20       	and	r10, r14
     666:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
     668:	00 e0       	ldi	r16, 0x00	; 0
     66a:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
     66c:	e1 14       	cp	r14, r1
     66e:	f1 04       	cpc	r15, r1
     670:	b9 f6       	brne	.-82     	; 0x620 <main+0x162>
     672:	d3 cf       	rjmp	.-90     	; 0x61a <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
     674:	ab 28       	or	r10, r11
     676:	21 f0       	breq	.+8      	; 0x680 <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
     678:	a2 e0       	ldi	r26, 0x02	; 2
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	ca 2a       	or	r12, r26
     67e:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
     680:	ed ef       	ldi	r30, 0xFD	; 253
     682:	ff ef       	ldi	r31, 0xFF	; 255
     684:	ee 22       	and	r14, r30
     686:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
     688:	80 91 63 00 	lds	r24, 0x0063
     68c:	80 ff       	sbrs	r24, 0
     68e:	df cf       	rjmp	.-66     	; 0x64e <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
     690:	e0 fe       	sbrs	r14, 0
     692:	04 c0       	rjmp	.+8      	; 0x69c <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	c8 2a       	or	r12, r24
     69a:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
     69c:	ae ef       	ldi	r26, 0xFE	; 254
     69e:	bf ef       	ldi	r27, 0xFF	; 255
     6a0:	ea 22       	and	r14, r26
     6a2:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
     6a4:	c1 fc       	sbrc	r12, 1
     6a6:	d7 cf       	rjmp	.-82     	; 0x656 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
     6a8:	c0 fe       	sbrs	r12, 0
     6aa:	d9 cf       	rjmp	.-78     	; 0x65e <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
     6ac:	e2 e0       	ldi	r30, 0x02	; 2
     6ae:	8e 16       	cp	r8, r30
     6b0:	91 04       	cpc	r9, r1
     6b2:	a9 f6       	brne	.-86     	; 0x65e <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	a9 2e       	mov	r10, r25
     6b8:	b1 2c       	mov	r11, r1
     6ba:	ae 20       	and	r10, r14
     6bc:	bf 20       	and	r11, r15
     6be:	e1 fe       	sbrs	r14, 1
     6c0:	d3 cf       	rjmp	.-90     	; 0x668 <main+0x1aa>

							groupNew = getNextGroup();
     6c2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <getNextGroup>
     6c6:	fc 01       	movw	r30, r24
     6c8:	57 cf       	rjmp	.-338    	; 0x578 <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
     6ca:	e0 fe       	sbrs	r14, 0
     6cc:	c8 cf       	rjmp	.-112    	; 0x65e <main+0x1a0>
							groupNew = getPreviousGroup();
     6ce:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <getPreviousGroup>
     6d2:	fc 01       	movw	r30, r24
     6d4:	32 e0       	ldi	r19, 0x02	; 2
     6d6:	a3 2e       	mov	r10, r19
     6d8:	b1 2c       	mov	r11, r1
     6da:	ae 20       	and	r10, r14
     6dc:	bf 20       	and	r11, r15
     6de:	4c cf       	rjmp	.-360    	; 0x578 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
     6e0:	7f ef       	ldi	r23, 0xFF	; 255
     6e2:	87 16       	cp	r8, r23
     6e4:	7f ef       	ldi	r23, 0xFF	; 255
     6e6:	97 06       	cpc	r9, r23
     6e8:	11 f1       	breq	.+68     	; 0x72e <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	e8 2a       	or	r14, r24
     6f0:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
     6f2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <getNextGroup>
     6f6:	fc 01       	movw	r30, r24
     6f8:	62 e0       	ldi	r22, 0x02	; 2
     6fa:	a6 2e       	mov	r10, r22
     6fc:	b1 2c       	mov	r11, r1
     6fe:	ae 20       	and	r10, r14
     700:	bf 20       	and	r11, r15
     702:	3a cf       	rjmp	.-396    	; 0x578 <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	e6 2a       	or	r14, r22
     70a:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
     70c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <getPreviousGroup>
     710:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
     712:	7f ef       	ldi	r23, 0xFF	; 255
     714:	87 16       	cp	r8, r23
     716:	7f ef       	ldi	r23, 0xFF	; 255
     718:	97 06       	cpc	r9, r23
     71a:	e1 f6       	brne	.-72     	; 0x6d4 <main+0x216>
     71c:	51 e0       	ldi	r21, 0x01	; 1
     71e:	85 2e       	mov	r8, r21
     720:	91 2c       	mov	r9, r1
     722:	42 e0       	ldi	r20, 0x02	; 2
     724:	a4 2e       	mov	r10, r20
     726:	b1 2c       	mov	r11, r1
     728:	ae 20       	and	r10, r14
     72a:	bf 20       	and	r11, r15
     72c:	25 cf       	rjmp	.-438    	; 0x578 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	87 2e       	mov	r8, r23
     732:	91 2c       	mov	r9, r1
     734:	da cf       	rjmp	.-76     	; 0x6ea <main+0x22c>

00000736 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
     736:	08 95       	ret

00000738 <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
     738:	08 95       	ret

0000073a <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
     73a:	08 95       	ret

0000073c <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
     73c:	08 95       	ret

0000073e <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
     73e:	fc 01       	movw	r30, r24
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	ed 51       	subi	r30, 0x1D	; 29
     74a:	fb 4f       	sbci	r31, 0xFB	; 251
     74c:	11 82       	std	Z+1, r1	; 0x01
     74e:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
     750:	13 82       	std	Z+3, r1	; 0x03
     752:	12 82       	std	Z+2, r1	; 0x02
}	
     754:	08 95       	ret

00000756 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	8c 01       	movw	r16, r24
     760:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
     762:	dc 01       	movw	r26, r24
     764:	aa 0f       	add	r26, r26
     766:	bb 1f       	adc	r27, r27
     768:	aa 0f       	add	r26, r26
     76a:	bb 1f       	adc	r27, r27
     76c:	ad 51       	subi	r26, 0x1D	; 29
     76e:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
     770:	6e 5f       	subi	r22, 0xFE	; 254
     772:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	2d 91       	ld	r18, X+
     778:	3c 91       	ld	r19, X
     77a:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
     77c:	4d 91       	ld	r20, X+
     77e:	5c 91       	ld	r21, X
     780:	11 97       	sbiw	r26, 0x01	; 1
     782:	f9 01       	movw	r30, r18
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	e6 0f       	add	r30, r22
     792:	f7 1f       	adc	r31, r23
     794:	86 81       	ldd	r24, Z+6	; 0x06
     796:	97 81       	ldd	r25, Z+7	; 0x07
     798:	84 17       	cp	r24, r20
     79a:	95 07       	cpc	r25, r21
     79c:	6c f5       	brge	.+90     	; 0x7f8 <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
     79e:	2f 5f       	subi	r18, 0xFF	; 255
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	13 96       	adiw	r26, 0x03	; 3
     7a4:	3c 93       	st	X, r19
     7a6:	2e 93       	st	-X, r18
     7a8:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
     7aa:	88 81       	ld	r24, Y
     7ac:	99 81       	ldd	r25, Y+1	; 0x01
     7ae:	28 17       	cp	r18, r24
     7b0:	39 07       	cpc	r19, r25
     7b2:	24 f0       	brlt	.+8      	; 0x7bc <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
     7b4:	13 96       	adiw	r26, 0x03	; 3
     7b6:	1c 92       	st	X, r1
     7b8:	1e 92       	st	-X, r1
     7ba:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
     7bc:	11 96       	adiw	r26, 0x01	; 1
     7be:	1c 92       	st	X, r1
     7c0:	1e 92       	st	-X, r1
     7c2:	12 96       	adiw	r26, 0x02	; 2
     7c4:	2d 91       	ld	r18, X+
     7c6:	3c 91       	ld	r19, X
     7c8:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
     7ca:	f9 01       	movw	r30, r18
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	e6 0f       	add	r30, r22
     7da:	f7 1f       	adc	r31, r23
     7dc:	60 81       	ld	r22, Z
     7de:	71 81       	ldd	r23, Z+1	; 0x01
     7e0:	42 81       	ldd	r20, Z+2	; 0x02
     7e2:	53 81       	ldd	r21, Z+3	; 0x03
     7e4:	24 81       	ldd	r18, Z+4	; 0x04
     7e6:	35 81       	ldd	r19, Z+5	; 0x05
     7e8:	c8 01       	movw	r24, r16
     7ea:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
     7f8:	4f 5f       	subi	r20, 0xFF	; 255
     7fa:	5f 4f       	sbci	r21, 0xFF	; 255
     7fc:	4d 93       	st	X+, r20
     7fe:	5c 93       	st	X, r21
     800:	e4 cf       	rjmp	.-56     	; 0x7ca <lightBeamEffect+0x74>

00000802 <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
}
     812:	08 95       	ret

00000814 <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
     814:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
     816:	60 81       	ld	r22, Z
     818:	71 81       	ldd	r23, Z+1	; 0x01
     81a:	42 81       	ldd	r20, Z+2	; 0x02
     81c:	53 81       	ldd	r21, Z+3	; 0x03
     81e:	24 81       	ldd	r18, Z+4	; 0x04
     820:	35 81       	ldd	r19, Z+5	; 0x05
     822:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
}
     826:	08 95       	ret

00000828 <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
     82c:	fc 01       	movw	r30, r24
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	df 01       	movw	r26, r30
     834:	a5 5b       	subi	r26, 0xB5	; 181
     836:	bc 4f       	sbci	r27, 0xFC	; 252
     838:	1d 92       	st	X+, r1
     83a:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
     83c:	ed 59       	subi	r30, 0x9D	; 157
     83e:	fc 4f       	sbci	r31, 0xFC	; 252
     840:	21 e0       	ldi	r18, 0x01	; 1
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	31 83       	std	Z+1, r19	; 0x01
     846:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
     848:	fb 01       	movw	r30, r22
     84a:	60 81       	ld	r22, Z
     84c:	71 81       	ldd	r23, Z+1	; 0x01
     84e:	42 81       	ldd	r20, Z+2	; 0x02
     850:	53 81       	ldd	r21, Z+3	; 0x03
     852:	24 81       	ldd	r18, Z+4	; 0x04
     854:	35 81       	ldd	r19, Z+5	; 0x05
     856:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
}
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	08 95       	ret

00000860 <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	9c 01       	movw	r18, r24
     86e:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	8c 01       	movw	r16, r24
     876:	05 5b       	subi	r16, 0xB5	; 181
     878:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
     87a:	ec 01       	movw	r28, r24
     87c:	cd 59       	subi	r28, 0x9D	; 157
     87e:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
     880:	60 81       	ld	r22, Z
     882:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
     884:	42 81       	ldd	r20, Z+2	; 0x02
     886:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
     888:	e4 80       	ldd	r14, Z+4	; 0x04
     88a:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
     88c:	a6 81       	ldd	r26, Z+6	; 0x06
     88e:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
     890:	00 84       	ldd	r0, Z+8	; 0x08
     892:	f1 85       	ldd	r31, Z+9	; 0x09
     894:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	91 05       	cpc	r25, r1
     89e:	09 f1       	breq	.+66     	; 0x8e2 <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
     8a0:	89 2b       	or	r24, r25
     8a2:	c1 f4       	brne	.+48     	; 0x8d4 <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	d8 01       	movw	r26, r16
     8a8:	8d 91       	ld	r24, X+
     8aa:	9c 91       	ld	r25, X
     8ac:	11 97       	sbiw	r26, 0x01	; 1
     8ae:	8e 17       	cp	r24, r30
     8b0:	9f 07       	cpc	r25, r31
     8b2:	0c f0       	brlt	.+2      	; 0x8b6 <pwmEffect+0x56>
     8b4:	43 c0       	rjmp	.+134    	; 0x93c <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
     8b6:	c9 01       	movw	r24, r18
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
			*curCounter +=1;
     8c8:	f8 01       	movw	r30, r16
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	80 83       	st	Z, r24
		}

	}
	
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
     8e2:	11 97       	sbiw	r26, 0x01	; 1
     8e4:	f8 01       	movw	r30, r16
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	8a 17       	cp	r24, r26
     8ec:	9b 07       	cpc	r25, r27
     8ee:	a4 f0       	brlt	.+40     	; 0x918 <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
     8f0:	19 82       	std	Y+1, r1	; 0x01
     8f2:	18 82       	st	Y, r1
			*curCounter = 0;
     8f4:	11 82       	std	Z+1, r1	; 0x01
     8f6:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
     8f8:	c9 01       	movw	r24, r18
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
     918:	c9 01       	movw	r24, r18
     91a:	97 01       	movw	r18, r14
     91c:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
			*curCounter += 1;
     920:	d8 01       	movw	r26, r16
     922:	8d 91       	ld	r24, X+
     924:	9c 91       	ld	r25, X
     926:	11 97       	sbiw	r26, 0x01	; 1
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	8d 93       	st	X+, r24
     92c:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	99 83       	std	Y+1, r25	; 0x01
     942:	88 83       	st	Y, r24
			*curCounter = 0;
     944:	1d 92       	st	X+, r1
     946:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
     948:	c9 01       	movw	r24, r18
     94a:	97 01       	movw	r18, r14
     94c:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	08 95       	ret

0000095e <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
     95e:	2f 92       	push	r2
     960:	3f 92       	push	r3
     962:	4f 92       	push	r4
     964:	5f 92       	push	r5
     966:	6f 92       	push	r6
     968:	7f 92       	push	r7
     96a:	8f 92       	push	r8
     96c:	9f 92       	push	r9
     96e:	af 92       	push	r10
     970:	bf 92       	push	r11
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	6e 97       	sbiw	r28, 0x1e	; 30
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	9e 8f       	std	Y+30, r25	; 0x1e
     994:	8d 8f       	std	Y+29, r24	; 0x1d
     996:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
     998:	20 81       	ld	r18, Z
     99a:	31 81       	ldd	r19, Z+1	; 0x01
     99c:	3c 8f       	std	Y+28, r19	; 0x1c
     99e:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	9a 8f       	std	Y+26, r25	; 0x1a
     9a6:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
     9a8:	a4 81       	ldd	r26, Z+4	; 0x04
     9aa:	b5 81       	ldd	r27, Z+5	; 0x05
     9ac:	b8 8f       	std	Y+24, r27	; 0x18
     9ae:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
     9b0:	26 81       	ldd	r18, Z+6	; 0x06
     9b2:	37 81       	ldd	r19, Z+7	; 0x07
     9b4:	3e 8b       	std	Y+22, r19	; 0x16
     9b6:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
     9b8:	80 85       	ldd	r24, Z+8	; 0x08
     9ba:	91 85       	ldd	r25, Z+9	; 0x09
     9bc:	9c 8b       	std	Y+20, r25	; 0x14
     9be:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
     9c0:	a2 85       	ldd	r26, Z+10	; 0x0a
     9c2:	b3 85       	ldd	r27, Z+11	; 0x0b
     9c4:	ba 8b       	std	Y+18, r27	; 0x12
     9c6:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
     9c8:	24 85       	ldd	r18, Z+12	; 0x0c
     9ca:	35 85       	ldd	r19, Z+13	; 0x0d
     9cc:	38 8b       	std	Y+16, r19	; 0x10
     9ce:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
     9d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	dc 01       	movw	r26, r24
     9da:	ad 5c       	subi	r26, 0xCD	; 205
     9dc:	bc 4f       	sbci	r27, 0xFC	; 252
     9de:	be 87       	std	Y+14, r27	; 0x0e
     9e0:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
     9e2:	fc 01       	movw	r30, r24
     9e4:	e5 58       	subi	r30, 0x85	; 133
     9e6:	fc 4f       	sbci	r31, 0xFC	; 252
     9e8:	fc 87       	std	Y+12, r31	; 0x0c
     9ea:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
     9ec:	2d 8d       	ldd	r18, Y+29	; 0x1d
     9ee:	3e 8d       	ldd	r19, Y+30	; 0x1e
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	dc 01       	movw	r26, r24
     9fe:	ae 5e       	subi	r26, 0xEE	; 238
     a00:	bd 4f       	sbci	r27, 0xFD	; 253
     a02:	ba 87       	std	Y+10, r27	; 0x0a
     a04:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
     a06:	fc 01       	movw	r30, r24
     a08:	ea 5e       	subi	r30, 0xEA	; 234
     a0a:	fd 4f       	sbci	r31, 0xFD	; 253
     a0c:	f8 87       	std	Y+8, r31	; 0x08
     a0e:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
     a10:	9c 01       	movw	r18, r24
     a12:	26 5e       	subi	r18, 0xE6	; 230
     a14:	3d 4f       	sbci	r19, 0xFD	; 253
     a16:	3e 83       	std	Y+6, r19	; 0x06
     a18:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
     a1a:	80 91 ea 02 	lds	r24, 0x02EA
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	09 f4       	brne	.+2      	; 0xa24 <fadeBetweenColors+0xc6>
     a22:	09 c1       	rjmp	.+530    	; 0xc36 <fadeBetweenColors+0x2d8>
     a24:	ab 8d       	ldd	r26, Y+27	; 0x1b
     a26:	bc 8d       	ldd	r27, Y+28	; 0x1c
     a28:	bd 01       	movw	r22, r26
     a2a:	88 27       	eor	r24, r24
     a2c:	77 fd       	sbrc	r23, 7
     a2e:	80 95       	com	r24
     a30:	98 2f       	mov	r25, r24
     a32:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     a36:	3b 01       	movw	r6, r22
     a38:	4c 01       	movw	r8, r24
     a3a:	e9 8d       	ldd	r30, Y+25	; 0x19
     a3c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a3e:	bf 01       	movw	r22, r30
     a40:	88 27       	eor	r24, r24
     a42:	77 fd       	sbrc	r23, 7
     a44:	80 95       	com	r24
     a46:	98 2f       	mov	r25, r24
     a48:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     a4c:	1b 01       	movw	r2, r22
     a4e:	2c 01       	movw	r4, r24
     a50:	2f 89       	ldd	r18, Y+23	; 0x17
     a52:	38 8d       	ldd	r19, Y+24	; 0x18
     a54:	b9 01       	movw	r22, r18
     a56:	88 27       	eor	r24, r24
     a58:	77 fd       	sbrc	r23, 7
     a5a:	80 95       	com	r24
     a5c:	98 2f       	mov	r25, r24
     a5e:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     a62:	69 83       	std	Y+1, r22	; 0x01
     a64:	7a 83       	std	Y+2, r23	; 0x02
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	ad 85       	ldd	r26, Y+13	; 0x0d
     a6c:	be 85       	ldd	r27, Y+14	; 0x0e
     a6e:	cd 90       	ld	r12, X+
     a70:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
     a72:	ef 85       	ldd	r30, Y+15	; 0x0f
     a74:	f8 89       	ldd	r31, Y+16	; 0x10
     a76:	bf 01       	movw	r22, r30
     a78:	88 27       	eor	r24, r24
     a7a:	77 fd       	sbrc	r23, 7
     a7c:	80 95       	com	r24
     a7e:	98 2f       	mov	r25, r24
     a80:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     a84:	7b 01       	movw	r14, r22
     a86:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
     a88:	b6 01       	movw	r22, r12
     a8a:	88 27       	eor	r24, r24
     a8c:	77 fd       	sbrc	r23, 7
     a8e:	80 95       	com	r24
     a90:	98 2f       	mov	r25, r24
     a92:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     a96:	5b 01       	movw	r10, r22
     a98:	6c 01       	movw	r12, r24
     a9a:	2d 89       	ldd	r18, Y+21	; 0x15
     a9c:	3e 89       	ldd	r19, Y+22	; 0x16
     a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     aa2:	28 1b       	sub	r18, r24
     aa4:	39 0b       	sbc	r19, r25
     aa6:	b9 01       	movw	r22, r18
     aa8:	88 27       	eor	r24, r24
     aaa:	77 fd       	sbrc	r23, 7
     aac:	80 95       	com	r24
     aae:	98 2f       	mov	r25, r24
     ab0:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     ab4:	a8 01       	movw	r20, r16
     ab6:	97 01       	movw	r18, r14
     ab8:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__divsf3>
     abc:	9b 01       	movw	r18, r22
     abe:	ac 01       	movw	r20, r24
     ac0:	c6 01       	movw	r24, r12
     ac2:	b5 01       	movw	r22, r10
     ac4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     ac8:	a4 01       	movw	r20, r8
     aca:	93 01       	movw	r18, r6
     acc:	0e 94 cc 12 	call	0x2598	; 0x2598 <__addsf3>
     ad0:	a9 85       	ldd	r26, Y+9	; 0x09
     ad2:	ba 85       	ldd	r27, Y+10	; 0x0a
     ad4:	6d 93       	st	X+, r22
     ad6:	7d 93       	st	X+, r23
     ad8:	8d 93       	st	X+, r24
     ada:	9c 93       	st	X, r25
     adc:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
     ade:	eb 89       	ldd	r30, Y+19	; 0x13
     ae0:	fc 89       	ldd	r31, Y+20	; 0x14
     ae2:	29 8d       	ldd	r18, Y+25	; 0x19
     ae4:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ae6:	e2 1b       	sub	r30, r18
     ae8:	f3 0b       	sbc	r31, r19
     aea:	bf 01       	movw	r22, r30
     aec:	88 27       	eor	r24, r24
     aee:	77 fd       	sbrc	r23, 7
     af0:	80 95       	com	r24
     af2:	98 2f       	mov	r25, r24
     af4:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     af8:	a8 01       	movw	r20, r16
     afa:	97 01       	movw	r18, r14
     afc:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__divsf3>
     b00:	a6 01       	movw	r20, r12
     b02:	95 01       	movw	r18, r10
     b04:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     b08:	a2 01       	movw	r20, r4
     b0a:	91 01       	movw	r18, r2
     b0c:	0e 94 cc 12 	call	0x2598	; 0x2598 <__addsf3>
     b10:	af 81       	ldd	r26, Y+7	; 0x07
     b12:	b8 85       	ldd	r27, Y+8	; 0x08
     b14:	6d 93       	st	X+, r22
     b16:	7d 93       	st	X+, r23
     b18:	8d 93       	st	X+, r24
     b1a:	9c 93       	st	X, r25
     b1c:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
     b1e:	e9 89       	ldd	r30, Y+17	; 0x11
     b20:	fa 89       	ldd	r31, Y+18	; 0x12
     b22:	2f 89       	ldd	r18, Y+23	; 0x17
     b24:	38 8d       	ldd	r19, Y+24	; 0x18
     b26:	e2 1b       	sub	r30, r18
     b28:	f3 0b       	sbc	r31, r19
     b2a:	bf 01       	movw	r22, r30
     b2c:	88 27       	eor	r24, r24
     b2e:	77 fd       	sbrc	r23, 7
     b30:	80 95       	com	r24
     b32:	98 2f       	mov	r25, r24
     b34:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     b38:	a8 01       	movw	r20, r16
     b3a:	97 01       	movw	r18, r14
     b3c:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <__divsf3>
     b40:	a6 01       	movw	r20, r12
     b42:	95 01       	movw	r18, r10
     b44:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <__mulsf3>
     b48:	29 81       	ldd	r18, Y+1	; 0x01
     b4a:	3a 81       	ldd	r19, Y+2	; 0x02
     b4c:	4b 81       	ldd	r20, Y+3	; 0x03
     b4e:	5c 81       	ldd	r21, Y+4	; 0x04
     b50:	0e 94 cc 12 	call	0x2598	; 0x2598 <__addsf3>
     b54:	7b 01       	movw	r14, r22
     b56:	8c 01       	movw	r16, r24
     b58:	ad 81       	ldd	r26, Y+5	; 0x05
     b5a:	be 81       	ldd	r27, Y+6	; 0x06
     b5c:	6d 93       	st	X+, r22
     b5e:	7d 93       	st	X+, r23
     b60:	8d 93       	st	X+, r24
     b62:	9c 93       	st	X, r25
     b64:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
     b66:	e9 85       	ldd	r30, Y+9	; 0x09
     b68:	fa 85       	ldd	r31, Y+10	; 0x0a
     b6a:	60 81       	ld	r22, Z
     b6c:	71 81       	ldd	r23, Z+1	; 0x01
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     b76:	3b 01       	movw	r6, r22
     b78:	4c 01       	movw	r8, r24
     b7a:	af 81       	ldd	r26, Y+7	; 0x07
     b7c:	b8 85       	ldd	r27, Y+8	; 0x08
     b7e:	6d 91       	ld	r22, X+
     b80:	7d 91       	ld	r23, X+
     b82:	8d 91       	ld	r24, X+
     b84:	9c 91       	ld	r25, X
     b86:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     b8a:	5b 01       	movw	r10, r22
     b8c:	6c 01       	movw	r12, r24
     b8e:	c8 01       	movw	r24, r16
     b90:	b7 01       	movw	r22, r14
     b92:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__fixsfsi>
     b96:	8b 01       	movw	r16, r22
     b98:	9c 01       	movw	r18, r24
     b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b9e:	b3 01       	movw	r22, r6
     ba0:	a5 01       	movw	r20, r10
     ba2:	98 01       	movw	r18, r16
     ba4:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
     ba8:	eb 85       	ldd	r30, Y+11	; 0x0b
     baa:	fc 85       	ldd	r31, Y+12	; 0x0c
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	59 f1       	breq	.+86     	; 0xc0a <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
     bb4:	ed 85       	ldd	r30, Y+13	; 0x0d
     bb6:	fe 85       	ldd	r31, Y+14	; 0x0e
     bb8:	80 81       	ld	r24, Z
     bba:	91 81       	ldd	r25, Z+1	; 0x01
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
     bc2:	97 fd       	sbrc	r25, 7
     bc4:	19 c0       	rjmp	.+50     	; 0xbf8 <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
     bc6:	6e 96       	adiw	r28, 0x1e	; 30
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	bf 90       	pop	r11
     be4:	af 90       	pop	r10
     be6:	9f 90       	pop	r9
     be8:	8f 90       	pop	r8
     bea:	7f 90       	pop	r7
     bec:	6f 90       	pop	r6
     bee:	5f 90       	pop	r5
     bf0:	4f 90       	pop	r4
     bf2:	3f 90       	pop	r3
     bf4:	2f 90       	pop	r2
     bf6:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
     bf8:	11 82       	std	Z+1, r1	; 0x01
     bfa:	10 82       	st	Z, r1
			*direction = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	ab 85       	ldd	r26, Y+11	; 0x0b
     c02:	bc 85       	ldd	r27, Y+12	; 0x0c
     c04:	8d 93       	st	X+, r24
     c06:	9c 93       	st	X, r25
     c08:	de cf       	rjmp	.-68     	; 0xbc6 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
     c0a:	ad 85       	ldd	r26, Y+13	; 0x0d
     c0c:	be 85       	ldd	r27, Y+14	; 0x0e
     c0e:	8d 91       	ld	r24, X+
     c10:	9c 91       	ld	r25, X
     c12:	11 97       	sbiw	r26, 0x01	; 1
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	8d 93       	st	X+, r24
     c18:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
     c1a:	ef 85       	ldd	r30, Y+15	; 0x0f
     c1c:	f8 89       	ldd	r31, Y+16	; 0x10
     c1e:	e8 17       	cp	r30, r24
     c20:	f9 07       	cpc	r31, r25
     c22:	8c f6       	brge	.-94     	; 0xbc6 <fadeBetweenColors+0x268>
			*direction = 0;
     c24:	ab 85       	ldd	r26, Y+11	; 0x0b
     c26:	bc 85       	ldd	r27, Y+12	; 0x0c
     c28:	1d 92       	st	X+, r1
     c2a:	1c 92       	st	X, r1
			*currentStep = stepCount;
     c2c:	ad 85       	ldd	r26, Y+13	; 0x0d
     c2e:	be 85       	ldd	r27, Y+14	; 0x0e
     c30:	ed 93       	st	X+, r30
     c32:	fc 93       	st	X, r31
     c34:	c8 cf       	rjmp	.-112    	; 0xbc6 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
     c36:	eb 8d       	ldd	r30, Y+27	; 0x1b
     c38:	fc 8d       	ldd	r31, Y+28	; 0x1c
     c3a:	bf 01       	movw	r22, r30
     c3c:	88 27       	eor	r24, r24
     c3e:	77 fd       	sbrc	r23, 7
     c40:	80 95       	com	r24
     c42:	98 2f       	mov	r25, r24
     c44:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     c48:	3b 01       	movw	r6, r22
     c4a:	4c 01       	movw	r8, r24
     c4c:	a9 85       	ldd	r26, Y+9	; 0x09
     c4e:	ba 85       	ldd	r27, Y+10	; 0x0a
     c50:	6d 93       	st	X+, r22
     c52:	7d 93       	st	X+, r23
     c54:	8d 93       	st	X+, r24
     c56:	9c 93       	st	X, r25
     c58:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
     c5a:	e9 8d       	ldd	r30, Y+25	; 0x19
     c5c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     c5e:	bf 01       	movw	r22, r30
     c60:	88 27       	eor	r24, r24
     c62:	77 fd       	sbrc	r23, 7
     c64:	80 95       	com	r24
     c66:	98 2f       	mov	r25, r24
     c68:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     c6c:	1b 01       	movw	r2, r22
     c6e:	2c 01       	movw	r4, r24
     c70:	af 81       	ldd	r26, Y+7	; 0x07
     c72:	b8 85       	ldd	r27, Y+8	; 0x08
     c74:	6d 93       	st	X+, r22
     c76:	7d 93       	st	X+, r23
     c78:	8d 93       	st	X+, r24
     c7a:	9c 93       	st	X, r25
     c7c:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
     c7e:	ef 89       	ldd	r30, Y+23	; 0x17
     c80:	f8 8d       	ldd	r31, Y+24	; 0x18
     c82:	bf 01       	movw	r22, r30
     c84:	88 27       	eor	r24, r24
     c86:	77 fd       	sbrc	r23, 7
     c88:	80 95       	com	r24
     c8a:	98 2f       	mov	r25, r24
     c8c:	0e 94 9f 14 	call	0x293e	; 0x293e <__floatsisf>
     c90:	69 83       	std	Y+1, r22	; 0x01
     c92:	7a 83       	std	Y+2, r23	; 0x02
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	ad 81       	ldd	r26, Y+5	; 0x05
     c9a:	be 81       	ldd	r27, Y+6	; 0x06
     c9c:	6d 93       	st	X+, r22
     c9e:	7d 93       	st	X+, r23
     ca0:	8d 93       	st	X+, r24
     ca2:	9c 93       	st	X, r25
     ca4:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
     ca6:	ed 85       	ldd	r30, Y+13	; 0x0d
     ca8:	fe 85       	ldd	r31, Y+14	; 0x0e
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1
		*direction = 1;	
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	ab 85       	ldd	r26, Y+11	; 0x0b
     cb4:	bc 85       	ldd	r27, Y+12	; 0x0c
     cb6:	8d 93       	st	X+, r24
     cb8:	9c 93       	st	X, r25
     cba:	cc 24       	eor	r12, r12
     cbc:	dd 24       	eor	r13, r13
     cbe:	d9 ce       	rjmp	.-590    	; 0xa72 <fadeBetweenColors+0x114>

00000cc0 <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
     cc6:	0e 94 af 04 	call	0x95e	; 0x95e <fadeBetweenColors>
	resetEffect = FALSE;
     cca:	10 92 ea 02 	sts	0x02EA, r1
}
     cce:	08 95       	ret

00000cd0 <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	2e 97       	sbiw	r28, 0x0e	; 14
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	9c 01       	movw	r18, r24
     cea:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
     cec:	8c 01       	movw	r16, r24
     cee:	00 0f       	add	r16, r16
     cf0:	11 1f       	adc	r17, r17
     cf2:	0d 56       	subi	r16, 0x6D	; 109
     cf4:	1c 4f       	sbci	r17, 0xFC	; 252
     cf6:	d8 01       	movw	r26, r16
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	42 97       	sbiw	r24, 0x12	; 18
     cfe:	14 f5       	brge	.+68     	; 0xd44 <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	9c 83       	std	Y+4, r25	; 0x04
     d0e:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
     d10:	84 81       	ldd	r24, Z+4	; 0x04
     d12:	95 81       	ldd	r25, Z+5	; 0x05
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
     d18:	18 86       	std	Y+8, r1	; 0x08
     d1a:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
     d1c:	1a 86       	std	Y+10, r1	; 0x0a
     d1e:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
     d20:	1c 86       	std	Y+12, r1	; 0x0c
     d22:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
     d24:	82 e1       	ldi	r24, 0x12	; 18
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9e 87       	std	Y+14, r25	; 0x0e
     d2a:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
     d2c:	c9 01       	movw	r24, r18
     d2e:	be 01       	movw	r22, r28
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	0e 94 af 04 	call	0x95e	; 0x95e <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
     d38:	f8 01       	movw	r30, r16
     d3a:	80 81       	ld	r24, Z
     d3c:	91 81       	ldd	r25, Z+1	; 0x01
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
	
}
     d44:	2e 96       	adiw	r28, 0x0e	; 14
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	2e 97       	sbiw	r28, 0x0e	; 14
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
     d70:	fc 01       	movw	r30, r24
     d72:	ee 0f       	add	r30, r30
     d74:	ff 1f       	adc	r31, r31
     d76:	ed 56       	subi	r30, 0x6D	; 109
     d78:	fc 4f       	sbci	r31, 0xFC	; 252
     d7a:	11 82       	std	Z+1, r1	; 0x01
     d7c:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
     d7e:	2d 91       	ld	r18, X+
     d80:	3c 91       	ld	r19, X
     d82:	11 97       	sbiw	r26, 0x01	; 1
     d84:	3a 83       	std	Y+2, r19	; 0x02
     d86:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	3c 83       	std	Y+4, r19	; 0x04
     d92:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
     d94:	14 96       	adiw	r26, 0x04	; 4
     d96:	2d 91       	ld	r18, X+
     d98:	3c 91       	ld	r19, X
     d9a:	15 97       	sbiw	r26, 0x05	; 5
     d9c:	3e 83       	std	Y+6, r19	; 0x06
     d9e:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
     da0:	18 86       	std	Y+8, r1	; 0x08
     da2:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
     da4:	1a 86       	std	Y+10, r1	; 0x0a
     da6:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
     da8:	1c 86       	std	Y+12, r1	; 0x0c
     daa:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
     dac:	22 e1       	ldi	r18, 0x12	; 18
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	3e 87       	std	Y+14, r19	; 0x0e
     db2:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
     dba:	be 01       	movw	r22, r28
     dbc:	6f 5f       	subi	r22, 0xFF	; 255
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	0e 94 af 04 	call	0x95e	; 0x95e <fadeBetweenColors>
	resetEffect=FALSE;
     dc4:	10 92 ea 02 	sts	0x02EA, r1
}
     dc8:	2e 96       	adiw	r28, 0x0e	; 14
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	7c 01       	movw	r14, r24
     de8:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
     dea:	8c 01       	movw	r16, r24
     dec:	00 0f       	add	r16, r16
     dee:	11 1f       	adc	r17, r17
     df0:	f8 01       	movw	r30, r16
     df2:	e5 5b       	subi	r30, 0xB5	; 181
     df4:	fc 4f       	sbci	r31, 0xFC	; 252
     df6:	11 82       	std	Z+1, r1	; 0x01
     df8:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
     dfa:	f8 01       	movw	r30, r16
     dfc:	ed 59       	subi	r30, 0x9D	; 157
     dfe:	fc 4f       	sbci	r31, 0xFC	; 252
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
     e08:	f8 01       	movw	r30, r16
     e0a:	e5 55       	subi	r30, 0x55	; 85
     e0c:	fc 4f       	sbci	r31, 0xFC	; 252
     e0e:	11 82       	std	Z+1, r1	; 0x01
     e10:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
     e12:	c7 01       	movw	r24, r14
     e14:	0e 94 14 04 	call	0x828	; 0x828 <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
     e18:	c7 01       	movw	r24, r14
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
     e20:	0e 0d       	add	r16, r14
     e22:	1f 1d       	adc	r17, r15
     e24:	00 0f       	add	r16, r16
     e26:	11 1f       	adc	r17, r17
     e28:	0e 55       	subi	r16, 0x5E	; 94
     e2a:	1d 4f       	sbci	r17, 0xFD	; 253
     e2c:	c7 01       	movw	r24, r14
     e2e:	b8 01       	movw	r22, r16
     e30:	0e 94 45 10 	call	0x208a	; 0x208a <getRGBColor>
}
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	08 95       	ret

00000e42 <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
     e42:	af 92       	push	r10
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	2a 97       	sbiw	r28, 0x0a	; 10
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	6c 01       	movw	r12, r24
     e68:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	8c 01       	movw	r16, r24
     e70:	0c 0d       	add	r16, r12
     e72:	1d 1d       	adc	r17, r13
     e74:	00 0f       	add	r16, r16
     e76:	11 1f       	adc	r17, r17
     e78:	0e 55       	subi	r16, 0x5E	; 94
     e7a:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
     e7c:	5b ea       	ldi	r21, 0xAB	; 171
     e7e:	e5 2e       	mov	r14, r21
     e80:	53 e0       	ldi	r21, 0x03	; 3
     e82:	f5 2e       	mov	r15, r21
     e84:	e8 0e       	add	r14, r24
     e86:	f9 1e       	adc	r15, r25
     e88:	d7 01       	movw	r26, r14
     e8a:	8d 91       	ld	r24, X+
     e8c:	9c 91       	ld	r25, X
     e8e:	8a 30       	cpi	r24, 0x0A	; 10
     e90:	91 05       	cpc	r25, r1
     e92:	b4 f5       	brge	.+108    	; 0xf00 <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	d7 01       	movw	r26, r14
     e98:	8d 93       	st	X+, r24
     e9a:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
     e9c:	f8 01       	movw	r30, r16
     e9e:	22 81       	ldd	r18, Z+2	; 0x02
     ea0:	33 81       	ldd	r19, Z+3	; 0x03
     ea2:	44 81       	ldd	r20, Z+4	; 0x04
     ea4:	55 81       	ldd	r21, Z+5	; 0x05
     ea6:	d5 01       	movw	r26, r10
     ea8:	1e 96       	adiw	r26, 0x0e	; 14
     eaa:	6d 91       	ld	r22, X+
     eac:	7c 91       	ld	r23, X
     eae:	1f 97       	sbiw	r26, 0x0f	; 15
     eb0:	50 96       	adiw	r26, 0x10	; 16
     eb2:	ed 91       	ld	r30, X+
     eb4:	fc 91       	ld	r31, X
     eb6:	51 97       	sbiw	r26, 0x11	; 17
     eb8:	d8 01       	movw	r26, r16
     eba:	8d 91       	ld	r24, X+
     ebc:	9c 91       	ld	r25, X
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	3c 83       	std	Y+4, r19	; 0x04
     ec4:	2b 83       	std	Y+3, r18	; 0x03
     ec6:	5e 83       	std	Y+6, r21	; 0x06
     ec8:	4d 83       	std	Y+5, r20	; 0x05
     eca:	78 87       	std	Y+8, r23	; 0x08
     ecc:	6f 83       	std	Y+7, r22	; 0x07
     ece:	fa 87       	std	Y+10, r31	; 0x0a
     ed0:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
     ed2:	c6 01       	movw	r24, r12
     ed4:	be 01       	movw	r22, r28
     ed6:	6f 5f       	subi	r22, 0xFF	; 255
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	0e 94 30 04 	call	0x860	; 0x860 <pwmEffect>

	
	
}
     ede:	2a 96       	adiw	r28, 0x0a	; 10
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
     f00:	c6 01       	movw	r24, r12
     f02:	b5 01       	movw	r22, r10
     f04:	0e 94 af 04 	call	0x95e	; 0x95e <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
     f08:	c6 01       	movw	r24, r12
     f0a:	b8 01       	movw	r22, r16
     f0c:	0e 94 45 10 	call	0x208a	; 0x208a <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
     f10:	f7 01       	movw	r30, r14
     f12:	11 82       	std	Z+1, r1	; 0x01
     f14:	10 82       	st	Z, r1
     f16:	c2 cf       	rjmp	.-124    	; 0xe9c <fadeBetweenColorsWithPwm+0x5a>

00000f18 <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	62 97       	sbiw	r28, 0x12	; 18
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	f8 2e       	mov	r15, r24
     f36:	e9 2e       	mov	r14, r25
     f38:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
     f3a:	1e 96       	adiw	r26, 0x0e	; 14
     f3c:	8d 91       	ld	r24, X+
     f3e:	9c 91       	ld	r25, X
     f40:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
     f48:	a6 c0       	rjmp	.+332    	; 0x1096 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
     f4a:	89 2b       	or	r24, r25
     f4c:	31 f5       	brne	.+76     	; 0xf9a <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
     f4e:	8f 2d       	mov	r24, r15
     f50:	9e 2d       	mov	r25, r14
     f52:	fc 01       	movw	r30, r24
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	e8 0f       	add	r30, r24
     f66:	f9 1f       	adc	r31, r25
     f68:	e5 59       	subi	r30, 0x95	; 149
     f6a:	fb 4f       	sbci	r31, 0xFB	; 251
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
     f74:	8f 2d       	mov	r24, r15
     f76:	9e 2d       	mov	r25, r14
     f78:	fc 01       	movw	r30, r24
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	e8 0f       	add	r30, r24
     f8c:	f9 1f       	adc	r31, r25
     f8e:	e5 59       	subi	r30, 0x95	; 149
     f90:	fb 4f       	sbci	r31, 0xFB	; 251
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	93 83       	std	Z+3, r25	; 0x03
     f98:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
     f9a:	8f 2d       	mov	r24, r15
     f9c:	9e 2d       	mov	r25, r14
     f9e:	fc 01       	movw	r30, r24
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	ee 0f       	add	r30, r30
     faa:	ff 1f       	adc	r31, r31
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	e8 0f       	add	r30, r24
     fb2:	f9 1f       	adc	r31, r25
     fb4:	e5 59       	subi	r30, 0x95	; 149
     fb6:	fb 4f       	sbci	r31, 0xFB	; 251
     fb8:	15 82       	std	Z+5, r1	; 0x05
     fba:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
     fbc:	8f 2d       	mov	r24, r15
     fbe:	9e 2d       	mov	r25, r14
     fc0:	fc 01       	movw	r30, r24
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	e8 0f       	add	r30, r24
     fd4:	f9 1f       	adc	r31, r25
     fd6:	e5 59       	subi	r30, 0x95	; 149
     fd8:	fb 4f       	sbci	r31, 0xFB	; 251
     fda:	50 96       	adiw	r26, 0x10	; 16
     fdc:	8c 91       	ld	r24, X
     fde:	50 97       	sbiw	r26, 0x10	; 16
     fe0:	51 96       	adiw	r26, 0x11	; 17
     fe2:	9c 91       	ld	r25, X
     fe4:	51 97       	sbiw	r26, 0x11	; 17
     fe6:	9c 01       	movw	r18, r24
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	28 0f       	add	r18, r24
     ffa:	39 1f       	adc	r19, r25
     ffc:	31 87       	std	Z+9, r19	; 0x09
     ffe:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    1000:	8e 01       	movw	r16, r28
    1002:	0f 5f       	subi	r16, 0xFF	; 255
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	c8 01       	movw	r24, r16
    1008:	bd 01       	movw	r22, r26
    100a:	47 e0       	ldi	r20, 0x07	; 7
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	0e 94 3e 11 	call	0x227c	; 0x227c <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    1012:	8f 2d       	mov	r24, r15
    1014:	9e 2d       	mov	r25, r14
    1016:	fc 01       	movw	r30, r24
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	e8 0f       	add	r30, r24
    102a:	f9 1f       	adc	r31, r25
    102c:	e5 59       	subi	r30, 0x95	; 149
    102e:	fb 4f       	sbci	r31, 0xFB	; 251
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	98 8b       	std	Y+16, r25	; 0x10
    1036:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    1038:	8f 2d       	mov	r24, r15
    103a:	9e 2d       	mov	r25, r14
    103c:	fc 01       	movw	r30, r24
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	e5 59       	subi	r30, 0x95	; 149
    1054:	fb 4f       	sbci	r31, 0xFB	; 251
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	9a 8b       	std	Y+18, r25	; 0x12
    105c:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    105e:	8f 2d       	mov	r24, r15
    1060:	9e 2d       	mov	r25, r14
    1062:	b8 01       	movw	r22, r16
    1064:	0e 94 ed 06 	call	0xdda	; 0xdda <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    1068:	8f 2d       	mov	r24, r15
    106a:	9e 2d       	mov	r25, r14
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>

}
    107c:	62 96       	adiw	r28, 0x12	; 18
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    1096:	8f 2d       	mov	r24, r15
    1098:	9e 2d       	mov	r25, r14
    109a:	fc 01       	movw	r30, r24
    109c:	ee 0f       	add	r30, r30
    109e:	ff 1f       	adc	r31, r31
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	e8 0f       	add	r30, r24
    10ae:	f9 1f       	adc	r31, r25
    10b0:	e5 59       	subi	r30, 0x95	; 149
    10b2:	fb 4f       	sbci	r31, 0xFB	; 251
    10b4:	11 82       	std	Z+1, r1	; 0x01
    10b6:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    10b8:	8f 2d       	mov	r24, r15
    10ba:	9e 2d       	mov	r25, r14
    10bc:	fc 01       	movw	r30, r24
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	e8 0f       	add	r30, r24
    10d0:	f9 1f       	adc	r31, r25
    10d2:	e5 59       	subi	r30, 0x95	; 149
    10d4:	fb 4f       	sbci	r31, 0xFB	; 251
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	93 83       	std	Z+3, r25	; 0x03
    10dc:	82 83       	std	Z+2, r24	; 0x02
    10de:	5d cf       	rjmp	.-326    	; 0xf9a <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

000010e0 <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	62 97       	sbiw	r28, 0x12	; 18
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	f8 2e       	mov	r15, r24
    10fe:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    1100:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    1102:	fb 01       	movw	r30, r22
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    1114:	84 81       	ldd	r24, Z+4	; 0x04
    1116:	95 81       	ldd	r25, Z+5	; 0x05
    1118:	9e 83       	std	Y+6, r25	; 0x06
    111a:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    111c:	86 81       	ldd	r24, Z+6	; 0x06
    111e:	97 81       	ldd	r25, Z+7	; 0x07
    1120:	98 87       	std	Y+8, r25	; 0x08
    1122:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    1124:	80 85       	ldd	r24, Z+8	; 0x08
    1126:	91 85       	ldd	r25, Z+9	; 0x09
    1128:	9a 87       	std	Y+10, r25	; 0x0a
    112a:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    112c:	82 85       	ldd	r24, Z+10	; 0x0a
    112e:	93 85       	ldd	r25, Z+11	; 0x0b
    1130:	9c 87       	std	Y+12, r25	; 0x0c
    1132:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    1134:	82 89       	ldd	r24, Z+18	; 0x12
    1136:	93 89       	ldd	r25, Z+19	; 0x13
    1138:	9e 87       	std	Y+14, r25	; 0x0e
    113a:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    113c:	84 89       	ldd	r24, Z+20	; 0x14
    113e:	95 89       	ldd	r25, Z+21	; 0x15
    1140:	98 8b       	std	Y+16, r25	; 0x10
    1142:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    1144:	86 89       	ldd	r24, Z+22	; 0x16
    1146:	97 89       	ldd	r25, Z+23	; 0x17
    1148:	9a 8b       	std	Y+18, r25	; 0x12
    114a:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    114c:	8f 2d       	mov	r24, r15
    114e:	9e 2d       	mov	r25, r14
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	0e 94 8c 07 	call	0xf18	; 0xf18 <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    115a:	a3 ec       	ldi	r26, 0xC3	; 195
    115c:	b3 e0       	ldi	r27, 0x03	; 3
    115e:	8f 2d       	mov	r24, r15
    1160:	9e 2d       	mov	r25, r14
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	fc 01       	movw	r30, r24
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	e8 1b       	sub	r30, r24
    1176:	f9 0b       	sbc	r31, r25
    1178:	ea 0f       	add	r30, r26
    117a:	fb 1f       	adc	r31, r27
    117c:	11 82       	std	Z+1, r1	; 0x01
    117e:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    1180:	8f 2d       	mov	r24, r15
    1182:	9e 2d       	mov	r25, r14
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	fc 01       	movw	r30, r24
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	e8 1b       	sub	r30, r24
    1198:	f9 0b       	sbc	r31, r25
    119a:	ea 0f       	add	r30, r26
    119c:	fb 1f       	adc	r31, r27
    119e:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a2:	95 83       	std	Z+5, r25	; 0x05
    11a4:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    11a6:	8f 2d       	mov	r24, r15
    11a8:	9e 2d       	mov	r25, r14
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	e8 1b       	sub	r30, r24
    11be:	f9 0b       	sbc	r31, r25
    11c0:	ea 0f       	add	r30, r26
    11c2:	fb 1f       	adc	r31, r27
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	93 83       	std	Z+3, r25	; 0x03
    11ca:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    11cc:	8f 2d       	mov	r24, r15
    11ce:	9e 2d       	mov	r25, r14
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	fc 01       	movw	r30, r24
    11d6:	ee 0f       	add	r30, r30
    11d8:	ff 1f       	adc	r31, r31
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	e8 1b       	sub	r30, r24
    11e4:	f9 0b       	sbc	r31, r25
    11e6:	ea 0f       	add	r30, r26
    11e8:	fb 1f       	adc	r31, r27
    11ea:	17 82       	std	Z+7, r1	; 0x07
    11ec:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    11ee:	8f 2d       	mov	r24, r15
    11f0:	9e 2d       	mov	r25, r14
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	fc 01       	movw	r30, r24
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	e8 1b       	sub	r30, r24
    1206:	f9 0b       	sbc	r31, r25
    1208:	ea 0f       	add	r30, r26
    120a:	fb 1f       	adc	r31, r27
    120c:	13 87       	std	Z+11, r17	; 0x0b
    120e:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    1210:	8f 2d       	mov	r24, r15
    1212:	9e 2d       	mov	r25, r14
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	9c 01       	movw	r18, r24
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	28 1b       	sub	r18, r24
    1228:	39 0b       	sbc	r19, r25
    122a:	a2 0f       	add	r26, r18
    122c:	b3 1f       	adc	r27, r19
    122e:	0a 5f       	subi	r16, 0xFA	; 250
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	1d 96       	adiw	r26, 0x0d	; 13
    1234:	1c 93       	st	X, r17
    1236:	0e 93       	st	-X, r16
    1238:	1c 97       	sbiw	r26, 0x0c	; 12


}
    123a:	62 96       	adiw	r28, 0x12	; 18
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	08 95       	ret

00001254 <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	62 97       	sbiw	r28, 0x12	; 18
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	f8 2e       	mov	r15, r24
    1272:	e9 2e       	mov	r14, r25
    1274:	db 01       	movw	r26, r22
	short direction = data[7];
    1276:	1e 96       	adiw	r26, 0x0e	; 14
    1278:	6d 91       	ld	r22, X+
    127a:	7c 91       	ld	r23, X
    127c:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    127e:	fc 01       	movw	r30, r24
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	e8 0f       	add	r30, r24
    1292:	f9 1f       	adc	r31, r25
    1294:	e5 59       	subi	r30, 0x95	; 149
    1296:	fb 4f       	sbci	r31, 0xFB	; 251
    1298:	40 85       	ldd	r20, Z+8	; 0x08
    129a:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    129c:	8f 2d       	mov	r24, r15
    129e:	9e 2d       	mov	r25, r14
    12a0:	fc 01       	movw	r30, r24
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	e8 0f       	add	r30, r24
    12b4:	f9 1f       	adc	r31, r25
    12b6:	e5 59       	subi	r30, 0x95	; 149
    12b8:	fb 4f       	sbci	r31, 0xFB	; 251
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	97 81       	ldd	r25, Z+7	; 0x07
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <fadeBetweenColorsWithScalingPwmEffect+0x70>
    12c2:	aa c0       	rjmp	.+340    	; 0x1418 <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    12c4:	8f 2d       	mov	r24, r15
    12c6:	9e 2d       	mov	r25, r14
    12c8:	fc 01       	movw	r30, r24
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	e8 0f       	add	r30, r24
    12dc:	f9 1f       	adc	r31, r25
    12de:	e5 59       	subi	r30, 0x95	; 149
    12e0:	fb 4f       	sbci	r31, 0xFB	; 251
    12e2:	24 81       	ldd	r18, Z+4	; 0x04
    12e4:	35 81       	ldd	r19, Z+5	; 0x05
    12e6:	24 17       	cp	r18, r20
    12e8:	35 07       	cpc	r19, r21
    12ea:	0c f0       	brlt	.+2      	; 0x12ee <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    12ec:	54 c0       	rjmp	.+168    	; 0x1396 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    12ee:	8f 2d       	mov	r24, r15
    12f0:	9e 2d       	mov	r25, r14
    12f2:	fc 01       	movw	r30, r24
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	e8 0f       	add	r30, r24
    1306:	f9 1f       	adc	r31, r25
    1308:	e5 59       	subi	r30, 0x95	; 149
    130a:	fb 4f       	sbci	r31, 0xFB	; 251
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	35 83       	std	Z+5, r19	; 0x05
    1312:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    1314:	8e 01       	movw	r16, r28
    1316:	0f 5f       	subi	r16, 0xFF	; 255
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	c8 01       	movw	r24, r16
    131c:	bd 01       	movw	r22, r26
    131e:	47 e0       	ldi	r20, 0x07	; 7
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	0e 94 3e 11 	call	0x227c	; 0x227c <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    1326:	8f 2d       	mov	r24, r15
    1328:	9e 2d       	mov	r25, r14
    132a:	fc 01       	movw	r30, r24
    132c:	ee 0f       	add	r30, r30
    132e:	ff 1f       	adc	r31, r31
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	e8 0f       	add	r30, r24
    133e:	f9 1f       	adc	r31, r25
    1340:	e5 59       	subi	r30, 0x95	; 149
    1342:	fb 4f       	sbci	r31, 0xFB	; 251
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	98 8b       	std	Y+16, r25	; 0x10
    134a:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    134c:	8f 2d       	mov	r24, r15
    134e:	9e 2d       	mov	r25, r14
    1350:	fc 01       	movw	r30, r24
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	ee 0f       	add	r30, r30
    1358:	ff 1f       	adc	r31, r31
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	e8 0f       	add	r30, r24
    1364:	f9 1f       	adc	r31, r25
    1366:	e5 59       	subi	r30, 0x95	; 149
    1368:	fb 4f       	sbci	r31, 0xFB	; 251
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	9a 8b       	std	Y+18, r25	; 0x12
    1370:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    1372:	8f 2d       	mov	r24, r15
    1374:	9e 2d       	mov	r25, r14
    1376:	b8 01       	movw	r22, r16
    1378:	0e 94 21 07 	call	0xe42	; 0xe42 <fadeBetweenColorsWithPwm>
	

}
    137c:	62 96       	adiw	r28, 0x12	; 18
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    1396:	8f 2d       	mov	r24, r15
    1398:	9e 2d       	mov	r25, r14
    139a:	fc 01       	movw	r30, r24
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	e8 0f       	add	r30, r24
    13ae:	f9 1f       	adc	r31, r25
    13b0:	e5 59       	subi	r30, 0x95	; 149
    13b2:	fb 4f       	sbci	r31, 0xFB	; 251
    13b4:	15 82       	std	Z+5, r1	; 0x05
    13b6:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    13b8:	61 30       	cpi	r22, 0x01	; 1
    13ba:	71 05       	cpc	r23, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    13be:	86 c0       	rjmp	.+268    	; 0x14cc <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    13c0:	67 2b       	or	r22, r23
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    13c4:	a7 cf       	rjmp	.-178    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    13c6:	8f 2d       	mov	r24, r15
    13c8:	9e 2d       	mov	r25, r14
    13ca:	fc 01       	movw	r30, r24
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	e5 59       	subi	r30, 0x95	; 149
    13e2:	fb 4f       	sbci	r31, 0xFB	; 251
    13e4:	20 81       	ld	r18, Z
    13e6:	31 81       	ldd	r19, Z+1	; 0x01
    13e8:	23 30       	cpi	r18, 0x03	; 3
    13ea:	31 05       	cpc	r19, r1
    13ec:	0c f4       	brge	.+2      	; 0x13f0 <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    13ee:	97 c0       	rjmp	.+302    	; 0x151e <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    13f0:	8f 2d       	mov	r24, r15
    13f2:	9e 2d       	mov	r25, r14
    13f4:	fc 01       	movw	r30, r24
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	e5 59       	subi	r30, 0x95	; 149
    140c:	fb 4f       	sbci	r31, 0xFB	; 251
    140e:	22 50       	subi	r18, 0x02	; 2
    1410:	30 40       	sbci	r19, 0x00	; 0
    1412:	31 83       	std	Z+1, r19	; 0x01
    1414:	20 83       	st	Z, r18
    1416:	7e cf       	rjmp	.-260    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    1418:	8f 2d       	mov	r24, r15
    141a:	9e 2d       	mov	r25, r14
    141c:	fc 01       	movw	r30, r24
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	e8 0f       	add	r30, r24
    1430:	f9 1f       	adc	r31, r25
    1432:	e5 59       	subi	r30, 0x95	; 149
    1434:	fb 4f       	sbci	r31, 0xFB	; 251
    1436:	84 81       	ldd	r24, Z+4	; 0x04
    1438:	95 81       	ldd	r25, Z+5	; 0x05
    143a:	0a 97       	sbiw	r24, 0x0a	; 10
    143c:	0c f1       	brlt	.+66     	; 0x1480 <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    143e:	61 30       	cpi	r22, 0x01	; 1
    1440:	71 05       	cpc	r23, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    1444:	e6 c0       	rjmp	.+460    	; 0x1612 <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    1446:	67 2b       	or	r22, r23
    1448:	51 f4       	brne	.+20     	; 0x145e <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    144a:	8f 2d       	mov	r24, r15
    144c:	9e 2d       	mov	r25, r14
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	0e 94 2b 10 	call	0x2056	; 0x2056 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    145e:	8f 2d       	mov	r24, r15
    1460:	9e 2d       	mov	r25, r14
    1462:	fc 01       	movw	r30, r24
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	e8 0f       	add	r30, r24
    1476:	f9 1f       	adc	r31, r25
    1478:	e5 59       	subi	r30, 0x95	; 149
    147a:	fb 4f       	sbci	r31, 0xFB	; 251
    147c:	15 82       	std	Z+5, r1	; 0x05
    147e:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    1480:	8f 2d       	mov	r24, r15
    1482:	9e 2d       	mov	r25, r14
    1484:	dc 01       	movw	r26, r24
    1486:	aa 0f       	add	r26, r26
    1488:	bb 1f       	adc	r27, r27
    148a:	aa 0f       	add	r26, r26
    148c:	bb 1f       	adc	r27, r27
    148e:	aa 0f       	add	r26, r26
    1490:	bb 1f       	adc	r27, r27
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	a8 0f       	add	r26, r24
    1498:	b9 1f       	adc	r27, r25
    149a:	a5 59       	subi	r26, 0x95	; 149
    149c:	bb 4f       	sbci	r27, 0xFB	; 251
    149e:	8f 2d       	mov	r24, r15
    14a0:	9e 2d       	mov	r25, r14
    14a2:	fc 01       	movw	r30, r24
    14a4:	ee 0f       	add	r30, r30
    14a6:	ff 1f       	adc	r31, r31
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	e8 0f       	add	r30, r24
    14b6:	f9 1f       	adc	r31, r25
    14b8:	e5 59       	subi	r30, 0x95	; 149
    14ba:	fb 4f       	sbci	r31, 0xFB	; 251
    14bc:	84 81       	ldd	r24, Z+4	; 0x04
    14be:	95 81       	ldd	r25, Z+5	; 0x05
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	15 96       	adiw	r26, 0x05	; 5
    14c4:	9c 93       	st	X, r25
    14c6:	8e 93       	st	-X, r24
    14c8:	14 97       	sbiw	r26, 0x04	; 4
    14ca:	58 cf       	rjmp	.-336    	; 0x137c <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    14cc:	8f 2d       	mov	r24, r15
    14ce:	9e 2d       	mov	r25, r14
    14d0:	fc 01       	movw	r30, r24
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	e8 0f       	add	r30, r24
    14e4:	f9 1f       	adc	r31, r25
    14e6:	e5 59       	subi	r30, 0x95	; 149
    14e8:	fb 4f       	sbci	r31, 0xFB	; 251
    14ea:	22 81       	ldd	r18, Z+2	; 0x02
    14ec:	33 81       	ldd	r19, Z+3	; 0x03
    14ee:	23 30       	cpi	r18, 0x03	; 3
    14f0:	31 05       	cpc	r19, r1
    14f2:	0c f4       	brge	.+2      	; 0x14f6 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    14f4:	52 c0       	rjmp	.+164    	; 0x159a <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    14f6:	8f 2d       	mov	r24, r15
    14f8:	9e 2d       	mov	r25, r14
    14fa:	fc 01       	movw	r30, r24
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	ee 0f       	add	r30, r30
    1506:	ff 1f       	adc	r31, r31
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	e8 0f       	add	r30, r24
    150e:	f9 1f       	adc	r31, r25
    1510:	e5 59       	subi	r30, 0x95	; 149
    1512:	fb 4f       	sbci	r31, 0xFB	; 251
    1514:	22 50       	subi	r18, 0x02	; 2
    1516:	30 40       	sbci	r19, 0x00	; 0
    1518:	33 83       	std	Z+3, r19	; 0x03
    151a:	22 83       	std	Z+2, r18	; 0x02
    151c:	fb ce       	rjmp	.-522    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    151e:	8f 2d       	mov	r24, r15
    1520:	9e 2d       	mov	r25, r14
    1522:	fc 01       	movw	r30, r24
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	ee 0f       	add	r30, r30
    152e:	ff 1f       	adc	r31, r31
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	e8 0f       	add	r30, r24
    1536:	f9 1f       	adc	r31, r25
    1538:	e5 59       	subi	r30, 0x95	; 149
    153a:	fb 4f       	sbci	r31, 0xFB	; 251
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	80 32       	cpi	r24, 0x20	; 32
    1542:	91 05       	cpc	r25, r1
    1544:	0c f0       	brlt	.+2      	; 0x1548 <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    1546:	e6 ce       	rjmp	.-564    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    1548:	02 96       	adiw	r24, 0x02	; 2
    154a:	2f 2d       	mov	r18, r15
    154c:	3e 2d       	mov	r19, r14
    154e:	f9 01       	movw	r30, r18
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	22 0f       	add	r18, r18
    155e:	33 1f       	adc	r19, r19
    1560:	e2 0f       	add	r30, r18
    1562:	f3 1f       	adc	r31, r19
    1564:	e5 59       	subi	r30, 0x95	; 149
    1566:	fb 4f       	sbci	r31, 0xFB	; 251
    1568:	93 83       	std	Z+3, r25	; 0x03
    156a:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    156c:	80 97       	sbiw	r24, 0x20	; 32
    156e:	09 f0       	breq	.+2      	; 0x1572 <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    1570:	d1 ce       	rjmp	.-606    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    1572:	8f 2d       	mov	r24, r15
    1574:	9e 2d       	mov	r25, r14
    1576:	fc 01       	movw	r30, r24
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	e8 0f       	add	r30, r24
    158a:	f9 1f       	adc	r31, r25
    158c:	e5 59       	subi	r30, 0x95	; 149
    158e:	fb 4f       	sbci	r31, 0xFB	; 251
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	97 83       	std	Z+7, r25	; 0x07
    1596:	86 83       	std	Z+6, r24	; 0x06
    1598:	bd ce       	rjmp	.-646    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    159a:	8f 2d       	mov	r24, r15
    159c:	9e 2d       	mov	r25, r14
    159e:	fc 01       	movw	r30, r24
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	e8 0f       	add	r30, r24
    15b2:	f9 1f       	adc	r31, r25
    15b4:	e5 59       	subi	r30, 0x95	; 149
    15b6:	fb 4f       	sbci	r31, 0xFB	; 251
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	80 32       	cpi	r24, 0x20	; 32
    15be:	91 05       	cpc	r25, r1
    15c0:	0c f0       	brlt	.+2      	; 0x15c4 <fadeBetweenColorsWithScalingPwmEffect+0x370>
    15c2:	a8 ce       	rjmp	.-688    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    15c4:	02 96       	adiw	r24, 0x02	; 2
    15c6:	2f 2d       	mov	r18, r15
    15c8:	3e 2d       	mov	r19, r14
    15ca:	f9 01       	movw	r30, r18
    15cc:	ee 0f       	add	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	e2 0f       	add	r30, r18
    15de:	f3 1f       	adc	r31, r19
    15e0:	e5 59       	subi	r30, 0x95	; 149
    15e2:	fb 4f       	sbci	r31, 0xFB	; 251
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    15e8:	80 97       	sbiw	r24, 0x20	; 32
    15ea:	09 f0       	breq	.+2      	; 0x15ee <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    15ec:	93 ce       	rjmp	.-730    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    15ee:	8f 2d       	mov	r24, r15
    15f0:	9e 2d       	mov	r25, r14
    15f2:	fc 01       	movw	r30, r24
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	e8 0f       	add	r30, r24
    1606:	f9 1f       	adc	r31, r25
    1608:	e5 59       	subi	r30, 0x95	; 149
    160a:	fb 4f       	sbci	r31, 0xFB	; 251
    160c:	77 83       	std	Z+7, r23	; 0x07
    160e:	66 83       	std	Z+6, r22	; 0x06
    1610:	81 ce       	rjmp	.-766    	; 0x1314 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    1612:	8f 2d       	mov	r24, r15
    1614:	9e 2d       	mov	r25, r14
    1616:	bd 01       	movw	r22, r26
    1618:	0e 94 af 04 	call	0x95e	; 0x95e <fadeBetweenColors>
    161c:	20 cf       	rjmp	.-448    	; 0x145e <fadeBetweenColorsWithScalingPwmEffect+0x20a>

0000161e <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	a6 97       	sbiw	r28, 0x26	; 38
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	f8 2e       	mov	r15, r24
    163c:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    163e:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	fc 01       	movw	r30, r24
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	e8 1b       	sub	r30, r24
    1654:	f9 0b       	sbc	r31, r25
    1656:	ed 53       	subi	r30, 0x3D	; 61
    1658:	fc 4f       	sbci	r31, 0xFC	; 252
    165a:	20 85       	ldd	r18, Z+8	; 0x08
    165c:	31 85       	ldd	r19, Z+9	; 0x09
    165e:	2a 30       	cpi	r18, 0x0A	; 10
    1660:	31 05       	cpc	r19, r1
    1662:	0c f4       	brge	.+2      	; 0x1666 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    1664:	4b c0       	rjmp	.+150    	; 0x16fc <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    1666:	8f 2d       	mov	r24, r15
    1668:	9e 2d       	mov	r25, r14
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	fc 01       	movw	r30, r24
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	e8 1b       	sub	r30, r24
    167e:	f9 0b       	sbc	r31, r25
    1680:	ed 53       	subi	r30, 0x3D	; 61
    1682:	fc 4f       	sbci	r31, 0xFC	; 252
    1684:	26 81       	ldd	r18, Z+6	; 0x06
    1686:	37 81       	ldd	r19, Z+7	; 0x07
    1688:	8f 2d       	mov	r24, r15
    168a:	9e 2d       	mov	r25, r14
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	fc 01       	movw	r30, r24
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	e8 1b       	sub	r30, r24
    16a0:	f9 0b       	sbc	r31, r25
    16a2:	ed 53       	subi	r30, 0x3D	; 61
    16a4:	fc 4f       	sbci	r31, 0xFC	; 252
    16a6:	84 81       	ldd	r24, Z+4	; 0x04
    16a8:	95 81       	ldd	r25, Z+5	; 0x05
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	0c f0       	brlt	.+2      	; 0x16b2 <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    16b0:	95 c0       	rjmp	.+298    	; 0x17dc <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    16b2:	8f 2d       	mov	r24, r15
    16b4:	9e 2d       	mov	r25, r14
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	fc 01       	movw	r30, r24
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	e8 1b       	sub	r30, r24
    16ca:	f9 0b       	sbc	r31, r25
    16cc:	ed 53       	subi	r30, 0x3D	; 61
    16ce:	fc 4f       	sbci	r31, 0xFC	; 252
    16d0:	2f 5f       	subi	r18, 0xFF	; 255
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	37 83       	std	Z+7, r19	; 0x07
    16d6:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    16d8:	8f 2d       	mov	r24, r15
    16da:	9e 2d       	mov	r25, r14
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	fc 01       	movw	r30, r24
    16e2:	ee 0f       	add	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	e8 1b       	sub	r30, r24
    16f0:	f9 0b       	sbc	r31, r25
    16f2:	ed 53       	subi	r30, 0x3D	; 61
    16f4:	fc 4f       	sbci	r31, 0xFC	; 252
    16f6:	11 86       	std	Z+9, r1	; 0x09
    16f8:	10 86       	std	Z+8, r1	; 0x08
    16fa:	13 c0       	rjmp	.+38     	; 0x1722 <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    16fc:	8f 2d       	mov	r24, r15
    16fe:	9e 2d       	mov	r25, r14
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	fc 01       	movw	r30, r24
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	e8 1b       	sub	r30, r24
    1714:	f9 0b       	sbc	r31, r25
    1716:	ed 53       	subi	r30, 0x3D	; 61
    1718:	fc 4f       	sbci	r31, 0xFC	; 252
    171a:	2f 5f       	subi	r18, 0xFF	; 255
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	31 87       	std	Z+9, r19	; 0x09
    1720:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    1722:	8f 2d       	mov	r24, r15
    1724:	9e 2d       	mov	r25, r14
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	fc 01       	movw	r30, r24
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	e8 1b       	sub	r30, r24
    173a:	f9 0b       	sbc	r31, r25
    173c:	ed 53       	subi	r30, 0x3D	; 61
    173e:	fc 4f       	sbci	r31, 0xFC	; 252
    1740:	02 84       	ldd	r0, Z+10	; 0x0a
    1742:	f3 85       	ldd	r31, Z+11	; 0x0b
    1744:	e0 2d       	mov	r30, r0
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	9e 8b       	std	Y+22, r25	; 0x16
    174c:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	98 8f       	std	Y+24, r25	; 0x18
    1754:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    1756:	84 81       	ldd	r24, Z+4	; 0x04
    1758:	95 81       	ldd	r25, Z+5	; 0x05
    175a:	9a 8f       	std	Y+26, r25	; 0x1a
    175c:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    175e:	8f 2d       	mov	r24, r15
    1760:	9e 2d       	mov	r25, r14
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	fc 01       	movw	r30, r24
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	e8 1b       	sub	r30, r24
    1776:	f9 0b       	sbc	r31, r25
    1778:	ed 53       	subi	r30, 0x3D	; 61
    177a:	fc 4f       	sbci	r31, 0xFC	; 252
    177c:	04 84       	ldd	r0, Z+12	; 0x0c
    177e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1780:	e0 2d       	mov	r30, r0
    1782:	80 81       	ld	r24, Z
    1784:	91 81       	ldd	r25, Z+1	; 0x01
    1786:	9c 8f       	std	Y+28, r25	; 0x1c
    1788:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	9e 8f       	std	Y+30, r25	; 0x1e
    1790:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    1792:	84 81       	ldd	r24, Z+4	; 0x04
    1794:	95 81       	ldd	r25, Z+5	; 0x05
    1796:	98 a3       	std	Y+32, r25	; 0x20
    1798:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    179a:	f8 01       	movw	r30, r16
    179c:	82 89       	ldd	r24, Z+18	; 0x12
    179e:	93 89       	ldd	r25, Z+19	; 0x13
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    17a4:	84 89       	ldd	r24, Z+20	; 0x14
    17a6:	95 89       	ldd	r25, Z+21	; 0x15
    17a8:	9c a3       	std	Y+36, r25	; 0x24
    17aa:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    17ac:	86 89       	ldd	r24, Z+22	; 0x16
    17ae:	97 89       	ldd	r25, Z+23	; 0x17
    17b0:	9e a3       	std	Y+38, r25	; 0x26
    17b2:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    17b4:	8f 2d       	mov	r24, r15
    17b6:	9e 2d       	mov	r25, r14
    17b8:	be 01       	movw	r22, r28
    17ba:	6b 5e       	subi	r22, 0xEB	; 235
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	0e 94 2a 09 	call	0x1254	; 0x1254 <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    17c2:	a6 96       	adiw	r28, 0x26	; 38
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    17dc:	8f 2d       	mov	r24, r15
    17de:	9e 2d       	mov	r25, r14
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	fc 01       	movw	r30, r24
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	ee 0f       	add	r30, r30
    17ec:	ff 1f       	adc	r31, r31
    17ee:	ee 0f       	add	r30, r30
    17f0:	ff 1f       	adc	r31, r31
    17f2:	e8 1b       	sub	r30, r24
    17f4:	f9 0b       	sbc	r31, r25
    17f6:	ed 53       	subi	r30, 0x3D	; 61
    17f8:	fc 4f       	sbci	r31, 0xFC	; 252
    17fa:	42 81       	ldd	r20, Z+2	; 0x02
    17fc:	53 81       	ldd	r21, Z+3	; 0x03
    17fe:	41 30       	cpi	r20, 0x01	; 1
    1800:	51 05       	cpc	r21, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    1804:	6a c0       	rjmp	.+212    	; 0x18da <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    1806:	45 2b       	or	r20, r21
    1808:	09 f0       	breq	.+2      	; 0x180c <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    180a:	f2 c0       	rjmp	.+484    	; 0x19f0 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    180c:	8f 2d       	mov	r24, r15
    180e:	9e 2d       	mov	r25, r14
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	fc 01       	movw	r30, r24
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	e8 1b       	sub	r30, r24
    1824:	f9 0b       	sbc	r31, r25
    1826:	ed 53       	subi	r30, 0x3D	; 61
    1828:	fc 4f       	sbci	r31, 0xFC	; 252
    182a:	20 81       	ld	r18, Z
    182c:	31 81       	ldd	r19, Z+1	; 0x01
    182e:	21 50       	subi	r18, 0x01	; 1
    1830:	30 40       	sbci	r19, 0x00	; 0
    1832:	8f 2d       	mov	r24, r15
    1834:	9e 2d       	mov	r25, r14
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	fc 01       	movw	r30, r24
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	ee 0f       	add	r30, r30
    1846:	ff 1f       	adc	r31, r31
    1848:	e8 1b       	sub	r30, r24
    184a:	f9 0b       	sbc	r31, r25
    184c:	ed 53       	subi	r30, 0x3D	; 61
    184e:	fc 4f       	sbci	r31, 0xFC	; 252
    1850:	31 83       	std	Z+1, r19	; 0x01
    1852:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    1854:	23 2b       	or	r18, r19
    1856:	09 f0       	breq	.+2      	; 0x185a <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    1858:	f7 c0       	rjmp	.+494    	; 0x1a48 <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    185a:	8f 2d       	mov	r24, r15
    185c:	9e 2d       	mov	r25, r14
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	fc 01       	movw	r30, r24
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	ee 0f       	add	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	e8 1b       	sub	r30, r24
    1872:	f9 0b       	sbc	r31, r25
    1874:	ed 53       	subi	r30, 0x3D	; 61
    1876:	fc 4f       	sbci	r31, 0xFC	; 252
    1878:	0a 5f       	subi	r16, 0xFA	; 250
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	13 87       	std	Z+11, r17	; 0x0b
    187e:	02 87       	std	Z+10, r16	; 0x0a
    1880:	06 50       	subi	r16, 0x06	; 6
    1882:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    1884:	8f 2d       	mov	r24, r15
    1886:	9e 2d       	mov	r25, r14
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	fc 01       	movw	r30, r24
    188e:	ee 0f       	add	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	e8 1b       	sub	r30, r24
    189c:	f9 0b       	sbc	r31, r25
    189e:	ed 53       	subi	r30, 0x3D	; 61
    18a0:	fc 4f       	sbci	r31, 0xFC	; 252
    18a2:	15 87       	std	Z+13, r17	; 0x0d
    18a4:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    18a6:	f8 01       	movw	r30, r16
    18a8:	86 81       	ldd	r24, Z+6	; 0x06
    18aa:	97 81       	ldd	r25, Z+7	; 0x07
    18ac:	98 87       	std	Y+8, r25	; 0x08
    18ae:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    18b0:	80 85       	ldd	r24, Z+8	; 0x08
    18b2:	91 85       	ldd	r25, Z+9	; 0x09
    18b4:	9a 87       	std	Y+10, r25	; 0x0a
    18b6:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    18b8:	82 85       	ldd	r24, Z+10	; 0x0a
    18ba:	93 85       	ldd	r25, Z+11	; 0x0b
    18bc:	9c 87       	std	Y+12, r25	; 0x0c
    18be:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	9e 87       	std	Y+14, r25	; 0x0e
    18c6:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    18d0:	84 81       	ldd	r24, Z+4	; 0x04
    18d2:	95 81       	ldd	r25, Z+5	; 0x05
    18d4:	9a 8b       	std	Y+18, r25	; 0x12
    18d6:	89 8b       	std	Y+17, r24	; 0x11
    18d8:	8b c0       	rjmp	.+278    	; 0x19f0 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    18da:	8f 2d       	mov	r24, r15
    18dc:	9e 2d       	mov	r25, r14
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	fc 01       	movw	r30, r24
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	ee 0f       	add	r30, r30
    18ee:	ff 1f       	adc	r31, r31
    18f0:	e8 1b       	sub	r30, r24
    18f2:	f9 0b       	sbc	r31, r25
    18f4:	ed 53       	subi	r30, 0x3D	; 61
    18f6:	fc 4f       	sbci	r31, 0xFC	; 252
    18f8:	20 81       	ld	r18, Z
    18fa:	31 81       	ldd	r19, Z+1	; 0x01
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	8f 2d       	mov	r24, r15
    1902:	9e 2d       	mov	r25, r14
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	fc 01       	movw	r30, r24
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31
    1916:	e8 1b       	sub	r30, r24
    1918:	f9 0b       	sbc	r31, r25
    191a:	ed 53       	subi	r30, 0x3D	; 61
    191c:	fc 4f       	sbci	r31, 0xFC	; 252
    191e:	31 83       	std	Z+1, r19	; 0x01
    1920:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    1922:	21 30       	cpi	r18, 0x01	; 1
    1924:	31 05       	cpc	r19, r1
    1926:	09 f4       	brne	.+2      	; 0x192a <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    1928:	e5 c0       	rjmp	.+458    	; 0x1af4 <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    192a:	8f 2d       	mov	r24, r15
    192c:	9e 2d       	mov	r25, r14
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	fc 01       	movw	r30, r24
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	e8 1b       	sub	r30, r24
    1942:	f9 0b       	sbc	r31, r25
    1944:	ed 53       	subi	r30, 0x3D	; 61
    1946:	fc 4f       	sbci	r31, 0xFC	; 252
    1948:	13 82       	std	Z+3, r1	; 0x03
    194a:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    194c:	8f 2d       	mov	r24, r15
    194e:	9e 2d       	mov	r25, r14
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	fc 01       	movw	r30, r24
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	e8 1b       	sub	r30, r24
    1964:	f9 0b       	sbc	r31, r25
    1966:	ed 53       	subi	r30, 0x3D	; 61
    1968:	fc 4f       	sbci	r31, 0xFC	; 252
    196a:	51 83       	std	Z+1, r21	; 0x01
    196c:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    196e:	8f 2d       	mov	r24, r15
    1970:	9e 2d       	mov	r25, r14
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	fc 01       	movw	r30, r24
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	e8 1b       	sub	r30, r24
    1986:	f9 0b       	sbc	r31, r25
    1988:	ed 53       	subi	r30, 0x3D	; 61
    198a:	fc 4f       	sbci	r31, 0xFC	; 252
    198c:	04 5f       	subi	r16, 0xF4	; 244
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	13 87       	std	Z+11, r17	; 0x0b
    1992:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    1994:	8f 2d       	mov	r24, r15
    1996:	9e 2d       	mov	r25, r14
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	fc 01       	movw	r30, r24
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	ee 0f       	add	r30, r30
    19a8:	ff 1f       	adc	r31, r31
    19aa:	e8 1b       	sub	r30, r24
    19ac:	f9 0b       	sbc	r31, r25
    19ae:	ed 53       	subi	r30, 0x3D	; 61
    19b0:	fc 4f       	sbci	r31, 0xFC	; 252
    19b2:	06 50       	subi	r16, 0x06	; 6
    19b4:	10 40       	sbci	r17, 0x00	; 0
    19b6:	15 87       	std	Z+13, r17	; 0x0d
    19b8:	04 87       	std	Z+12, r16	; 0x0c
    19ba:	06 50       	subi	r16, 0x06	; 6
    19bc:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    19be:	f8 01       	movw	r30, r16
    19c0:	84 85       	ldd	r24, Z+12	; 0x0c
    19c2:	95 85       	ldd	r25, Z+13	; 0x0d
    19c4:	98 87       	std	Y+8, r25	; 0x08
    19c6:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    19c8:	86 85       	ldd	r24, Z+14	; 0x0e
    19ca:	97 85       	ldd	r25, Z+15	; 0x0f
    19cc:	9a 87       	std	Y+10, r25	; 0x0a
    19ce:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    19d0:	80 89       	ldd	r24, Z+16	; 0x10
    19d2:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    19d4:	9c 87       	std	Y+12, r25	; 0x0c
    19d6:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    19d8:	86 81       	ldd	r24, Z+6	; 0x06
    19da:	97 81       	ldd	r25, Z+7	; 0x07
    19dc:	9e 87       	std	Y+14, r25	; 0x0e
    19de:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    19e0:	80 85       	ldd	r24, Z+8	; 0x08
    19e2:	91 85       	ldd	r25, Z+9	; 0x09
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    19e8:	82 85       	ldd	r24, Z+10	; 0x0a
    19ea:	93 85       	ldd	r25, Z+11	; 0x0b
    19ec:	9a 8b       	std	Y+18, r25	; 0x12
    19ee:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    19f0:	8f 2d       	mov	r24, r15
    19f2:	9e 2d       	mov	r25, r14
    19f4:	be 01       	movw	r22, r28
    19f6:	6f 5f       	subi	r22, 0xFF	; 255
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	0e 94 45 10 	call	0x208a	; 0x208a <getRGBColor>
			resetData.beginRed = curColors.red;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	9a 87       	std	Y+10, r25	; 0x0a
    1a0c:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    1a16:	8f 2d       	mov	r24, r15
    1a18:	9e 2d       	mov	r25, r14
    1a1a:	be 01       	movw	r22, r28
    1a1c:	69 5f       	subi	r22, 0xF9	; 249
    1a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a20:	0e 94 60 06 	call	0xcc0	; 0xcc0 <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    1a24:	8f 2d       	mov	r24, r15
    1a26:	9e 2d       	mov	r25, r14
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	e8 1b       	sub	r30, r24
    1a3c:	f9 0b       	sbc	r31, r25
    1a3e:	ed 53       	subi	r30, 0x3D	; 61
    1a40:	fc 4f       	sbci	r31, 0xFC	; 252
    1a42:	17 82       	std	Z+7, r1	; 0x07
    1a44:	16 82       	std	Z+6, r1	; 0x06
    1a46:	48 ce       	rjmp	.-880    	; 0x16d8 <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    1a48:	8f 2d       	mov	r24, r15
    1a4a:	9e 2d       	mov	r25, r14
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	fc 01       	movw	r30, r24
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	ee 0f       	add	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	e8 1b       	sub	r30, r24
    1a60:	f9 0b       	sbc	r31, r25
    1a62:	ed 53       	subi	r30, 0x3D	; 61
    1a64:	fc 4f       	sbci	r31, 0xFC	; 252
    1a66:	11 82       	std	Z+1, r1	; 0x01
    1a68:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    1a6a:	8f 2d       	mov	r24, r15
    1a6c:	9e 2d       	mov	r25, r14
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	fc 01       	movw	r30, r24
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	e8 1b       	sub	r30, r24
    1a82:	f9 0b       	sbc	r31, r25
    1a84:	ed 53       	subi	r30, 0x3D	; 61
    1a86:	fc 4f       	sbci	r31, 0xFC	; 252
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	93 83       	std	Z+3, r25	; 0x03
    1a8e:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    1a90:	8f 2d       	mov	r24, r15
    1a92:	9e 2d       	mov	r25, r14
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	fc 01       	movw	r30, r24
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	ff 1f       	adc	r31, r31
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	e8 1b       	sub	r30, r24
    1aa8:	f9 0b       	sbc	r31, r25
    1aaa:	ed 53       	subi	r30, 0x3D	; 61
    1aac:	fc 4f       	sbci	r31, 0xFC	; 252
    1aae:	13 87       	std	Z+11, r17	; 0x0b
    1ab0:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    1ab2:	8f 2d       	mov	r24, r15
    1ab4:	9e 2d       	mov	r25, r14
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	fc 01       	movw	r30, r24
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e8 1b       	sub	r30, r24
    1aca:	f9 0b       	sbc	r31, r25
    1acc:	ed 53       	subi	r30, 0x3D	; 61
    1ace:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad0:	0a 5f       	subi	r16, 0xFA	; 250
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	15 87       	std	Z+13, r17	; 0x0d
    1ad6:	04 87       	std	Z+12, r16	; 0x0c
    1ad8:	06 50       	subi	r16, 0x06	; 6
    1ada:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	98 87       	std	Y+8, r25	; 0x08
    1ae4:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	9a 87       	std	Y+10, r25	; 0x0a
    1aec:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    1aee:	84 81       	ldd	r24, Z+4	; 0x04
    1af0:	95 81       	ldd	r25, Z+5	; 0x05
    1af2:	70 cf       	rjmp	.-288    	; 0x19d4 <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    1af4:	8f 2d       	mov	r24, r15
    1af6:	9e 2d       	mov	r25, r14
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	fc 01       	movw	r30, r24
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	ee 0f       	add	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	e8 1b       	sub	r30, r24
    1b0c:	f9 0b       	sbc	r31, r25
    1b0e:	ed 53       	subi	r30, 0x3D	; 61
    1b10:	fc 4f       	sbci	r31, 0xFC	; 252
    1b12:	0a 5f       	subi	r16, 0xFA	; 250
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	13 87       	std	Z+11, r17	; 0x0b
    1b18:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    1b1a:	8f 2d       	mov	r24, r15
    1b1c:	9e 2d       	mov	r25, r14
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	fc 01       	movw	r30, r24
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	ee 0f       	add	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	ee 0f       	add	r30, r30
    1b2e:	ff 1f       	adc	r31, r31
    1b30:	e8 1b       	sub	r30, r24
    1b32:	f9 0b       	sbc	r31, r25
    1b34:	ed 53       	subi	r30, 0x3D	; 61
    1b36:	fc 4f       	sbci	r31, 0xFC	; 252
    1b38:	0a 5f       	subi	r16, 0xFA	; 250
    1b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3c:	15 87       	std	Z+13, r17	; 0x0d
    1b3e:	04 87       	std	Z+12, r16	; 0x0c
    1b40:	0c 50       	subi	r16, 0x0C	; 12
    1b42:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    1b44:	f8 01       	movw	r30, r16
    1b46:	86 81       	ldd	r24, Z+6	; 0x06
    1b48:	97 81       	ldd	r25, Z+7	; 0x07
    1b4a:	98 87       	std	Y+8, r25	; 0x08
    1b4c:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    1b4e:	80 85       	ldd	r24, Z+8	; 0x08
    1b50:	91 85       	ldd	r25, Z+9	; 0x09
    1b52:	9a 87       	std	Y+10, r25	; 0x0a
    1b54:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    1b56:	82 85       	ldd	r24, Z+10	; 0x0a
    1b58:	93 85       	ldd	r25, Z+11	; 0x0b
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    1b5e:	84 85       	ldd	r24, Z+12	; 0x0c
    1b60:	95 85       	ldd	r25, Z+13	; 0x0d
    1b62:	9e 87       	std	Y+14, r25	; 0x0e
    1b64:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    1b66:	86 85       	ldd	r24, Z+14	; 0x0e
    1b68:	97 85       	ldd	r25, Z+15	; 0x0f
    1b6a:	98 8b       	std	Y+16, r25	; 0x10
    1b6c:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    1b6e:	80 89       	ldd	r24, Z+16	; 0x10
    1b70:	91 89       	ldd	r25, Z+17	; 0x11
    1b72:	9a 8b       	std	Y+18, r25	; 0x12
    1b74:	89 8b       	std	Y+17, r24	; 0x11
    1b76:	3c cf       	rjmp	.-392    	; 0x19f0 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00001b78 <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    1b78:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    1b7a:	2d 91       	ld	r18, X+
    1b7c:	3c 91       	ld	r19, X
    1b7e:	11 97       	sbiw	r26, 0x01	; 1
    1b80:	f9 01       	movw	r30, r18
    1b82:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1b84:	2f 5f       	subi	r18, 0xFF	; 255
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	2d 93       	st	X+, r18
    1b8a:	3c 93       	st	X, r19
    return returnVal;
}
    1b8c:	08 95       	ret

00001b8e <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    1b8e:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	11 97       	sbiw	r26, 0x01	; 1
    1b96:	fc 01       	movw	r30, r24
    1b98:	25 91       	lpm	r18, Z+
    1b9a:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    1b9c:	02 96       	adiw	r24, 0x02	; 2
    1b9e:	8d 93       	st	X+, r24
    1ba0:	9c 93       	st	X, r25
    return returnVal;
}
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	08 95       	ret

00001ba6 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1bac:	14 16       	cp	r1, r20
    1bae:	15 06       	cpc	r1, r21
    1bb0:	64 f4       	brge	.+24     	; 0x1bca <copyFromFlash+0x24>
    1bb2:	db 01       	movw	r26, r22
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e8 0f       	add	r30, r24
    1bbc:	f9 1f       	adc	r31, r25
    1bbe:	e4 91       	lpm	r30, Z+
    1bc0:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	84 17       	cp	r24, r20
    1bc6:	95 07       	cpc	r25, r21
    1bc8:	bc f3       	brlt	.-18     	; 0x1bb8 <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret

00001bd0 <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    1bd0:	2f 92       	push	r2
    1bd2:	3f 92       	push	r3
    1bd4:	4f 92       	push	r4
    1bd6:	5f 92       	push	r5
    1bd8:	6f 92       	push	r6
    1bda:	7f 92       	push	r7
    1bdc:	8f 92       	push	r8
    1bde:	9f 92       	push	r9
    1be0:	af 92       	push	r10
    1be2:	bf 92       	push	r11
    1be4:	cf 92       	push	r12
    1be6:	df 92       	push	r13
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	1f 93       	push	r17
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <getInstructionGroup+0x24>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <getInstructionGroup+0x26>
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    1bfa:	83 ef       	ldi	r24, 0xF3	; 243
    1bfc:	98 e0       	ldi	r25, 0x08	; 8
    1bfe:	90 93 f4 0e 	sts	0x0EF4, r25
    1c02:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1c06:	40 91 04 01 	lds	r20, 0x0104
    1c0a:	50 91 05 01 	lds	r21, 0x0105
    1c0e:	fa 01       	movw	r30, r20
    1c10:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1c12:	31 96       	adiw	r30, 0x01	; 1
    1c14:	f0 93 05 01 	sts	0x0105, r31
    1c18:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    1c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1e:	c9 f0       	breq	.+50     	; 0x1c52 <getInstructionGroup+0x82>
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    1c24:	cb 01       	movw	r24, r22
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	1f 91       	pop	r17
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	7f 90       	pop	r7
    1c46:	6f 90       	pop	r6
    1c48:	5f 90       	pop	r5
    1c4a:	4f 90       	pop	r4
    1c4c:	3f 90       	pop	r3
    1c4e:	2f 90       	pop	r2
    1c50:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    1c52:	80 91 00 01 	lds	r24, 0x0100
    1c56:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    1c5a:	20 91 02 01 	lds	r18, 0x0102
    1c5e:	30 91 03 01 	lds	r19, 0x0103
    1c62:	20 93 00 01 	sts	0x0100, r18
    1c66:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    1c6a:	90 93 03 01 	sts	0x0103, r25
    1c6e:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    1c72:	c9 01       	movw	r24, r18
    1c74:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    1c76:	85 91       	lpm	r24, Z+
    1c78:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    1c7a:	9c 01       	movw	r18, r24
    1c7c:	22 0f       	add	r18, r18
    1c7e:	33 1f       	adc	r19, r19
    1c80:	22 0f       	add	r18, r18
    1c82:	33 1f       	adc	r19, r19
    1c84:	22 0f       	add	r18, r18
    1c86:	33 1f       	adc	r19, r19
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	28 0f       	add	r18, r24
    1c8e:	39 1f       	adc	r19, r25
    1c90:	fb 01       	movw	r30, r22
    1c92:	31 83       	std	Z+1, r19	; 0x01
    1c94:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    1c96:	db 01       	movw	r26, r22
    1c98:	14 96       	adiw	r26, 0x04	; 4
    1c9a:	b3 83       	std	Z+3, r27	; 0x03
    1c9c:	a2 83       	std	Z+2, r26	; 0x02
    1c9e:	4d 5f       	subi	r20, 0xFD	; 253
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1ca2:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    1ca4:	9f ea       	ldi	r25, 0xAF	; 175
    1ca6:	c9 2e       	mov	r12, r25
    1ca8:	94 e0       	ldi	r25, 0x04	; 4
    1caa:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    1cac:	80 e6       	ldi	r24, 0x60	; 96
    1cae:	a8 2e       	mov	r10, r24
    1cb0:	86 e0       	ldi	r24, 0x06	; 6
    1cb2:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    1cb4:	f0 e3       	ldi	r31, 0x30	; 48
    1cb6:	8f 2e       	mov	r8, r31
    1cb8:	f4 e0       	ldi	r31, 0x04	; 4
    1cba:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    1cbc:	e4 e1       	ldi	r30, 0x14	; 20
    1cbe:	6e 2e       	mov	r6, r30
    1cc0:	e4 e0       	ldi	r30, 0x04	; 4
    1cc2:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    1cc4:	38 e6       	ldi	r19, 0x68	; 104
    1cc6:	43 2e       	mov	r4, r19
    1cc8:	36 e0       	ldi	r19, 0x06	; 6
    1cca:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    1ccc:	2d ea       	ldi	r18, 0xAD	; 173
    1cce:	22 2e       	mov	r2, r18
    1cd0:	26 e0       	ldi	r18, 0x06	; 6
    1cd2:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    1cd4:	9e e9       	ldi	r25, 0x9E	; 158
    1cd6:	e9 2e       	mov	r14, r25
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	f9 2e       	mov	r15, r25
    1cdc:	23 c0       	rjmp	.+70     	; 0x1d24 <getInstructionGroup+0x154>
    1cde:	13 96       	adiw	r26, 0x03	; 3
    1ce0:	fc 92       	st	X, r15
    1ce2:	ee 92       	st	-X, r14
    1ce4:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1ce6:	18 96       	adiw	r26, 0x08	; 8
    1ce8:	1c 93       	st	X, r17
    1cea:	18 97       	sbiw	r26, 0x08	; 8
    1cec:	80 91 f3 0e 	lds	r24, 0x0EF3
    1cf0:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    1cf8:	82 0f       	add	r24, r18
    1cfa:	93 1f       	adc	r25, r19
    1cfc:	90 93 f4 0e 	sts	0x0EF4, r25
    1d00:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    1d04:	40 91 04 01 	lds	r20, 0x0104
    1d08:	50 91 05 01 	lds	r21, 0x0105
    1d0c:	42 0f       	add	r20, r18
    1d0e:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    1d10:	fa 01       	movw	r30, r20
    1d12:	84 91       	lpm	r24, Z+
    1d14:	8f 3f       	cpi	r24, 0xFF	; 255
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <getInstructionGroup+0x14a>
    1d18:	b4 c0       	rjmp	.+360    	; 0x1e82 <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    1d1a:	1b 96       	adiw	r26, 0x0b	; 11
    1d1c:	fd 01       	movw	r30, r26
    1d1e:	32 97       	sbiw	r30, 0x02	; 2
    1d20:	b1 83       	std	Z+1, r27	; 0x01
    1d22:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1d24:	fa 01       	movw	r30, r20
    1d26:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1d28:	4f 5f       	subi	r20, 0xFF	; 255
    1d2a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    1d2c:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1d2e:	fa 01       	movw	r30, r20
    1d30:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1d32:	ca 01       	movw	r24, r20
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	90 93 05 01 	sts	0x0105, r25
    1d3e:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    1d42:	11 96       	adiw	r26, 0x01	; 1
    1d44:	2c 93       	st	X, r18
    1d46:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    1d48:	80 91 f3 0e 	lds	r24, 0x0EF3
    1d4c:	90 91 f4 0e 	lds	r25, 0x0EF4
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
    1d54:	17 96       	adiw	r26, 0x07	; 7
    1d56:	9c 93       	st	X, r25
    1d58:	8e 93       	st	-X, r24
    1d5a:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    1d5c:	22 23       	and	r18, r18
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <getInstructionGroup+0x192>
    1d60:	be cf       	rjmp	.-132    	; 0x1cde <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    1d62:	22 30       	cpi	r18, 0x02	; 2
    1d64:	39 f1       	breq	.+78     	; 0x1db4 <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    1d66:	23 30       	cpi	r18, 0x03	; 3
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <getInstructionGroup+0x19c>
    1d6a:	4b c0       	rjmp	.+150    	; 0x1e02 <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    1d6c:	24 30       	cpi	r18, 0x04	; 4
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <getInstructionGroup+0x1a2>
    1d70:	68 c0       	rjmp	.+208    	; 0x1e42 <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    1d72:	25 30       	cpi	r18, 0x05	; 5
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <getInstructionGroup+0x1a8>
    1d76:	73 c0       	rjmp	.+230    	; 0x1e5e <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    1d78:	26 30       	cpi	r18, 0x06	; 6
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <getInstructionGroup+0x1ae>
    1d7c:	50 c0       	rjmp	.+160    	; 0x1e1e <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    1d7e:	27 30       	cpi	r18, 0x07	; 7
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <getInstructionGroup+0x1b4>
    1d82:	8a c0       	rjmp	.+276    	; 0x1e98 <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    1d84:	28 30       	cpi	r18, 0x08	; 8
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <getInstructionGroup+0x1ba>
    1d88:	99 c0       	rjmp	.+306    	; 0x1ebc <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    1d8a:	29 30       	cpi	r18, 0x09	; 9
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <getInstructionGroup+0x1c0>
    1d8e:	b2 cf       	rjmp	.-156    	; 0x1cf4 <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    1d90:	8a e0       	ldi	r24, 0x0A	; 10
    1d92:	94 e0       	ldi	r25, 0x04	; 4
    1d94:	13 96       	adiw	r26, 0x03	; 3
    1d96:	9c 93       	st	X, r25
    1d98:	8e 93       	st	-X, r24
    1d9a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    1d9c:	eb e9       	ldi	r30, 0x9B	; 155
    1d9e:	f3 e0       	ldi	r31, 0x03	; 3
    1da0:	15 96       	adiw	r26, 0x05	; 5
    1da2:	fc 93       	st	X, r31
    1da4:	ee 93       	st	-X, r30
    1da6:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1da8:	18 96       	adiw	r26, 0x08	; 8
    1daa:	1c 93       	st	X, r17
    1dac:	18 97       	sbiw	r26, 0x08	; 8
    1dae:	46 e0       	ldi	r20, 0x06	; 6
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0d c0       	rjmp	.+26     	; 0x1dce <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    1db4:	13 96       	adiw	r26, 0x03	; 3
    1db6:	5c 92       	st	X, r5
    1db8:	4e 92       	st	-X, r4
    1dba:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    1dbc:	15 96       	adiw	r26, 0x05	; 5
    1dbe:	3c 92       	st	X, r3
    1dc0:	2e 92       	st	-X, r2
    1dc2:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1dc4:	18 96       	adiw	r26, 0x08	; 8
    1dc6:	1c 93       	st	X, r17
    1dc8:	18 97       	sbiw	r26, 0x08	; 8
    1dca:	46 e0       	ldi	r20, 0x06	; 6
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	84 91       	lpm	r24, Z+
    1dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dda:	fc 81       	ldd	r31, Y+4	; 0x04
    1ddc:	81 93       	st	Z+, r24
    1dde:	fc 83       	std	Y+4, r31	; 0x04
    1de0:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	24 17       	cp	r18, r20
    1df2:	35 07       	cpc	r19, r21
    1df4:	74 f3       	brlt	.-36     	; 0x1dd2 <getInstructionGroup+0x202>
    1df6:	9a 01       	movw	r18, r20
    1df8:	80 91 f3 0e 	lds	r24, 0x0EF3
    1dfc:	90 91 f4 0e 	lds	r25, 0x0EF4
    1e00:	7b cf       	rjmp	.-266    	; 0x1cf8 <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    1e02:	13 96       	adiw	r26, 0x03	; 3
    1e04:	9c 92       	st	X, r9
    1e06:	8e 92       	st	-X, r8
    1e08:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    1e0a:	15 96       	adiw	r26, 0x05	; 5
    1e0c:	7c 92       	st	X, r7
    1e0e:	6e 92       	st	-X, r6
    1e10:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1e12:	18 96       	adiw	r26, 0x08	; 8
    1e14:	1c 92       	st	X, r1
    1e16:	18 97       	sbiw	r26, 0x08	; 8
    1e18:	4a e0       	ldi	r20, 0x0A	; 10
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	d8 cf       	rjmp	.-80     	; 0x1dce <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    1e1e:	ea e2       	ldi	r30, 0x2A	; 42
    1e20:	f9 e0       	ldi	r31, 0x09	; 9
    1e22:	13 96       	adiw	r26, 0x03	; 3
    1e24:	fc 93       	st	X, r31
    1e26:	ee 93       	st	-X, r30
    1e28:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    1e2a:	8c e8       	ldi	r24, 0x8C	; 140
    1e2c:	97 e0       	ldi	r25, 0x07	; 7
    1e2e:	15 96       	adiw	r26, 0x05	; 5
    1e30:	9c 93       	st	X, r25
    1e32:	8e 93       	st	-X, r24
    1e34:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1e36:	18 96       	adiw	r26, 0x08	; 8
    1e38:	1c 92       	st	X, r1
    1e3a:	18 97       	sbiw	r26, 0x08	; 8
    1e3c:	42 e1       	ldi	r20, 0x12	; 18
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	c6 cf       	rjmp	.-116    	; 0x1dce <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1e42:	18 96       	adiw	r26, 0x08	; 8
    1e44:	1c 93       	st	X, r17
    1e46:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    1e48:	13 96       	adiw	r26, 0x03	; 3
    1e4a:	dc 92       	st	X, r13
    1e4c:	ce 92       	st	-X, r12
    1e4e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    1e50:	15 96       	adiw	r26, 0x05	; 5
    1e52:	bc 92       	st	X, r11
    1e54:	ae 92       	st	-X, r10
    1e56:	14 97       	sbiw	r26, 0x04	; 4
    1e58:	4e e0       	ldi	r20, 0x0E	; 14
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	b8 cf       	rjmp	.-144    	; 0x1dce <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    1e5e:	e1 e2       	ldi	r30, 0x21	; 33
    1e60:	f7 e0       	ldi	r31, 0x07	; 7
    1e62:	13 96       	adiw	r26, 0x03	; 3
    1e64:	fc 93       	st	X, r31
    1e66:	ee 93       	st	-X, r30
    1e68:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    1e6a:	8d ee       	ldi	r24, 0xED	; 237
    1e6c:	96 e0       	ldi	r25, 0x06	; 6
    1e6e:	15 96       	adiw	r26, 0x05	; 5
    1e70:	9c 93       	st	X, r25
    1e72:	8e 93       	st	-X, r24
    1e74:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1e76:	18 96       	adiw	r26, 0x08	; 8
    1e78:	1c 92       	st	X, r1
    1e7a:	18 97       	sbiw	r26, 0x08	; 8
    1e7c:	42 e1       	ldi	r20, 0x12	; 18
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	a6 cf       	rjmp	.-180    	; 0x1dce <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    1e82:	1a 96       	adiw	r26, 0x0a	; 10
    1e84:	1c 92       	st	X, r1
    1e86:	1e 92       	st	-X, r1
    1e88:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    1e8a:	4f 5f       	subi	r20, 0xFF	; 255
    1e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8e:	50 93 05 01 	sts	0x0105, r21
    1e92:	40 93 04 01 	sts	0x0104, r20
    1e96:	c6 ce       	rjmp	.-628    	; 0x1c24 <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    1e98:	ef e0       	ldi	r30, 0x0F	; 15
    1e9a:	fb e0       	ldi	r31, 0x0B	; 11
    1e9c:	13 96       	adiw	r26, 0x03	; 3
    1e9e:	fc 93       	st	X, r31
    1ea0:	ee 93       	st	-X, r30
    1ea2:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    1ea4:	80 e7       	ldi	r24, 0x70	; 112
    1ea6:	98 e0       	ldi	r25, 0x08	; 8
    1ea8:	15 96       	adiw	r26, 0x05	; 5
    1eaa:	9c 93       	st	X, r25
    1eac:	8e 93       	st	-X, r24
    1eae:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1eb0:	18 96       	adiw	r26, 0x08	; 8
    1eb2:	1c 92       	st	X, r1
    1eb4:	18 97       	sbiw	r26, 0x08	; 8
    1eb6:	48 e1       	ldi	r20, 0x18	; 24
    1eb8:	50 e0       	ldi	r21, 0x00	; 0
    1eba:	89 cf       	rjmp	.-238    	; 0x1dce <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    1ebc:	eb ea       	ldi	r30, 0xAB	; 171
    1ebe:	f3 e0       	ldi	r31, 0x03	; 3
    1ec0:	13 96       	adiw	r26, 0x03	; 3
    1ec2:	fc 93       	st	X, r31
    1ec4:	ee 93       	st	-X, r30
    1ec6:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    1ec8:	8f e9       	ldi	r24, 0x9F	; 159
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	15 96       	adiw	r26, 0x05	; 5
    1ece:	9c 93       	st	X, r25
    1ed0:	8e 93       	st	-X, r24
    1ed2:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	fc 01       	movw	r30, r24
    1eda:	45 91       	lpm	r20, Z+
    1edc:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    1ede:	90 93 05 01 	sts	0x0105, r25
    1ee2:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    1ee6:	44 0f       	add	r20, r20
    1ee8:	55 1f       	adc	r21, r21
    1eea:	44 0f       	add	r20, r20
    1eec:	55 1f       	adc	r21, r21
    1eee:	44 0f       	add	r20, r20
    1ef0:	55 1f       	adc	r21, r21
    1ef2:	4e 5f       	subi	r20, 0xFE	; 254
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1ef6:	18 96       	adiw	r26, 0x08	; 8
    1ef8:	1c 92       	st	X, r1
    1efa:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1efc:	14 16       	cp	r1, r20
    1efe:	15 06       	cpc	r1, r21
    1f00:	0c f4       	brge	.+2      	; 0x1f04 <getInstructionGroup+0x334>
    1f02:	65 cf       	rjmp	.-310    	; 0x1dce <getInstructionGroup+0x1fe>
    1f04:	78 cf       	rjmp	.-272    	; 0x1df6 <getInstructionGroup+0x226>

00001f06 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    1f0a:	a0 91 f3 0c 	lds	r26, 0x0CF3
    1f0e:	b0 91 f4 0c 	lds	r27, 0x0CF4
    1f12:	a2 30       	cpi	r26, 0x02	; 2
    1f14:	b1 05       	cpc	r27, r1
    1f16:	78 f4       	brcc	.+30     	; 0x1f36 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    1f18:	11 97       	sbiw	r26, 0x01	; 1
    1f1a:	81 f1       	breq	.+96     	; 0x1f7c <getPreviousGroup+0x76>
    1f1c:	c0 91 04 01 	lds	r28, 0x0104
    1f20:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    1f24:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <getInstructionGroup>
			dataPtr = tmpPtr;
    1f28:	d0 93 05 01 	sts	0x0105, r29
    1f2c:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    1f36:	fd 01       	movw	r30, r26
    1f38:	31 97       	sbiw	r30, 0x01	; 1
    1f3a:	f0 93 f4 0c 	sts	0x0CF4, r31
    1f3e:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    1f42:	aa 0f       	add	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	af 50       	subi	r26, 0x0F	; 15
    1f48:	b3 4f       	sbci	r27, 0xF3	; 243
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	eb 50       	subi	r30, 0x0B	; 11
    1f50:	f3 4f       	sbci	r31, 0xF3	; 243
    1f52:	2d 91       	ld	r18, X+
    1f54:	3c 91       	ld	r19, X
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	28 0f       	add	r18, r24
    1f5c:	39 1f       	adc	r19, r25
    1f5e:	80 91 04 01 	lds	r24, 0x0104
    1f62:	90 91 05 01 	lds	r25, 0x0105
    1f66:	82 1b       	sub	r24, r18
    1f68:	93 0b       	sbc	r25, r19
    1f6a:	90 93 05 01 	sts	0x0105, r25
    1f6e:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    1f72:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    1f7c:	80 91 f5 0c 	lds	r24, 0x0CF5
    1f80:	90 91 f6 0c 	lds	r25, 0x0CF6
    1f84:	c0 91 04 01 	lds	r28, 0x0104
    1f88:	d0 91 05 01 	lds	r29, 0x0105
    1f8c:	c8 1b       	sub	r28, r24
    1f8e:	d9 0b       	sbc	r29, r25
    1f90:	d0 93 05 01 	sts	0x0105, r29
    1f94:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    1f98:	10 92 f4 0c 	sts	0x0CF4, r1
    1f9c:	10 92 f3 0c 	sts	0x0CF3, r1
    1fa0:	c1 cf       	rjmp	.-126    	; 0x1f24 <getPreviousGroup+0x1e>

00001fa2 <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    1fa2:	e0 91 f3 0c 	lds	r30, 0x0CF3
    1fa6:	f0 91 f4 0c 	lds	r31, 0x0CF4
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	ed 50       	subi	r30, 0x0D	; 13
    1fb0:	f3 4f       	sbci	r31, 0xF3	; 243
    1fb2:	20 81       	ld	r18, Z
    1fb4:	31 81       	ldd	r19, Z+1	; 0x01
    1fb6:	80 91 04 01 	lds	r24, 0x0104
    1fba:	90 91 05 01 	lds	r25, 0x0105
    1fbe:	82 1b       	sub	r24, r18
    1fc0:	93 0b       	sbc	r25, r19
    1fc2:	90 93 05 01 	sts	0x0105, r25
    1fc6:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    1fca:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <getInstructionGroup>
}
    1fce:	08 95       	ret

00001fd0 <getNextGroup>:

struct instruction_group *getNextGroup() {
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    1fd4:	c0 91 04 01 	lds	r28, 0x0104
    1fd8:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    1fdc:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <getInstructionGroup>
    1fe0:	ac 01       	movw	r20, r24

	if(ig != 0) {
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	d9 f0       	breq	.+54     	; 0x201c <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    1fe6:	20 91 f3 0c 	lds	r18, 0x0CF3
    1fea:	30 91 f4 0c 	lds	r19, 0x0CF4
    1fee:	f9 01       	movw	r30, r18
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	eb 50       	subi	r30, 0x0B	; 11
    1ff6:	f3 4f       	sbci	r31, 0xF3	; 243
    1ff8:	80 91 04 01 	lds	r24, 0x0104
    1ffc:	90 91 05 01 	lds	r25, 0x0105
    2000:	8c 1b       	sub	r24, r28
    2002:	9d 0b       	sbc	r25, r29
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	30 93 f4 0c 	sts	0x0CF4, r19
    2010:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    2014:	ca 01       	movw	r24, r20
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    201c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <getLastGroup>
    2020:	ac 01       	movw	r20, r24
    2022:	f8 cf       	rjmp	.-16     	; 0x2014 <getNextGroup+0x44>

00002024 <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    2024:	10 92 f4 0c 	sts	0x0CF4, r1
    2028:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    202c:	8e ef       	ldi	r24, 0xFE	; 254
    202e:	91 e0       	ldi	r25, 0x01	; 1
    2030:	e5 ef       	ldi	r30, 0xF5	; 245
    2032:	fc e0       	ldi	r31, 0x0C	; 12
    2034:	df 01       	movw	r26, r30
    2036:	9c 01       	movw	r18, r24
    2038:	1d 92       	st	X+, r1
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	30 40       	sbci	r19, 0x00	; 0
    203e:	e1 f7       	brne	.-8      	; 0x2038 <initDecoder+0x14>
}
    2040:	08 95       	ret

00002042 <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    2042:	9c 01       	movw	r18, r24
    2044:	97 fd       	sbrc	r25, 7
    2046:	02 c0       	rjmp	.+4      	; 0x204c <abs+0xa>
    2048:	c9 01       	movw	r24, r18
    204a:	08 95       	ret
    204c:	30 95       	com	r19
    204e:	21 95       	neg	r18
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	c9 01       	movw	r24, r18
    2054:	08 95       	ret

00002056 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    2056:	86 30       	cpi	r24, 0x06	; 6
    2058:	91 05       	cpc	r25, r1
    205a:	24 f0       	brlt	.+8      	; 0x2064 <setRGBColor+0xe>
		if(led == 6) {
    205c:	86 30       	cpi	r24, 0x06	; 6
    205e:	91 05       	cpc	r25, r1
    2060:	89 f0       	breq	.+34     	; 0x2084 <setRGBColor+0x2e>
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	fc 01       	movw	r30, r24
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	e8 0f       	add	r30, r24
    206c:	f9 1f       	adc	r31, r25
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    2072:	e5 51       	subi	r30, 0x15	; 21
    2074:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    2076:	71 83       	std	Z+1, r23	; 0x01
    2078:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    207a:	55 83       	std	Z+5, r21	; 0x05
    207c:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    207e:	33 83       	std	Z+3, r19	; 0x03
    2080:	22 83       	std	Z+2, r18	; 0x02



}
    2082:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    2084:	e2 e4       	ldi	r30, 0x42	; 66
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	f4 cf       	rjmp	.-24     	; 0x2072 <setRGBColor+0x1c>

0000208a <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    208a:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    208c:	86 30       	cpi	r24, 0x06	; 6
    208e:	91 05       	cpc	r25, r1
    2090:	24 f0       	brlt	.+8      	; 0x209a <getRGBColor+0x10>
		if(led == 6) {
    2092:	86 30       	cpi	r24, 0x06	; 6
    2094:	91 05       	cpc	r25, r1
    2096:	e1 f0       	breq	.+56     	; 0x20d0 <getRGBColor+0x46>
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	fc 01       	movw	r30, r24
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	e8 0f       	add	r30, r24
    20a2:	f9 1f       	adc	r31, r25
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    20a8:	e5 51       	subi	r30, 0x15	; 21
    20aa:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    20ac:	80 81       	ld	r24, Z
    20ae:	91 81       	ldd	r25, Z+1	; 0x01
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    20b6:	84 81       	ldd	r24, Z+4	; 0x04
    20b8:	95 81       	ldd	r25, Z+5	; 0x05
    20ba:	13 96       	adiw	r26, 0x03	; 3
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	15 96       	adiw	r26, 0x05	; 5
    20c8:	9c 93       	st	X, r25
    20ca:	8e 93       	st	-X, r24
    20cc:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    20ce:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    20d0:	e2 e4       	ldi	r30, 0x42	; 66
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	e9 cf       	rjmp	.-46     	; 0x20a8 <getRGBColor+0x1e>

000020d6 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    20d6:	43 e2       	ldi	r20, 0x23	; 35
    20d8:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    20da:	fa 01       	movw	r30, r20
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	e5 51       	subi	r30, 0x15	; 21
    20e2:	fd 4f       	sbci	r31, 0xFD	; 253
    20e4:	01 90       	ld	r0, Z+
    20e6:	f0 81       	ld	r31, Z
    20e8:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    20ea:	e2 95       	swap	r30
    20ec:	f2 95       	swap	r31
    20ee:	f0 7f       	andi	r31, 0xF0	; 240
    20f0:	fe 27       	eor	r31, r30
    20f2:	e0 7f       	andi	r30, 0xF0	; 240
    20f4:	fe 27       	eor	r31, r30
    20f6:	2c e0       	ldi	r18, 0x0C	; 12
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	08 c0       	rjmp	.+16     	; 0x210c <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    20fc:	8b b3       	in	r24, 0x1b	; 27
    20fe:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    2100:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    2102:	8b b3       	in	r24, 0x1b	; 27
    2104:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    2106:	21 15       	cp	r18, r1
    2108:	31 05       	cpc	r19, r1
    210a:	91 f0       	breq	.+36     	; 0x2130 <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    210c:	21 50       	subi	r18, 0x01	; 1
    210e:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    2110:	cf 01       	movw	r24, r30
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <displayColors+0x44>
    2116:	95 95       	asr	r25
    2118:	87 95       	ror	r24
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <displayColors+0x40>
    211e:	80 ff       	sbrs	r24, 0
    2120:	ed cf       	rjmp	.-38     	; 0x20fc <displayColors+0x26>
				PINHIGH(BDI);
    2122:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    2124:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    2126:	8b b3       	in	r24, 0x1b	; 27
    2128:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    212a:	21 15       	cp	r18, r1
    212c:	31 05       	cpc	r19, r1
    212e:	71 f7       	brne	.-36     	; 0x210c <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    2130:	42 31       	cpi	r20, 0x12	; 18
    2132:	51 05       	cpc	r21, r1
    2134:	41 f0       	breq	.+16     	; 0x2146 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    2136:	41 50       	subi	r20, 0x01	; 1
    2138:	50 40       	sbci	r21, 0x00	; 0
    213a:	57 ff       	sbrs	r21, 7
    213c:	ce cf       	rjmp	.-100    	; 0x20da <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    213e:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    2140:	8b b3       	in	r24, 0x1b	; 27
    2142:	1b ba       	out	0x1b, r1	; 27
}
    2144:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    2146:	8b b3       	in	r24, 0x1b	; 27
    2148:	1b ba       	out	0x1b, r1	; 27
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    214e:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    2150:	2b b3       	in	r18, 0x1b	; 27
    2152:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	88 34       	cpi	r24, 0x48	; 72
    2158:	91 05       	cpc	r25, r1
    215a:	c9 f7       	brne	.-14     	; 0x214e <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    215c:	41 e1       	ldi	r20, 0x11	; 17
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	bc cf       	rjmp	.-136    	; 0x20da <displayColors+0x4>

00002162 <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    2162:	10 92 ec 02 	sts	0x02EC, r1
    2166:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    216a:	10 92 f0 02 	sts	0x02F0, r1
    216e:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    2172:	10 92 ee 02 	sts	0x02EE, r1
    2176:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    217a:	10 92 f2 02 	sts	0x02F2, r1
    217e:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    2182:	10 92 f6 02 	sts	0x02F6, r1
    2186:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    218a:	10 92 f4 02 	sts	0x02F4, r1
    218e:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    2192:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    2196:	84 e6       	ldi	r24, 0x64	; 100
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	90 93 ec 02 	sts	0x02EC, r25
    219e:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    21a2:	10 92 f0 02 	sts	0x02F0, r1
    21a6:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    21aa:	10 92 ee 02 	sts	0x02EE, r1
    21ae:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    21b2:	90 93 f2 02 	sts	0x02F2, r25
    21b6:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    21ba:	10 92 f6 02 	sts	0x02F6, r1
    21be:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    21c2:	10 92 f4 02 	sts	0x02F4, r1
    21c6:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    21ca:	90 91 06 01 	lds	r25, 0x0106
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    21d2:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    21d4:	86 b7       	in	r24, 0x36	; 54
    21d6:	89 23       	and	r24, r25
    21d8:	e9 f3       	breq	.-6      	; 0x21d4 <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    21da:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    21dc:	2f 5f       	subi	r18, 0xFF	; 255
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    21e0:	22 33       	cpi	r18, 0x32	; 50
    21e2:	31 05       	cpc	r19, r1
    21e4:	b9 f7       	brne	.-18     	; 0x21d4 <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    21e6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    21ea:	10 92 ec 02 	sts	0x02EC, r1
    21ee:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    21f2:	10 92 f0 02 	sts	0x02F0, r1
    21f6:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    21fa:	10 92 ee 02 	sts	0x02EE, r1
    21fe:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    2202:	10 92 f2 02 	sts	0x02F2, r1
    2206:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    220a:	10 92 f6 02 	sts	0x02F6, r1
    220e:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    2212:	10 92 f4 02 	sts	0x02F4, r1
    2216:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    221a:	90 91 06 01 	lds	r25, 0x0106
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    2222:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    2224:	86 b7       	in	r24, 0x36	; 54
    2226:	89 23       	and	r24, r25
    2228:	e9 f3       	breq	.-6      	; 0x2224 <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    222a:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    222c:	2f 5f       	subi	r18, 0xFF	; 255
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    2230:	22 33       	cpi	r18, 0x32	; 50
    2232:	31 05       	cpc	r19, r1
    2234:	b9 f7       	brne	.-18     	; 0x2224 <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    2236:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <displayColors>
}
    223a:	08 95       	ret

0000223c <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    223c:	90 91 06 01 	lds	r25, 0x0106
    2240:	86 b7       	in	r24, 0x36	; 54
    2242:	89 23       	and	r24, r25
    2244:	e9 f3       	breq	.-6      	; 0x2240 <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    2246:	80 e1       	ldi	r24, 0x10	; 16
    2248:	86 bf       	out	0x36, r24	; 54
}
    224a:	08 95       	ret

0000224c <copy_data>:

void copy_data(char *dest, char *src, short length) {
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    2252:	14 16       	cp	r1, r20
    2254:	15 06       	cpc	r1, r21
    2256:	7c f4       	brge	.+30     	; 0x2276 <copy_data+0x2a>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    225c:	fe 01       	movw	r30, r28
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	db 01       	movw	r26, r22
    2264:	a2 0f       	add	r26, r18
    2266:	b3 1f       	adc	r27, r19
    2268:	8c 91       	ld	r24, X
    226a:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    226c:	2f 5f       	subi	r18, 0xFF	; 255
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	24 17       	cp	r18, r20
    2272:	35 07       	cpc	r19, r21
    2274:	9c f3       	brlt	.-26     	; 0x225c <copy_data+0x10>
		dest[i] = src[i];
	}
}
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    227c:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    227e:	14 16       	cp	r1, r20
    2280:	15 06       	cpc	r1, r21
    2282:	64 f4       	brge	.+24     	; 0x229c <copy_short_data+0x20>
    2284:	db 01       	movw	r26, r22
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    228a:	8d 91       	ld	r24, X+
    228c:	9d 91       	ld	r25, X+
    228e:	81 93       	st	Z+, r24
    2290:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    2292:	2f 5f       	subi	r18, 0xFF	; 255
    2294:	3f 4f       	sbci	r19, 0xFF	; 255
    2296:	24 17       	cp	r18, r20
    2298:	35 07       	cpc	r19, r21
    229a:	bc f3       	brlt	.-18     	; 0x228a <copy_short_data+0xe>
    229c:	08 95       	ret

0000229e <_fpadd_parts>:
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e5 e5       	ldi	r30, 0x55	; 85
    22a4:	f1 e1       	ldi	r31, 0x11	; 17
    22a6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__>
    22aa:	dc 01       	movw	r26, r24
    22ac:	2b 01       	movw	r4, r22
    22ae:	fa 01       	movw	r30, r20
    22b0:	9c 91       	ld	r25, X
    22b2:	92 30       	cpi	r25, 0x02	; 2
    22b4:	08 f4       	brcc	.+2      	; 0x22b8 <_fpadd_parts+0x1a>
    22b6:	39 c1       	rjmp	.+626    	; 0x252a <_fpadd_parts+0x28c>
    22b8:	eb 01       	movw	r28, r22
    22ba:	88 81       	ld	r24, Y
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	08 f4       	brcc	.+2      	; 0x22c2 <_fpadd_parts+0x24>
    22c0:	33 c1       	rjmp	.+614    	; 0x2528 <_fpadd_parts+0x28a>
    22c2:	94 30       	cpi	r25, 0x04	; 4
    22c4:	69 f4       	brne	.+26     	; 0x22e0 <_fpadd_parts+0x42>
    22c6:	84 30       	cpi	r24, 0x04	; 4
    22c8:	09 f0       	breq	.+2      	; 0x22cc <_fpadd_parts+0x2e>
    22ca:	2f c1       	rjmp	.+606    	; 0x252a <_fpadd_parts+0x28c>
    22cc:	11 96       	adiw	r26, 0x01	; 1
    22ce:	9c 91       	ld	r25, X
    22d0:	11 97       	sbiw	r26, 0x01	; 1
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	98 17       	cp	r25, r24
    22d6:	09 f4       	brne	.+2      	; 0x22da <_fpadd_parts+0x3c>
    22d8:	28 c1       	rjmp	.+592    	; 0x252a <_fpadd_parts+0x28c>
    22da:	a7 e0       	ldi	r26, 0x07	; 7
    22dc:	b1 e0       	ldi	r27, 0x01	; 1
    22de:	25 c1       	rjmp	.+586    	; 0x252a <_fpadd_parts+0x28c>
    22e0:	84 30       	cpi	r24, 0x04	; 4
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <_fpadd_parts+0x48>
    22e4:	21 c1       	rjmp	.+578    	; 0x2528 <_fpadd_parts+0x28a>
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	a9 f4       	brne	.+42     	; 0x2314 <_fpadd_parts+0x76>
    22ea:	92 30       	cpi	r25, 0x02	; 2
    22ec:	09 f0       	breq	.+2      	; 0x22f0 <_fpadd_parts+0x52>
    22ee:	1d c1       	rjmp	.+570    	; 0x252a <_fpadd_parts+0x28c>
    22f0:	9a 01       	movw	r18, r20
    22f2:	ad 01       	movw	r20, r26
    22f4:	88 e0       	ldi	r24, 0x08	; 8
    22f6:	ea 01       	movw	r28, r20
    22f8:	09 90       	ld	r0, Y+
    22fa:	ae 01       	movw	r20, r28
    22fc:	e9 01       	movw	r28, r18
    22fe:	09 92       	st	Y+, r0
    2300:	9e 01       	movw	r18, r28
    2302:	81 50       	subi	r24, 0x01	; 1
    2304:	c1 f7       	brne	.-16     	; 0x22f6 <_fpadd_parts+0x58>
    2306:	e2 01       	movw	r28, r4
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	11 96       	adiw	r26, 0x01	; 1
    230c:	9c 91       	ld	r25, X
    230e:	89 23       	and	r24, r25
    2310:	81 83       	std	Z+1, r24	; 0x01
    2312:	08 c1       	rjmp	.+528    	; 0x2524 <_fpadd_parts+0x286>
    2314:	92 30       	cpi	r25, 0x02	; 2
    2316:	09 f4       	brne	.+2      	; 0x231a <_fpadd_parts+0x7c>
    2318:	07 c1       	rjmp	.+526    	; 0x2528 <_fpadd_parts+0x28a>
    231a:	12 96       	adiw	r26, 0x02	; 2
    231c:	2d 90       	ld	r2, X+
    231e:	3c 90       	ld	r3, X
    2320:	13 97       	sbiw	r26, 0x03	; 3
    2322:	eb 01       	movw	r28, r22
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	14 96       	adiw	r26, 0x04	; 4
    232a:	ad 90       	ld	r10, X+
    232c:	bd 90       	ld	r11, X+
    232e:	cd 90       	ld	r12, X+
    2330:	dc 90       	ld	r13, X
    2332:	17 97       	sbiw	r26, 0x07	; 7
    2334:	ec 80       	ldd	r14, Y+4	; 0x04
    2336:	fd 80       	ldd	r15, Y+5	; 0x05
    2338:	0e 81       	ldd	r16, Y+6	; 0x06
    233a:	1f 81       	ldd	r17, Y+7	; 0x07
    233c:	91 01       	movw	r18, r2
    233e:	28 1b       	sub	r18, r24
    2340:	39 0b       	sbc	r19, r25
    2342:	b9 01       	movw	r22, r18
    2344:	37 ff       	sbrs	r19, 7
    2346:	04 c0       	rjmp	.+8      	; 0x2350 <_fpadd_parts+0xb2>
    2348:	66 27       	eor	r22, r22
    234a:	77 27       	eor	r23, r23
    234c:	62 1b       	sub	r22, r18
    234e:	73 0b       	sbc	r23, r19
    2350:	60 32       	cpi	r22, 0x20	; 32
    2352:	71 05       	cpc	r23, r1
    2354:	0c f0       	brlt	.+2      	; 0x2358 <_fpadd_parts+0xba>
    2356:	61 c0       	rjmp	.+194    	; 0x241a <_fpadd_parts+0x17c>
    2358:	12 16       	cp	r1, r18
    235a:	13 06       	cpc	r1, r19
    235c:	6c f5       	brge	.+90     	; 0x23b8 <_fpadd_parts+0x11a>
    235e:	37 01       	movw	r6, r14
    2360:	48 01       	movw	r8, r16
    2362:	06 2e       	mov	r0, r22
    2364:	04 c0       	rjmp	.+8      	; 0x236e <_fpadd_parts+0xd0>
    2366:	96 94       	lsr	r9
    2368:	87 94       	ror	r8
    236a:	77 94       	ror	r7
    236c:	67 94       	ror	r6
    236e:	0a 94       	dec	r0
    2370:	d2 f7       	brpl	.-12     	; 0x2366 <_fpadd_parts+0xc8>
    2372:	21 e0       	ldi	r18, 0x01	; 1
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	04 c0       	rjmp	.+8      	; 0x2384 <_fpadd_parts+0xe6>
    237c:	22 0f       	add	r18, r18
    237e:	33 1f       	adc	r19, r19
    2380:	44 1f       	adc	r20, r20
    2382:	55 1f       	adc	r21, r21
    2384:	6a 95       	dec	r22
    2386:	d2 f7       	brpl	.-12     	; 0x237c <_fpadd_parts+0xde>
    2388:	21 50       	subi	r18, 0x01	; 1
    238a:	30 40       	sbci	r19, 0x00	; 0
    238c:	40 40       	sbci	r20, 0x00	; 0
    238e:	50 40       	sbci	r21, 0x00	; 0
    2390:	2e 21       	and	r18, r14
    2392:	3f 21       	and	r19, r15
    2394:	40 23       	and	r20, r16
    2396:	51 23       	and	r21, r17
    2398:	21 15       	cp	r18, r1
    239a:	31 05       	cpc	r19, r1
    239c:	41 05       	cpc	r20, r1
    239e:	51 05       	cpc	r21, r1
    23a0:	21 f0       	breq	.+8      	; 0x23aa <_fpadd_parts+0x10c>
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	79 01       	movw	r14, r18
    23ac:	8a 01       	movw	r16, r20
    23ae:	e6 28       	or	r14, r6
    23b0:	f7 28       	or	r15, r7
    23b2:	08 29       	or	r16, r8
    23b4:	19 29       	or	r17, r9
    23b6:	3c c0       	rjmp	.+120    	; 0x2430 <_fpadd_parts+0x192>
    23b8:	23 2b       	or	r18, r19
    23ba:	d1 f1       	breq	.+116    	; 0x2430 <_fpadd_parts+0x192>
    23bc:	26 0e       	add	r2, r22
    23be:	37 1e       	adc	r3, r23
    23c0:	35 01       	movw	r6, r10
    23c2:	46 01       	movw	r8, r12
    23c4:	06 2e       	mov	r0, r22
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <_fpadd_parts+0x132>
    23c8:	96 94       	lsr	r9
    23ca:	87 94       	ror	r8
    23cc:	77 94       	ror	r7
    23ce:	67 94       	ror	r6
    23d0:	0a 94       	dec	r0
    23d2:	d2 f7       	brpl	.-12     	; 0x23c8 <_fpadd_parts+0x12a>
    23d4:	21 e0       	ldi	r18, 0x01	; 1
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <_fpadd_parts+0x148>
    23de:	22 0f       	add	r18, r18
    23e0:	33 1f       	adc	r19, r19
    23e2:	44 1f       	adc	r20, r20
    23e4:	55 1f       	adc	r21, r21
    23e6:	6a 95       	dec	r22
    23e8:	d2 f7       	brpl	.-12     	; 0x23de <_fpadd_parts+0x140>
    23ea:	21 50       	subi	r18, 0x01	; 1
    23ec:	30 40       	sbci	r19, 0x00	; 0
    23ee:	40 40       	sbci	r20, 0x00	; 0
    23f0:	50 40       	sbci	r21, 0x00	; 0
    23f2:	2a 21       	and	r18, r10
    23f4:	3b 21       	and	r19, r11
    23f6:	4c 21       	and	r20, r12
    23f8:	5d 21       	and	r21, r13
    23fa:	21 15       	cp	r18, r1
    23fc:	31 05       	cpc	r19, r1
    23fe:	41 05       	cpc	r20, r1
    2400:	51 05       	cpc	r21, r1
    2402:	21 f0       	breq	.+8      	; 0x240c <_fpadd_parts+0x16e>
    2404:	21 e0       	ldi	r18, 0x01	; 1
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	59 01       	movw	r10, r18
    240e:	6a 01       	movw	r12, r20
    2410:	a6 28       	or	r10, r6
    2412:	b7 28       	or	r11, r7
    2414:	c8 28       	or	r12, r8
    2416:	d9 28       	or	r13, r9
    2418:	0b c0       	rjmp	.+22     	; 0x2430 <_fpadd_parts+0x192>
    241a:	82 15       	cp	r24, r2
    241c:	93 05       	cpc	r25, r3
    241e:	2c f0       	brlt	.+10     	; 0x242a <_fpadd_parts+0x18c>
    2420:	1c 01       	movw	r2, r24
    2422:	aa 24       	eor	r10, r10
    2424:	bb 24       	eor	r11, r11
    2426:	65 01       	movw	r12, r10
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <_fpadd_parts+0x192>
    242a:	ee 24       	eor	r14, r14
    242c:	ff 24       	eor	r15, r15
    242e:	87 01       	movw	r16, r14
    2430:	11 96       	adiw	r26, 0x01	; 1
    2432:	9c 91       	ld	r25, X
    2434:	d2 01       	movw	r26, r4
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	8c 91       	ld	r24, X
    243a:	98 17       	cp	r25, r24
    243c:	09 f4       	brne	.+2      	; 0x2440 <_fpadd_parts+0x1a2>
    243e:	45 c0       	rjmp	.+138    	; 0x24ca <_fpadd_parts+0x22c>
    2440:	99 23       	and	r25, r25
    2442:	39 f0       	breq	.+14     	; 0x2452 <_fpadd_parts+0x1b4>
    2444:	a8 01       	movw	r20, r16
    2446:	97 01       	movw	r18, r14
    2448:	2a 19       	sub	r18, r10
    244a:	3b 09       	sbc	r19, r11
    244c:	4c 09       	sbc	r20, r12
    244e:	5d 09       	sbc	r21, r13
    2450:	06 c0       	rjmp	.+12     	; 0x245e <_fpadd_parts+0x1c0>
    2452:	a6 01       	movw	r20, r12
    2454:	95 01       	movw	r18, r10
    2456:	2e 19       	sub	r18, r14
    2458:	3f 09       	sbc	r19, r15
    245a:	40 0b       	sbc	r20, r16
    245c:	51 0b       	sbc	r21, r17
    245e:	57 fd       	sbrc	r21, 7
    2460:	08 c0       	rjmp	.+16     	; 0x2472 <_fpadd_parts+0x1d4>
    2462:	11 82       	std	Z+1, r1	; 0x01
    2464:	33 82       	std	Z+3, r3	; 0x03
    2466:	22 82       	std	Z+2, r2	; 0x02
    2468:	24 83       	std	Z+4, r18	; 0x04
    246a:	35 83       	std	Z+5, r19	; 0x05
    246c:	46 83       	std	Z+6, r20	; 0x06
    246e:	57 83       	std	Z+7, r21	; 0x07
    2470:	1d c0       	rjmp	.+58     	; 0x24ac <_fpadd_parts+0x20e>
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	81 83       	std	Z+1, r24	; 0x01
    2476:	33 82       	std	Z+3, r3	; 0x03
    2478:	22 82       	std	Z+2, r2	; 0x02
    247a:	88 27       	eor	r24, r24
    247c:	99 27       	eor	r25, r25
    247e:	dc 01       	movw	r26, r24
    2480:	82 1b       	sub	r24, r18
    2482:	93 0b       	sbc	r25, r19
    2484:	a4 0b       	sbc	r26, r20
    2486:	b5 0b       	sbc	r27, r21
    2488:	84 83       	std	Z+4, r24	; 0x04
    248a:	95 83       	std	Z+5, r25	; 0x05
    248c:	a6 83       	std	Z+6, r26	; 0x06
    248e:	b7 83       	std	Z+7, r27	; 0x07
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <_fpadd_parts+0x20e>
    2492:	22 0f       	add	r18, r18
    2494:	33 1f       	adc	r19, r19
    2496:	44 1f       	adc	r20, r20
    2498:	55 1f       	adc	r21, r21
    249a:	24 83       	std	Z+4, r18	; 0x04
    249c:	35 83       	std	Z+5, r19	; 0x05
    249e:	46 83       	std	Z+6, r20	; 0x06
    24a0:	57 83       	std	Z+7, r21	; 0x07
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	93 83       	std	Z+3, r25	; 0x03
    24aa:	82 83       	std	Z+2, r24	; 0x02
    24ac:	24 81       	ldd	r18, Z+4	; 0x04
    24ae:	35 81       	ldd	r19, Z+5	; 0x05
    24b0:	46 81       	ldd	r20, Z+6	; 0x06
    24b2:	57 81       	ldd	r21, Z+7	; 0x07
    24b4:	da 01       	movw	r26, r20
    24b6:	c9 01       	movw	r24, r18
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	a1 09       	sbc	r26, r1
    24bc:	b1 09       	sbc	r27, r1
    24be:	8f 5f       	subi	r24, 0xFF	; 255
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	af 4f       	sbci	r26, 0xFF	; 255
    24c4:	bf 43       	sbci	r27, 0x3F	; 63
    24c6:	28 f3       	brcs	.-54     	; 0x2492 <_fpadd_parts+0x1f4>
    24c8:	0b c0       	rjmp	.+22     	; 0x24e0 <_fpadd_parts+0x242>
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	33 82       	std	Z+3, r3	; 0x03
    24ce:	22 82       	std	Z+2, r2	; 0x02
    24d0:	ea 0c       	add	r14, r10
    24d2:	fb 1c       	adc	r15, r11
    24d4:	0c 1d       	adc	r16, r12
    24d6:	1d 1d       	adc	r17, r13
    24d8:	e4 82       	std	Z+4, r14	; 0x04
    24da:	f5 82       	std	Z+5, r15	; 0x05
    24dc:	06 83       	std	Z+6, r16	; 0x06
    24de:	17 83       	std	Z+7, r17	; 0x07
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	80 83       	st	Z, r24
    24e4:	24 81       	ldd	r18, Z+4	; 0x04
    24e6:	35 81       	ldd	r19, Z+5	; 0x05
    24e8:	46 81       	ldd	r20, Z+6	; 0x06
    24ea:	57 81       	ldd	r21, Z+7	; 0x07
    24ec:	57 ff       	sbrs	r21, 7
    24ee:	1a c0       	rjmp	.+52     	; 0x2524 <_fpadd_parts+0x286>
    24f0:	c9 01       	movw	r24, r18
    24f2:	aa 27       	eor	r26, r26
    24f4:	97 fd       	sbrc	r25, 7
    24f6:	a0 95       	com	r26
    24f8:	ba 2f       	mov	r27, r26
    24fa:	81 70       	andi	r24, 0x01	; 1
    24fc:	90 70       	andi	r25, 0x00	; 0
    24fe:	a0 70       	andi	r26, 0x00	; 0
    2500:	b0 70       	andi	r27, 0x00	; 0
    2502:	56 95       	lsr	r21
    2504:	47 95       	ror	r20
    2506:	37 95       	ror	r19
    2508:	27 95       	ror	r18
    250a:	82 2b       	or	r24, r18
    250c:	93 2b       	or	r25, r19
    250e:	a4 2b       	or	r26, r20
    2510:	b5 2b       	or	r27, r21
    2512:	84 83       	std	Z+4, r24	; 0x04
    2514:	95 83       	std	Z+5, r25	; 0x05
    2516:	a6 83       	std	Z+6, r26	; 0x06
    2518:	b7 83       	std	Z+7, r27	; 0x07
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	93 83       	std	Z+3, r25	; 0x03
    2522:	82 83       	std	Z+2, r24	; 0x02
    2524:	df 01       	movw	r26, r30
    2526:	01 c0       	rjmp	.+2      	; 0x252a <_fpadd_parts+0x28c>
    2528:	d2 01       	movw	r26, r4
    252a:	cd 01       	movw	r24, r26
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	e2 e1       	ldi	r30, 0x12	; 18
    2532:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__>

00002536 <__subsf3>:
    2536:	a0 e2       	ldi	r26, 0x20	; 32
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e1 ea       	ldi	r30, 0xA1	; 161
    253c:	f2 e1       	ldi	r31, 0x12	; 18
    253e:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__prologue_saves__+0x18>
    2542:	69 83       	std	Y+1, r22	; 0x01
    2544:	7a 83       	std	Y+2, r23	; 0x02
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	2d 83       	std	Y+5, r18	; 0x05
    254c:	3e 83       	std	Y+6, r19	; 0x06
    254e:	4f 83       	std	Y+7, r20	; 0x07
    2550:	58 87       	std	Y+8, r21	; 0x08
    2552:	e9 e0       	ldi	r30, 0x09	; 9
    2554:	ee 2e       	mov	r14, r30
    2556:	f1 2c       	mov	r15, r1
    2558:	ec 0e       	add	r14, r28
    255a:	fd 1e       	adc	r15, r29
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	b7 01       	movw	r22, r14
    2562:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    2566:	8e 01       	movw	r16, r28
    2568:	0f 5e       	subi	r16, 0xEF	; 239
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	ce 01       	movw	r24, r28
    256e:	05 96       	adiw	r24, 0x05	; 5
    2570:	b8 01       	movw	r22, r16
    2572:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    2576:	8a 89       	ldd	r24, Y+18	; 0x12
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	89 27       	eor	r24, r25
    257c:	8a 8b       	std	Y+18, r24	; 0x12
    257e:	c7 01       	movw	r24, r14
    2580:	b8 01       	movw	r22, r16
    2582:	ae 01       	movw	r20, r28
    2584:	47 5e       	subi	r20, 0xE7	; 231
    2586:	5f 4f       	sbci	r21, 0xFF	; 255
    2588:	0e 94 4f 11 	call	0x229e	; 0x229e <_fpadd_parts>
    258c:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__pack_f>
    2590:	a0 96       	adiw	r28, 0x20	; 32
    2592:	e6 e0       	ldi	r30, 0x06	; 6
    2594:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__epilogue_restores__+0x18>

00002598 <__addsf3>:
    2598:	a0 e2       	ldi	r26, 0x20	; 32
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e2 ed       	ldi	r30, 0xD2	; 210
    259e:	f2 e1       	ldi	r31, 0x12	; 18
    25a0:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__prologue_saves__+0x18>
    25a4:	69 83       	std	Y+1, r22	; 0x01
    25a6:	7a 83       	std	Y+2, r23	; 0x02
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	2d 83       	std	Y+5, r18	; 0x05
    25ae:	3e 83       	std	Y+6, r19	; 0x06
    25b0:	4f 83       	std	Y+7, r20	; 0x07
    25b2:	58 87       	std	Y+8, r21	; 0x08
    25b4:	f9 e0       	ldi	r31, 0x09	; 9
    25b6:	ef 2e       	mov	r14, r31
    25b8:	f1 2c       	mov	r15, r1
    25ba:	ec 0e       	add	r14, r28
    25bc:	fd 1e       	adc	r15, r29
    25be:	ce 01       	movw	r24, r28
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	b7 01       	movw	r22, r14
    25c4:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    25c8:	8e 01       	movw	r16, r28
    25ca:	0f 5e       	subi	r16, 0xEF	; 239
    25cc:	1f 4f       	sbci	r17, 0xFF	; 255
    25ce:	ce 01       	movw	r24, r28
    25d0:	05 96       	adiw	r24, 0x05	; 5
    25d2:	b8 01       	movw	r22, r16
    25d4:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    25d8:	c7 01       	movw	r24, r14
    25da:	b8 01       	movw	r22, r16
    25dc:	ae 01       	movw	r20, r28
    25de:	47 5e       	subi	r20, 0xE7	; 231
    25e0:	5f 4f       	sbci	r21, 0xFF	; 255
    25e2:	0e 94 4f 11 	call	0x229e	; 0x229e <_fpadd_parts>
    25e6:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__pack_f>
    25ea:	a0 96       	adiw	r28, 0x20	; 32
    25ec:	e6 e0       	ldi	r30, 0x06	; 6
    25ee:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__epilogue_restores__+0x18>

000025f2 <__mulsf3>:
    25f2:	a0 e2       	ldi	r26, 0x20	; 32
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	ef ef       	ldi	r30, 0xFF	; 255
    25f8:	f2 e1       	ldi	r31, 0x12	; 18
    25fa:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__>
    25fe:	69 83       	std	Y+1, r22	; 0x01
    2600:	7a 83       	std	Y+2, r23	; 0x02
    2602:	8b 83       	std	Y+3, r24	; 0x03
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	2d 83       	std	Y+5, r18	; 0x05
    2608:	3e 83       	std	Y+6, r19	; 0x06
    260a:	4f 83       	std	Y+7, r20	; 0x07
    260c:	58 87       	std	Y+8, r21	; 0x08
    260e:	ce 01       	movw	r24, r28
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	be 01       	movw	r22, r28
    2614:	67 5f       	subi	r22, 0xF7	; 247
    2616:	7f 4f       	sbci	r23, 0xFF	; 255
    2618:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    261c:	ce 01       	movw	r24, r28
    261e:	05 96       	adiw	r24, 0x05	; 5
    2620:	be 01       	movw	r22, r28
    2622:	6f 5e       	subi	r22, 0xEF	; 239
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    262a:	99 85       	ldd	r25, Y+9	; 0x09
    262c:	92 30       	cpi	r25, 0x02	; 2
    262e:	88 f0       	brcs	.+34     	; 0x2652 <__mulsf3+0x60>
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	82 30       	cpi	r24, 0x02	; 2
    2634:	c8 f0       	brcs	.+50     	; 0x2668 <__mulsf3+0x76>
    2636:	94 30       	cpi	r25, 0x04	; 4
    2638:	19 f4       	brne	.+6      	; 0x2640 <__mulsf3+0x4e>
    263a:	82 30       	cpi	r24, 0x02	; 2
    263c:	51 f4       	brne	.+20     	; 0x2652 <__mulsf3+0x60>
    263e:	04 c0       	rjmp	.+8      	; 0x2648 <__mulsf3+0x56>
    2640:	84 30       	cpi	r24, 0x04	; 4
    2642:	29 f4       	brne	.+10     	; 0x264e <__mulsf3+0x5c>
    2644:	92 30       	cpi	r25, 0x02	; 2
    2646:	81 f4       	brne	.+32     	; 0x2668 <__mulsf3+0x76>
    2648:	87 e0       	ldi	r24, 0x07	; 7
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	c6 c0       	rjmp	.+396    	; 0x27da <__mulsf3+0x1e8>
    264e:	92 30       	cpi	r25, 0x02	; 2
    2650:	49 f4       	brne	.+18     	; 0x2664 <__mulsf3+0x72>
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	8a 89       	ldd	r24, Y+18	; 0x12
    2658:	98 13       	cpse	r25, r24
    265a:	21 e0       	ldi	r18, 0x01	; 1
    265c:	2a 87       	std	Y+10, r18	; 0x0a
    265e:	ce 01       	movw	r24, r28
    2660:	09 96       	adiw	r24, 0x09	; 9
    2662:	bb c0       	rjmp	.+374    	; 0x27da <__mulsf3+0x1e8>
    2664:	82 30       	cpi	r24, 0x02	; 2
    2666:	49 f4       	brne	.+18     	; 0x267a <__mulsf3+0x88>
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	8a 89       	ldd	r24, Y+18	; 0x12
    266e:	98 13       	cpse	r25, r24
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	2a 8b       	std	Y+18, r18	; 0x12
    2674:	ce 01       	movw	r24, r28
    2676:	41 96       	adiw	r24, 0x11	; 17
    2678:	b0 c0       	rjmp	.+352    	; 0x27da <__mulsf3+0x1e8>
    267a:	2d 84       	ldd	r2, Y+13	; 0x0d
    267c:	3e 84       	ldd	r3, Y+14	; 0x0e
    267e:	4f 84       	ldd	r4, Y+15	; 0x0f
    2680:	58 88       	ldd	r5, Y+16	; 0x10
    2682:	6d 88       	ldd	r6, Y+21	; 0x15
    2684:	7e 88       	ldd	r7, Y+22	; 0x16
    2686:	8f 88       	ldd	r8, Y+23	; 0x17
    2688:	98 8c       	ldd	r9, Y+24	; 0x18
    268a:	ee 24       	eor	r14, r14
    268c:	ff 24       	eor	r15, r15
    268e:	87 01       	movw	r16, r14
    2690:	aa 24       	eor	r10, r10
    2692:	bb 24       	eor	r11, r11
    2694:	65 01       	movw	r12, r10
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	e0 e0       	ldi	r30, 0x00	; 0
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	c1 01       	movw	r24, r2
    26a4:	81 70       	andi	r24, 0x01	; 1
    26a6:	90 70       	andi	r25, 0x00	; 0
    26a8:	89 2b       	or	r24, r25
    26aa:	e9 f0       	breq	.+58     	; 0x26e6 <__mulsf3+0xf4>
    26ac:	e6 0c       	add	r14, r6
    26ae:	f7 1c       	adc	r15, r7
    26b0:	08 1d       	adc	r16, r8
    26b2:	19 1d       	adc	r17, r9
    26b4:	9a 01       	movw	r18, r20
    26b6:	ab 01       	movw	r20, r22
    26b8:	2a 0d       	add	r18, r10
    26ba:	3b 1d       	adc	r19, r11
    26bc:	4c 1d       	adc	r20, r12
    26be:	5d 1d       	adc	r21, r13
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	a0 e0       	ldi	r26, 0x00	; 0
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e6 14       	cp	r14, r6
    26ca:	f7 04       	cpc	r15, r7
    26cc:	08 05       	cpc	r16, r8
    26ce:	19 05       	cpc	r17, r9
    26d0:	20 f4       	brcc	.+8      	; 0x26da <__mulsf3+0xe8>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ba 01       	movw	r22, r20
    26dc:	a9 01       	movw	r20, r18
    26de:	48 0f       	add	r20, r24
    26e0:	59 1f       	adc	r21, r25
    26e2:	6a 1f       	adc	r22, r26
    26e4:	7b 1f       	adc	r23, r27
    26e6:	aa 0c       	add	r10, r10
    26e8:	bb 1c       	adc	r11, r11
    26ea:	cc 1c       	adc	r12, r12
    26ec:	dd 1c       	adc	r13, r13
    26ee:	97 fe       	sbrs	r9, 7
    26f0:	08 c0       	rjmp	.+16     	; 0x2702 <__mulsf3+0x110>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e0       	ldi	r26, 0x00	; 0
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	a8 2a       	or	r10, r24
    26fc:	b9 2a       	or	r11, r25
    26fe:	ca 2a       	or	r12, r26
    2700:	db 2a       	or	r13, r27
    2702:	31 96       	adiw	r30, 0x01	; 1
    2704:	e0 32       	cpi	r30, 0x20	; 32
    2706:	f1 05       	cpc	r31, r1
    2708:	49 f0       	breq	.+18     	; 0x271c <__mulsf3+0x12a>
    270a:	66 0c       	add	r6, r6
    270c:	77 1c       	adc	r7, r7
    270e:	88 1c       	adc	r8, r8
    2710:	99 1c       	adc	r9, r9
    2712:	56 94       	lsr	r5
    2714:	47 94       	ror	r4
    2716:	37 94       	ror	r3
    2718:	27 94       	ror	r2
    271a:	c3 cf       	rjmp	.-122    	; 0x26a2 <__mulsf3+0xb0>
    271c:	fa 85       	ldd	r31, Y+10	; 0x0a
    271e:	ea 89       	ldd	r30, Y+18	; 0x12
    2720:	2b 89       	ldd	r18, Y+19	; 0x13
    2722:	3c 89       	ldd	r19, Y+20	; 0x14
    2724:	8b 85       	ldd	r24, Y+11	; 0x0b
    2726:	9c 85       	ldd	r25, Y+12	; 0x0c
    2728:	28 0f       	add	r18, r24
    272a:	39 1f       	adc	r19, r25
    272c:	2e 5f       	subi	r18, 0xFE	; 254
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	17 c0       	rjmp	.+46     	; 0x2760 <__mulsf3+0x16e>
    2732:	ca 01       	movw	r24, r20
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	90 70       	andi	r25, 0x00	; 0
    2738:	89 2b       	or	r24, r25
    273a:	61 f0       	breq	.+24     	; 0x2754 <__mulsf3+0x162>
    273c:	16 95       	lsr	r17
    273e:	07 95       	ror	r16
    2740:	f7 94       	ror	r15
    2742:	e7 94       	ror	r14
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 e0       	ldi	r26, 0x00	; 0
    274a:	b0 e8       	ldi	r27, 0x80	; 128
    274c:	e8 2a       	or	r14, r24
    274e:	f9 2a       	or	r15, r25
    2750:	0a 2b       	or	r16, r26
    2752:	1b 2b       	or	r17, r27
    2754:	76 95       	lsr	r23
    2756:	67 95       	ror	r22
    2758:	57 95       	ror	r21
    275a:	47 95       	ror	r20
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	77 fd       	sbrc	r23, 7
    2762:	e7 cf       	rjmp	.-50     	; 0x2732 <__mulsf3+0x140>
    2764:	0c c0       	rjmp	.+24     	; 0x277e <__mulsf3+0x18c>
    2766:	44 0f       	add	r20, r20
    2768:	55 1f       	adc	r21, r21
    276a:	66 1f       	adc	r22, r22
    276c:	77 1f       	adc	r23, r23
    276e:	17 fd       	sbrc	r17, 7
    2770:	41 60       	ori	r20, 0x01	; 1
    2772:	ee 0c       	add	r14, r14
    2774:	ff 1c       	adc	r15, r15
    2776:	00 1f       	adc	r16, r16
    2778:	11 1f       	adc	r17, r17
    277a:	21 50       	subi	r18, 0x01	; 1
    277c:	30 40       	sbci	r19, 0x00	; 0
    277e:	40 30       	cpi	r20, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	59 07       	cpc	r21, r25
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	69 07       	cpc	r22, r25
    2788:	90 e4       	ldi	r25, 0x40	; 64
    278a:	79 07       	cpc	r23, r25
    278c:	60 f3       	brcs	.-40     	; 0x2766 <__mulsf3+0x174>
    278e:	2b 8f       	std	Y+27, r18	; 0x1b
    2790:	3c 8f       	std	Y+28, r19	; 0x1c
    2792:	db 01       	movw	r26, r22
    2794:	ca 01       	movw	r24, r20
    2796:	8f 77       	andi	r24, 0x7F	; 127
    2798:	90 70       	andi	r25, 0x00	; 0
    279a:	a0 70       	andi	r26, 0x00	; 0
    279c:	b0 70       	andi	r27, 0x00	; 0
    279e:	80 34       	cpi	r24, 0x40	; 64
    27a0:	91 05       	cpc	r25, r1
    27a2:	a1 05       	cpc	r26, r1
    27a4:	b1 05       	cpc	r27, r1
    27a6:	61 f4       	brne	.+24     	; 0x27c0 <__mulsf3+0x1ce>
    27a8:	47 fd       	sbrc	r20, 7
    27aa:	0a c0       	rjmp	.+20     	; 0x27c0 <__mulsf3+0x1ce>
    27ac:	e1 14       	cp	r14, r1
    27ae:	f1 04       	cpc	r15, r1
    27b0:	01 05       	cpc	r16, r1
    27b2:	11 05       	cpc	r17, r1
    27b4:	29 f0       	breq	.+10     	; 0x27c0 <__mulsf3+0x1ce>
    27b6:	40 5c       	subi	r20, 0xC0	; 192
    27b8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ba:	6f 4f       	sbci	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	40 78       	andi	r20, 0x80	; 128
    27c0:	1a 8e       	std	Y+26, r1	; 0x1a
    27c2:	fe 17       	cp	r31, r30
    27c4:	11 f0       	breq	.+4      	; 0x27ca <__mulsf3+0x1d8>
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	8a 8f       	std	Y+26, r24	; 0x1a
    27ca:	4d 8f       	std	Y+29, r20	; 0x1d
    27cc:	5e 8f       	std	Y+30, r21	; 0x1e
    27ce:	6f 8f       	std	Y+31, r22	; 0x1f
    27d0:	78 a3       	std	Y+32, r23	; 0x20
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	89 8f       	std	Y+25, r24	; 0x19
    27d6:	ce 01       	movw	r24, r28
    27d8:	49 96       	adiw	r24, 0x19	; 25
    27da:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__pack_f>
    27de:	a0 96       	adiw	r28, 0x20	; 32
    27e0:	e2 e1       	ldi	r30, 0x12	; 18
    27e2:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__>

000027e6 <__divsf3>:
    27e6:	a8 e1       	ldi	r26, 0x18	; 24
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e9 ef       	ldi	r30, 0xF9	; 249
    27ec:	f3 e1       	ldi	r31, 0x13	; 19
    27ee:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__prologue_saves__+0x10>
    27f2:	69 83       	std	Y+1, r22	; 0x01
    27f4:	7a 83       	std	Y+2, r23	; 0x02
    27f6:	8b 83       	std	Y+3, r24	; 0x03
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	2d 83       	std	Y+5, r18	; 0x05
    27fc:	3e 83       	std	Y+6, r19	; 0x06
    27fe:	4f 83       	std	Y+7, r20	; 0x07
    2800:	58 87       	std	Y+8, r21	; 0x08
    2802:	b9 e0       	ldi	r27, 0x09	; 9
    2804:	eb 2e       	mov	r14, r27
    2806:	f1 2c       	mov	r15, r1
    2808:	ec 0e       	add	r14, r28
    280a:	fd 1e       	adc	r15, r29
    280c:	ce 01       	movw	r24, r28
    280e:	01 96       	adiw	r24, 0x01	; 1
    2810:	b7 01       	movw	r22, r14
    2812:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    2816:	8e 01       	movw	r16, r28
    2818:	0f 5e       	subi	r16, 0xEF	; 239
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	ce 01       	movw	r24, r28
    281e:	05 96       	adiw	r24, 0x05	; 5
    2820:	b8 01       	movw	r22, r16
    2822:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    2826:	29 85       	ldd	r18, Y+9	; 0x09
    2828:	22 30       	cpi	r18, 0x02	; 2
    282a:	08 f4       	brcc	.+2      	; 0x282e <__divsf3+0x48>
    282c:	7e c0       	rjmp	.+252    	; 0x292a <__divsf3+0x144>
    282e:	39 89       	ldd	r19, Y+17	; 0x11
    2830:	32 30       	cpi	r19, 0x02	; 2
    2832:	10 f4       	brcc	.+4      	; 0x2838 <__divsf3+0x52>
    2834:	b8 01       	movw	r22, r16
    2836:	7c c0       	rjmp	.+248    	; 0x2930 <__divsf3+0x14a>
    2838:	8a 85       	ldd	r24, Y+10	; 0x0a
    283a:	9a 89       	ldd	r25, Y+18	; 0x12
    283c:	89 27       	eor	r24, r25
    283e:	8a 87       	std	Y+10, r24	; 0x0a
    2840:	24 30       	cpi	r18, 0x04	; 4
    2842:	11 f0       	breq	.+4      	; 0x2848 <__divsf3+0x62>
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 f4       	brne	.+12     	; 0x2854 <__divsf3+0x6e>
    2848:	23 17       	cp	r18, r19
    284a:	09 f0       	breq	.+2      	; 0x284e <__divsf3+0x68>
    284c:	6e c0       	rjmp	.+220    	; 0x292a <__divsf3+0x144>
    284e:	67 e0       	ldi	r22, 0x07	; 7
    2850:	71 e0       	ldi	r23, 0x01	; 1
    2852:	6e c0       	rjmp	.+220    	; 0x2930 <__divsf3+0x14a>
    2854:	34 30       	cpi	r19, 0x04	; 4
    2856:	39 f4       	brne	.+14     	; 0x2866 <__divsf3+0x80>
    2858:	1d 86       	std	Y+13, r1	; 0x0d
    285a:	1e 86       	std	Y+14, r1	; 0x0e
    285c:	1f 86       	std	Y+15, r1	; 0x0f
    285e:	18 8a       	std	Y+16, r1	; 0x10
    2860:	1c 86       	std	Y+12, r1	; 0x0c
    2862:	1b 86       	std	Y+11, r1	; 0x0b
    2864:	04 c0       	rjmp	.+8      	; 0x286e <__divsf3+0x88>
    2866:	32 30       	cpi	r19, 0x02	; 2
    2868:	21 f4       	brne	.+8      	; 0x2872 <__divsf3+0x8c>
    286a:	84 e0       	ldi	r24, 0x04	; 4
    286c:	89 87       	std	Y+9, r24	; 0x09
    286e:	b7 01       	movw	r22, r14
    2870:	5f c0       	rjmp	.+190    	; 0x2930 <__divsf3+0x14a>
    2872:	2b 85       	ldd	r18, Y+11	; 0x0b
    2874:	3c 85       	ldd	r19, Y+12	; 0x0c
    2876:	8b 89       	ldd	r24, Y+19	; 0x13
    2878:	9c 89       	ldd	r25, Y+20	; 0x14
    287a:	28 1b       	sub	r18, r24
    287c:	39 0b       	sbc	r19, r25
    287e:	3c 87       	std	Y+12, r19	; 0x0c
    2880:	2b 87       	std	Y+11, r18	; 0x0b
    2882:	ed 84       	ldd	r14, Y+13	; 0x0d
    2884:	fe 84       	ldd	r15, Y+14	; 0x0e
    2886:	0f 85       	ldd	r16, Y+15	; 0x0f
    2888:	18 89       	ldd	r17, Y+16	; 0x10
    288a:	ad 88       	ldd	r10, Y+21	; 0x15
    288c:	be 88       	ldd	r11, Y+22	; 0x16
    288e:	cf 88       	ldd	r12, Y+23	; 0x17
    2890:	d8 8c       	ldd	r13, Y+24	; 0x18
    2892:	ea 14       	cp	r14, r10
    2894:	fb 04       	cpc	r15, r11
    2896:	0c 05       	cpc	r16, r12
    2898:	1d 05       	cpc	r17, r13
    289a:	40 f4       	brcc	.+16     	; 0x28ac <__divsf3+0xc6>
    289c:	ee 0c       	add	r14, r14
    289e:	ff 1c       	adc	r15, r15
    28a0:	00 1f       	adc	r16, r16
    28a2:	11 1f       	adc	r17, r17
    28a4:	21 50       	subi	r18, 0x01	; 1
    28a6:	30 40       	sbci	r19, 0x00	; 0
    28a8:	3c 87       	std	Y+12, r19	; 0x0c
    28aa:	2b 87       	std	Y+11, r18	; 0x0b
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 e0       	ldi	r26, 0x00	; 0
    28ba:	b0 e4       	ldi	r27, 0x40	; 64
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	ea 14       	cp	r14, r10
    28c2:	fb 04       	cpc	r15, r11
    28c4:	0c 05       	cpc	r16, r12
    28c6:	1d 05       	cpc	r17, r13
    28c8:	40 f0       	brcs	.+16     	; 0x28da <__divsf3+0xf4>
    28ca:	28 2b       	or	r18, r24
    28cc:	39 2b       	or	r19, r25
    28ce:	4a 2b       	or	r20, r26
    28d0:	5b 2b       	or	r21, r27
    28d2:	ea 18       	sub	r14, r10
    28d4:	fb 08       	sbc	r15, r11
    28d6:	0c 09       	sbc	r16, r12
    28d8:	1d 09       	sbc	r17, r13
    28da:	b6 95       	lsr	r27
    28dc:	a7 95       	ror	r26
    28de:	97 95       	ror	r25
    28e0:	87 95       	ror	r24
    28e2:	ee 0c       	add	r14, r14
    28e4:	ff 1c       	adc	r15, r15
    28e6:	00 1f       	adc	r16, r16
    28e8:	11 1f       	adc	r17, r17
    28ea:	6f 5f       	subi	r22, 0xFF	; 255
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	6f 31       	cpi	r22, 0x1F	; 31
    28f0:	71 05       	cpc	r23, r1
    28f2:	31 f7       	brne	.-52     	; 0x28c0 <__divsf3+0xda>
    28f4:	da 01       	movw	r26, r20
    28f6:	c9 01       	movw	r24, r18
    28f8:	8f 77       	andi	r24, 0x7F	; 127
    28fa:	90 70       	andi	r25, 0x00	; 0
    28fc:	a0 70       	andi	r26, 0x00	; 0
    28fe:	b0 70       	andi	r27, 0x00	; 0
    2900:	80 34       	cpi	r24, 0x40	; 64
    2902:	91 05       	cpc	r25, r1
    2904:	a1 05       	cpc	r26, r1
    2906:	b1 05       	cpc	r27, r1
    2908:	61 f4       	brne	.+24     	; 0x2922 <__divsf3+0x13c>
    290a:	27 fd       	sbrc	r18, 7
    290c:	0a c0       	rjmp	.+20     	; 0x2922 <__divsf3+0x13c>
    290e:	e1 14       	cp	r14, r1
    2910:	f1 04       	cpc	r15, r1
    2912:	01 05       	cpc	r16, r1
    2914:	11 05       	cpc	r17, r1
    2916:	29 f0       	breq	.+10     	; 0x2922 <__divsf3+0x13c>
    2918:	20 5c       	subi	r18, 0xC0	; 192
    291a:	3f 4f       	sbci	r19, 0xFF	; 255
    291c:	4f 4f       	sbci	r20, 0xFF	; 255
    291e:	5f 4f       	sbci	r21, 0xFF	; 255
    2920:	20 78       	andi	r18, 0x80	; 128
    2922:	2d 87       	std	Y+13, r18	; 0x0d
    2924:	3e 87       	std	Y+14, r19	; 0x0e
    2926:	4f 87       	std	Y+15, r20	; 0x0f
    2928:	58 8b       	std	Y+16, r21	; 0x10
    292a:	be 01       	movw	r22, r28
    292c:	67 5f       	subi	r22, 0xF7	; 247
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	cb 01       	movw	r24, r22
    2932:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__pack_f>
    2936:	68 96       	adiw	r28, 0x18	; 24
    2938:	ea e0       	ldi	r30, 0x0A	; 10
    293a:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__epilogue_restores__+0x10>

0000293e <__floatsisf>:
    293e:	a8 e0       	ldi	r26, 0x08	; 8
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e5 ea       	ldi	r30, 0xA5	; 165
    2944:	f4 e1       	ldi	r31, 0x14	; 20
    2946:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__+0x12>
    294a:	9b 01       	movw	r18, r22
    294c:	ac 01       	movw	r20, r24
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	da 01       	movw	r26, r20
    2954:	c9 01       	movw	r24, r18
    2956:	88 27       	eor	r24, r24
    2958:	b7 fd       	sbrc	r27, 7
    295a:	83 95       	inc	r24
    295c:	99 27       	eor	r25, r25
    295e:	aa 27       	eor	r26, r26
    2960:	bb 27       	eor	r27, r27
    2962:	b8 2e       	mov	r11, r24
    2964:	21 15       	cp	r18, r1
    2966:	31 05       	cpc	r19, r1
    2968:	41 05       	cpc	r20, r1
    296a:	51 05       	cpc	r21, r1
    296c:	19 f4       	brne	.+6      	; 0x2974 <__floatsisf+0x36>
    296e:	82 e0       	ldi	r24, 0x02	; 2
    2970:	89 83       	std	Y+1, r24	; 0x01
    2972:	3a c0       	rjmp	.+116    	; 0x29e8 <__floatsisf+0xaa>
    2974:	88 23       	and	r24, r24
    2976:	a9 f0       	breq	.+42     	; 0x29a2 <__floatsisf+0x64>
    2978:	20 30       	cpi	r18, 0x00	; 0
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	38 07       	cpc	r19, r24
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	48 07       	cpc	r20, r24
    2982:	80 e8       	ldi	r24, 0x80	; 128
    2984:	58 07       	cpc	r21, r24
    2986:	29 f4       	brne	.+10     	; 0x2992 <__floatsisf+0x54>
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	9f ec       	ldi	r25, 0xCF	; 207
    2990:	30 c0       	rjmp	.+96     	; 0x29f2 <__floatsisf+0xb4>
    2992:	ee 24       	eor	r14, r14
    2994:	ff 24       	eor	r15, r15
    2996:	87 01       	movw	r16, r14
    2998:	e2 1a       	sub	r14, r18
    299a:	f3 0a       	sbc	r15, r19
    299c:	04 0b       	sbc	r16, r20
    299e:	15 0b       	sbc	r17, r21
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <__floatsisf+0x68>
    29a2:	79 01       	movw	r14, r18
    29a4:	8a 01       	movw	r16, r20
    29a6:	8e e1       	ldi	r24, 0x1E	; 30
    29a8:	c8 2e       	mov	r12, r24
    29aa:	d1 2c       	mov	r13, r1
    29ac:	dc 82       	std	Y+4, r13	; 0x04
    29ae:	cb 82       	std	Y+3, r12	; 0x03
    29b0:	ed 82       	std	Y+5, r14	; 0x05
    29b2:	fe 82       	std	Y+6, r15	; 0x06
    29b4:	0f 83       	std	Y+7, r16	; 0x07
    29b6:	18 87       	std	Y+8, r17	; 0x08
    29b8:	c8 01       	movw	r24, r16
    29ba:	b7 01       	movw	r22, r14
    29bc:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__clzsi2>
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	18 16       	cp	r1, r24
    29c4:	19 06       	cpc	r1, r25
    29c6:	84 f4       	brge	.+32     	; 0x29e8 <__floatsisf+0xaa>
    29c8:	08 2e       	mov	r0, r24
    29ca:	04 c0       	rjmp	.+8      	; 0x29d4 <__floatsisf+0x96>
    29cc:	ee 0c       	add	r14, r14
    29ce:	ff 1c       	adc	r15, r15
    29d0:	00 1f       	adc	r16, r16
    29d2:	11 1f       	adc	r17, r17
    29d4:	0a 94       	dec	r0
    29d6:	d2 f7       	brpl	.-12     	; 0x29cc <__floatsisf+0x8e>
    29d8:	ed 82       	std	Y+5, r14	; 0x05
    29da:	fe 82       	std	Y+6, r15	; 0x06
    29dc:	0f 83       	std	Y+7, r16	; 0x07
    29de:	18 87       	std	Y+8, r17	; 0x08
    29e0:	c8 1a       	sub	r12, r24
    29e2:	d9 0a       	sbc	r13, r25
    29e4:	dc 82       	std	Y+4, r13	; 0x04
    29e6:	cb 82       	std	Y+3, r12	; 0x03
    29e8:	ba 82       	std	Y+2, r11	; 0x02
    29ea:	ce 01       	movw	r24, r28
    29ec:	01 96       	adiw	r24, 0x01	; 1
    29ee:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__pack_f>
    29f2:	28 96       	adiw	r28, 0x08	; 8
    29f4:	e9 e0       	ldi	r30, 0x09	; 9
    29f6:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__+0x12>

000029fa <__fixsfsi>:
    29fa:	ac e0       	ldi	r26, 0x0C	; 12
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e0       	ldi	r30, 0x03	; 3
    2a00:	f5 e1       	ldi	r31, 0x15	; 21
    2a02:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x20>
    2a06:	69 83       	std	Y+1, r22	; 0x01
    2a08:	7a 83       	std	Y+2, r23	; 0x02
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	ce 01       	movw	r24, r28
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	be 01       	movw	r22, r28
    2a14:	6b 5f       	subi	r22, 0xFB	; 251
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	0e 94 75 16 	call	0x2cea	; 0x2cea <__unpack_f>
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	82 30       	cpi	r24, 0x02	; 2
    2a20:	61 f1       	breq	.+88     	; 0x2a7a <__fixsfsi+0x80>
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	50 f1       	brcs	.+84     	; 0x2a7a <__fixsfsi+0x80>
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	21 f4       	brne	.+8      	; 0x2a32 <__fixsfsi+0x38>
    2a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2c:	88 23       	and	r24, r24
    2a2e:	51 f1       	breq	.+84     	; 0x2a84 <__fixsfsi+0x8a>
    2a30:	2e c0       	rjmp	.+92     	; 0x2a8e <__fixsfsi+0x94>
    2a32:	2f 81       	ldd	r18, Y+7	; 0x07
    2a34:	38 85       	ldd	r19, Y+8	; 0x08
    2a36:	37 fd       	sbrc	r19, 7
    2a38:	20 c0       	rjmp	.+64     	; 0x2a7a <__fixsfsi+0x80>
    2a3a:	6e 81       	ldd	r22, Y+6	; 0x06
    2a3c:	2f 31       	cpi	r18, 0x1F	; 31
    2a3e:	31 05       	cpc	r19, r1
    2a40:	1c f0       	brlt	.+6      	; 0x2a48 <__fixsfsi+0x4e>
    2a42:	66 23       	and	r22, r22
    2a44:	f9 f0       	breq	.+62     	; 0x2a84 <__fixsfsi+0x8a>
    2a46:	23 c0       	rjmp	.+70     	; 0x2a8e <__fixsfsi+0x94>
    2a48:	8e e1       	ldi	r24, 0x1E	; 30
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	82 1b       	sub	r24, r18
    2a4e:	93 0b       	sbc	r25, r19
    2a50:	29 85       	ldd	r18, Y+9	; 0x09
    2a52:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a54:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a56:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a58:	04 c0       	rjmp	.+8      	; 0x2a62 <__fixsfsi+0x68>
    2a5a:	56 95       	lsr	r21
    2a5c:	47 95       	ror	r20
    2a5e:	37 95       	ror	r19
    2a60:	27 95       	ror	r18
    2a62:	8a 95       	dec	r24
    2a64:	d2 f7       	brpl	.-12     	; 0x2a5a <__fixsfsi+0x60>
    2a66:	66 23       	and	r22, r22
    2a68:	b1 f0       	breq	.+44     	; 0x2a96 <__fixsfsi+0x9c>
    2a6a:	50 95       	com	r21
    2a6c:	40 95       	com	r20
    2a6e:	30 95       	com	r19
    2a70:	21 95       	neg	r18
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
    2a74:	4f 4f       	sbci	r20, 0xFF	; 255
    2a76:	5f 4f       	sbci	r21, 0xFF	; 255
    2a78:	0e c0       	rjmp	.+28     	; 0x2a96 <__fixsfsi+0x9c>
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	09 c0       	rjmp	.+18     	; 0x2a96 <__fixsfsi+0x9c>
    2a84:	2f ef       	ldi	r18, 0xFF	; 255
    2a86:	3f ef       	ldi	r19, 0xFF	; 255
    2a88:	4f ef       	ldi	r20, 0xFF	; 255
    2a8a:	5f e7       	ldi	r21, 0x7F	; 127
    2a8c:	04 c0       	rjmp	.+8      	; 0x2a96 <__fixsfsi+0x9c>
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	50 e8       	ldi	r21, 0x80	; 128
    2a96:	b9 01       	movw	r22, r18
    2a98:	ca 01       	movw	r24, r20
    2a9a:	2c 96       	adiw	r28, 0x0c	; 12
    2a9c:	e2 e0       	ldi	r30, 0x02	; 2
    2a9e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x20>

00002aa2 <__clzsi2>:
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	7b 01       	movw	r14, r22
    2aac:	8c 01       	movw	r16, r24
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	e8 16       	cp	r14, r24
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	f8 06       	cpc	r15, r24
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	08 07       	cpc	r16, r24
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	18 07       	cpc	r17, r24
    2abe:	88 f4       	brcc	.+34     	; 0x2ae2 <__clzsi2+0x40>
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	e8 16       	cp	r14, r24
    2ac4:	f1 04       	cpc	r15, r1
    2ac6:	01 05       	cpc	r16, r1
    2ac8:	11 05       	cpc	r17, r1
    2aca:	31 f0       	breq	.+12     	; 0x2ad8 <__clzsi2+0x36>
    2acc:	28 f0       	brcs	.+10     	; 0x2ad8 <__clzsi2+0x36>
    2ace:	88 e0       	ldi	r24, 0x08	; 8
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e0       	ldi	r26, 0x00	; 0
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	17 c0       	rjmp	.+46     	; 0x2b06 <__clzsi2+0x64>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	12 c0       	rjmp	.+36     	; 0x2b06 <__clzsi2+0x64>
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	e8 16       	cp	r14, r24
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	f8 06       	cpc	r15, r24
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	08 07       	cpc	r16, r24
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	18 07       	cpc	r17, r24
    2af2:	28 f0       	brcs	.+10     	; 0x2afe <__clzsi2+0x5c>
    2af4:	88 e1       	ldi	r24, 0x18	; 24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a0 e0       	ldi	r26, 0x00	; 0
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	04 c0       	rjmp	.+8      	; 0x2b06 <__clzsi2+0x64>
    2afe:	80 e1       	ldi	r24, 0x10	; 16
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	20 e2       	ldi	r18, 0x20	; 32
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	28 1b       	sub	r18, r24
    2b10:	39 0b       	sbc	r19, r25
    2b12:	4a 0b       	sbc	r20, r26
    2b14:	5b 0b       	sbc	r21, r27
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <__clzsi2+0x7e>
    2b18:	16 95       	lsr	r17
    2b1a:	07 95       	ror	r16
    2b1c:	f7 94       	ror	r15
    2b1e:	e7 94       	ror	r14
    2b20:	8a 95       	dec	r24
    2b22:	d2 f7       	brpl	.-12     	; 0x2b18 <__clzsi2+0x76>
    2b24:	f7 01       	movw	r30, r14
    2b26:	e1 5f       	subi	r30, 0xF1	; 241
    2b28:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 1b       	sub	r18, r24
    2b2e:	31 09       	sbc	r19, r1
    2b30:	41 09       	sbc	r20, r1
    2b32:	51 09       	sbc	r21, r1
    2b34:	c9 01       	movw	r24, r18
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	08 95       	ret

00002b40 <__pack_f>:
    2b40:	df 92       	push	r13
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	e4 80       	ldd	r14, Z+4	; 0x04
    2b4e:	f5 80       	ldd	r15, Z+5	; 0x05
    2b50:	06 81       	ldd	r16, Z+6	; 0x06
    2b52:	17 81       	ldd	r17, Z+7	; 0x07
    2b54:	d1 80       	ldd	r13, Z+1	; 0x01
    2b56:	80 81       	ld	r24, Z
    2b58:	82 30       	cpi	r24, 0x02	; 2
    2b5a:	48 f4       	brcc	.+18     	; 0x2b6e <__pack_f+0x2e>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 e1       	ldi	r26, 0x10	; 16
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e8 2a       	or	r14, r24
    2b66:	f9 2a       	or	r15, r25
    2b68:	0a 2b       	or	r16, r26
    2b6a:	1b 2b       	or	r17, r27
    2b6c:	a5 c0       	rjmp	.+330    	; 0x2cb8 <__pack_f+0x178>
    2b6e:	84 30       	cpi	r24, 0x04	; 4
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <__pack_f+0x34>
    2b72:	9f c0       	rjmp	.+318    	; 0x2cb2 <__pack_f+0x172>
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	21 f4       	brne	.+8      	; 0x2b80 <__pack_f+0x40>
    2b78:	ee 24       	eor	r14, r14
    2b7a:	ff 24       	eor	r15, r15
    2b7c:	87 01       	movw	r16, r14
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <__pack_f+0x4a>
    2b80:	e1 14       	cp	r14, r1
    2b82:	f1 04       	cpc	r15, r1
    2b84:	01 05       	cpc	r16, r1
    2b86:	11 05       	cpc	r17, r1
    2b88:	19 f4       	brne	.+6      	; 0x2b90 <__pack_f+0x50>
    2b8a:	e0 e0       	ldi	r30, 0x00	; 0
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	96 c0       	rjmp	.+300    	; 0x2cbc <__pack_f+0x17c>
    2b90:	62 81       	ldd	r22, Z+2	; 0x02
    2b92:	73 81       	ldd	r23, Z+3	; 0x03
    2b94:	9f ef       	ldi	r25, 0xFF	; 255
    2b96:	62 38       	cpi	r22, 0x82	; 130
    2b98:	79 07       	cpc	r23, r25
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <__pack_f+0x5e>
    2b9c:	5b c0       	rjmp	.+182    	; 0x2c54 <__pack_f+0x114>
    2b9e:	22 e8       	ldi	r18, 0x82	; 130
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	26 1b       	sub	r18, r22
    2ba4:	37 0b       	sbc	r19, r23
    2ba6:	2a 31       	cpi	r18, 0x1A	; 26
    2ba8:	31 05       	cpc	r19, r1
    2baa:	2c f0       	brlt	.+10     	; 0x2bb6 <__pack_f+0x76>
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	2a c0       	rjmp	.+84     	; 0x2c0a <__pack_f+0xca>
    2bb6:	b8 01       	movw	r22, r16
    2bb8:	a7 01       	movw	r20, r14
    2bba:	02 2e       	mov	r0, r18
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <__pack_f+0x86>
    2bbe:	76 95       	lsr	r23
    2bc0:	67 95       	ror	r22
    2bc2:	57 95       	ror	r21
    2bc4:	47 95       	ror	r20
    2bc6:	0a 94       	dec	r0
    2bc8:	d2 f7       	brpl	.-12     	; 0x2bbe <__pack_f+0x7e>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	a0 e0       	ldi	r26, 0x00	; 0
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <__pack_f+0x9c>
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	aa 1f       	adc	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	2a 95       	dec	r18
    2bde:	d2 f7       	brpl	.-12     	; 0x2bd4 <__pack_f+0x94>
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	a1 09       	sbc	r26, r1
    2be4:	b1 09       	sbc	r27, r1
    2be6:	8e 21       	and	r24, r14
    2be8:	9f 21       	and	r25, r15
    2bea:	a0 23       	and	r26, r16
    2bec:	b1 23       	and	r27, r17
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	a1 05       	cpc	r26, r1
    2bf2:	b1 05       	cpc	r27, r1
    2bf4:	21 f0       	breq	.+8      	; 0x2bfe <__pack_f+0xbe>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e0       	ldi	r26, 0x00	; 0
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	9a 01       	movw	r18, r20
    2c00:	ab 01       	movw	r20, r22
    2c02:	28 2b       	or	r18, r24
    2c04:	39 2b       	or	r19, r25
    2c06:	4a 2b       	or	r20, r26
    2c08:	5b 2b       	or	r21, r27
    2c0a:	da 01       	movw	r26, r20
    2c0c:	c9 01       	movw	r24, r18
    2c0e:	8f 77       	andi	r24, 0x7F	; 127
    2c10:	90 70       	andi	r25, 0x00	; 0
    2c12:	a0 70       	andi	r26, 0x00	; 0
    2c14:	b0 70       	andi	r27, 0x00	; 0
    2c16:	80 34       	cpi	r24, 0x40	; 64
    2c18:	91 05       	cpc	r25, r1
    2c1a:	a1 05       	cpc	r26, r1
    2c1c:	b1 05       	cpc	r27, r1
    2c1e:	39 f4       	brne	.+14     	; 0x2c2e <__pack_f+0xee>
    2c20:	27 ff       	sbrs	r18, 7
    2c22:	09 c0       	rjmp	.+18     	; 0x2c36 <__pack_f+0xf6>
    2c24:	20 5c       	subi	r18, 0xC0	; 192
    2c26:	3f 4f       	sbci	r19, 0xFF	; 255
    2c28:	4f 4f       	sbci	r20, 0xFF	; 255
    2c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2c:	04 c0       	rjmp	.+8      	; 0x2c36 <__pack_f+0xf6>
    2c2e:	21 5c       	subi	r18, 0xC1	; 193
    2c30:	3f 4f       	sbci	r19, 0xFF	; 255
    2c32:	4f 4f       	sbci	r20, 0xFF	; 255
    2c34:	5f 4f       	sbci	r21, 0xFF	; 255
    2c36:	e0 e0       	ldi	r30, 0x00	; 0
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	20 30       	cpi	r18, 0x00	; 0
    2c3c:	a0 e0       	ldi	r26, 0x00	; 0
    2c3e:	3a 07       	cpc	r19, r26
    2c40:	a0 e0       	ldi	r26, 0x00	; 0
    2c42:	4a 07       	cpc	r20, r26
    2c44:	a0 e4       	ldi	r26, 0x40	; 64
    2c46:	5a 07       	cpc	r21, r26
    2c48:	10 f0       	brcs	.+4      	; 0x2c4e <__pack_f+0x10e>
    2c4a:	e1 e0       	ldi	r30, 0x01	; 1
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	79 01       	movw	r14, r18
    2c50:	8a 01       	movw	r16, r20
    2c52:	27 c0       	rjmp	.+78     	; 0x2ca2 <__pack_f+0x162>
    2c54:	60 38       	cpi	r22, 0x80	; 128
    2c56:	71 05       	cpc	r23, r1
    2c58:	64 f5       	brge	.+88     	; 0x2cb2 <__pack_f+0x172>
    2c5a:	fb 01       	movw	r30, r22
    2c5c:	e1 58       	subi	r30, 0x81	; 129
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	d8 01       	movw	r26, r16
    2c62:	c7 01       	movw	r24, r14
    2c64:	8f 77       	andi	r24, 0x7F	; 127
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	a0 70       	andi	r26, 0x00	; 0
    2c6a:	b0 70       	andi	r27, 0x00	; 0
    2c6c:	80 34       	cpi	r24, 0x40	; 64
    2c6e:	91 05       	cpc	r25, r1
    2c70:	a1 05       	cpc	r26, r1
    2c72:	b1 05       	cpc	r27, r1
    2c74:	39 f4       	brne	.+14     	; 0x2c84 <__pack_f+0x144>
    2c76:	e7 fe       	sbrs	r14, 7
    2c78:	0d c0       	rjmp	.+26     	; 0x2c94 <__pack_f+0x154>
    2c7a:	80 e4       	ldi	r24, 0x40	; 64
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	a0 e0       	ldi	r26, 0x00	; 0
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <__pack_f+0x14c>
    2c84:	8f e3       	ldi	r24, 0x3F	; 63
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e8 0e       	add	r14, r24
    2c8e:	f9 1e       	adc	r15, r25
    2c90:	0a 1f       	adc	r16, r26
    2c92:	1b 1f       	adc	r17, r27
    2c94:	17 ff       	sbrs	r17, 7
    2c96:	05 c0       	rjmp	.+10     	; 0x2ca2 <__pack_f+0x162>
    2c98:	16 95       	lsr	r17
    2c9a:	07 95       	ror	r16
    2c9c:	f7 94       	ror	r15
    2c9e:	e7 94       	ror	r14
    2ca0:	31 96       	adiw	r30, 0x01	; 1
    2ca2:	87 e0       	ldi	r24, 0x07	; 7
    2ca4:	16 95       	lsr	r17
    2ca6:	07 95       	ror	r16
    2ca8:	f7 94       	ror	r15
    2caa:	e7 94       	ror	r14
    2cac:	8a 95       	dec	r24
    2cae:	d1 f7       	brne	.-12     	; 0x2ca4 <__pack_f+0x164>
    2cb0:	05 c0       	rjmp	.+10     	; 0x2cbc <__pack_f+0x17c>
    2cb2:	ee 24       	eor	r14, r14
    2cb4:	ff 24       	eor	r15, r15
    2cb6:	87 01       	movw	r16, r14
    2cb8:	ef ef       	ldi	r30, 0xFF	; 255
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	6e 2f       	mov	r22, r30
    2cbe:	67 95       	ror	r22
    2cc0:	66 27       	eor	r22, r22
    2cc2:	67 95       	ror	r22
    2cc4:	90 2f       	mov	r25, r16
    2cc6:	9f 77       	andi	r25, 0x7F	; 127
    2cc8:	d7 94       	ror	r13
    2cca:	dd 24       	eor	r13, r13
    2ccc:	d7 94       	ror	r13
    2cce:	8e 2f       	mov	r24, r30
    2cd0:	86 95       	lsr	r24
    2cd2:	49 2f       	mov	r20, r25
    2cd4:	46 2b       	or	r20, r22
    2cd6:	58 2f       	mov	r21, r24
    2cd8:	5d 29       	or	r21, r13
    2cda:	b7 01       	movw	r22, r14
    2cdc:	ca 01       	movw	r24, r20
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	df 90       	pop	r13
    2ce8:	08 95       	ret

00002cea <__unpack_f>:
    2cea:	fc 01       	movw	r30, r24
    2cec:	db 01       	movw	r26, r22
    2cee:	40 81       	ld	r20, Z
    2cf0:	51 81       	ldd	r21, Z+1	; 0x01
    2cf2:	22 81       	ldd	r18, Z+2	; 0x02
    2cf4:	62 2f       	mov	r22, r18
    2cf6:	6f 77       	andi	r22, 0x7F	; 127
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	22 1f       	adc	r18, r18
    2cfc:	22 27       	eor	r18, r18
    2cfe:	22 1f       	adc	r18, r18
    2d00:	93 81       	ldd	r25, Z+3	; 0x03
    2d02:	89 2f       	mov	r24, r25
    2d04:	88 0f       	add	r24, r24
    2d06:	82 2b       	or	r24, r18
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	99 27       	eor	r25, r25
    2d10:	99 1f       	adc	r25, r25
    2d12:	11 96       	adiw	r26, 0x01	; 1
    2d14:	9c 93       	st	X, r25
    2d16:	11 97       	sbiw	r26, 0x01	; 1
    2d18:	21 15       	cp	r18, r1
    2d1a:	31 05       	cpc	r19, r1
    2d1c:	a9 f5       	brne	.+106    	; 0x2d88 <__unpack_f+0x9e>
    2d1e:	41 15       	cp	r20, r1
    2d20:	51 05       	cpc	r21, r1
    2d22:	61 05       	cpc	r22, r1
    2d24:	71 05       	cpc	r23, r1
    2d26:	11 f4       	brne	.+4      	; 0x2d2c <__unpack_f+0x42>
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	37 c0       	rjmp	.+110    	; 0x2d9a <__unpack_f+0xb0>
    2d2c:	82 e8       	ldi	r24, 0x82	; 130
    2d2e:	9f ef       	ldi	r25, 0xFF	; 255
    2d30:	13 96       	adiw	r26, 0x03	; 3
    2d32:	9c 93       	st	X, r25
    2d34:	8e 93       	st	-X, r24
    2d36:	12 97       	sbiw	r26, 0x02	; 2
    2d38:	9a 01       	movw	r18, r20
    2d3a:	ab 01       	movw	r20, r22
    2d3c:	67 e0       	ldi	r22, 0x07	; 7
    2d3e:	22 0f       	add	r18, r18
    2d40:	33 1f       	adc	r19, r19
    2d42:	44 1f       	adc	r20, r20
    2d44:	55 1f       	adc	r21, r21
    2d46:	6a 95       	dec	r22
    2d48:	d1 f7       	brne	.-12     	; 0x2d3e <__unpack_f+0x54>
    2d4a:	83 e0       	ldi	r24, 0x03	; 3
    2d4c:	8c 93       	st	X, r24
    2d4e:	0d c0       	rjmp	.+26     	; 0x2d6a <__unpack_f+0x80>
    2d50:	22 0f       	add	r18, r18
    2d52:	33 1f       	adc	r19, r19
    2d54:	44 1f       	adc	r20, r20
    2d56:	55 1f       	adc	r21, r21
    2d58:	12 96       	adiw	r26, 0x02	; 2
    2d5a:	8d 91       	ld	r24, X+
    2d5c:	9c 91       	ld	r25, X
    2d5e:	13 97       	sbiw	r26, 0x03	; 3
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	13 96       	adiw	r26, 0x03	; 3
    2d64:	9c 93       	st	X, r25
    2d66:	8e 93       	st	-X, r24
    2d68:	12 97       	sbiw	r26, 0x02	; 2
    2d6a:	20 30       	cpi	r18, 0x00	; 0
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	38 07       	cpc	r19, r24
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	48 07       	cpc	r20, r24
    2d74:	80 e4       	ldi	r24, 0x40	; 64
    2d76:	58 07       	cpc	r21, r24
    2d78:	58 f3       	brcs	.-42     	; 0x2d50 <__unpack_f+0x66>
    2d7a:	14 96       	adiw	r26, 0x04	; 4
    2d7c:	2d 93       	st	X+, r18
    2d7e:	3d 93       	st	X+, r19
    2d80:	4d 93       	st	X+, r20
    2d82:	5c 93       	st	X, r21
    2d84:	17 97       	sbiw	r26, 0x07	; 7
    2d86:	08 95       	ret
    2d88:	2f 3f       	cpi	r18, 0xFF	; 255
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	79 f4       	brne	.+30     	; 0x2dac <__unpack_f+0xc2>
    2d8e:	41 15       	cp	r20, r1
    2d90:	51 05       	cpc	r21, r1
    2d92:	61 05       	cpc	r22, r1
    2d94:	71 05       	cpc	r23, r1
    2d96:	19 f4       	brne	.+6      	; 0x2d9e <__unpack_f+0xb4>
    2d98:	84 e0       	ldi	r24, 0x04	; 4
    2d9a:	8c 93       	st	X, r24
    2d9c:	08 95       	ret
    2d9e:	64 ff       	sbrs	r22, 4
    2da0:	03 c0       	rjmp	.+6      	; 0x2da8 <__unpack_f+0xbe>
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	8c 93       	st	X, r24
    2da6:	12 c0       	rjmp	.+36     	; 0x2dcc <__unpack_f+0xe2>
    2da8:	1c 92       	st	X, r1
    2daa:	10 c0       	rjmp	.+32     	; 0x2dcc <__unpack_f+0xe2>
    2dac:	2f 57       	subi	r18, 0x7F	; 127
    2dae:	30 40       	sbci	r19, 0x00	; 0
    2db0:	13 96       	adiw	r26, 0x03	; 3
    2db2:	3c 93       	st	X, r19
    2db4:	2e 93       	st	-X, r18
    2db6:	12 97       	sbiw	r26, 0x02	; 2
    2db8:	83 e0       	ldi	r24, 0x03	; 3
    2dba:	8c 93       	st	X, r24
    2dbc:	87 e0       	ldi	r24, 0x07	; 7
    2dbe:	44 0f       	add	r20, r20
    2dc0:	55 1f       	adc	r21, r21
    2dc2:	66 1f       	adc	r22, r22
    2dc4:	77 1f       	adc	r23, r23
    2dc6:	8a 95       	dec	r24
    2dc8:	d1 f7       	brne	.-12     	; 0x2dbe <__unpack_f+0xd4>
    2dca:	70 64       	ori	r23, 0x40	; 64
    2dcc:	14 96       	adiw	r26, 0x04	; 4
    2dce:	4d 93       	st	X+, r20
    2dd0:	5d 93       	st	X+, r21
    2dd2:	6d 93       	st	X+, r22
    2dd4:	7c 93       	st	X, r23
    2dd6:	17 97       	sbiw	r26, 0x07	; 7
    2dd8:	08 95       	ret

00002dda <__prologue_saves__>:
    2dda:	2f 92       	push	r2
    2ddc:	3f 92       	push	r3
    2dde:	4f 92       	push	r4
    2de0:	5f 92       	push	r5
    2de2:	6f 92       	push	r6
    2de4:	7f 92       	push	r7
    2de6:	8f 92       	push	r8
    2de8:	9f 92       	push	r9
    2dea:	af 92       	push	r10
    2dec:	bf 92       	push	r11
    2dee:	cf 92       	push	r12
    2df0:	df 92       	push	r13
    2df2:	ef 92       	push	r14
    2df4:	ff 92       	push	r15
    2df6:	0f 93       	push	r16
    2df8:	1f 93       	push	r17
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	ca 1b       	sub	r28, r26
    2e04:	db 0b       	sbc	r29, r27
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	09 94       	ijmp

00002e12 <__epilogue_restores__>:
    2e12:	2a 88       	ldd	r2, Y+18	; 0x12
    2e14:	39 88       	ldd	r3, Y+17	; 0x11
    2e16:	48 88       	ldd	r4, Y+16	; 0x10
    2e18:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e20:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e22:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e24:	b9 84       	ldd	r11, Y+9	; 0x09
    2e26:	c8 84       	ldd	r12, Y+8	; 0x08
    2e28:	df 80       	ldd	r13, Y+7	; 0x07
    2e2a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e2c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e30:	1b 81       	ldd	r17, Y+3	; 0x03
    2e32:	aa 81       	ldd	r26, Y+2	; 0x02
    2e34:	b9 81       	ldd	r27, Y+1	; 0x01
    2e36:	ce 0f       	add	r28, r30
    2e38:	d1 1d       	adc	r29, r1
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
    2e44:	ed 01       	movw	r28, r26
    2e46:	08 95       	ret

00002e48 <_exit>:
    2e48:	f8 94       	cli

00002e4a <__stop_program>:
    2e4a:	ff cf       	rjmp	.-2      	; 0x2e4a <__stop_program>


test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  000031a6  0000323a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  0000334a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000334a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  000033ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  000039ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  00005568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  00005d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000071e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  00007480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  00007f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000092ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 03 	jmp	0x736	; 0x736 <__ctors_end>
       4:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
       8:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
       c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      10:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      14:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      18:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      1c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      20:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      24:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      28:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      2c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      30:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      34:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      38:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      3c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      40:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      44:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      48:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      4c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      50:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      54:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      58:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      5c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      60:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      64:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      68:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      6c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      70:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      74:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      78:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      7c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      80:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      84:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>
      88:	0c 94 ba 03 	jmp	0x774	; 0x774 <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 05 08 02 00 00 00 00 00 00 00 10 00 00     .p..............
      9c:	00 00 00 0f 00 01 00 06 08 02 00 00 00 00 00 00     ................
      ac:	00 10 00 00 00 00 00 0f 00 01 00 ff ff 70 17 05     .............p..
      bc:	08 02 00 00 00 00 00 00 00 20 00 00 00 00 00 32     ......... .....2
      cc:	00 01 00 06 08 02 00 00 00 00 00 00 00 20 00 00     ............. ..
      dc:	00 00 00 32 00 01 00 ff ff 70 17 05 08 02 00 00     ...2.....p......
      ec:	00 00 00 00 00 20 00 00 00 00 00 ff 00 01 00 06     ..... ..........
      fc:	08 02 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     10c:	00 01 00 ff ff 70 17 05 08 04 00 00 00 00 00 00     .....p..........
     11c:	00 20 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     . ..............
     12c:	00 20 00 00 00 ff 00 00 00 01 00 06 08 04 00 00     . ..............
     13c:	00 00 00 00 00 20 00 00 00 00 00 ff 00 01 00 00     ..... ..........
     14c:	00 00 00 00 00 20 00 ff 00 00 00 7d 00 01 00 ff     ..... .....}....
     15c:	ff 70 17 04 08 04 00 00 00 03 00 00 00 08 00 00     .p..............
     16c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 20 00 00     ............. ..
     17c:	00 ff 00 00 00 01 00 05 08 04 00 00 00 00 00 00     ................
     18c:	00 20 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     . ..............
     19c:	00 20 00 00 00 ff 00 00 00 01 00 06 08 04 00 00     . ..............
     1ac:	00 00 00 00 00 20 00 00 00 00 00 ff 00 01 00 00     ..... ..........
     1bc:	00 00 00 00 00 20 00 ff 00 00 00 7d 00 01 00 07     ..... .....}....
     1cc:	08 04 00 03 00 00 00 03 00 08 00 00 00 00 00 ff     ................
     1dc:	00 01 00 00 00 00 00 00 00 20 00 ff 00 00 00 7d     ......... .....}
     1ec:	00 01 00 ff ff 70 17 04 08 04 00 00 00 03 00 00     .....p..........
     1fc:	00 08 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     20c:	00 20 00 00 00 ff 00 00 00 01 00 05 08 04 00 00     . ..............
     21c:	00 00 00 00 00 08 00 00 00 00 00 ff 00 01 00 00     ................
     22c:	00 00 00 00 00 08 00 00 00 ff 00 00 00 01 00 06     ................
     23c:	08 04 00 00 00 00 00 00 00 08 00 00 00 00 00 ff     ................
     24c:	00 01 00 00 00 00 00 00 00 08 00 ff 00 00 00 7d     ...............}
     25c:	00 01 00 07 08 04 00 03 00 00 00 03 00 08 00 00     ................
     26c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 20 00 ff     ............. ..
     27c:	00 00 00 7d 00 01 00 ff ff 70 17 04 08 04 00 00     ...}.....p......
     28c:	00 03 00 00 00 03 00 00 00 00 00 ff 00 01 00 00     ................
     29c:	00 00 00 00 00 03 00 00 00 ff 00 00 00 01 00 05     ................
     2ac:	08 04 00 00 00 00 00 00 00 03 00 00 00 00 00 ff     ................
     2bc:	00 01 00 00 00 00 00 00 00 03 00 00 00 ff 00 00     ................
     2cc:	00 01 00 06 08 04 00 00 00 00 00 00 00 03 00 00     ................
     2dc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 03 00 ff     ................
     2ec:	00 00 00 7d 00 01 00 07 08 04 00 03 00 00 00 03     ...}............
     2fc:	00 03 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     30c:	00 03 00 ff 00 00 00 7d 00 01 00 ff ff 70 17 04     .......}.....p..
     31c:	08 02 00 00 00 7d 00 00 00 09 00 00 00 00 00 7d     .....}.........}
     32c:	00 03 00 05 08 02 00 00 00 7d 00 00 00 09 00 00     .........}......
     33c:	00 00 00 7d 00 03 00 06 08 02 00 ff 00 00 00 7d     ...}...........}
     34c:	00 09 00 00 00 00 00 7d 00 03 00 07 08 02 00 ff     .......}........
     35c:	00 00 00 7d 00 09 00 00 00 00 00 7d 00 03 00 ff     ...}.......}....
     36c:	ff 6f 17 00 08 08 00 ff 00 00 00 00 00 02 00 ff     .o..............
     37c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     38c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     39c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 00     .............&..
     3ac:	00 00 00 00 00 01 00 01 08 08 00 ff 00 00 00 00     ................
     3bc:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     3cc:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     3dc:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     3ec:	00 26 00 00 00 00 00 00 00 01 00 02 08 08 00 ff     .&..............
     3fc:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     40c:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     41c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     42c:	00 00 00 00 00 26 00 00 00 00 00 00 00 01 00 03     .....&..........
     43c:	08 08 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     44c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     45c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     46c:	00 01 00 00 00 00 00 00 00 26 00 00 00 00 00 00     .........&......
     47c:	00 01 00 04 08 08 00 ff 00 00 00 00 00 02 00 ff     ................
     48c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     49c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     4ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 00     .............&..
     4bc:	00 00 00 00 00 01 00 05 08 08 00 ff 00 00 00 00     ................
     4cc:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     4dc:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     4ec:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     4fc:	00 26 00 00 00 00 00 00 00 01 00 06 08 08 00 ff     .&..............
     50c:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     51c:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     52c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     53c:	00 00 00 00 00 26 00 00 00 00 00 00 00 01 00 07     .....&..........
     54c:	08 08 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     55c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     56c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     57c:	00 01 00 00 00 00 00 00 00 26 00 00 00 00 00 00     .........&......
     58c:	00 01 00 08 08 08 00 ff 00 00 00 00 00 02 00 ff     ................
     59c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     5ac:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     5bc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 00     .............&..
     5cc:	00 00 00 00 00 01 00 09 08 08 00 ff 00 00 00 00     ................
     5dc:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     5ec:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     5fc:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     60c:	00 26 00 00 00 00 00 00 00 01 00 0a 08 08 00 ff     .&..............
     61c:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     62c:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     63c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     64c:	00 00 00 00 00 26 00 00 00 00 00 00 00 01 00 0b     .....&..........
     65c:	08 08 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     66c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     67c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     68c:	00 01 00 00 00 00 00 00 00 26 00 00 00 00 00 00     .........&......
     69c:	00 01 00 ff ff 38 18 05 03 7d 00 00 00 00 00 01     .....8...}......
     6ac:	00 1e 00 06 03 7d 00 00 00 00 00 01 00 1e 00 ff     .....}..........
     6bc:	ff 0a 00 05 03 7d 00 00 00 00 00 01 00 0a 00 06     .....}..........
     6cc:	03 7d 00 00 00 00 00 01 00 0a 00 ff ff 09 00 05     .}..............
     6dc:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     6ec:	00 0a 00 06 05 ff 00 00 00 00 00 ff 00 7d 00 00     .............}..
     6fc:	00 03 00 01 00 0a 00 ff ff 09 00 05 05 ff 00 00     ................
     70c:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 05 00 06     .....}..........
     71c:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     72c:	00 05 00 ff ff 0a 00 ff 00 00                       ..........

00000736 <__ctors_end>:
     736:	11 24       	eor	r1, r1
     738:	1f be       	out	0x3f, r1	; 63
     73a:	cf ef       	ldi	r28, 0xFF	; 255
     73c:	d0 e1       	ldi	r29, 0x10	; 16
     73e:	de bf       	out	0x3e, r29	; 62
     740:	cd bf       	out	0x3d, r28	; 61

00000742 <__do_copy_data>:
     742:	12 e0       	ldi	r17, 0x02	; 2
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b1 e0       	ldi	r27, 0x01	; 1
     748:	e6 ea       	ldi	r30, 0xA6	; 166
     74a:	f1 e3       	ldi	r31, 0x31	; 49
     74c:	00 e0       	ldi	r16, 0x00	; 0
     74e:	0b bf       	out	0x3b, r16	; 59
     750:	02 c0       	rjmp	.+4      	; 0x756 <__do_copy_data+0x14>
     752:	07 90       	elpm	r0, Z+
     754:	0d 92       	st	X+, r0
     756:	a0 31       	cpi	r26, 0x10	; 16
     758:	b1 07       	cpc	r27, r17
     75a:	d9 f7       	brne	.-10     	; 0x752 <__do_copy_data+0x10>

0000075c <__do_clear_bss>:
     75c:	1e e0       	ldi	r17, 0x0E	; 14
     75e:	a0 e1       	ldi	r26, 0x10	; 16
     760:	b2 e0       	ldi	r27, 0x02	; 2
     762:	01 c0       	rjmp	.+2      	; 0x766 <.do_clear_bss_start>

00000764 <.do_clear_bss_loop>:
     764:	1d 92       	st	X+, r1

00000766 <.do_clear_bss_start>:
     766:	a5 3f       	cpi	r26, 0xF5	; 245
     768:	b1 07       	cpc	r27, r17
     76a:	e1 f7       	brne	.-8      	; 0x764 <.do_clear_bss_loop>
     76c:	0e 94 0c 04 	call	0x818	; 0x818 <main>
     770:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <_exit>

00000774 <__bad_interrupt>:
     774:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000778 <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ec 01       	movw	r28, r24
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	ee 24       	eor	r14, r14
     78c:	ff 24       	eor	r15, r15
     78e:	0c c0       	rjmp	.+24     	; 0x7a8 <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
     790:	80 91 10 02 	lds	r24, 0x0210
     794:	90 91 11 02 	lds	r25, 0x0211
     798:	0a 97       	sbiw	r24, 0x0a	; 10
     79a:	4c f5       	brge	.+82     	; 0x7ee <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	27 96       	adiw	r28, 0x07	; 7
     7a2:	0c 30       	cpi	r16, 0x0C	; 12
     7a4:	11 05       	cpc	r17, r1
     7a6:	79 f0       	breq	.+30     	; 0x7c6 <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
     7a8:	8e 81       	ldd	r24, Y+6	; 0x06
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	89 f3       	breq	.-30     	; 0x790 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
     7ae:	6c 81       	ldd	r22, Y+4	; 0x04
     7b0:	7d 81       	ldd	r23, Y+5	; 0x05
     7b2:	e8 81       	ld	r30, Y
     7b4:	f9 81       	ldd	r31, Y+1	; 0x01
     7b6:	c8 01       	movw	r24, r16
     7b8:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
     7ba:	0f 5f       	subi	r16, 0xFF	; 255
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	27 96       	adiw	r28, 0x07	; 7
     7c0:	0c 30       	cpi	r16, 0x0C	; 12
     7c2:	11 05       	cpc	r17, r1
     7c4:	89 f7       	brne	.-30     	; 0x7a8 <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	e8 16       	cp	r14, r24
     7ca:	f1 04       	cpc	r15, r1
     7cc:	d1 f0       	breq	.+52     	; 0x802 <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
     7ce:	80 91 10 02 	lds	r24, 0x0210
     7d2:	90 91 11 02 	lds	r25, 0x0211
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	90 93 11 02 	sts	0x0211, r25
     7dc:	80 93 10 02 	sts	0x0210, r24
	}
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
     7ee:	6c 81       	ldd	r22, Y+4	; 0x04
     7f0:	7d 81       	ldd	r23, Y+5	; 0x05
     7f2:	e8 81       	ld	r30, Y
     7f4:	f9 81       	ldd	r31, Y+1	; 0x01
     7f6:	c8 01       	movw	r24, r16
     7f8:	09 95       	icall
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	e8 2e       	mov	r14, r24
     7fe:	f1 2c       	mov	r15, r1
     800:	cd cf       	rjmp	.-102    	; 0x79c <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
     802:	10 92 11 02 	sts	0x0211, r1
     806:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	08 95       	ret

00000818 <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
     818:	2f 92       	push	r2
     81a:	3f 92       	push	r3
     81c:	4f 92       	push	r4
     81e:	5f 92       	push	r5
     820:	6f 92       	push	r6
     822:	7f 92       	push	r7
     824:	8f 92       	push	r8
     826:	9f 92       	push	r9
     828:	af 92       	push	r10
     82a:	bf 92       	push	r11
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	df 93       	push	r29
     83a:	cf 93       	push	r28
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	c0 56       	subi	r28, 0x60	; 96
     842:	d0 40       	sbci	r29, 0x00	; 0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
     84e:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
     858:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
     85a:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
     85c:	8b b3       	in	r24, 0x1b	; 27
     85e:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
     860:	8e b5       	in	r24, 0x2e	; 46
     862:	88 60       	ori	r24, 0x08	; 8
     864:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
     866:	80 e4       	ldi	r24, 0x40	; 64
     868:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
     86a:	80 ea       	ldi	r24, 0xA0	; 160
     86c:	9f e0       	ldi	r25, 0x0F	; 15
     86e:	9b bd       	out	0x2b, r25	; 43
     870:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
     872:	8e b5       	in	r24, 0x2e	; 46
     874:	82 60       	ori	r24, 0x02	; 2
     876:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
     878:	0e 94 bf 11 	call	0x237e	; 0x237e <initDecoder>
     87c:	4d e0       	ldi	r20, 0x0D	; 13
     87e:	64 2e       	mov	r6, r20
     880:	71 2c       	mov	r7, r1
     882:	6c 0e       	add	r6, r28
     884:	7d 1e       	adc	r7, r29
     886:	f3 01       	movw	r30, r6
     888:	89 e4       	ldi	r24, 0x49	; 73
     88a:	95 e0       	ldi	r25, 0x05	; 5
     88c:	9e 01       	movw	r18, r28
     88e:	2f 59       	subi	r18, 0x9F	; 159
     890:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
     892:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
     894:	6e ea       	ldi	r22, 0xAE	; 174
     896:	75 e0       	ldi	r23, 0x05	; 5
     898:	71 83       	std	Z+1, r23	; 0x01
     89a:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
     89c:	93 83       	std	Z+3, r25	; 0x03
     89e:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
     8a0:	15 82       	std	Z+5, r1	; 0x05
     8a2:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
     8a4:	4b 8b       	std	Y+19, r20	; 0x13
     8a6:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
     8a8:	e2 17       	cp	r30, r18
     8aa:	f3 07       	cpc	r31, r19
     8ac:	99 f7       	brne	.-26     	; 0x894 <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
     8ae:	0e 94 95 11 	call	0x232a	; 0x232a <getNextGroup>
     8b2:	fc 01       	movw	r30, r24
     8b4:	ee 24       	eor	r14, r14
     8b6:	ff 24       	eor	r15, r15
     8b8:	88 24       	eor	r8, r8
     8ba:	8a 94       	dec	r8
     8bc:	98 2c       	mov	r9, r8
     8be:	2e 01       	movw	r4, r28
     8c0:	08 94       	sec
     8c2:	41 1c       	adc	r4, r1
     8c4:	51 1c       	adc	r5, r1
     8c6:	aa 24       	eor	r10, r10
     8c8:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
     8ca:	3c e0       	ldi	r19, 0x0C	; 12
     8cc:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
     8ce:	33 24       	eor	r3, r3
     8d0:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
     8d2:	02 81       	ldd	r16, Z+2	; 0x02
     8d4:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
     8d6:	d2 01       	movw	r26, r4
     8d8:	e2 2d       	mov	r30, r2
     8da:	1d 92       	st	X+, r1
     8dc:	ea 95       	dec	r30
     8de:	e9 f7       	brne	.-6      	; 0x8da <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
     8e0:	d8 01       	movw	r26, r16
     8e2:	8c 91       	ld	r24, X
     8e4:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
     8e6:	f2 01       	movw	r30, r4
     8e8:	e8 0f       	add	r30, r24
     8ea:	f9 1f       	adc	r31, r25
     8ec:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
     8ee:	fc 01       	movw	r30, r24
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	e8 1b       	sub	r30, r24
     8fe:	f9 0b       	sbc	r31, r25
     900:	e4 0d       	add	r30, r4
     902:	f5 1d       	adc	r31, r5
     904:	12 96       	adiw	r26, 0x02	; 2
     906:	2d 91       	ld	r18, X+
     908:	3c 91       	ld	r19, X
     90a:	13 97       	sbiw	r26, 0x03	; 3
     90c:	35 87       	std	Z+13, r19	; 0x0d
     90e:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
     910:	16 96       	adiw	r26, 0x06	; 6
     912:	6d 91       	ld	r22, X+
     914:	7c 91       	ld	r23, X
     916:	17 97       	sbiw	r26, 0x07	; 7
     918:	71 8b       	std	Z+17, r23	; 0x11
     91a:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
     91c:	18 96       	adiw	r26, 0x08	; 8
     91e:	2c 91       	ld	r18, X
     920:	18 97       	sbiw	r26, 0x08	; 8
     922:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
     924:	14 96       	adiw	r26, 0x04	; 4
     926:	ed 91       	ld	r30, X+
     928:	fc 91       	ld	r31, X
     92a:	15 97       	sbiw	r26, 0x05	; 5
     92c:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
     92e:	f8 01       	movw	r30, r16
     930:	01 85       	ldd	r16, Z+9	; 0x09
     932:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
     934:	01 15       	cp	r16, r1
     936:	11 05       	cpc	r17, r1
     938:	99 f6       	brne	.-90     	; 0x8e0 <main+0xc8>
     93a:	f2 01       	movw	r30, r4
     93c:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
     93e:	80 81       	ld	r24, Z
     940:	88 23       	and	r24, r24
     942:	61 f4       	brne	.+24     	; 0x95c <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
     944:	6e ea       	ldi	r22, 0xAE	; 174
     946:	75 e0       	ldi	r23, 0x05	; 5
     948:	11 96       	adiw	r26, 0x01	; 1
     94a:	7c 93       	st	X, r23
     94c:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
     94e:	15 96       	adiw	r26, 0x05	; 5
     950:	1c 92       	st	X, r1
     952:	1e 92       	st	-X, r1
     954:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
     956:	16 96       	adiw	r26, 0x06	; 6
     958:	3c 92       	st	X, r3
     95a:	16 97       	sbiw	r26, 0x06	; 6
     95c:	31 96       	adiw	r30, 0x01	; 1
     95e:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
     960:	e6 15       	cp	r30, r6
     962:	f7 05       	cpc	r31, r7
     964:	61 f7       	brne	.-40     	; 0x93e <main+0x126>
     966:	00 e0       	ldi	r16, 0x00	; 0
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	cc 24       	eor	r12, r12
     96c:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
     96e:	e1 14       	cp	r14, r1
     970:	f1 04       	cpc	r15, r1
     972:	19 f4       	brne	.+6      	; 0x97a <main+0x162>
     974:	88 24       	eor	r8, r8
     976:	8a 94       	dec	r8
     978:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
     97a:	c3 01       	movw	r24, r6
     97c:	0e 94 bc 03 	call	0x778	; 0x778 <doEffects>
			waitForTimer();
     980:	0e 94 cb 12 	call	0x2596	; 0x2596 <waitForTimer>
			displayColors();
     984:	0e 94 18 12 	call	0x2430	; 0x2430 <displayColors>
			deltaTimer++;
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
     98c:	0a 30       	cpi	r16, 0x0A	; 10
     98e:	11 05       	cpc	r17, r1
     990:	74 f3       	brlt	.-36     	; 0x96e <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
     992:	80 91 63 00 	lds	r24, 0x0063
     996:	81 fd       	sbrc	r24, 1
     998:	1a c0       	rjmp	.+52     	; 0x9ce <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
     99a:	ab 28       	or	r10, r11
     99c:	09 f4       	brne	.+2      	; 0x9a0 <main+0x188>
     99e:	4d c0       	rjmp	.+154    	; 0xa3a <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
     9a0:	80 91 63 00 	lds	r24, 0x0063
     9a4:	80 fd       	sbrc	r24, 0
     9a6:	21 c0       	rjmp	.+66     	; 0x9ea <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
     9a8:	e0 fe       	sbrs	r14, 0
     9aa:	59 c0       	rjmp	.+178    	; 0xa5e <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
     9ac:	c1 fe       	sbrs	r12, 1
     9ae:	29 c0       	rjmp	.+82     	; 0xa02 <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
     9b0:	b1 e0       	ldi	r27, 0x01	; 1
     9b2:	8b 16       	cp	r8, r27
     9b4:	91 04       	cpc	r9, r1
     9b6:	b1 f1       	breq	.+108    	; 0xa24 <main+0x20c>
     9b8:	22 e0       	ldi	r18, 0x02	; 2
     9ba:	a2 2e       	mov	r10, r18
     9bc:	b1 2c       	mov	r11, r1
     9be:	ae 20       	and	r10, r14
     9c0:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
     9c2:	00 e0       	ldi	r16, 0x00	; 0
     9c4:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
     9c6:	e1 14       	cp	r14, r1
     9c8:	f1 04       	cpc	r15, r1
     9ca:	b9 f6       	brne	.-82     	; 0x97a <main+0x162>
     9cc:	d3 cf       	rjmp	.-90     	; 0x974 <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
     9ce:	ab 28       	or	r10, r11
     9d0:	21 f0       	breq	.+8      	; 0x9da <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
     9d2:	a2 e0       	ldi	r26, 0x02	; 2
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	ca 2a       	or	r12, r26
     9d8:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
     9da:	ed ef       	ldi	r30, 0xFD	; 253
     9dc:	ff ef       	ldi	r31, 0xFF	; 255
     9de:	ee 22       	and	r14, r30
     9e0:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
     9e2:	80 91 63 00 	lds	r24, 0x0063
     9e6:	80 ff       	sbrs	r24, 0
     9e8:	df cf       	rjmp	.-66     	; 0x9a8 <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
     9ea:	e0 fe       	sbrs	r14, 0
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	c8 2a       	or	r12, r24
     9f4:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
     9f6:	ae ef       	ldi	r26, 0xFE	; 254
     9f8:	bf ef       	ldi	r27, 0xFF	; 255
     9fa:	ea 22       	and	r14, r26
     9fc:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
     9fe:	c1 fc       	sbrc	r12, 1
     a00:	d7 cf       	rjmp	.-82     	; 0x9b0 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
     a02:	c0 fe       	sbrs	r12, 0
     a04:	d9 cf       	rjmp	.-78     	; 0x9b8 <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
     a06:	e2 e0       	ldi	r30, 0x02	; 2
     a08:	8e 16       	cp	r8, r30
     a0a:	91 04       	cpc	r9, r1
     a0c:	a9 f6       	brne	.-86     	; 0x9b8 <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	a9 2e       	mov	r10, r25
     a12:	b1 2c       	mov	r11, r1
     a14:	ae 20       	and	r10, r14
     a16:	bf 20       	and	r11, r15
     a18:	e1 fe       	sbrs	r14, 1
     a1a:	d3 cf       	rjmp	.-90     	; 0x9c2 <main+0x1aa>

							groupNew = getNextGroup();
     a1c:	0e 94 95 11 	call	0x232a	; 0x232a <getNextGroup>
     a20:	fc 01       	movw	r30, r24
     a22:	57 cf       	rjmp	.-338    	; 0x8d2 <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
     a24:	e0 fe       	sbrs	r14, 0
     a26:	c8 cf       	rjmp	.-112    	; 0x9b8 <main+0x1a0>
							groupNew = getPreviousGroup();
     a28:	0e 94 30 11 	call	0x2260	; 0x2260 <getPreviousGroup>
     a2c:	fc 01       	movw	r30, r24
     a2e:	32 e0       	ldi	r19, 0x02	; 2
     a30:	a3 2e       	mov	r10, r19
     a32:	b1 2c       	mov	r11, r1
     a34:	ae 20       	and	r10, r14
     a36:	bf 20       	and	r11, r15
     a38:	4c cf       	rjmp	.-360    	; 0x8d2 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
     a3a:	7f ef       	ldi	r23, 0xFF	; 255
     a3c:	87 16       	cp	r8, r23
     a3e:	7f ef       	ldi	r23, 0xFF	; 255
     a40:	97 06       	cpc	r9, r23
     a42:	11 f1       	breq	.+68     	; 0xa88 <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	e8 2a       	or	r14, r24
     a4a:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
     a4c:	0e 94 95 11 	call	0x232a	; 0x232a <getNextGroup>
     a50:	fc 01       	movw	r30, r24
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	a6 2e       	mov	r10, r22
     a56:	b1 2c       	mov	r11, r1
     a58:	ae 20       	and	r10, r14
     a5a:	bf 20       	and	r11, r15
     a5c:	3a cf       	rjmp	.-396    	; 0x8d2 <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	e6 2a       	or	r14, r22
     a64:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
     a66:	0e 94 30 11 	call	0x2260	; 0x2260 <getPreviousGroup>
     a6a:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
     a6c:	7f ef       	ldi	r23, 0xFF	; 255
     a6e:	87 16       	cp	r8, r23
     a70:	7f ef       	ldi	r23, 0xFF	; 255
     a72:	97 06       	cpc	r9, r23
     a74:	e1 f6       	brne	.-72     	; 0xa2e <main+0x216>
     a76:	51 e0       	ldi	r21, 0x01	; 1
     a78:	85 2e       	mov	r8, r21
     a7a:	91 2c       	mov	r9, r1
     a7c:	42 e0       	ldi	r20, 0x02	; 2
     a7e:	a4 2e       	mov	r10, r20
     a80:	b1 2c       	mov	r11, r1
     a82:	ae 20       	and	r10, r14
     a84:	bf 20       	and	r11, r15
     a86:	25 cf       	rjmp	.-438    	; 0x8d2 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
     a88:	72 e0       	ldi	r23, 0x02	; 2
     a8a:	87 2e       	mov	r8, r23
     a8c:	91 2c       	mov	r9, r1
     a8e:	da cf       	rjmp	.-76     	; 0xa44 <main+0x22c>

00000a90 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
     a90:	08 95       	ret

00000a92 <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
     a92:	08 95       	ret

00000a94 <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
     a94:	08 95       	ret

00000a96 <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
     a96:	08 95       	ret

00000a98 <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
     a98:	fc 01       	movw	r30, r24
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	ed 51       	subi	r30, 0x1D	; 29
     aa4:	fb 4f       	sbci	r31, 0xFB	; 251
     aa6:	11 82       	std	Z+1, r1	; 0x01
     aa8:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
     aaa:	13 82       	std	Z+3, r1	; 0x03
     aac:	12 82       	std	Z+2, r1	; 0x02
}	
     aae:	08 95       	ret

00000ab0 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	8c 01       	movw	r16, r24
     aba:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
     abc:	dc 01       	movw	r26, r24
     abe:	aa 0f       	add	r26, r26
     ac0:	bb 1f       	adc	r27, r27
     ac2:	aa 0f       	add	r26, r26
     ac4:	bb 1f       	adc	r27, r27
     ac6:	ad 51       	subi	r26, 0x1D	; 29
     ac8:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
     aca:	6e 5f       	subi	r22, 0xFE	; 254
     acc:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
     ace:	12 96       	adiw	r26, 0x02	; 2
     ad0:	2d 91       	ld	r18, X+
     ad2:	3c 91       	ld	r19, X
     ad4:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
     ad6:	4d 91       	ld	r20, X+
     ad8:	5c 91       	ld	r21, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	f9 01       	movw	r30, r18
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	e6 0f       	add	r30, r22
     aec:	f7 1f       	adc	r31, r23
     aee:	86 81       	ldd	r24, Z+6	; 0x06
     af0:	97 81       	ldd	r25, Z+7	; 0x07
     af2:	84 17       	cp	r24, r20
     af4:	95 07       	cpc	r25, r21
     af6:	6c f5       	brge	.+90     	; 0xb52 <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	13 96       	adiw	r26, 0x03	; 3
     afe:	3c 93       	st	X, r19
     b00:	2e 93       	st	-X, r18
     b02:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	28 17       	cp	r18, r24
     b0a:	39 07       	cpc	r19, r25
     b0c:	24 f0       	brlt	.+8      	; 0xb16 <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
     b0e:	13 96       	adiw	r26, 0x03	; 3
     b10:	1c 92       	st	X, r1
     b12:	1e 92       	st	-X, r1
     b14:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	1c 92       	st	X, r1
     b1a:	1e 92       	st	-X, r1
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	2d 91       	ld	r18, X+
     b20:	3c 91       	ld	r19, X
     b22:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
     b24:	f9 01       	movw	r30, r18
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e6 0f       	add	r30, r22
     b34:	f7 1f       	adc	r31, r23
     b36:	60 81       	ld	r22, Z
     b38:	71 81       	ldd	r23, Z+1	; 0x01
     b3a:	42 81       	ldd	r20, Z+2	; 0x02
     b3c:	53 81       	ldd	r21, Z+3	; 0x03
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
     b52:	4f 5f       	subi	r20, 0xFF	; 255
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
     b56:	4d 93       	st	X+, r20
     b58:	5c 93       	st	X, r21
     b5a:	e4 cf       	rjmp	.-56     	; 0xb24 <lightBeamEffect+0x74>

00000b5c <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
}
     b6c:	08 95       	ret

00000b6e <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
     b6e:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
     b70:	60 81       	ld	r22, Z
     b72:	71 81       	ldd	r23, Z+1	; 0x01
     b74:	42 81       	ldd	r20, Z+2	; 0x02
     b76:	53 81       	ldd	r21, Z+3	; 0x03
     b78:	24 81       	ldd	r18, Z+4	; 0x04
     b7a:	35 81       	ldd	r19, Z+5	; 0x05
     b7c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
}
     b80:	08 95       	ret

00000b82 <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
     b86:	fc 01       	movw	r30, r24
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	df 01       	movw	r26, r30
     b8e:	a5 5b       	subi	r26, 0xB5	; 181
     b90:	bc 4f       	sbci	r27, 0xFC	; 252
     b92:	1d 92       	st	X+, r1
     b94:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
     b96:	ed 59       	subi	r30, 0x9D	; 157
     b98:	fc 4f       	sbci	r31, 0xFC	; 252
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	31 83       	std	Z+1, r19	; 0x01
     ba0:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
     ba2:	fb 01       	movw	r30, r22
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	42 81       	ldd	r20, Z+2	; 0x02
     baa:	53 81       	ldd	r21, Z+3	; 0x03
     bac:	24 81       	ldd	r18, Z+4	; 0x04
     bae:	35 81       	ldd	r19, Z+5	; 0x05
     bb0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
}
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	9c 01       	movw	r18, r24
     bc8:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	8c 01       	movw	r16, r24
     bd0:	05 5b       	subi	r16, 0xB5	; 181
     bd2:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
     bd4:	ec 01       	movw	r28, r24
     bd6:	cd 59       	subi	r28, 0x9D	; 157
     bd8:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
     bda:	60 81       	ld	r22, Z
     bdc:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
     bde:	42 81       	ldd	r20, Z+2	; 0x02
     be0:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
     be2:	e4 80       	ldd	r14, Z+4	; 0x04
     be4:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
     be6:	a6 81       	ldd	r26, Z+6	; 0x06
     be8:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
     bea:	00 84       	ldd	r0, Z+8	; 0x08
     bec:	f1 85       	ldd	r31, Z+9	; 0x09
     bee:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
     bf0:	88 81       	ld	r24, Y
     bf2:	99 81       	ldd	r25, Y+1	; 0x01
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	91 05       	cpc	r25, r1
     bf8:	09 f1       	breq	.+66     	; 0xc3c <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
     bfa:	89 2b       	or	r24, r25
     bfc:	c1 f4       	brne	.+48     	; 0xc2e <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	d8 01       	movw	r26, r16
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	11 97       	sbiw	r26, 0x01	; 1
     c08:	8e 17       	cp	r24, r30
     c0a:	9f 07       	cpc	r25, r31
     c0c:	0c f0       	brlt	.+2      	; 0xc10 <pwmEffect+0x56>
     c0e:	43 c0       	rjmp	.+134    	; 0xc96 <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
     c10:	c9 01       	movw	r24, r18
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
			*curCounter +=1;
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
		}

	}
	
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
     c3c:	11 97       	sbiw	r26, 0x01	; 1
     c3e:	f8 01       	movw	r30, r16
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	8a 17       	cp	r24, r26
     c46:	9b 07       	cpc	r25, r27
     c48:	a4 f0       	brlt	.+40     	; 0xc72 <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	18 82       	st	Y, r1
			*curCounter = 0;
     c4e:	11 82       	std	Z+1, r1	; 0x01
     c50:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
     c52:	c9 01       	movw	r24, r18
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
     c72:	c9 01       	movw	r24, r18
     c74:	97 01       	movw	r18, r14
     c76:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
			*curCounter += 1;
     c7a:	d8 01       	movw	r26, r16
     c7c:	8d 91       	ld	r24, X+
     c7e:	9c 91       	ld	r25, X
     c80:	11 97       	sbiw	r26, 0x01	; 1
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	8d 93       	st	X+, r24
     c86:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	ff 90       	pop	r15
     c92:	ef 90       	pop	r14
     c94:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	99 83       	std	Y+1, r25	; 0x01
     c9c:	88 83       	st	Y, r24
			*curCounter = 0;
     c9e:	1d 92       	st	X+, r1
     ca0:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
     ca2:	c9 01       	movw	r24, r18
     ca4:	97 01       	movw	r18, r14
     ca6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	08 95       	ret

00000cb8 <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
     cb8:	2f 92       	push	r2
     cba:	3f 92       	push	r3
     cbc:	4f 92       	push	r4
     cbe:	5f 92       	push	r5
     cc0:	6f 92       	push	r6
     cc2:	7f 92       	push	r7
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	6e 97       	sbiw	r28, 0x1e	; 30
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	9e 8f       	std	Y+30, r25	; 0x1e
     cee:	8d 8f       	std	Y+29, r24	; 0x1d
     cf0:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
     cf2:	20 81       	ld	r18, Z
     cf4:	31 81       	ldd	r19, Z+1	; 0x01
     cf6:	3c 8f       	std	Y+28, r19	; 0x1c
     cf8:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	9a 8f       	std	Y+26, r25	; 0x1a
     d00:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
     d02:	a4 81       	ldd	r26, Z+4	; 0x04
     d04:	b5 81       	ldd	r27, Z+5	; 0x05
     d06:	b8 8f       	std	Y+24, r27	; 0x18
     d08:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
     d0a:	26 81       	ldd	r18, Z+6	; 0x06
     d0c:	37 81       	ldd	r19, Z+7	; 0x07
     d0e:	3e 8b       	std	Y+22, r19	; 0x16
     d10:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
     d12:	80 85       	ldd	r24, Z+8	; 0x08
     d14:	91 85       	ldd	r25, Z+9	; 0x09
     d16:	9c 8b       	std	Y+20, r25	; 0x14
     d18:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
     d1a:	a2 85       	ldd	r26, Z+10	; 0x0a
     d1c:	b3 85       	ldd	r27, Z+11	; 0x0b
     d1e:	ba 8b       	std	Y+18, r27	; 0x12
     d20:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
     d22:	24 85       	ldd	r18, Z+12	; 0x0c
     d24:	35 85       	ldd	r19, Z+13	; 0x0d
     d26:	38 8b       	std	Y+16, r19	; 0x10
     d28:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
     d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	dc 01       	movw	r26, r24
     d34:	ad 5c       	subi	r26, 0xCD	; 205
     d36:	bc 4f       	sbci	r27, 0xFC	; 252
     d38:	be 87       	std	Y+14, r27	; 0x0e
     d3a:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
     d3c:	fc 01       	movw	r30, r24
     d3e:	e5 58       	subi	r30, 0x85	; 133
     d40:	fc 4f       	sbci	r31, 0xFC	; 252
     d42:	fc 87       	std	Y+12, r31	; 0x0c
     d44:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
     d46:	2d 8d       	ldd	r18, Y+29	; 0x1d
     d48:	3e 8d       	ldd	r19, Y+30	; 0x1e
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	dc 01       	movw	r26, r24
     d58:	ae 5e       	subi	r26, 0xEE	; 238
     d5a:	bd 4f       	sbci	r27, 0xFD	; 253
     d5c:	ba 87       	std	Y+10, r27	; 0x0a
     d5e:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
     d60:	fc 01       	movw	r30, r24
     d62:	ea 5e       	subi	r30, 0xEA	; 234
     d64:	fd 4f       	sbci	r31, 0xFD	; 253
     d66:	f8 87       	std	Y+8, r31	; 0x08
     d68:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
     d6a:	9c 01       	movw	r18, r24
     d6c:	26 5e       	subi	r18, 0xE6	; 230
     d6e:	3d 4f       	sbci	r19, 0xFD	; 253
     d70:	3e 83       	std	Y+6, r19	; 0x06
     d72:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
     d74:	80 91 ea 02 	lds	r24, 0x02EA
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <fadeBetweenColors+0xc6>
     d7c:	09 c1       	rjmp	.+530    	; 0xf90 <fadeBetweenColors+0x2d8>
     d7e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     d80:	bc 8d       	ldd	r27, Y+28	; 0x1c
     d82:	bd 01       	movw	r22, r26
     d84:	88 27       	eor	r24, r24
     d86:	77 fd       	sbrc	r23, 7
     d88:	80 95       	com	r24
     d8a:	98 2f       	mov	r25, r24
     d8c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     d90:	3b 01       	movw	r6, r22
     d92:	4c 01       	movw	r8, r24
     d94:	e9 8d       	ldd	r30, Y+25	; 0x19
     d96:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d98:	bf 01       	movw	r22, r30
     d9a:	88 27       	eor	r24, r24
     d9c:	77 fd       	sbrc	r23, 7
     d9e:	80 95       	com	r24
     da0:	98 2f       	mov	r25, r24
     da2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     da6:	1b 01       	movw	r2, r22
     da8:	2c 01       	movw	r4, r24
     daa:	2f 89       	ldd	r18, Y+23	; 0x17
     dac:	38 8d       	ldd	r19, Y+24	; 0x18
     dae:	b9 01       	movw	r22, r18
     db0:	88 27       	eor	r24, r24
     db2:	77 fd       	sbrc	r23, 7
     db4:	80 95       	com	r24
     db6:	98 2f       	mov	r25, r24
     db8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     dbc:	69 83       	std	Y+1, r22	; 0x01
     dbe:	7a 83       	std	Y+2, r23	; 0x02
     dc0:	8b 83       	std	Y+3, r24	; 0x03
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	ad 85       	ldd	r26, Y+13	; 0x0d
     dc6:	be 85       	ldd	r27, Y+14	; 0x0e
     dc8:	cd 90       	ld	r12, X+
     dca:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
     dcc:	ef 85       	ldd	r30, Y+15	; 0x0f
     dce:	f8 89       	ldd	r31, Y+16	; 0x10
     dd0:	bf 01       	movw	r22, r30
     dd2:	88 27       	eor	r24, r24
     dd4:	77 fd       	sbrc	r23, 7
     dd6:	80 95       	com	r24
     dd8:	98 2f       	mov	r25, r24
     dda:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     dde:	7b 01       	movw	r14, r22
     de0:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
     de2:	b6 01       	movw	r22, r12
     de4:	88 27       	eor	r24, r24
     de6:	77 fd       	sbrc	r23, 7
     de8:	80 95       	com	r24
     dea:	98 2f       	mov	r25, r24
     dec:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     df0:	5b 01       	movw	r10, r22
     df2:	6c 01       	movw	r12, r24
     df4:	2d 89       	ldd	r18, Y+21	; 0x15
     df6:	3e 89       	ldd	r19, Y+22	; 0x16
     df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfc:	28 1b       	sub	r18, r24
     dfe:	39 0b       	sbc	r19, r25
     e00:	b9 01       	movw	r22, r18
     e02:	88 27       	eor	r24, r24
     e04:	77 fd       	sbrc	r23, 7
     e06:	80 95       	com	r24
     e08:	98 2f       	mov	r25, r24
     e0a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     e0e:	a8 01       	movw	r20, r16
     e10:	97 01       	movw	r18, r14
     e12:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__divsf3>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	c6 01       	movw	r24, r12
     e1c:	b5 01       	movw	r22, r10
     e1e:	0e 94 a6 14 	call	0x294c	; 0x294c <__mulsf3>
     e22:	a4 01       	movw	r20, r8
     e24:	93 01       	movw	r18, r6
     e26:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__addsf3>
     e2a:	a9 85       	ldd	r26, Y+9	; 0x09
     e2c:	ba 85       	ldd	r27, Y+10	; 0x0a
     e2e:	6d 93       	st	X+, r22
     e30:	7d 93       	st	X+, r23
     e32:	8d 93       	st	X+, r24
     e34:	9c 93       	st	X, r25
     e36:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
     e38:	eb 89       	ldd	r30, Y+19	; 0x13
     e3a:	fc 89       	ldd	r31, Y+20	; 0x14
     e3c:	29 8d       	ldd	r18, Y+25	; 0x19
     e3e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e40:	e2 1b       	sub	r30, r18
     e42:	f3 0b       	sbc	r31, r19
     e44:	bf 01       	movw	r22, r30
     e46:	88 27       	eor	r24, r24
     e48:	77 fd       	sbrc	r23, 7
     e4a:	80 95       	com	r24
     e4c:	98 2f       	mov	r25, r24
     e4e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     e52:	a8 01       	movw	r20, r16
     e54:	97 01       	movw	r18, r14
     e56:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__divsf3>
     e5a:	a6 01       	movw	r20, r12
     e5c:	95 01       	movw	r18, r10
     e5e:	0e 94 a6 14 	call	0x294c	; 0x294c <__mulsf3>
     e62:	a2 01       	movw	r20, r4
     e64:	91 01       	movw	r18, r2
     e66:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__addsf3>
     e6a:	af 81       	ldd	r26, Y+7	; 0x07
     e6c:	b8 85       	ldd	r27, Y+8	; 0x08
     e6e:	6d 93       	st	X+, r22
     e70:	7d 93       	st	X+, r23
     e72:	8d 93       	st	X+, r24
     e74:	9c 93       	st	X, r25
     e76:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
     e78:	e9 89       	ldd	r30, Y+17	; 0x11
     e7a:	fa 89       	ldd	r31, Y+18	; 0x12
     e7c:	2f 89       	ldd	r18, Y+23	; 0x17
     e7e:	38 8d       	ldd	r19, Y+24	; 0x18
     e80:	e2 1b       	sub	r30, r18
     e82:	f3 0b       	sbc	r31, r19
     e84:	bf 01       	movw	r22, r30
     e86:	88 27       	eor	r24, r24
     e88:	77 fd       	sbrc	r23, 7
     e8a:	80 95       	com	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     e92:	a8 01       	movw	r20, r16
     e94:	97 01       	movw	r18, r14
     e96:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <__divsf3>
     e9a:	a6 01       	movw	r20, r12
     e9c:	95 01       	movw	r18, r10
     e9e:	0e 94 a6 14 	call	0x294c	; 0x294c <__mulsf3>
     ea2:	29 81       	ldd	r18, Y+1	; 0x01
     ea4:	3a 81       	ldd	r19, Y+2	; 0x02
     ea6:	4b 81       	ldd	r20, Y+3	; 0x03
     ea8:	5c 81       	ldd	r21, Y+4	; 0x04
     eaa:	0e 94 79 14 	call	0x28f2	; 0x28f2 <__addsf3>
     eae:	7b 01       	movw	r14, r22
     eb0:	8c 01       	movw	r16, r24
     eb2:	ad 81       	ldd	r26, Y+5	; 0x05
     eb4:	be 81       	ldd	r27, Y+6	; 0x06
     eb6:	6d 93       	st	X+, r22
     eb8:	7d 93       	st	X+, r23
     eba:	8d 93       	st	X+, r24
     ebc:	9c 93       	st	X, r25
     ebe:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
     ec0:	e9 85       	ldd	r30, Y+9	; 0x09
     ec2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__fixsfsi>
     ed0:	3b 01       	movw	r6, r22
     ed2:	4c 01       	movw	r8, r24
     ed4:	af 81       	ldd	r26, Y+7	; 0x07
     ed6:	b8 85       	ldd	r27, Y+8	; 0x08
     ed8:	6d 91       	ld	r22, X+
     eda:	7d 91       	ld	r23, X+
     edc:	8d 91       	ld	r24, X+
     ede:	9c 91       	ld	r25, X
     ee0:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__fixsfsi>
     ee4:	5b 01       	movw	r10, r22
     ee6:	6c 01       	movw	r12, r24
     ee8:	c8 01       	movw	r24, r16
     eea:	b7 01       	movw	r22, r14
     eec:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__fixsfsi>
     ef0:	8b 01       	movw	r16, r22
     ef2:	9c 01       	movw	r18, r24
     ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ef8:	b3 01       	movw	r22, r6
     efa:	a5 01       	movw	r20, r10
     efc:	98 01       	movw	r18, r16
     efe:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
     f02:	eb 85       	ldd	r30, Y+11	; 0x0b
     f04:	fc 85       	ldd	r31, Y+12	; 0x0c
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	59 f1       	breq	.+86     	; 0xf64 <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
     f0e:	ed 85       	ldd	r30, Y+13	; 0x0d
     f10:	fe 85       	ldd	r31, Y+14	; 0x0e
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
     f1c:	97 fd       	sbrc	r25, 7
     f1e:	19 c0       	rjmp	.+50     	; 0xf52 <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
     f20:	6e 96       	adiw	r28, 0x1e	; 30
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
     f52:	11 82       	std	Z+1, r1	; 0x01
     f54:	10 82       	st	Z, r1
			*direction = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	ab 85       	ldd	r26, Y+11	; 0x0b
     f5c:	bc 85       	ldd	r27, Y+12	; 0x0c
     f5e:	8d 93       	st	X+, r24
     f60:	9c 93       	st	X, r25
     f62:	de cf       	rjmp	.-68     	; 0xf20 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
     f64:	ad 85       	ldd	r26, Y+13	; 0x0d
     f66:	be 85       	ldd	r27, Y+14	; 0x0e
     f68:	8d 91       	ld	r24, X+
     f6a:	9c 91       	ld	r25, X
     f6c:	11 97       	sbiw	r26, 0x01	; 1
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	8d 93       	st	X+, r24
     f72:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
     f74:	ef 85       	ldd	r30, Y+15	; 0x0f
     f76:	f8 89       	ldd	r31, Y+16	; 0x10
     f78:	e8 17       	cp	r30, r24
     f7a:	f9 07       	cpc	r31, r25
     f7c:	8c f6       	brge	.-94     	; 0xf20 <fadeBetweenColors+0x268>
			*direction = 0;
     f7e:	ab 85       	ldd	r26, Y+11	; 0x0b
     f80:	bc 85       	ldd	r27, Y+12	; 0x0c
     f82:	1d 92       	st	X+, r1
     f84:	1c 92       	st	X, r1
			*currentStep = stepCount;
     f86:	ad 85       	ldd	r26, Y+13	; 0x0d
     f88:	be 85       	ldd	r27, Y+14	; 0x0e
     f8a:	ed 93       	st	X+, r30
     f8c:	fc 93       	st	X, r31
     f8e:	c8 cf       	rjmp	.-112    	; 0xf20 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
     f90:	eb 8d       	ldd	r30, Y+27	; 0x1b
     f92:	fc 8d       	ldd	r31, Y+28	; 0x1c
     f94:	bf 01       	movw	r22, r30
     f96:	88 27       	eor	r24, r24
     f98:	77 fd       	sbrc	r23, 7
     f9a:	80 95       	com	r24
     f9c:	98 2f       	mov	r25, r24
     f9e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     fa2:	3b 01       	movw	r6, r22
     fa4:	4c 01       	movw	r8, r24
     fa6:	a9 85       	ldd	r26, Y+9	; 0x09
     fa8:	ba 85       	ldd	r27, Y+10	; 0x0a
     faa:	6d 93       	st	X+, r22
     fac:	7d 93       	st	X+, r23
     fae:	8d 93       	st	X+, r24
     fb0:	9c 93       	st	X, r25
     fb2:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
     fb4:	e9 8d       	ldd	r30, Y+25	; 0x19
     fb6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     fb8:	bf 01       	movw	r22, r30
     fba:	88 27       	eor	r24, r24
     fbc:	77 fd       	sbrc	r23, 7
     fbe:	80 95       	com	r24
     fc0:	98 2f       	mov	r25, r24
     fc2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     fc6:	1b 01       	movw	r2, r22
     fc8:	2c 01       	movw	r4, r24
     fca:	af 81       	ldd	r26, Y+7	; 0x07
     fcc:	b8 85       	ldd	r27, Y+8	; 0x08
     fce:	6d 93       	st	X+, r22
     fd0:	7d 93       	st	X+, r23
     fd2:	8d 93       	st	X+, r24
     fd4:	9c 93       	st	X, r25
     fd6:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
     fd8:	ef 89       	ldd	r30, Y+23	; 0x17
     fda:	f8 8d       	ldd	r31, Y+24	; 0x18
     fdc:	bf 01       	movw	r22, r30
     fde:	88 27       	eor	r24, r24
     fe0:	77 fd       	sbrc	r23, 7
     fe2:	80 95       	com	r24
     fe4:	98 2f       	mov	r25, r24
     fe6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__floatsisf>
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	ad 81       	ldd	r26, Y+5	; 0x05
     ff4:	be 81       	ldd	r27, Y+6	; 0x06
     ff6:	6d 93       	st	X+, r22
     ff8:	7d 93       	st	X+, r23
     ffa:	8d 93       	st	X+, r24
     ffc:	9c 93       	st	X, r25
     ffe:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    1000:	ed 85       	ldd	r30, Y+13	; 0x0d
    1002:	fe 85       	ldd	r31, Y+14	; 0x0e
    1004:	11 82       	std	Z+1, r1	; 0x01
    1006:	10 82       	st	Z, r1
		*direction = 1;	
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	ab 85       	ldd	r26, Y+11	; 0x0b
    100e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1010:	8d 93       	st	X+, r24
    1012:	9c 93       	st	X, r25
    1014:	cc 24       	eor	r12, r12
    1016:	dd 24       	eor	r13, r13
    1018:	d9 ce       	rjmp	.-590    	; 0xdcc <fadeBetweenColors+0x114>

0000101a <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    1020:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <fadeBetweenColors>
	resetEffect = FALSE;
    1024:	10 92 ea 02 	sts	0x02EA, r1
}
    1028:	08 95       	ret

0000102a <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	2e 97       	sbiw	r28, 0x0e	; 14
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	9c 01       	movw	r18, r24
    1044:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    1046:	8c 01       	movw	r16, r24
    1048:	00 0f       	add	r16, r16
    104a:	11 1f       	adc	r17, r17
    104c:	0d 56       	subi	r16, 0x6D	; 109
    104e:	1c 4f       	sbci	r17, 0xFC	; 252
    1050:	d8 01       	movw	r26, r16
    1052:	8d 91       	ld	r24, X+
    1054:	9c 91       	ld	r25, X
    1056:	42 97       	sbiw	r24, 0x12	; 18
    1058:	14 f5       	brge	.+68     	; 0x109e <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    106a:	84 81       	ldd	r24, Z+4	; 0x04
    106c:	95 81       	ldd	r25, Z+5	; 0x05
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    1072:	18 86       	std	Y+8, r1	; 0x08
    1074:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    1076:	1a 86       	std	Y+10, r1	; 0x0a
    1078:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    107a:	1c 86       	std	Y+12, r1	; 0x0c
    107c:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    107e:	82 e1       	ldi	r24, 0x12	; 18
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9e 87       	std	Y+14, r25	; 0x0e
    1084:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    1086:	c9 01       	movw	r24, r18
    1088:	be 01       	movw	r22, r28
    108a:	6f 5f       	subi	r22, 0xFF	; 255
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    1092:	f8 01       	movw	r30, r16
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
	
}
    109e:	2e 96       	adiw	r28, 0x0e	; 14
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	08 95       	ret

000010b4 <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	2e 97       	sbiw	r28, 0x0e	; 14
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    10ca:	fc 01       	movw	r30, r24
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ed 56       	subi	r30, 0x6D	; 109
    10d2:	fc 4f       	sbci	r31, 0xFC	; 252
    10d4:	11 82       	std	Z+1, r1	; 0x01
    10d6:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    10d8:	2d 91       	ld	r18, X+
    10da:	3c 91       	ld	r19, X
    10dc:	11 97       	sbiw	r26, 0x01	; 1
    10de:	3a 83       	std	Y+2, r19	; 0x02
    10e0:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    10e2:	12 96       	adiw	r26, 0x02	; 2
    10e4:	2d 91       	ld	r18, X+
    10e6:	3c 91       	ld	r19, X
    10e8:	13 97       	sbiw	r26, 0x03	; 3
    10ea:	3c 83       	std	Y+4, r19	; 0x04
    10ec:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    10ee:	14 96       	adiw	r26, 0x04	; 4
    10f0:	2d 91       	ld	r18, X+
    10f2:	3c 91       	ld	r19, X
    10f4:	15 97       	sbiw	r26, 0x05	; 5
    10f6:	3e 83       	std	Y+6, r19	; 0x06
    10f8:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    10fa:	18 86       	std	Y+8, r1	; 0x08
    10fc:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    10fe:	1a 86       	std	Y+10, r1	; 0x0a
    1100:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    1102:	1c 86       	std	Y+12, r1	; 0x0c
    1104:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    1106:	22 e1       	ldi	r18, 0x12	; 18
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3e 87       	std	Y+14, r19	; 0x0e
    110c:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    1114:	be 01       	movw	r22, r28
    1116:	6f 5f       	subi	r22, 0xFF	; 255
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <fadeBetweenColors>
	resetEffect=FALSE;
    111e:	10 92 ea 02 	sts	0x02EA, r1
}
    1122:	2e 96       	adiw	r28, 0x0e	; 14
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	7c 01       	movw	r14, r24
    1142:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    1144:	8c 01       	movw	r16, r24
    1146:	00 0f       	add	r16, r16
    1148:	11 1f       	adc	r17, r17
    114a:	f8 01       	movw	r30, r16
    114c:	e5 5b       	subi	r30, 0xB5	; 181
    114e:	fc 4f       	sbci	r31, 0xFC	; 252
    1150:	11 82       	std	Z+1, r1	; 0x01
    1152:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    1154:	f8 01       	movw	r30, r16
    1156:	ed 59       	subi	r30, 0x9D	; 157
    1158:	fc 4f       	sbci	r31, 0xFC	; 252
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    1162:	f8 01       	movw	r30, r16
    1164:	e5 55       	subi	r30, 0x55	; 85
    1166:	fc 4f       	sbci	r31, 0xFC	; 252
    1168:	11 82       	std	Z+1, r1	; 0x01
    116a:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    116c:	c7 01       	movw	r24, r14
    116e:	0e 94 c1 05 	call	0xb82	; 0xb82 <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	0e 94 0d 08 	call	0x101a	; 0x101a <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    117a:	0e 0d       	add	r16, r14
    117c:	1f 1d       	adc	r17, r15
    117e:	00 0f       	add	r16, r16
    1180:	11 1f       	adc	r17, r17
    1182:	0e 55       	subi	r16, 0x5E	; 94
    1184:	1d 4f       	sbci	r17, 0xFD	; 253
    1186:	c7 01       	movw	r24, r14
    1188:	b8 01       	movw	r22, r16
    118a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <getRGBColor>
}
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	08 95       	ret

0000119c <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	2a 97       	sbiw	r28, 0x0a	; 10
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	6c 01       	movw	r12, r24
    11c2:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	8c 01       	movw	r16, r24
    11ca:	0c 0d       	add	r16, r12
    11cc:	1d 1d       	adc	r17, r13
    11ce:	00 0f       	add	r16, r16
    11d0:	11 1f       	adc	r17, r17
    11d2:	0e 55       	subi	r16, 0x5E	; 94
    11d4:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    11d6:	5b ea       	ldi	r21, 0xAB	; 171
    11d8:	e5 2e       	mov	r14, r21
    11da:	53 e0       	ldi	r21, 0x03	; 3
    11dc:	f5 2e       	mov	r15, r21
    11de:	e8 0e       	add	r14, r24
    11e0:	f9 1e       	adc	r15, r25
    11e2:	d7 01       	movw	r26, r14
    11e4:	8d 91       	ld	r24, X+
    11e6:	9c 91       	ld	r25, X
    11e8:	8a 30       	cpi	r24, 0x0A	; 10
    11ea:	91 05       	cpc	r25, r1
    11ec:	b4 f5       	brge	.+108    	; 0x125a <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	d7 01       	movw	r26, r14
    11f2:	8d 93       	st	X+, r24
    11f4:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    11f6:	f8 01       	movw	r30, r16
    11f8:	22 81       	ldd	r18, Z+2	; 0x02
    11fa:	33 81       	ldd	r19, Z+3	; 0x03
    11fc:	44 81       	ldd	r20, Z+4	; 0x04
    11fe:	55 81       	ldd	r21, Z+5	; 0x05
    1200:	d5 01       	movw	r26, r10
    1202:	1e 96       	adiw	r26, 0x0e	; 14
    1204:	6d 91       	ld	r22, X+
    1206:	7c 91       	ld	r23, X
    1208:	1f 97       	sbiw	r26, 0x0f	; 15
    120a:	50 96       	adiw	r26, 0x10	; 16
    120c:	ed 91       	ld	r30, X+
    120e:	fc 91       	ld	r31, X
    1210:	51 97       	sbiw	r26, 0x11	; 17
    1212:	d8 01       	movw	r26, r16
    1214:	8d 91       	ld	r24, X+
    1216:	9c 91       	ld	r25, X
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	5e 83       	std	Y+6, r21	; 0x06
    1222:	4d 83       	std	Y+5, r20	; 0x05
    1224:	78 87       	std	Y+8, r23	; 0x08
    1226:	6f 83       	std	Y+7, r22	; 0x07
    1228:	fa 87       	std	Y+10, r31	; 0x0a
    122a:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    122c:	c6 01       	movw	r24, r12
    122e:	be 01       	movw	r22, r28
    1230:	6f 5f       	subi	r22, 0xFF	; 255
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	0e 94 dd 05 	call	0xbba	; 0xbba <pwmEffect>

	
	
}
    1238:	2a 96       	adiw	r28, 0x0a	; 10
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    125a:	c6 01       	movw	r24, r12
    125c:	b5 01       	movw	r22, r10
    125e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    1262:	c6 01       	movw	r24, r12
    1264:	b8 01       	movw	r22, r16
    1266:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    126a:	f7 01       	movw	r30, r14
    126c:	11 82       	std	Z+1, r1	; 0x01
    126e:	10 82       	st	Z, r1
    1270:	c2 cf       	rjmp	.-124    	; 0x11f6 <fadeBetweenColorsWithPwm+0x5a>

00001272 <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	62 97       	sbiw	r28, 0x12	; 18
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	f8 2e       	mov	r15, r24
    1290:	e9 2e       	mov	r14, r25
    1292:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    1294:	1e 96       	adiw	r26, 0x0e	; 14
    1296:	8d 91       	ld	r24, X+
    1298:	9c 91       	ld	r25, X
    129a:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    12a2:	a6 c0       	rjmp	.+332    	; 0x13f0 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    12a4:	89 2b       	or	r24, r25
    12a6:	31 f5       	brne	.+76     	; 0x12f4 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    12a8:	8f 2d       	mov	r24, r15
    12aa:	9e 2d       	mov	r25, r14
    12ac:	fc 01       	movw	r30, r24
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	e8 0f       	add	r30, r24
    12c0:	f9 1f       	adc	r31, r25
    12c2:	e5 59       	subi	r30, 0x95	; 149
    12c4:	fb 4f       	sbci	r31, 0xFB	; 251
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    12ce:	8f 2d       	mov	r24, r15
    12d0:	9e 2d       	mov	r25, r14
    12d2:	fc 01       	movw	r30, r24
    12d4:	ee 0f       	add	r30, r30
    12d6:	ff 1f       	adc	r31, r31
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	ee 0f       	add	r30, r30
    12de:	ff 1f       	adc	r31, r31
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	e8 0f       	add	r30, r24
    12e6:	f9 1f       	adc	r31, r25
    12e8:	e5 59       	subi	r30, 0x95	; 149
    12ea:	fb 4f       	sbci	r31, 0xFB	; 251
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	93 83       	std	Z+3, r25	; 0x03
    12f2:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    12f4:	8f 2d       	mov	r24, r15
    12f6:	9e 2d       	mov	r25, r14
    12f8:	fc 01       	movw	r30, r24
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	e8 0f       	add	r30, r24
    130c:	f9 1f       	adc	r31, r25
    130e:	e5 59       	subi	r30, 0x95	; 149
    1310:	fb 4f       	sbci	r31, 0xFB	; 251
    1312:	15 82       	std	Z+5, r1	; 0x05
    1314:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    1316:	8f 2d       	mov	r24, r15
    1318:	9e 2d       	mov	r25, r14
    131a:	fc 01       	movw	r30, r24
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	ee 0f       	add	r30, r30
    1326:	ff 1f       	adc	r31, r31
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	e8 0f       	add	r30, r24
    132e:	f9 1f       	adc	r31, r25
    1330:	e5 59       	subi	r30, 0x95	; 149
    1332:	fb 4f       	sbci	r31, 0xFB	; 251
    1334:	50 96       	adiw	r26, 0x10	; 16
    1336:	8c 91       	ld	r24, X
    1338:	50 97       	sbiw	r26, 0x10	; 16
    133a:	51 96       	adiw	r26, 0x11	; 17
    133c:	9c 91       	ld	r25, X
    133e:	51 97       	sbiw	r26, 0x11	; 17
    1340:	9c 01       	movw	r18, r24
    1342:	22 0f       	add	r18, r18
    1344:	33 1f       	adc	r19, r19
    1346:	22 0f       	add	r18, r18
    1348:	33 1f       	adc	r19, r19
    134a:	22 0f       	add	r18, r18
    134c:	33 1f       	adc	r19, r19
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	28 0f       	add	r18, r24
    1354:	39 1f       	adc	r19, r25
    1356:	31 87       	std	Z+9, r19	; 0x09
    1358:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    135a:	8e 01       	movw	r16, r28
    135c:	0f 5f       	subi	r16, 0xFF	; 255
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	c8 01       	movw	r24, r16
    1362:	bd 01       	movw	r22, r26
    1364:	47 e0       	ldi	r20, 0x07	; 7
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    136c:	8f 2d       	mov	r24, r15
    136e:	9e 2d       	mov	r25, r14
    1370:	fc 01       	movw	r30, r24
    1372:	ee 0f       	add	r30, r30
    1374:	ff 1f       	adc	r31, r31
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	e8 0f       	add	r30, r24
    1384:	f9 1f       	adc	r31, r25
    1386:	e5 59       	subi	r30, 0x95	; 149
    1388:	fb 4f       	sbci	r31, 0xFB	; 251
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	98 8b       	std	Y+16, r25	; 0x10
    1390:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    1392:	8f 2d       	mov	r24, r15
    1394:	9e 2d       	mov	r25, r14
    1396:	fc 01       	movw	r30, r24
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	e8 0f       	add	r30, r24
    13aa:	f9 1f       	adc	r31, r25
    13ac:	e5 59       	subi	r30, 0x95	; 149
    13ae:	fb 4f       	sbci	r31, 0xFB	; 251
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	9a 8b       	std	Y+18, r25	; 0x12
    13b6:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    13b8:	8f 2d       	mov	r24, r15
    13ba:	9e 2d       	mov	r25, r14
    13bc:	b8 01       	movw	r22, r16
    13be:	0e 94 9a 08 	call	0x1134	; 0x1134 <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    13c2:	8f 2d       	mov	r24, r15
    13c4:	9e 2d       	mov	r25, r14
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>

}
    13d6:	62 96       	adiw	r28, 0x12	; 18
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    13f0:	8f 2d       	mov	r24, r15
    13f2:	9e 2d       	mov	r25, r14
    13f4:	fc 01       	movw	r30, r24
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	e5 59       	subi	r30, 0x95	; 149
    140c:	fb 4f       	sbci	r31, 0xFB	; 251
    140e:	11 82       	std	Z+1, r1	; 0x01
    1410:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    1412:	8f 2d       	mov	r24, r15
    1414:	9e 2d       	mov	r25, r14
    1416:	fc 01       	movw	r30, r24
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	e8 0f       	add	r30, r24
    142a:	f9 1f       	adc	r31, r25
    142c:	e5 59       	subi	r30, 0x95	; 149
    142e:	fb 4f       	sbci	r31, 0xFB	; 251
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	93 83       	std	Z+3, r25	; 0x03
    1436:	82 83       	std	Z+2, r24	; 0x02
    1438:	5d cf       	rjmp	.-326    	; 0x12f4 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

0000143a <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	62 97       	sbiw	r28, 0x12	; 18
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	f8 2e       	mov	r15, r24
    1458:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    145a:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    145c:	fb 01       	movw	r30, r22
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    146e:	84 81       	ldd	r24, Z+4	; 0x04
    1470:	95 81       	ldd	r25, Z+5	; 0x05
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    1476:	86 81       	ldd	r24, Z+6	; 0x06
    1478:	97 81       	ldd	r25, Z+7	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
    147c:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    147e:	80 85       	ldd	r24, Z+8	; 0x08
    1480:	91 85       	ldd	r25, Z+9	; 0x09
    1482:	9a 87       	std	Y+10, r25	; 0x0a
    1484:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    1486:	82 85       	ldd	r24, Z+10	; 0x0a
    1488:	93 85       	ldd	r25, Z+11	; 0x0b
    148a:	9c 87       	std	Y+12, r25	; 0x0c
    148c:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    148e:	82 89       	ldd	r24, Z+18	; 0x12
    1490:	93 89       	ldd	r25, Z+19	; 0x13
    1492:	9e 87       	std	Y+14, r25	; 0x0e
    1494:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    1496:	84 89       	ldd	r24, Z+20	; 0x14
    1498:	95 89       	ldd	r25, Z+21	; 0x15
    149a:	98 8b       	std	Y+16, r25	; 0x10
    149c:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    149e:	86 89       	ldd	r24, Z+22	; 0x16
    14a0:	97 89       	ldd	r25, Z+23	; 0x17
    14a2:	9a 8b       	std	Y+18, r25	; 0x12
    14a4:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    14a6:	8f 2d       	mov	r24, r15
    14a8:	9e 2d       	mov	r25, r14
    14aa:	be 01       	movw	r22, r28
    14ac:	6f 5f       	subi	r22, 0xFF	; 255
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	0e 94 39 09 	call	0x1272	; 0x1272 <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    14b4:	a3 ec       	ldi	r26, 0xC3	; 195
    14b6:	b3 e0       	ldi	r27, 0x03	; 3
    14b8:	8f 2d       	mov	r24, r15
    14ba:	9e 2d       	mov	r25, r14
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	fc 01       	movw	r30, r24
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	e8 1b       	sub	r30, r24
    14d0:	f9 0b       	sbc	r31, r25
    14d2:	ea 0f       	add	r30, r26
    14d4:	fb 1f       	adc	r31, r27
    14d6:	11 82       	std	Z+1, r1	; 0x01
    14d8:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    14da:	8f 2d       	mov	r24, r15
    14dc:	9e 2d       	mov	r25, r14
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	fc 01       	movw	r30, r24
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	e8 1b       	sub	r30, r24
    14f2:	f9 0b       	sbc	r31, r25
    14f4:	ea 0f       	add	r30, r26
    14f6:	fb 1f       	adc	r31, r27
    14f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fc:	95 83       	std	Z+5, r25	; 0x05
    14fe:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    1500:	8f 2d       	mov	r24, r15
    1502:	9e 2d       	mov	r25, r14
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	fc 01       	movw	r30, r24
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	e8 1b       	sub	r30, r24
    1518:	f9 0b       	sbc	r31, r25
    151a:	ea 0f       	add	r30, r26
    151c:	fb 1f       	adc	r31, r27
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	93 83       	std	Z+3, r25	; 0x03
    1524:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    1526:	8f 2d       	mov	r24, r15
    1528:	9e 2d       	mov	r25, r14
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	fc 01       	movw	r30, r24
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	e8 1b       	sub	r30, r24
    153e:	f9 0b       	sbc	r31, r25
    1540:	ea 0f       	add	r30, r26
    1542:	fb 1f       	adc	r31, r27
    1544:	17 82       	std	Z+7, r1	; 0x07
    1546:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    1548:	8f 2d       	mov	r24, r15
    154a:	9e 2d       	mov	r25, r14
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	fc 01       	movw	r30, r24
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	ee 0f       	add	r30, r30
    155c:	ff 1f       	adc	r31, r31
    155e:	e8 1b       	sub	r30, r24
    1560:	f9 0b       	sbc	r31, r25
    1562:	ea 0f       	add	r30, r26
    1564:	fb 1f       	adc	r31, r27
    1566:	13 87       	std	Z+11, r17	; 0x0b
    1568:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    156a:	8f 2d       	mov	r24, r15
    156c:	9e 2d       	mov	r25, r14
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	9c 01       	movw	r18, r24
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	28 1b       	sub	r18, r24
    1582:	39 0b       	sbc	r19, r25
    1584:	a2 0f       	add	r26, r18
    1586:	b3 1f       	adc	r27, r19
    1588:	0a 5f       	subi	r16, 0xFA	; 250
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	1d 96       	adiw	r26, 0x0d	; 13
    158e:	1c 93       	st	X, r17
    1590:	0e 93       	st	-X, r16
    1592:	1c 97       	sbiw	r26, 0x0c	; 12


}
    1594:	62 96       	adiw	r28, 0x12	; 18
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	08 95       	ret

000015ae <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	62 97       	sbiw	r28, 0x12	; 18
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	f8 2e       	mov	r15, r24
    15cc:	e9 2e       	mov	r14, r25
    15ce:	db 01       	movw	r26, r22
	short direction = data[7];
    15d0:	1e 96       	adiw	r26, 0x0e	; 14
    15d2:	6d 91       	ld	r22, X+
    15d4:	7c 91       	ld	r23, X
    15d6:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    15d8:	fc 01       	movw	r30, r24
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	e8 0f       	add	r30, r24
    15ec:	f9 1f       	adc	r31, r25
    15ee:	e5 59       	subi	r30, 0x95	; 149
    15f0:	fb 4f       	sbci	r31, 0xFB	; 251
    15f2:	40 85       	ldd	r20, Z+8	; 0x08
    15f4:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    15f6:	8f 2d       	mov	r24, r15
    15f8:	9e 2d       	mov	r25, r14
    15fa:	fc 01       	movw	r30, r24
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	ee 0f       	add	r30, r30
    1606:	ff 1f       	adc	r31, r31
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	e8 0f       	add	r30, r24
    160e:	f9 1f       	adc	r31, r25
    1610:	e5 59       	subi	r30, 0x95	; 149
    1612:	fb 4f       	sbci	r31, 0xFB	; 251
    1614:	86 81       	ldd	r24, Z+6	; 0x06
    1616:	97 81       	ldd	r25, Z+7	; 0x07
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	09 f4       	brne	.+2      	; 0x161e <fadeBetweenColorsWithScalingPwmEffect+0x70>
    161c:	aa c0       	rjmp	.+340    	; 0x1772 <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    161e:	8f 2d       	mov	r24, r15
    1620:	9e 2d       	mov	r25, r14
    1622:	fc 01       	movw	r30, r24
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	e8 0f       	add	r30, r24
    1636:	f9 1f       	adc	r31, r25
    1638:	e5 59       	subi	r30, 0x95	; 149
    163a:	fb 4f       	sbci	r31, 0xFB	; 251
    163c:	24 81       	ldd	r18, Z+4	; 0x04
    163e:	35 81       	ldd	r19, Z+5	; 0x05
    1640:	24 17       	cp	r18, r20
    1642:	35 07       	cpc	r19, r21
    1644:	0c f0       	brlt	.+2      	; 0x1648 <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    1646:	54 c0       	rjmp	.+168    	; 0x16f0 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    1648:	8f 2d       	mov	r24, r15
    164a:	9e 2d       	mov	r25, r14
    164c:	fc 01       	movw	r30, r24
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	ee 0f       	add	r30, r30
    1658:	ff 1f       	adc	r31, r31
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	e8 0f       	add	r30, r24
    1660:	f9 1f       	adc	r31, r25
    1662:	e5 59       	subi	r30, 0x95	; 149
    1664:	fb 4f       	sbci	r31, 0xFB	; 251
    1666:	2f 5f       	subi	r18, 0xFF	; 255
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	35 83       	std	Z+5, r19	; 0x05
    166c:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    166e:	8e 01       	movw	r16, r28
    1670:	0f 5f       	subi	r16, 0xFF	; 255
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	c8 01       	movw	r24, r16
    1676:	bd 01       	movw	r22, r26
    1678:	47 e0       	ldi	r20, 0x07	; 7
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    1680:	8f 2d       	mov	r24, r15
    1682:	9e 2d       	mov	r25, r14
    1684:	fc 01       	movw	r30, r24
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	e8 0f       	add	r30, r24
    1698:	f9 1f       	adc	r31, r25
    169a:	e5 59       	subi	r30, 0x95	; 149
    169c:	fb 4f       	sbci	r31, 0xFB	; 251
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	98 8b       	std	Y+16, r25	; 0x10
    16a4:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    16a6:	8f 2d       	mov	r24, r15
    16a8:	9e 2d       	mov	r25, r14
    16aa:	fc 01       	movw	r30, r24
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	e8 0f       	add	r30, r24
    16be:	f9 1f       	adc	r31, r25
    16c0:	e5 59       	subi	r30, 0x95	; 149
    16c2:	fb 4f       	sbci	r31, 0xFB	; 251
    16c4:	82 81       	ldd	r24, Z+2	; 0x02
    16c6:	93 81       	ldd	r25, Z+3	; 0x03
    16c8:	9a 8b       	std	Y+18, r25	; 0x12
    16ca:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    16cc:	8f 2d       	mov	r24, r15
    16ce:	9e 2d       	mov	r25, r14
    16d0:	b8 01       	movw	r22, r16
    16d2:	0e 94 ce 08 	call	0x119c	; 0x119c <fadeBetweenColorsWithPwm>
	

}
    16d6:	62 96       	adiw	r28, 0x12	; 18
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	ff 90       	pop	r15
    16ec:	ef 90       	pop	r14
    16ee:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    16f0:	8f 2d       	mov	r24, r15
    16f2:	9e 2d       	mov	r25, r14
    16f4:	fc 01       	movw	r30, r24
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	e8 0f       	add	r30, r24
    1708:	f9 1f       	adc	r31, r25
    170a:	e5 59       	subi	r30, 0x95	; 149
    170c:	fb 4f       	sbci	r31, 0xFB	; 251
    170e:	15 82       	std	Z+5, r1	; 0x05
    1710:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    1712:	61 30       	cpi	r22, 0x01	; 1
    1714:	71 05       	cpc	r23, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    1718:	86 c0       	rjmp	.+268    	; 0x1826 <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    171a:	67 2b       	or	r22, r23
    171c:	09 f0       	breq	.+2      	; 0x1720 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    171e:	a7 cf       	rjmp	.-178    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    1720:	8f 2d       	mov	r24, r15
    1722:	9e 2d       	mov	r25, r14
    1724:	fc 01       	movw	r30, r24
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	e8 0f       	add	r30, r24
    1738:	f9 1f       	adc	r31, r25
    173a:	e5 59       	subi	r30, 0x95	; 149
    173c:	fb 4f       	sbci	r31, 0xFB	; 251
    173e:	20 81       	ld	r18, Z
    1740:	31 81       	ldd	r19, Z+1	; 0x01
    1742:	23 30       	cpi	r18, 0x03	; 3
    1744:	31 05       	cpc	r19, r1
    1746:	0c f4       	brge	.+2      	; 0x174a <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    1748:	97 c0       	rjmp	.+302    	; 0x1878 <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    174a:	8f 2d       	mov	r24, r15
    174c:	9e 2d       	mov	r25, r14
    174e:	fc 01       	movw	r30, r24
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	e8 0f       	add	r30, r24
    1762:	f9 1f       	adc	r31, r25
    1764:	e5 59       	subi	r30, 0x95	; 149
    1766:	fb 4f       	sbci	r31, 0xFB	; 251
    1768:	22 50       	subi	r18, 0x02	; 2
    176a:	30 40       	sbci	r19, 0x00	; 0
    176c:	31 83       	std	Z+1, r19	; 0x01
    176e:	20 83       	st	Z, r18
    1770:	7e cf       	rjmp	.-260    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    1772:	8f 2d       	mov	r24, r15
    1774:	9e 2d       	mov	r25, r14
    1776:	fc 01       	movw	r30, r24
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	e8 0f       	add	r30, r24
    178a:	f9 1f       	adc	r31, r25
    178c:	e5 59       	subi	r30, 0x95	; 149
    178e:	fb 4f       	sbci	r31, 0xFB	; 251
    1790:	84 81       	ldd	r24, Z+4	; 0x04
    1792:	95 81       	ldd	r25, Z+5	; 0x05
    1794:	0a 97       	sbiw	r24, 0x0a	; 10
    1796:	0c f1       	brlt	.+66     	; 0x17da <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    1798:	61 30       	cpi	r22, 0x01	; 1
    179a:	71 05       	cpc	r23, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    179e:	e6 c0       	rjmp	.+460    	; 0x196c <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    17a0:	67 2b       	or	r22, r23
    17a2:	51 f4       	brne	.+20     	; 0x17b8 <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    17a4:	8f 2d       	mov	r24, r15
    17a6:	9e 2d       	mov	r25, r14
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    17b8:	8f 2d       	mov	r24, r15
    17ba:	9e 2d       	mov	r25, r14
    17bc:	fc 01       	movw	r30, r24
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	e8 0f       	add	r30, r24
    17d0:	f9 1f       	adc	r31, r25
    17d2:	e5 59       	subi	r30, 0x95	; 149
    17d4:	fb 4f       	sbci	r31, 0xFB	; 251
    17d6:	15 82       	std	Z+5, r1	; 0x05
    17d8:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    17da:	8f 2d       	mov	r24, r15
    17dc:	9e 2d       	mov	r25, r14
    17de:	dc 01       	movw	r26, r24
    17e0:	aa 0f       	add	r26, r26
    17e2:	bb 1f       	adc	r27, r27
    17e4:	aa 0f       	add	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	aa 0f       	add	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	a8 0f       	add	r26, r24
    17f2:	b9 1f       	adc	r27, r25
    17f4:	a5 59       	subi	r26, 0x95	; 149
    17f6:	bb 4f       	sbci	r27, 0xFB	; 251
    17f8:	8f 2d       	mov	r24, r15
    17fa:	9e 2d       	mov	r25, r14
    17fc:	fc 01       	movw	r30, r24
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	ee 0f       	add	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	e8 0f       	add	r30, r24
    1810:	f9 1f       	adc	r31, r25
    1812:	e5 59       	subi	r30, 0x95	; 149
    1814:	fb 4f       	sbci	r31, 0xFB	; 251
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	95 81       	ldd	r25, Z+5	; 0x05
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	15 96       	adiw	r26, 0x05	; 5
    181e:	9c 93       	st	X, r25
    1820:	8e 93       	st	-X, r24
    1822:	14 97       	sbiw	r26, 0x04	; 4
    1824:	58 cf       	rjmp	.-336    	; 0x16d6 <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    1826:	8f 2d       	mov	r24, r15
    1828:	9e 2d       	mov	r25, r14
    182a:	fc 01       	movw	r30, r24
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	e8 0f       	add	r30, r24
    183e:	f9 1f       	adc	r31, r25
    1840:	e5 59       	subi	r30, 0x95	; 149
    1842:	fb 4f       	sbci	r31, 0xFB	; 251
    1844:	22 81       	ldd	r18, Z+2	; 0x02
    1846:	33 81       	ldd	r19, Z+3	; 0x03
    1848:	23 30       	cpi	r18, 0x03	; 3
    184a:	31 05       	cpc	r19, r1
    184c:	0c f4       	brge	.+2      	; 0x1850 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    184e:	52 c0       	rjmp	.+164    	; 0x18f4 <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    1850:	8f 2d       	mov	r24, r15
    1852:	9e 2d       	mov	r25, r14
    1854:	fc 01       	movw	r30, r24
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	e5 59       	subi	r30, 0x95	; 149
    186c:	fb 4f       	sbci	r31, 0xFB	; 251
    186e:	22 50       	subi	r18, 0x02	; 2
    1870:	30 40       	sbci	r19, 0x00	; 0
    1872:	33 83       	std	Z+3, r19	; 0x03
    1874:	22 83       	std	Z+2, r18	; 0x02
    1876:	fb ce       	rjmp	.-522    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    1878:	8f 2d       	mov	r24, r15
    187a:	9e 2d       	mov	r25, r14
    187c:	fc 01       	movw	r30, r24
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	e8 0f       	add	r30, r24
    1890:	f9 1f       	adc	r31, r25
    1892:	e5 59       	subi	r30, 0x95	; 149
    1894:	fb 4f       	sbci	r31, 0xFB	; 251
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	80 32       	cpi	r24, 0x20	; 32
    189c:	91 05       	cpc	r25, r1
    189e:	0c f0       	brlt	.+2      	; 0x18a2 <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    18a0:	e6 ce       	rjmp	.-564    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    18a2:	02 96       	adiw	r24, 0x02	; 2
    18a4:	2f 2d       	mov	r18, r15
    18a6:	3e 2d       	mov	r19, r14
    18a8:	f9 01       	movw	r30, r18
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	ee 0f       	add	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	22 0f       	add	r18, r18
    18b8:	33 1f       	adc	r19, r19
    18ba:	e2 0f       	add	r30, r18
    18bc:	f3 1f       	adc	r31, r19
    18be:	e5 59       	subi	r30, 0x95	; 149
    18c0:	fb 4f       	sbci	r31, 0xFB	; 251
    18c2:	93 83       	std	Z+3, r25	; 0x03
    18c4:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    18c6:	80 97       	sbiw	r24, 0x20	; 32
    18c8:	09 f0       	breq	.+2      	; 0x18cc <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    18ca:	d1 ce       	rjmp	.-606    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    18cc:	8f 2d       	mov	r24, r15
    18ce:	9e 2d       	mov	r25, r14
    18d0:	fc 01       	movw	r30, r24
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	e8 0f       	add	r30, r24
    18e4:	f9 1f       	adc	r31, r25
    18e6:	e5 59       	subi	r30, 0x95	; 149
    18e8:	fb 4f       	sbci	r31, 0xFB	; 251
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	97 83       	std	Z+7, r25	; 0x07
    18f0:	86 83       	std	Z+6, r24	; 0x06
    18f2:	bd ce       	rjmp	.-646    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    18f4:	8f 2d       	mov	r24, r15
    18f6:	9e 2d       	mov	r25, r14
    18f8:	fc 01       	movw	r30, r24
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	e8 0f       	add	r30, r24
    190c:	f9 1f       	adc	r31, r25
    190e:	e5 59       	subi	r30, 0x95	; 149
    1910:	fb 4f       	sbci	r31, 0xFB	; 251
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	80 32       	cpi	r24, 0x20	; 32
    1918:	91 05       	cpc	r25, r1
    191a:	0c f0       	brlt	.+2      	; 0x191e <fadeBetweenColorsWithScalingPwmEffect+0x370>
    191c:	a8 ce       	rjmp	.-688    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    191e:	02 96       	adiw	r24, 0x02	; 2
    1920:	2f 2d       	mov	r18, r15
    1922:	3e 2d       	mov	r19, r14
    1924:	f9 01       	movw	r30, r18
    1926:	ee 0f       	add	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	ee 0f       	add	r30, r30
    192c:	ff 1f       	adc	r31, r31
    192e:	ee 0f       	add	r30, r30
    1930:	ff 1f       	adc	r31, r31
    1932:	22 0f       	add	r18, r18
    1934:	33 1f       	adc	r19, r19
    1936:	e2 0f       	add	r30, r18
    1938:	f3 1f       	adc	r31, r19
    193a:	e5 59       	subi	r30, 0x95	; 149
    193c:	fb 4f       	sbci	r31, 0xFB	; 251
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    1942:	80 97       	sbiw	r24, 0x20	; 32
    1944:	09 f0       	breq	.+2      	; 0x1948 <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    1946:	93 ce       	rjmp	.-730    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    1948:	8f 2d       	mov	r24, r15
    194a:	9e 2d       	mov	r25, r14
    194c:	fc 01       	movw	r30, r24
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	e8 0f       	add	r30, r24
    1960:	f9 1f       	adc	r31, r25
    1962:	e5 59       	subi	r30, 0x95	; 149
    1964:	fb 4f       	sbci	r31, 0xFB	; 251
    1966:	77 83       	std	Z+7, r23	; 0x07
    1968:	66 83       	std	Z+6, r22	; 0x06
    196a:	81 ce       	rjmp	.-766    	; 0x166e <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    196c:	8f 2d       	mov	r24, r15
    196e:	9e 2d       	mov	r25, r14
    1970:	bd 01       	movw	r22, r26
    1972:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <fadeBetweenColors>
    1976:	20 cf       	rjmp	.-448    	; 0x17b8 <fadeBetweenColorsWithScalingPwmEffect+0x20a>

00001978 <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	a6 97       	sbiw	r28, 0x26	; 38
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	f8 2e       	mov	r15, r24
    1996:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    1998:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	fc 01       	movw	r30, r24
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	e8 1b       	sub	r30, r24
    19ae:	f9 0b       	sbc	r31, r25
    19b0:	ed 53       	subi	r30, 0x3D	; 61
    19b2:	fc 4f       	sbci	r31, 0xFC	; 252
    19b4:	20 85       	ldd	r18, Z+8	; 0x08
    19b6:	31 85       	ldd	r19, Z+9	; 0x09
    19b8:	2a 30       	cpi	r18, 0x0A	; 10
    19ba:	31 05       	cpc	r19, r1
    19bc:	0c f4       	brge	.+2      	; 0x19c0 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    19be:	4b c0       	rjmp	.+150    	; 0x1a56 <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    19c0:	8f 2d       	mov	r24, r15
    19c2:	9e 2d       	mov	r25, r14
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	fc 01       	movw	r30, r24
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	ee 0f       	add	r30, r30
    19d4:	ff 1f       	adc	r31, r31
    19d6:	e8 1b       	sub	r30, r24
    19d8:	f9 0b       	sbc	r31, r25
    19da:	ed 53       	subi	r30, 0x3D	; 61
    19dc:	fc 4f       	sbci	r31, 0xFC	; 252
    19de:	26 81       	ldd	r18, Z+6	; 0x06
    19e0:	37 81       	ldd	r19, Z+7	; 0x07
    19e2:	8f 2d       	mov	r24, r15
    19e4:	9e 2d       	mov	r25, r14
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	fc 01       	movw	r30, r24
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	e8 1b       	sub	r30, r24
    19fa:	f9 0b       	sbc	r31, r25
    19fc:	ed 53       	subi	r30, 0x3D	; 61
    19fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1a00:	84 81       	ldd	r24, Z+4	; 0x04
    1a02:	95 81       	ldd	r25, Z+5	; 0x05
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	0c f0       	brlt	.+2      	; 0x1a0c <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    1a0a:	95 c0       	rjmp	.+298    	; 0x1b36 <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    1a0c:	8f 2d       	mov	r24, r15
    1a0e:	9e 2d       	mov	r25, r14
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	fc 01       	movw	r30, r24
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	e8 1b       	sub	r30, r24
    1a24:	f9 0b       	sbc	r31, r25
    1a26:	ed 53       	subi	r30, 0x3D	; 61
    1a28:	fc 4f       	sbci	r31, 0xFC	; 252
    1a2a:	2f 5f       	subi	r18, 0xFF	; 255
    1a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2e:	37 83       	std	Z+7, r19	; 0x07
    1a30:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    1a32:	8f 2d       	mov	r24, r15
    1a34:	9e 2d       	mov	r25, r14
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	ee 0f       	add	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	e8 1b       	sub	r30, r24
    1a4a:	f9 0b       	sbc	r31, r25
    1a4c:	ed 53       	subi	r30, 0x3D	; 61
    1a4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a50:	11 86       	std	Z+9, r1	; 0x09
    1a52:	10 86       	std	Z+8, r1	; 0x08
    1a54:	13 c0       	rjmp	.+38     	; 0x1a7c <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    1a56:	8f 2d       	mov	r24, r15
    1a58:	9e 2d       	mov	r25, r14
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	fc 01       	movw	r30, r24
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	ee 0f       	add	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	ee 0f       	add	r30, r30
    1a6a:	ff 1f       	adc	r31, r31
    1a6c:	e8 1b       	sub	r30, r24
    1a6e:	f9 0b       	sbc	r31, r25
    1a70:	ed 53       	subi	r30, 0x3D	; 61
    1a72:	fc 4f       	sbci	r31, 0xFC	; 252
    1a74:	2f 5f       	subi	r18, 0xFF	; 255
    1a76:	3f 4f       	sbci	r19, 0xFF	; 255
    1a78:	31 87       	std	Z+9, r19	; 0x09
    1a7a:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    1a7c:	8f 2d       	mov	r24, r15
    1a7e:	9e 2d       	mov	r25, r14
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	fc 01       	movw	r30, r24
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	ee 0f       	add	r30, r30
    1a90:	ff 1f       	adc	r31, r31
    1a92:	e8 1b       	sub	r30, r24
    1a94:	f9 0b       	sbc	r31, r25
    1a96:	ed 53       	subi	r30, 0x3D	; 61
    1a98:	fc 4f       	sbci	r31, 0xFC	; 252
    1a9a:	02 84       	ldd	r0, Z+10	; 0x0a
    1a9c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	9e 8b       	std	Y+22, r25	; 0x16
    1aa6:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	98 8f       	std	Y+24, r25	; 0x18
    1aae:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    1ab0:	84 81       	ldd	r24, Z+4	; 0x04
    1ab2:	95 81       	ldd	r25, Z+5	; 0x05
    1ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ab6:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    1ab8:	8f 2d       	mov	r24, r15
    1aba:	9e 2d       	mov	r25, r14
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	ee 0f       	add	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	ee 0f       	add	r30, r30
    1ac8:	ff 1f       	adc	r31, r31
    1aca:	ee 0f       	add	r30, r30
    1acc:	ff 1f       	adc	r31, r31
    1ace:	e8 1b       	sub	r30, r24
    1ad0:	f9 0b       	sbc	r31, r25
    1ad2:	ed 53       	subi	r30, 0x3D	; 61
    1ad4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad6:	04 84       	ldd	r0, Z+12	; 0x0c
    1ad8:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ada:	e0 2d       	mov	r30, r0
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	9c 8f       	std	Y+28, r25	; 0x1c
    1ae2:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aea:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    1aec:	84 81       	ldd	r24, Z+4	; 0x04
    1aee:	95 81       	ldd	r25, Z+5	; 0x05
    1af0:	98 a3       	std	Y+32, r25	; 0x20
    1af2:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    1af4:	f8 01       	movw	r30, r16
    1af6:	82 89       	ldd	r24, Z+18	; 0x12
    1af8:	93 89       	ldd	r25, Z+19	; 0x13
    1afa:	9a a3       	std	Y+34, r25	; 0x22
    1afc:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    1afe:	84 89       	ldd	r24, Z+20	; 0x14
    1b00:	95 89       	ldd	r25, Z+21	; 0x15
    1b02:	9c a3       	std	Y+36, r25	; 0x24
    1b04:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    1b06:	86 89       	ldd	r24, Z+22	; 0x16
    1b08:	97 89       	ldd	r25, Z+23	; 0x17
    1b0a:	9e a3       	std	Y+38, r25	; 0x26
    1b0c:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    1b0e:	8f 2d       	mov	r24, r15
    1b10:	9e 2d       	mov	r25, r14
    1b12:	be 01       	movw	r22, r28
    1b14:	6b 5e       	subi	r22, 0xEB	; 235
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    1b1c:	a6 96       	adiw	r28, 0x26	; 38
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	ff 90       	pop	r15
    1b32:	ef 90       	pop	r14
    1b34:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    1b36:	8f 2d       	mov	r24, r15
    1b38:	9e 2d       	mov	r25, r14
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	fc 01       	movw	r30, r24
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	e8 1b       	sub	r30, r24
    1b4e:	f9 0b       	sbc	r31, r25
    1b50:	ed 53       	subi	r30, 0x3D	; 61
    1b52:	fc 4f       	sbci	r31, 0xFC	; 252
    1b54:	42 81       	ldd	r20, Z+2	; 0x02
    1b56:	53 81       	ldd	r21, Z+3	; 0x03
    1b58:	41 30       	cpi	r20, 0x01	; 1
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    1b5e:	6a c0       	rjmp	.+212    	; 0x1c34 <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    1b60:	45 2b       	or	r20, r21
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    1b64:	f2 c0       	rjmp	.+484    	; 0x1d4a <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    1b66:	8f 2d       	mov	r24, r15
    1b68:	9e 2d       	mov	r25, r14
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ee 0f       	add	r30, r30
    1b72:	ff 1f       	adc	r31, r31
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	e8 1b       	sub	r30, r24
    1b7e:	f9 0b       	sbc	r31, r25
    1b80:	ed 53       	subi	r30, 0x3D	; 61
    1b82:	fc 4f       	sbci	r31, 0xFC	; 252
    1b84:	20 81       	ld	r18, Z
    1b86:	31 81       	ldd	r19, Z+1	; 0x01
    1b88:	21 50       	subi	r18, 0x01	; 1
    1b8a:	30 40       	sbci	r19, 0x00	; 0
    1b8c:	8f 2d       	mov	r24, r15
    1b8e:	9e 2d       	mov	r25, r14
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	fc 01       	movw	r30, r24
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	e8 1b       	sub	r30, r24
    1ba4:	f9 0b       	sbc	r31, r25
    1ba6:	ed 53       	subi	r30, 0x3D	; 61
    1ba8:	fc 4f       	sbci	r31, 0xFC	; 252
    1baa:	31 83       	std	Z+1, r19	; 0x01
    1bac:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    1bae:	23 2b       	or	r18, r19
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    1bb2:	f7 c0       	rjmp	.+494    	; 0x1da2 <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    1bb4:	8f 2d       	mov	r24, r15
    1bb6:	9e 2d       	mov	r25, r14
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	ff 1f       	adc	r31, r31
    1bca:	e8 1b       	sub	r30, r24
    1bcc:	f9 0b       	sbc	r31, r25
    1bce:	ed 53       	subi	r30, 0x3D	; 61
    1bd0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd2:	0a 5f       	subi	r16, 0xFA	; 250
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	13 87       	std	Z+11, r17	; 0x0b
    1bd8:	02 87       	std	Z+10, r16	; 0x0a
    1bda:	06 50       	subi	r16, 0x06	; 6
    1bdc:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    1bde:	8f 2d       	mov	r24, r15
    1be0:	9e 2d       	mov	r25, r14
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	fc 01       	movw	r30, r24
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	ee 0f       	add	r30, r30
    1bee:	ff 1f       	adc	r31, r31
    1bf0:	ee 0f       	add	r30, r30
    1bf2:	ff 1f       	adc	r31, r31
    1bf4:	e8 1b       	sub	r30, r24
    1bf6:	f9 0b       	sbc	r31, r25
    1bf8:	ed 53       	subi	r30, 0x3D	; 61
    1bfa:	fc 4f       	sbci	r31, 0xFC	; 252
    1bfc:	15 87       	std	Z+13, r17	; 0x0d
    1bfe:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    1c00:	f8 01       	movw	r30, r16
    1c02:	86 81       	ldd	r24, Z+6	; 0x06
    1c04:	97 81       	ldd	r25, Z+7	; 0x07
    1c06:	98 87       	std	Y+8, r25	; 0x08
    1c08:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    1c0a:	80 85       	ldd	r24, Z+8	; 0x08
    1c0c:	91 85       	ldd	r25, Z+9	; 0x09
    1c0e:	9a 87       	std	Y+10, r25	; 0x0a
    1c10:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    1c12:	82 85       	ldd	r24, Z+10	; 0x0a
    1c14:	93 85       	ldd	r25, Z+11	; 0x0b
    1c16:	9c 87       	std	Y+12, r25	; 0x0c
    1c18:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	9e 87       	std	Y+14, r25	; 0x0e
    1c20:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	98 8b       	std	Y+16, r25	; 0x10
    1c28:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    1c2a:	84 81       	ldd	r24, Z+4	; 0x04
    1c2c:	95 81       	ldd	r25, Z+5	; 0x05
    1c2e:	9a 8b       	std	Y+18, r25	; 0x12
    1c30:	89 8b       	std	Y+17, r24	; 0x11
    1c32:	8b c0       	rjmp	.+278    	; 0x1d4a <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    1c34:	8f 2d       	mov	r24, r15
    1c36:	9e 2d       	mov	r25, r14
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	ee 0f       	add	r30, r30
    1c40:	ff 1f       	adc	r31, r31
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	e8 1b       	sub	r30, r24
    1c4c:	f9 0b       	sbc	r31, r25
    1c4e:	ed 53       	subi	r30, 0x3D	; 61
    1c50:	fc 4f       	sbci	r31, 0xFC	; 252
    1c52:	20 81       	ld	r18, Z
    1c54:	31 81       	ldd	r19, Z+1	; 0x01
    1c56:	2f 5f       	subi	r18, 0xFF	; 255
    1c58:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5a:	8f 2d       	mov	r24, r15
    1c5c:	9e 2d       	mov	r25, r14
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	fc 01       	movw	r30, r24
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	ee 0f       	add	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	e8 1b       	sub	r30, r24
    1c72:	f9 0b       	sbc	r31, r25
    1c74:	ed 53       	subi	r30, 0x3D	; 61
    1c76:	fc 4f       	sbci	r31, 0xFC	; 252
    1c78:	31 83       	std	Z+1, r19	; 0x01
    1c7a:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    1c7c:	21 30       	cpi	r18, 0x01	; 1
    1c7e:	31 05       	cpc	r19, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    1c82:	e5 c0       	rjmp	.+458    	; 0x1e4e <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    1c84:	8f 2d       	mov	r24, r15
    1c86:	9e 2d       	mov	r25, r14
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	ee 0f       	add	r30, r30
    1c90:	ff 1f       	adc	r31, r31
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	e8 1b       	sub	r30, r24
    1c9c:	f9 0b       	sbc	r31, r25
    1c9e:	ed 53       	subi	r30, 0x3D	; 61
    1ca0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ca2:	13 82       	std	Z+3, r1	; 0x03
    1ca4:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    1ca6:	8f 2d       	mov	r24, r15
    1ca8:	9e 2d       	mov	r25, r14
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	fc 01       	movw	r30, r24
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	e8 1b       	sub	r30, r24
    1cbe:	f9 0b       	sbc	r31, r25
    1cc0:	ed 53       	subi	r30, 0x3D	; 61
    1cc2:	fc 4f       	sbci	r31, 0xFC	; 252
    1cc4:	51 83       	std	Z+1, r21	; 0x01
    1cc6:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    1cc8:	8f 2d       	mov	r24, r15
    1cca:	9e 2d       	mov	r25, r14
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	e8 1b       	sub	r30, r24
    1ce0:	f9 0b       	sbc	r31, r25
    1ce2:	ed 53       	subi	r30, 0x3D	; 61
    1ce4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce6:	04 5f       	subi	r16, 0xF4	; 244
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	13 87       	std	Z+11, r17	; 0x0b
    1cec:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    1cee:	8f 2d       	mov	r24, r15
    1cf0:	9e 2d       	mov	r25, r14
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	ee 0f       	add	r30, r30
    1d02:	ff 1f       	adc	r31, r31
    1d04:	e8 1b       	sub	r30, r24
    1d06:	f9 0b       	sbc	r31, r25
    1d08:	ed 53       	subi	r30, 0x3D	; 61
    1d0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d0c:	06 50       	subi	r16, 0x06	; 6
    1d0e:	10 40       	sbci	r17, 0x00	; 0
    1d10:	15 87       	std	Z+13, r17	; 0x0d
    1d12:	04 87       	std	Z+12, r16	; 0x0c
    1d14:	06 50       	subi	r16, 0x06	; 6
    1d16:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    1d18:	f8 01       	movw	r30, r16
    1d1a:	84 85       	ldd	r24, Z+12	; 0x0c
    1d1c:	95 85       	ldd	r25, Z+13	; 0x0d
    1d1e:	98 87       	std	Y+8, r25	; 0x08
    1d20:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    1d22:	86 85       	ldd	r24, Z+14	; 0x0e
    1d24:	97 85       	ldd	r25, Z+15	; 0x0f
    1d26:	9a 87       	std	Y+10, r25	; 0x0a
    1d28:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    1d2a:	80 89       	ldd	r24, Z+16	; 0x10
    1d2c:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    1d2e:	9c 87       	std	Y+12, r25	; 0x0c
    1d30:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    1d32:	86 81       	ldd	r24, Z+6	; 0x06
    1d34:	97 81       	ldd	r25, Z+7	; 0x07
    1d36:	9e 87       	std	Y+14, r25	; 0x0e
    1d38:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    1d3a:	80 85       	ldd	r24, Z+8	; 0x08
    1d3c:	91 85       	ldd	r25, Z+9	; 0x09
    1d3e:	98 8b       	std	Y+16, r25	; 0x10
    1d40:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    1d42:	82 85       	ldd	r24, Z+10	; 0x0a
    1d44:	93 85       	ldd	r25, Z+11	; 0x0b
    1d46:	9a 8b       	std	Y+18, r25	; 0x12
    1d48:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    1d4a:	8f 2d       	mov	r24, r15
    1d4c:	9e 2d       	mov	r25, r14
    1d4e:	be 01       	movw	r22, r28
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <getRGBColor>
			resetData.beginRed = curColors.red;
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	98 87       	std	Y+8, r25	; 0x08
    1d5e:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	9a 87       	std	Y+10, r25	; 0x0a
    1d66:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	9c 87       	std	Y+12, r25	; 0x0c
    1d6e:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    1d70:	8f 2d       	mov	r24, r15
    1d72:	9e 2d       	mov	r25, r14
    1d74:	be 01       	movw	r22, r28
    1d76:	69 5f       	subi	r22, 0xF9	; 249
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	0e 94 0d 08 	call	0x101a	; 0x101a <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    1d7e:	8f 2d       	mov	r24, r15
    1d80:	9e 2d       	mov	r25, r14
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	fc 01       	movw	r30, r24
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	ee 0f       	add	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	e8 1b       	sub	r30, r24
    1d96:	f9 0b       	sbc	r31, r25
    1d98:	ed 53       	subi	r30, 0x3D	; 61
    1d9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9c:	17 82       	std	Z+7, r1	; 0x07
    1d9e:	16 82       	std	Z+6, r1	; 0x06
    1da0:	48 ce       	rjmp	.-880    	; 0x1a32 <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    1da2:	8f 2d       	mov	r24, r15
    1da4:	9e 2d       	mov	r25, r14
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	fc 01       	movw	r30, r24
    1dac:	ee 0f       	add	r30, r30
    1dae:	ff 1f       	adc	r31, r31
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	ee 0f       	add	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	e8 1b       	sub	r30, r24
    1dba:	f9 0b       	sbc	r31, r25
    1dbc:	ed 53       	subi	r30, 0x3D	; 61
    1dbe:	fc 4f       	sbci	r31, 0xFC	; 252
    1dc0:	11 82       	std	Z+1, r1	; 0x01
    1dc2:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    1dc4:	8f 2d       	mov	r24, r15
    1dc6:	9e 2d       	mov	r25, r14
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	fc 01       	movw	r30, r24
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	e8 1b       	sub	r30, r24
    1ddc:	f9 0b       	sbc	r31, r25
    1dde:	ed 53       	subi	r30, 0x3D	; 61
    1de0:	fc 4f       	sbci	r31, 0xFC	; 252
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	93 83       	std	Z+3, r25	; 0x03
    1de8:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    1dea:	8f 2d       	mov	r24, r15
    1dec:	9e 2d       	mov	r25, r14
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	fc 01       	movw	r30, r24
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	e8 1b       	sub	r30, r24
    1e02:	f9 0b       	sbc	r31, r25
    1e04:	ed 53       	subi	r30, 0x3D	; 61
    1e06:	fc 4f       	sbci	r31, 0xFC	; 252
    1e08:	13 87       	std	Z+11, r17	; 0x0b
    1e0a:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    1e0c:	8f 2d       	mov	r24, r15
    1e0e:	9e 2d       	mov	r25, r14
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	fc 01       	movw	r30, r24
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	e8 1b       	sub	r30, r24
    1e24:	f9 0b       	sbc	r31, r25
    1e26:	ed 53       	subi	r30, 0x3D	; 61
    1e28:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2a:	0a 5f       	subi	r16, 0xFA	; 250
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	15 87       	std	Z+13, r17	; 0x0d
    1e30:	04 87       	std	Z+12, r16	; 0x0c
    1e32:	06 50       	subi	r16, 0x06	; 6
    1e34:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    1e36:	f8 01       	movw	r30, r16
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	98 87       	std	Y+8, r25	; 0x08
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	9a 87       	std	Y+10, r25	; 0x0a
    1e46:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    1e48:	84 81       	ldd	r24, Z+4	; 0x04
    1e4a:	95 81       	ldd	r25, Z+5	; 0x05
    1e4c:	70 cf       	rjmp	.-288    	; 0x1d2e <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    1e4e:	8f 2d       	mov	r24, r15
    1e50:	9e 2d       	mov	r25, r14
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	fc 01       	movw	r30, r24
    1e58:	ee 0f       	add	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	ee 0f       	add	r30, r30
    1e5e:	ff 1f       	adc	r31, r31
    1e60:	ee 0f       	add	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	e8 1b       	sub	r30, r24
    1e66:	f9 0b       	sbc	r31, r25
    1e68:	ed 53       	subi	r30, 0x3D	; 61
    1e6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e6c:	0a 5f       	subi	r16, 0xFA	; 250
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	13 87       	std	Z+11, r17	; 0x0b
    1e72:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    1e74:	8f 2d       	mov	r24, r15
    1e76:	9e 2d       	mov	r25, r14
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	ee 0f       	add	r30, r30
    1e80:	ff 1f       	adc	r31, r31
    1e82:	ee 0f       	add	r30, r30
    1e84:	ff 1f       	adc	r31, r31
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	e8 1b       	sub	r30, r24
    1e8c:	f9 0b       	sbc	r31, r25
    1e8e:	ed 53       	subi	r30, 0x3D	; 61
    1e90:	fc 4f       	sbci	r31, 0xFC	; 252
    1e92:	0a 5f       	subi	r16, 0xFA	; 250
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	15 87       	std	Z+13, r17	; 0x0d
    1e98:	04 87       	std	Z+12, r16	; 0x0c
    1e9a:	0c 50       	subi	r16, 0x0C	; 12
    1e9c:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	86 81       	ldd	r24, Z+6	; 0x06
    1ea2:	97 81       	ldd	r25, Z+7	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    1ea8:	80 85       	ldd	r24, Z+8	; 0x08
    1eaa:	91 85       	ldd	r25, Z+9	; 0x09
    1eac:	9a 87       	std	Y+10, r25	; 0x0a
    1eae:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    1eb0:	82 85       	ldd	r24, Z+10	; 0x0a
    1eb2:	93 85       	ldd	r25, Z+11	; 0x0b
    1eb4:	9c 87       	std	Y+12, r25	; 0x0c
    1eb6:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    1eb8:	84 85       	ldd	r24, Z+12	; 0x0c
    1eba:	95 85       	ldd	r25, Z+13	; 0x0d
    1ebc:	9e 87       	std	Y+14, r25	; 0x0e
    1ebe:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    1ec0:	86 85       	ldd	r24, Z+14	; 0x0e
    1ec2:	97 85       	ldd	r25, Z+15	; 0x0f
    1ec4:	98 8b       	std	Y+16, r25	; 0x10
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    1ec8:	80 89       	ldd	r24, Z+16	; 0x10
    1eca:	91 89       	ldd	r25, Z+17	; 0x11
    1ecc:	9a 8b       	std	Y+18, r25	; 0x12
    1ece:	89 8b       	std	Y+17, r24	; 0x11
    1ed0:	3c cf       	rjmp	.-392    	; 0x1d4a <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00001ed2 <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    1ed2:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    1ed4:	2d 91       	ld	r18, X+
    1ed6:	3c 91       	ld	r19, X
    1ed8:	11 97       	sbiw	r26, 0x01	; 1
    1eda:	f9 01       	movw	r30, r18
    1edc:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1ede:	2f 5f       	subi	r18, 0xFF	; 255
    1ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee2:	2d 93       	st	X+, r18
    1ee4:	3c 93       	st	X, r19
    return returnVal;
}
    1ee6:	08 95       	ret

00001ee8 <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    1ee8:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    1eea:	8d 91       	ld	r24, X+
    1eec:	9c 91       	ld	r25, X
    1eee:	11 97       	sbiw	r26, 0x01	; 1
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	25 91       	lpm	r18, Z+
    1ef4:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    1ef6:	02 96       	adiw	r24, 0x02	; 2
    1ef8:	8d 93       	st	X+, r24
    1efa:	9c 93       	st	X, r25
    return returnVal;
}
    1efc:	c9 01       	movw	r24, r18
    1efe:	08 95       	ret

00001f00 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1f06:	14 16       	cp	r1, r20
    1f08:	15 06       	cpc	r1, r21
    1f0a:	64 f4       	brge	.+24     	; 0x1f24 <copyFromFlash+0x24>
    1f0c:	db 01       	movw	r26, r22
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    1f12:	fe 01       	movw	r30, r28
    1f14:	e8 0f       	add	r30, r24
    1f16:	f9 1f       	adc	r31, r25
    1f18:	e4 91       	lpm	r30, Z+
    1f1a:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	84 17       	cp	r24, r20
    1f20:	95 07       	cpc	r25, r21
    1f22:	bc f3       	brlt	.-18     	; 0x1f12 <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	08 95       	ret

00001f2a <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    1f2a:	2f 92       	push	r2
    1f2c:	3f 92       	push	r3
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	1f 93       	push	r17
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <getInstructionGroup+0x24>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <getInstructionGroup+0x26>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    1f54:	83 ef       	ldi	r24, 0xF3	; 243
    1f56:	98 e0       	ldi	r25, 0x08	; 8
    1f58:	90 93 f4 0e 	sts	0x0EF4, r25
    1f5c:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1f60:	40 91 04 01 	lds	r20, 0x0104
    1f64:	50 91 05 01 	lds	r21, 0x0105
    1f68:	fa 01       	movw	r30, r20
    1f6a:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1f6c:	31 96       	adiw	r30, 0x01	; 1
    1f6e:	f0 93 05 01 	sts	0x0105, r31
    1f72:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    1f76:	8f 3f       	cpi	r24, 0xFF	; 255
    1f78:	c9 f0       	breq	.+50     	; 0x1fac <getInstructionGroup+0x82>
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    1f7e:	cb 01       	movw	r24, r22
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	1f 91       	pop	r17
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	9f 90       	pop	r9
    1f9c:	8f 90       	pop	r8
    1f9e:	7f 90       	pop	r7
    1fa0:	6f 90       	pop	r6
    1fa2:	5f 90       	pop	r5
    1fa4:	4f 90       	pop	r4
    1fa6:	3f 90       	pop	r3
    1fa8:	2f 90       	pop	r2
    1faa:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    1fac:	80 91 00 01 	lds	r24, 0x0100
    1fb0:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    1fb4:	20 91 02 01 	lds	r18, 0x0102
    1fb8:	30 91 03 01 	lds	r19, 0x0103
    1fbc:	20 93 00 01 	sts	0x0100, r18
    1fc0:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    1fc4:	90 93 03 01 	sts	0x0103, r25
    1fc8:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    1fcc:	c9 01       	movw	r24, r18
    1fce:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    1fd0:	85 91       	lpm	r24, Z+
    1fd2:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    1fd4:	9c 01       	movw	r18, r24
    1fd6:	22 0f       	add	r18, r18
    1fd8:	33 1f       	adc	r19, r19
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	22 0f       	add	r18, r18
    1fe0:	33 1f       	adc	r19, r19
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	28 0f       	add	r18, r24
    1fe8:	39 1f       	adc	r19, r25
    1fea:	fb 01       	movw	r30, r22
    1fec:	31 83       	std	Z+1, r19	; 0x01
    1fee:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    1ff0:	db 01       	movw	r26, r22
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	b3 83       	std	Z+3, r27	; 0x03
    1ff6:	a2 83       	std	Z+2, r26	; 0x02
    1ff8:	4d 5f       	subi	r20, 0xFD	; 253
    1ffa:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1ffc:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    1ffe:	9c e5       	ldi	r25, 0x5C	; 92
    2000:	c9 2e       	mov	r12, r25
    2002:	96 e0       	ldi	r25, 0x06	; 6
    2004:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    2006:	8d e0       	ldi	r24, 0x0D	; 13
    2008:	a8 2e       	mov	r10, r24
    200a:	88 e0       	ldi	r24, 0x08	; 8
    200c:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    200e:	fd ed       	ldi	r31, 0xDD	; 221
    2010:	8f 2e       	mov	r8, r31
    2012:	f5 e0       	ldi	r31, 0x05	; 5
    2014:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    2016:	e1 ec       	ldi	r30, 0xC1	; 193
    2018:	6e 2e       	mov	r6, r30
    201a:	e5 e0       	ldi	r30, 0x05	; 5
    201c:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    201e:	35 e1       	ldi	r19, 0x15	; 21
    2020:	43 2e       	mov	r4, r19
    2022:	38 e0       	ldi	r19, 0x08	; 8
    2024:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    2026:	2a e5       	ldi	r18, 0x5A	; 90
    2028:	22 2e       	mov	r2, r18
    202a:	28 e0       	ldi	r18, 0x08	; 8
    202c:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    202e:	9b e4       	ldi	r25, 0x4B	; 75
    2030:	e9 2e       	mov	r14, r25
    2032:	95 e0       	ldi	r25, 0x05	; 5
    2034:	f9 2e       	mov	r15, r25
    2036:	23 c0       	rjmp	.+70     	; 0x207e <getInstructionGroup+0x154>
    2038:	13 96       	adiw	r26, 0x03	; 3
    203a:	fc 92       	st	X, r15
    203c:	ee 92       	st	-X, r14
    203e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    2040:	18 96       	adiw	r26, 0x08	; 8
    2042:	1c 93       	st	X, r17
    2044:	18 97       	sbiw	r26, 0x08	; 8
    2046:	80 91 f3 0e 	lds	r24, 0x0EF3
    204a:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    2052:	82 0f       	add	r24, r18
    2054:	93 1f       	adc	r25, r19
    2056:	90 93 f4 0e 	sts	0x0EF4, r25
    205a:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    205e:	40 91 04 01 	lds	r20, 0x0104
    2062:	50 91 05 01 	lds	r21, 0x0105
    2066:	42 0f       	add	r20, r18
    2068:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    206a:	fa 01       	movw	r30, r20
    206c:	84 91       	lpm	r24, Z+
    206e:	8f 3f       	cpi	r24, 0xFF	; 255
    2070:	09 f4       	brne	.+2      	; 0x2074 <getInstructionGroup+0x14a>
    2072:	b4 c0       	rjmp	.+360    	; 0x21dc <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    2074:	1b 96       	adiw	r26, 0x0b	; 11
    2076:	fd 01       	movw	r30, r26
    2078:	32 97       	sbiw	r30, 0x02	; 2
    207a:	b1 83       	std	Z+1, r27	; 0x01
    207c:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    207e:	fa 01       	movw	r30, r20
    2080:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    2082:	4f 5f       	subi	r20, 0xFF	; 255
    2084:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    2086:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    2088:	fa 01       	movw	r30, r20
    208a:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    208c:	ca 01       	movw	r24, r20
    208e:	01 96       	adiw	r24, 0x01	; 1
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	90 93 05 01 	sts	0x0105, r25
    2098:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	2c 93       	st	X, r18
    20a0:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    20a2:	80 91 f3 0e 	lds	r24, 0x0EF3
    20a6:	90 91 f4 0e 	lds	r25, 0x0EF4
    20aa:	9c 83       	std	Y+4, r25	; 0x04
    20ac:	8b 83       	std	Y+3, r24	; 0x03
    20ae:	17 96       	adiw	r26, 0x07	; 7
    20b0:	9c 93       	st	X, r25
    20b2:	8e 93       	st	-X, r24
    20b4:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    20b6:	22 23       	and	r18, r18
    20b8:	09 f4       	brne	.+2      	; 0x20bc <getInstructionGroup+0x192>
    20ba:	be cf       	rjmp	.-132    	; 0x2038 <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    20bc:	22 30       	cpi	r18, 0x02	; 2
    20be:	39 f1       	breq	.+78     	; 0x210e <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    20c0:	23 30       	cpi	r18, 0x03	; 3
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <getInstructionGroup+0x19c>
    20c4:	4b c0       	rjmp	.+150    	; 0x215c <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    20c6:	24 30       	cpi	r18, 0x04	; 4
    20c8:	09 f4       	brne	.+2      	; 0x20cc <getInstructionGroup+0x1a2>
    20ca:	68 c0       	rjmp	.+208    	; 0x219c <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    20cc:	25 30       	cpi	r18, 0x05	; 5
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <getInstructionGroup+0x1a8>
    20d0:	73 c0       	rjmp	.+230    	; 0x21b8 <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    20d2:	26 30       	cpi	r18, 0x06	; 6
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <getInstructionGroup+0x1ae>
    20d6:	50 c0       	rjmp	.+160    	; 0x2178 <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    20d8:	27 30       	cpi	r18, 0x07	; 7
    20da:	09 f4       	brne	.+2      	; 0x20de <getInstructionGroup+0x1b4>
    20dc:	8a c0       	rjmp	.+276    	; 0x21f2 <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    20de:	28 30       	cpi	r18, 0x08	; 8
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <getInstructionGroup+0x1ba>
    20e2:	99 c0       	rjmp	.+306    	; 0x2216 <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    20e4:	29 30       	cpi	r18, 0x09	; 9
    20e6:	09 f0       	breq	.+2      	; 0x20ea <getInstructionGroup+0x1c0>
    20e8:	b2 cf       	rjmp	.-156    	; 0x204e <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    20ea:	87 eb       	ldi	r24, 0xB7	; 183
    20ec:	95 e0       	ldi	r25, 0x05	; 5
    20ee:	13 96       	adiw	r26, 0x03	; 3
    20f0:	9c 93       	st	X, r25
    20f2:	8e 93       	st	-X, r24
    20f4:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    20f6:	e8 e4       	ldi	r30, 0x48	; 72
    20f8:	f5 e0       	ldi	r31, 0x05	; 5
    20fa:	15 96       	adiw	r26, 0x05	; 5
    20fc:	fc 93       	st	X, r31
    20fe:	ee 93       	st	-X, r30
    2100:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    2102:	18 96       	adiw	r26, 0x08	; 8
    2104:	1c 93       	st	X, r17
    2106:	18 97       	sbiw	r26, 0x08	; 8
    2108:	46 e0       	ldi	r20, 0x06	; 6
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	0d c0       	rjmp	.+26     	; 0x2128 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    210e:	13 96       	adiw	r26, 0x03	; 3
    2110:	5c 92       	st	X, r5
    2112:	4e 92       	st	-X, r4
    2114:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    2116:	15 96       	adiw	r26, 0x05	; 5
    2118:	3c 92       	st	X, r3
    211a:	2e 92       	st	-X, r2
    211c:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    211e:	18 96       	adiw	r26, 0x08	; 8
    2120:	1c 93       	st	X, r17
    2122:	18 97       	sbiw	r26, 0x08	; 8
    2124:	46 e0       	ldi	r20, 0x06	; 6
    2126:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	84 91       	lpm	r24, Z+
    2132:	eb 81       	ldd	r30, Y+3	; 0x03
    2134:	fc 81       	ldd	r31, Y+4	; 0x04
    2136:	81 93       	st	Z+, r24
    2138:	fc 83       	std	Y+4, r31	; 0x04
    213a:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    2146:	2f 5f       	subi	r18, 0xFF	; 255
    2148:	3f 4f       	sbci	r19, 0xFF	; 255
    214a:	24 17       	cp	r18, r20
    214c:	35 07       	cpc	r19, r21
    214e:	74 f3       	brlt	.-36     	; 0x212c <getInstructionGroup+0x202>
    2150:	9a 01       	movw	r18, r20
    2152:	80 91 f3 0e 	lds	r24, 0x0EF3
    2156:	90 91 f4 0e 	lds	r25, 0x0EF4
    215a:	7b cf       	rjmp	.-266    	; 0x2052 <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    215c:	13 96       	adiw	r26, 0x03	; 3
    215e:	9c 92       	st	X, r9
    2160:	8e 92       	st	-X, r8
    2162:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    2164:	15 96       	adiw	r26, 0x05	; 5
    2166:	7c 92       	st	X, r7
    2168:	6e 92       	st	-X, r6
    216a:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    216c:	18 96       	adiw	r26, 0x08	; 8
    216e:	1c 92       	st	X, r1
    2170:	18 97       	sbiw	r26, 0x08	; 8
    2172:	4a e0       	ldi	r20, 0x0A	; 10
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	d8 cf       	rjmp	.-80     	; 0x2128 <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    2178:	e7 ed       	ldi	r30, 0xD7	; 215
    217a:	fa e0       	ldi	r31, 0x0A	; 10
    217c:	13 96       	adiw	r26, 0x03	; 3
    217e:	fc 93       	st	X, r31
    2180:	ee 93       	st	-X, r30
    2182:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    2184:	89 e3       	ldi	r24, 0x39	; 57
    2186:	99 e0       	ldi	r25, 0x09	; 9
    2188:	15 96       	adiw	r26, 0x05	; 5
    218a:	9c 93       	st	X, r25
    218c:	8e 93       	st	-X, r24
    218e:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    2190:	18 96       	adiw	r26, 0x08	; 8
    2192:	1c 92       	st	X, r1
    2194:	18 97       	sbiw	r26, 0x08	; 8
    2196:	42 e1       	ldi	r20, 0x12	; 18
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	c6 cf       	rjmp	.-116    	; 0x2128 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    219c:	18 96       	adiw	r26, 0x08	; 8
    219e:	1c 93       	st	X, r17
    21a0:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    21a2:	13 96       	adiw	r26, 0x03	; 3
    21a4:	dc 92       	st	X, r13
    21a6:	ce 92       	st	-X, r12
    21a8:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    21aa:	15 96       	adiw	r26, 0x05	; 5
    21ac:	bc 92       	st	X, r11
    21ae:	ae 92       	st	-X, r10
    21b0:	14 97       	sbiw	r26, 0x04	; 4
    21b2:	4e e0       	ldi	r20, 0x0E	; 14
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	b8 cf       	rjmp	.-144    	; 0x2128 <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    21b8:	ee ec       	ldi	r30, 0xCE	; 206
    21ba:	f8 e0       	ldi	r31, 0x08	; 8
    21bc:	13 96       	adiw	r26, 0x03	; 3
    21be:	fc 93       	st	X, r31
    21c0:	ee 93       	st	-X, r30
    21c2:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    21c4:	8a e9       	ldi	r24, 0x9A	; 154
    21c6:	98 e0       	ldi	r25, 0x08	; 8
    21c8:	15 96       	adiw	r26, 0x05	; 5
    21ca:	9c 93       	st	X, r25
    21cc:	8e 93       	st	-X, r24
    21ce:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    21d0:	18 96       	adiw	r26, 0x08	; 8
    21d2:	1c 92       	st	X, r1
    21d4:	18 97       	sbiw	r26, 0x08	; 8
    21d6:	42 e1       	ldi	r20, 0x12	; 18
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	a6 cf       	rjmp	.-180    	; 0x2128 <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    21dc:	1a 96       	adiw	r26, 0x0a	; 10
    21de:	1c 92       	st	X, r1
    21e0:	1e 92       	st	-X, r1
    21e2:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    21e4:	4f 5f       	subi	r20, 0xFF	; 255
    21e6:	5f 4f       	sbci	r21, 0xFF	; 255
    21e8:	50 93 05 01 	sts	0x0105, r21
    21ec:	40 93 04 01 	sts	0x0104, r20
    21f0:	c6 ce       	rjmp	.-628    	; 0x1f7e <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    21f2:	ec eb       	ldi	r30, 0xBC	; 188
    21f4:	fc e0       	ldi	r31, 0x0C	; 12
    21f6:	13 96       	adiw	r26, 0x03	; 3
    21f8:	fc 93       	st	X, r31
    21fa:	ee 93       	st	-X, r30
    21fc:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    21fe:	8d e1       	ldi	r24, 0x1D	; 29
    2200:	9a e0       	ldi	r25, 0x0A	; 10
    2202:	15 96       	adiw	r26, 0x05	; 5
    2204:	9c 93       	st	X, r25
    2206:	8e 93       	st	-X, r24
    2208:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    220a:	18 96       	adiw	r26, 0x08	; 8
    220c:	1c 92       	st	X, r1
    220e:	18 97       	sbiw	r26, 0x08	; 8
    2210:	48 e1       	ldi	r20, 0x18	; 24
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	89 cf       	rjmp	.-238    	; 0x2128 <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    2216:	e8 e5       	ldi	r30, 0x58	; 88
    2218:	f5 e0       	ldi	r31, 0x05	; 5
    221a:	13 96       	adiw	r26, 0x03	; 3
    221c:	fc 93       	st	X, r31
    221e:	ee 93       	st	-X, r30
    2220:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    2222:	8c e4       	ldi	r24, 0x4C	; 76
    2224:	95 e0       	ldi	r25, 0x05	; 5
    2226:	15 96       	adiw	r26, 0x05	; 5
    2228:	9c 93       	st	X, r25
    222a:	8e 93       	st	-X, r24
    222c:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	fc 01       	movw	r30, r24
    2234:	45 91       	lpm	r20, Z+
    2236:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    2238:	90 93 05 01 	sts	0x0105, r25
    223c:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    2240:	44 0f       	add	r20, r20
    2242:	55 1f       	adc	r21, r21
    2244:	44 0f       	add	r20, r20
    2246:	55 1f       	adc	r21, r21
    2248:	44 0f       	add	r20, r20
    224a:	55 1f       	adc	r21, r21
    224c:	4e 5f       	subi	r20, 0xFE	; 254
    224e:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    2250:	18 96       	adiw	r26, 0x08	; 8
    2252:	1c 92       	st	X, r1
    2254:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    2256:	14 16       	cp	r1, r20
    2258:	15 06       	cpc	r1, r21
    225a:	0c f4       	brge	.+2      	; 0x225e <getInstructionGroup+0x334>
    225c:	65 cf       	rjmp	.-310    	; 0x2128 <getInstructionGroup+0x1fe>
    225e:	78 cf       	rjmp	.-272    	; 0x2150 <getInstructionGroup+0x226>

00002260 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    2264:	a0 91 f3 0c 	lds	r26, 0x0CF3
    2268:	b0 91 f4 0c 	lds	r27, 0x0CF4
    226c:	a2 30       	cpi	r26, 0x02	; 2
    226e:	b1 05       	cpc	r27, r1
    2270:	78 f4       	brcc	.+30     	; 0x2290 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    2272:	11 97       	sbiw	r26, 0x01	; 1
    2274:	81 f1       	breq	.+96     	; 0x22d6 <getPreviousGroup+0x76>
    2276:	c0 91 04 01 	lds	r28, 0x0104
    227a:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    227e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <getInstructionGroup>
			dataPtr = tmpPtr;
    2282:	d0 93 05 01 	sts	0x0105, r29
    2286:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    2290:	fd 01       	movw	r30, r26
    2292:	31 97       	sbiw	r30, 0x01	; 1
    2294:	f0 93 f4 0c 	sts	0x0CF4, r31
    2298:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    229c:	aa 0f       	add	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	af 50       	subi	r26, 0x0F	; 15
    22a2:	b3 4f       	sbci	r27, 0xF3	; 243
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	eb 50       	subi	r30, 0x0B	; 11
    22aa:	f3 4f       	sbci	r31, 0xF3	; 243
    22ac:	2d 91       	ld	r18, X+
    22ae:	3c 91       	ld	r19, X
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	28 0f       	add	r18, r24
    22b6:	39 1f       	adc	r19, r25
    22b8:	80 91 04 01 	lds	r24, 0x0104
    22bc:	90 91 05 01 	lds	r25, 0x0105
    22c0:	82 1b       	sub	r24, r18
    22c2:	93 0b       	sbc	r25, r19
    22c4:	90 93 05 01 	sts	0x0105, r25
    22c8:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    22cc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    22d6:	80 91 f5 0c 	lds	r24, 0x0CF5
    22da:	90 91 f6 0c 	lds	r25, 0x0CF6
    22de:	c0 91 04 01 	lds	r28, 0x0104
    22e2:	d0 91 05 01 	lds	r29, 0x0105
    22e6:	c8 1b       	sub	r28, r24
    22e8:	d9 0b       	sbc	r29, r25
    22ea:	d0 93 05 01 	sts	0x0105, r29
    22ee:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    22f2:	10 92 f4 0c 	sts	0x0CF4, r1
    22f6:	10 92 f3 0c 	sts	0x0CF3, r1
    22fa:	c1 cf       	rjmp	.-126    	; 0x227e <getPreviousGroup+0x1e>

000022fc <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    22fc:	e0 91 f3 0c 	lds	r30, 0x0CF3
    2300:	f0 91 f4 0c 	lds	r31, 0x0CF4
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	ed 50       	subi	r30, 0x0D	; 13
    230a:	f3 4f       	sbci	r31, 0xF3	; 243
    230c:	20 81       	ld	r18, Z
    230e:	31 81       	ldd	r19, Z+1	; 0x01
    2310:	80 91 04 01 	lds	r24, 0x0104
    2314:	90 91 05 01 	lds	r25, 0x0105
    2318:	82 1b       	sub	r24, r18
    231a:	93 0b       	sbc	r25, r19
    231c:	90 93 05 01 	sts	0x0105, r25
    2320:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    2324:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <getInstructionGroup>
}
    2328:	08 95       	ret

0000232a <getNextGroup>:

struct instruction_group *getNextGroup() {
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    232e:	c0 91 04 01 	lds	r28, 0x0104
    2332:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    2336:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <getInstructionGroup>
    233a:	ac 01       	movw	r20, r24

	if(ig != 0) {
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	d9 f0       	breq	.+54     	; 0x2376 <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    2340:	20 91 f3 0c 	lds	r18, 0x0CF3
    2344:	30 91 f4 0c 	lds	r19, 0x0CF4
    2348:	f9 01       	movw	r30, r18
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	eb 50       	subi	r30, 0x0B	; 11
    2350:	f3 4f       	sbci	r31, 0xF3	; 243
    2352:	80 91 04 01 	lds	r24, 0x0104
    2356:	90 91 05 01 	lds	r25, 0x0105
    235a:	8c 1b       	sub	r24, r28
    235c:	9d 0b       	sbc	r25, r29
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    2362:	2f 5f       	subi	r18, 0xFF	; 255
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	30 93 f4 0c 	sts	0x0CF4, r19
    236a:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    236e:	ca 01       	movw	r24, r20
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    2376:	0e 94 7e 11 	call	0x22fc	; 0x22fc <getLastGroup>
    237a:	ac 01       	movw	r20, r24
    237c:	f8 cf       	rjmp	.-16     	; 0x236e <getNextGroup+0x44>

0000237e <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    237e:	10 92 f4 0c 	sts	0x0CF4, r1
    2382:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    2386:	8e ef       	ldi	r24, 0xFE	; 254
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	e5 ef       	ldi	r30, 0xF5	; 245
    238c:	fc e0       	ldi	r31, 0x0C	; 12
    238e:	df 01       	movw	r26, r30
    2390:	9c 01       	movw	r18, r24
    2392:	1d 92       	st	X+, r1
    2394:	21 50       	subi	r18, 0x01	; 1
    2396:	30 40       	sbci	r19, 0x00	; 0
    2398:	e1 f7       	brne	.-8      	; 0x2392 <initDecoder+0x14>
}
    239a:	08 95       	ret

0000239c <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    239c:	9c 01       	movw	r18, r24
    239e:	97 fd       	sbrc	r25, 7
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <abs+0xa>
    23a2:	c9 01       	movw	r24, r18
    23a4:	08 95       	ret
    23a6:	30 95       	com	r19
    23a8:	21 95       	neg	r18
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	c9 01       	movw	r24, r18
    23ae:	08 95       	ret

000023b0 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    23b0:	86 30       	cpi	r24, 0x06	; 6
    23b2:	91 05       	cpc	r25, r1
    23b4:	24 f0       	brlt	.+8      	; 0x23be <setRGBColor+0xe>
		if(led == 6) {
    23b6:	86 30       	cpi	r24, 0x06	; 6
    23b8:	91 05       	cpc	r25, r1
    23ba:	89 f0       	breq	.+34     	; 0x23de <setRGBColor+0x2e>
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	fc 01       	movw	r30, r24
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	e8 0f       	add	r30, r24
    23c6:	f9 1f       	adc	r31, r25
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    23cc:	e5 51       	subi	r30, 0x15	; 21
    23ce:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    23d0:	71 83       	std	Z+1, r23	; 0x01
    23d2:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    23d4:	55 83       	std	Z+5, r21	; 0x05
    23d6:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    23d8:	33 83       	std	Z+3, r19	; 0x03
    23da:	22 83       	std	Z+2, r18	; 0x02



}
    23dc:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    23de:	e2 e4       	ldi	r30, 0x42	; 66
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	f4 cf       	rjmp	.-24     	; 0x23cc <setRGBColor+0x1c>

000023e4 <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    23e4:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    23e6:	86 30       	cpi	r24, 0x06	; 6
    23e8:	91 05       	cpc	r25, r1
    23ea:	24 f0       	brlt	.+8      	; 0x23f4 <getRGBColor+0x10>
		if(led == 6) {
    23ec:	86 30       	cpi	r24, 0x06	; 6
    23ee:	91 05       	cpc	r25, r1
    23f0:	e1 f0       	breq	.+56     	; 0x242a <getRGBColor+0x46>
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	fc 01       	movw	r30, r24
    23f6:	ee 0f       	add	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	e8 0f       	add	r30, r24
    23fc:	f9 1f       	adc	r31, r25
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    2402:	e5 51       	subi	r30, 0x15	; 21
    2404:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	11 96       	adiw	r26, 0x01	; 1
    240c:	9c 93       	st	X, r25
    240e:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    2410:	84 81       	ldd	r24, Z+4	; 0x04
    2412:	95 81       	ldd	r25, Z+5	; 0x05
    2414:	13 96       	adiw	r26, 0x03	; 3
    2416:	9c 93       	st	X, r25
    2418:	8e 93       	st	-X, r24
    241a:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	15 96       	adiw	r26, 0x05	; 5
    2422:	9c 93       	st	X, r25
    2424:	8e 93       	st	-X, r24
    2426:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    2428:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    242a:	e2 e4       	ldi	r30, 0x42	; 66
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	e9 cf       	rjmp	.-46     	; 0x2402 <getRGBColor+0x1e>

00002430 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    2430:	43 e2       	ldi	r20, 0x23	; 35
    2432:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    2434:	fa 01       	movw	r30, r20
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	e5 51       	subi	r30, 0x15	; 21
    243c:	fd 4f       	sbci	r31, 0xFD	; 253
    243e:	01 90       	ld	r0, Z+
    2440:	f0 81       	ld	r31, Z
    2442:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    2444:	e2 95       	swap	r30
    2446:	f2 95       	swap	r31
    2448:	f0 7f       	andi	r31, 0xF0	; 240
    244a:	fe 27       	eor	r31, r30
    244c:	e0 7f       	andi	r30, 0xF0	; 240
    244e:	fe 27       	eor	r31, r30
    2450:	2c e0       	ldi	r18, 0x0C	; 12
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	08 c0       	rjmp	.+16     	; 0x2466 <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    2456:	8b b3       	in	r24, 0x1b	; 27
    2458:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    245a:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    245c:	8b b3       	in	r24, 0x1b	; 27
    245e:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    2460:	21 15       	cp	r18, r1
    2462:	31 05       	cpc	r19, r1
    2464:	91 f0       	breq	.+36     	; 0x248a <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    2466:	21 50       	subi	r18, 0x01	; 1
    2468:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    246a:	cf 01       	movw	r24, r30
    246c:	02 2e       	mov	r0, r18
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <displayColors+0x44>
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	0a 94       	dec	r0
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <displayColors+0x40>
    2478:	80 ff       	sbrs	r24, 0
    247a:	ed cf       	rjmp	.-38     	; 0x2456 <displayColors+0x26>
				PINHIGH(BDI);
    247c:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    247e:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    2480:	8b b3       	in	r24, 0x1b	; 27
    2482:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    2484:	21 15       	cp	r18, r1
    2486:	31 05       	cpc	r19, r1
    2488:	71 f7       	brne	.-36     	; 0x2466 <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    248a:	42 31       	cpi	r20, 0x12	; 18
    248c:	51 05       	cpc	r21, r1
    248e:	41 f0       	breq	.+16     	; 0x24a0 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    2490:	41 50       	subi	r20, 0x01	; 1
    2492:	50 40       	sbci	r21, 0x00	; 0
    2494:	57 ff       	sbrs	r21, 7
    2496:	ce cf       	rjmp	.-100    	; 0x2434 <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    2498:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    249a:	8b b3       	in	r24, 0x1b	; 27
    249c:	1b ba       	out	0x1b, r1	; 27
}
    249e:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    24a0:	8b b3       	in	r24, 0x1b	; 27
    24a2:	1b ba       	out	0x1b, r1	; 27
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    24a8:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    24aa:	2b b3       	in	r18, 0x1b	; 27
    24ac:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    24ae:	01 96       	adiw	r24, 0x01	; 1
    24b0:	88 34       	cpi	r24, 0x48	; 72
    24b2:	91 05       	cpc	r25, r1
    24b4:	c9 f7       	brne	.-14     	; 0x24a8 <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    24b6:	41 e1       	ldi	r20, 0x11	; 17
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	bc cf       	rjmp	.-136    	; 0x2434 <displayColors+0x4>

000024bc <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    24bc:	10 92 ec 02 	sts	0x02EC, r1
    24c0:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    24c4:	10 92 f0 02 	sts	0x02F0, r1
    24c8:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    24cc:	10 92 ee 02 	sts	0x02EE, r1
    24d0:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    24d4:	10 92 f2 02 	sts	0x02F2, r1
    24d8:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    24dc:	10 92 f6 02 	sts	0x02F6, r1
    24e0:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    24e4:	10 92 f4 02 	sts	0x02F4, r1
    24e8:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    24ec:	0e 94 18 12 	call	0x2430	; 0x2430 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    24f0:	84 e6       	ldi	r24, 0x64	; 100
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	90 93 ec 02 	sts	0x02EC, r25
    24f8:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    24fc:	10 92 f0 02 	sts	0x02F0, r1
    2500:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    2504:	10 92 ee 02 	sts	0x02EE, r1
    2508:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    250c:	90 93 f2 02 	sts	0x02F2, r25
    2510:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    2514:	10 92 f6 02 	sts	0x02F6, r1
    2518:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    251c:	10 92 f4 02 	sts	0x02F4, r1
    2520:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    2524:	90 91 06 01 	lds	r25, 0x0106
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    252c:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    252e:	86 b7       	in	r24, 0x36	; 54
    2530:	89 23       	and	r24, r25
    2532:	e9 f3       	breq	.-6      	; 0x252e <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    2534:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    2536:	2f 5f       	subi	r18, 0xFF	; 255
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    253a:	22 33       	cpi	r18, 0x32	; 50
    253c:	31 05       	cpc	r19, r1
    253e:	b9 f7       	brne	.-18     	; 0x252e <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    2540:	0e 94 18 12 	call	0x2430	; 0x2430 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    2544:	10 92 ec 02 	sts	0x02EC, r1
    2548:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    254c:	10 92 f0 02 	sts	0x02F0, r1
    2550:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    2554:	10 92 ee 02 	sts	0x02EE, r1
    2558:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    255c:	10 92 f2 02 	sts	0x02F2, r1
    2560:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    2564:	10 92 f6 02 	sts	0x02F6, r1
    2568:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    256c:	10 92 f4 02 	sts	0x02F4, r1
    2570:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    2574:	90 91 06 01 	lds	r25, 0x0106
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    257c:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    257e:	86 b7       	in	r24, 0x36	; 54
    2580:	89 23       	and	r24, r25
    2582:	e9 f3       	breq	.-6      	; 0x257e <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    2584:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    2586:	2f 5f       	subi	r18, 0xFF	; 255
    2588:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    258a:	22 33       	cpi	r18, 0x32	; 50
    258c:	31 05       	cpc	r19, r1
    258e:	b9 f7       	brne	.-18     	; 0x257e <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    2590:	0e 94 18 12 	call	0x2430	; 0x2430 <displayColors>
}
    2594:	08 95       	ret

00002596 <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    2596:	90 91 06 01 	lds	r25, 0x0106
    259a:	86 b7       	in	r24, 0x36	; 54
    259c:	89 23       	and	r24, r25
    259e:	e9 f3       	breq	.-6      	; 0x259a <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    25a0:	80 e1       	ldi	r24, 0x10	; 16
    25a2:	86 bf       	out	0x36, r24	; 54
}
    25a4:	08 95       	ret

000025a6 <copy_data>:

void copy_data(char *dest, char *src, short length) {
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    25ac:	14 16       	cp	r1, r20
    25ae:	15 06       	cpc	r1, r21
    25b0:	7c f4       	brge	.+30     	; 0x25d0 <copy_data+0x2a>
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    25b6:	fe 01       	movw	r30, r28
    25b8:	e2 0f       	add	r30, r18
    25ba:	f3 1f       	adc	r31, r19
    25bc:	db 01       	movw	r26, r22
    25be:	a2 0f       	add	r26, r18
    25c0:	b3 1f       	adc	r27, r19
    25c2:	8c 91       	ld	r24, X
    25c4:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    25c6:	2f 5f       	subi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	24 17       	cp	r18, r20
    25cc:	35 07       	cpc	r19, r21
    25ce:	9c f3       	brlt	.-26     	; 0x25b6 <copy_data+0x10>
		dest[i] = src[i];
	}
}
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	08 95       	ret

000025d6 <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    25d6:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    25d8:	14 16       	cp	r1, r20
    25da:	15 06       	cpc	r1, r21
    25dc:	64 f4       	brge	.+24     	; 0x25f6 <copy_short_data+0x20>
    25de:	db 01       	movw	r26, r22
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    25e4:	8d 91       	ld	r24, X+
    25e6:	9d 91       	ld	r25, X+
    25e8:	81 93       	st	Z+, r24
    25ea:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    25ec:	2f 5f       	subi	r18, 0xFF	; 255
    25ee:	3f 4f       	sbci	r19, 0xFF	; 255
    25f0:	24 17       	cp	r18, r20
    25f2:	35 07       	cpc	r19, r21
    25f4:	bc f3       	brlt	.-18     	; 0x25e4 <copy_short_data+0xe>
    25f6:	08 95       	ret

000025f8 <_fpadd_parts>:
    25f8:	a0 e0       	ldi	r26, 0x00	; 0
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e0       	ldi	r30, 0x02	; 2
    25fe:	f3 e1       	ldi	r31, 0x13	; 19
    2600:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__prologue_saves__>
    2604:	dc 01       	movw	r26, r24
    2606:	2b 01       	movw	r4, r22
    2608:	fa 01       	movw	r30, r20
    260a:	9c 91       	ld	r25, X
    260c:	92 30       	cpi	r25, 0x02	; 2
    260e:	08 f4       	brcc	.+2      	; 0x2612 <_fpadd_parts+0x1a>
    2610:	39 c1       	rjmp	.+626    	; 0x2884 <_fpadd_parts+0x28c>
    2612:	eb 01       	movw	r28, r22
    2614:	88 81       	ld	r24, Y
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	08 f4       	brcc	.+2      	; 0x261c <_fpadd_parts+0x24>
    261a:	33 c1       	rjmp	.+614    	; 0x2882 <_fpadd_parts+0x28a>
    261c:	94 30       	cpi	r25, 0x04	; 4
    261e:	69 f4       	brne	.+26     	; 0x263a <_fpadd_parts+0x42>
    2620:	84 30       	cpi	r24, 0x04	; 4
    2622:	09 f0       	breq	.+2      	; 0x2626 <_fpadd_parts+0x2e>
    2624:	2f c1       	rjmp	.+606    	; 0x2884 <_fpadd_parts+0x28c>
    2626:	11 96       	adiw	r26, 0x01	; 1
    2628:	9c 91       	ld	r25, X
    262a:	11 97       	sbiw	r26, 0x01	; 1
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	98 17       	cp	r25, r24
    2630:	09 f4       	brne	.+2      	; 0x2634 <_fpadd_parts+0x3c>
    2632:	28 c1       	rjmp	.+592    	; 0x2884 <_fpadd_parts+0x28c>
    2634:	a7 e0       	ldi	r26, 0x07	; 7
    2636:	b1 e0       	ldi	r27, 0x01	; 1
    2638:	25 c1       	rjmp	.+586    	; 0x2884 <_fpadd_parts+0x28c>
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	09 f4       	brne	.+2      	; 0x2640 <_fpadd_parts+0x48>
    263e:	21 c1       	rjmp	.+578    	; 0x2882 <_fpadd_parts+0x28a>
    2640:	82 30       	cpi	r24, 0x02	; 2
    2642:	a9 f4       	brne	.+42     	; 0x266e <_fpadd_parts+0x76>
    2644:	92 30       	cpi	r25, 0x02	; 2
    2646:	09 f0       	breq	.+2      	; 0x264a <_fpadd_parts+0x52>
    2648:	1d c1       	rjmp	.+570    	; 0x2884 <_fpadd_parts+0x28c>
    264a:	9a 01       	movw	r18, r20
    264c:	ad 01       	movw	r20, r26
    264e:	88 e0       	ldi	r24, 0x08	; 8
    2650:	ea 01       	movw	r28, r20
    2652:	09 90       	ld	r0, Y+
    2654:	ae 01       	movw	r20, r28
    2656:	e9 01       	movw	r28, r18
    2658:	09 92       	st	Y+, r0
    265a:	9e 01       	movw	r18, r28
    265c:	81 50       	subi	r24, 0x01	; 1
    265e:	c1 f7       	brne	.-16     	; 0x2650 <_fpadd_parts+0x58>
    2660:	e2 01       	movw	r28, r4
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	9c 91       	ld	r25, X
    2668:	89 23       	and	r24, r25
    266a:	81 83       	std	Z+1, r24	; 0x01
    266c:	08 c1       	rjmp	.+528    	; 0x287e <_fpadd_parts+0x286>
    266e:	92 30       	cpi	r25, 0x02	; 2
    2670:	09 f4       	brne	.+2      	; 0x2674 <_fpadd_parts+0x7c>
    2672:	07 c1       	rjmp	.+526    	; 0x2882 <_fpadd_parts+0x28a>
    2674:	12 96       	adiw	r26, 0x02	; 2
    2676:	2d 90       	ld	r2, X+
    2678:	3c 90       	ld	r3, X
    267a:	13 97       	sbiw	r26, 0x03	; 3
    267c:	eb 01       	movw	r28, r22
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	14 96       	adiw	r26, 0x04	; 4
    2684:	ad 90       	ld	r10, X+
    2686:	bd 90       	ld	r11, X+
    2688:	cd 90       	ld	r12, X+
    268a:	dc 90       	ld	r13, X
    268c:	17 97       	sbiw	r26, 0x07	; 7
    268e:	ec 80       	ldd	r14, Y+4	; 0x04
    2690:	fd 80       	ldd	r15, Y+5	; 0x05
    2692:	0e 81       	ldd	r16, Y+6	; 0x06
    2694:	1f 81       	ldd	r17, Y+7	; 0x07
    2696:	91 01       	movw	r18, r2
    2698:	28 1b       	sub	r18, r24
    269a:	39 0b       	sbc	r19, r25
    269c:	b9 01       	movw	r22, r18
    269e:	37 ff       	sbrs	r19, 7
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <_fpadd_parts+0xb2>
    26a2:	66 27       	eor	r22, r22
    26a4:	77 27       	eor	r23, r23
    26a6:	62 1b       	sub	r22, r18
    26a8:	73 0b       	sbc	r23, r19
    26aa:	60 32       	cpi	r22, 0x20	; 32
    26ac:	71 05       	cpc	r23, r1
    26ae:	0c f0       	brlt	.+2      	; 0x26b2 <_fpadd_parts+0xba>
    26b0:	61 c0       	rjmp	.+194    	; 0x2774 <_fpadd_parts+0x17c>
    26b2:	12 16       	cp	r1, r18
    26b4:	13 06       	cpc	r1, r19
    26b6:	6c f5       	brge	.+90     	; 0x2712 <_fpadd_parts+0x11a>
    26b8:	37 01       	movw	r6, r14
    26ba:	48 01       	movw	r8, r16
    26bc:	06 2e       	mov	r0, r22
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <_fpadd_parts+0xd0>
    26c0:	96 94       	lsr	r9
    26c2:	87 94       	ror	r8
    26c4:	77 94       	ror	r7
    26c6:	67 94       	ror	r6
    26c8:	0a 94       	dec	r0
    26ca:	d2 f7       	brpl	.-12     	; 0x26c0 <_fpadd_parts+0xc8>
    26cc:	21 e0       	ldi	r18, 0x01	; 1
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <_fpadd_parts+0xe6>
    26d6:	22 0f       	add	r18, r18
    26d8:	33 1f       	adc	r19, r19
    26da:	44 1f       	adc	r20, r20
    26dc:	55 1f       	adc	r21, r21
    26de:	6a 95       	dec	r22
    26e0:	d2 f7       	brpl	.-12     	; 0x26d6 <_fpadd_parts+0xde>
    26e2:	21 50       	subi	r18, 0x01	; 1
    26e4:	30 40       	sbci	r19, 0x00	; 0
    26e6:	40 40       	sbci	r20, 0x00	; 0
    26e8:	50 40       	sbci	r21, 0x00	; 0
    26ea:	2e 21       	and	r18, r14
    26ec:	3f 21       	and	r19, r15
    26ee:	40 23       	and	r20, r16
    26f0:	51 23       	and	r21, r17
    26f2:	21 15       	cp	r18, r1
    26f4:	31 05       	cpc	r19, r1
    26f6:	41 05       	cpc	r20, r1
    26f8:	51 05       	cpc	r21, r1
    26fa:	21 f0       	breq	.+8      	; 0x2704 <_fpadd_parts+0x10c>
    26fc:	21 e0       	ldi	r18, 0x01	; 1
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	79 01       	movw	r14, r18
    2706:	8a 01       	movw	r16, r20
    2708:	e6 28       	or	r14, r6
    270a:	f7 28       	or	r15, r7
    270c:	08 29       	or	r16, r8
    270e:	19 29       	or	r17, r9
    2710:	3c c0       	rjmp	.+120    	; 0x278a <_fpadd_parts+0x192>
    2712:	23 2b       	or	r18, r19
    2714:	d1 f1       	breq	.+116    	; 0x278a <_fpadd_parts+0x192>
    2716:	26 0e       	add	r2, r22
    2718:	37 1e       	adc	r3, r23
    271a:	35 01       	movw	r6, r10
    271c:	46 01       	movw	r8, r12
    271e:	06 2e       	mov	r0, r22
    2720:	04 c0       	rjmp	.+8      	; 0x272a <_fpadd_parts+0x132>
    2722:	96 94       	lsr	r9
    2724:	87 94       	ror	r8
    2726:	77 94       	ror	r7
    2728:	67 94       	ror	r6
    272a:	0a 94       	dec	r0
    272c:	d2 f7       	brpl	.-12     	; 0x2722 <_fpadd_parts+0x12a>
    272e:	21 e0       	ldi	r18, 0x01	; 1
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	50 e0       	ldi	r21, 0x00	; 0
    2736:	04 c0       	rjmp	.+8      	; 0x2740 <_fpadd_parts+0x148>
    2738:	22 0f       	add	r18, r18
    273a:	33 1f       	adc	r19, r19
    273c:	44 1f       	adc	r20, r20
    273e:	55 1f       	adc	r21, r21
    2740:	6a 95       	dec	r22
    2742:	d2 f7       	brpl	.-12     	; 0x2738 <_fpadd_parts+0x140>
    2744:	21 50       	subi	r18, 0x01	; 1
    2746:	30 40       	sbci	r19, 0x00	; 0
    2748:	40 40       	sbci	r20, 0x00	; 0
    274a:	50 40       	sbci	r21, 0x00	; 0
    274c:	2a 21       	and	r18, r10
    274e:	3b 21       	and	r19, r11
    2750:	4c 21       	and	r20, r12
    2752:	5d 21       	and	r21, r13
    2754:	21 15       	cp	r18, r1
    2756:	31 05       	cpc	r19, r1
    2758:	41 05       	cpc	r20, r1
    275a:	51 05       	cpc	r21, r1
    275c:	21 f0       	breq	.+8      	; 0x2766 <_fpadd_parts+0x16e>
    275e:	21 e0       	ldi	r18, 0x01	; 1
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	59 01       	movw	r10, r18
    2768:	6a 01       	movw	r12, r20
    276a:	a6 28       	or	r10, r6
    276c:	b7 28       	or	r11, r7
    276e:	c8 28       	or	r12, r8
    2770:	d9 28       	or	r13, r9
    2772:	0b c0       	rjmp	.+22     	; 0x278a <_fpadd_parts+0x192>
    2774:	82 15       	cp	r24, r2
    2776:	93 05       	cpc	r25, r3
    2778:	2c f0       	brlt	.+10     	; 0x2784 <_fpadd_parts+0x18c>
    277a:	1c 01       	movw	r2, r24
    277c:	aa 24       	eor	r10, r10
    277e:	bb 24       	eor	r11, r11
    2780:	65 01       	movw	r12, r10
    2782:	03 c0       	rjmp	.+6      	; 0x278a <_fpadd_parts+0x192>
    2784:	ee 24       	eor	r14, r14
    2786:	ff 24       	eor	r15, r15
    2788:	87 01       	movw	r16, r14
    278a:	11 96       	adiw	r26, 0x01	; 1
    278c:	9c 91       	ld	r25, X
    278e:	d2 01       	movw	r26, r4
    2790:	11 96       	adiw	r26, 0x01	; 1
    2792:	8c 91       	ld	r24, X
    2794:	98 17       	cp	r25, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <_fpadd_parts+0x1a2>
    2798:	45 c0       	rjmp	.+138    	; 0x2824 <_fpadd_parts+0x22c>
    279a:	99 23       	and	r25, r25
    279c:	39 f0       	breq	.+14     	; 0x27ac <_fpadd_parts+0x1b4>
    279e:	a8 01       	movw	r20, r16
    27a0:	97 01       	movw	r18, r14
    27a2:	2a 19       	sub	r18, r10
    27a4:	3b 09       	sbc	r19, r11
    27a6:	4c 09       	sbc	r20, r12
    27a8:	5d 09       	sbc	r21, r13
    27aa:	06 c0       	rjmp	.+12     	; 0x27b8 <_fpadd_parts+0x1c0>
    27ac:	a6 01       	movw	r20, r12
    27ae:	95 01       	movw	r18, r10
    27b0:	2e 19       	sub	r18, r14
    27b2:	3f 09       	sbc	r19, r15
    27b4:	40 0b       	sbc	r20, r16
    27b6:	51 0b       	sbc	r21, r17
    27b8:	57 fd       	sbrc	r21, 7
    27ba:	08 c0       	rjmp	.+16     	; 0x27cc <_fpadd_parts+0x1d4>
    27bc:	11 82       	std	Z+1, r1	; 0x01
    27be:	33 82       	std	Z+3, r3	; 0x03
    27c0:	22 82       	std	Z+2, r2	; 0x02
    27c2:	24 83       	std	Z+4, r18	; 0x04
    27c4:	35 83       	std	Z+5, r19	; 0x05
    27c6:	46 83       	std	Z+6, r20	; 0x06
    27c8:	57 83       	std	Z+7, r21	; 0x07
    27ca:	1d c0       	rjmp	.+58     	; 0x2806 <_fpadd_parts+0x20e>
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	81 83       	std	Z+1, r24	; 0x01
    27d0:	33 82       	std	Z+3, r3	; 0x03
    27d2:	22 82       	std	Z+2, r2	; 0x02
    27d4:	88 27       	eor	r24, r24
    27d6:	99 27       	eor	r25, r25
    27d8:	dc 01       	movw	r26, r24
    27da:	82 1b       	sub	r24, r18
    27dc:	93 0b       	sbc	r25, r19
    27de:	a4 0b       	sbc	r26, r20
    27e0:	b5 0b       	sbc	r27, r21
    27e2:	84 83       	std	Z+4, r24	; 0x04
    27e4:	95 83       	std	Z+5, r25	; 0x05
    27e6:	a6 83       	std	Z+6, r26	; 0x06
    27e8:	b7 83       	std	Z+7, r27	; 0x07
    27ea:	0d c0       	rjmp	.+26     	; 0x2806 <_fpadd_parts+0x20e>
    27ec:	22 0f       	add	r18, r18
    27ee:	33 1f       	adc	r19, r19
    27f0:	44 1f       	adc	r20, r20
    27f2:	55 1f       	adc	r21, r21
    27f4:	24 83       	std	Z+4, r18	; 0x04
    27f6:	35 83       	std	Z+5, r19	; 0x05
    27f8:	46 83       	std	Z+6, r20	; 0x06
    27fa:	57 83       	std	Z+7, r21	; 0x07
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	93 83       	std	Z+3, r25	; 0x03
    2804:	82 83       	std	Z+2, r24	; 0x02
    2806:	24 81       	ldd	r18, Z+4	; 0x04
    2808:	35 81       	ldd	r19, Z+5	; 0x05
    280a:	46 81       	ldd	r20, Z+6	; 0x06
    280c:	57 81       	ldd	r21, Z+7	; 0x07
    280e:	da 01       	movw	r26, r20
    2810:	c9 01       	movw	r24, r18
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	a1 09       	sbc	r26, r1
    2816:	b1 09       	sbc	r27, r1
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	af 4f       	sbci	r26, 0xFF	; 255
    281e:	bf 43       	sbci	r27, 0x3F	; 63
    2820:	28 f3       	brcs	.-54     	; 0x27ec <_fpadd_parts+0x1f4>
    2822:	0b c0       	rjmp	.+22     	; 0x283a <_fpadd_parts+0x242>
    2824:	91 83       	std	Z+1, r25	; 0x01
    2826:	33 82       	std	Z+3, r3	; 0x03
    2828:	22 82       	std	Z+2, r2	; 0x02
    282a:	ea 0c       	add	r14, r10
    282c:	fb 1c       	adc	r15, r11
    282e:	0c 1d       	adc	r16, r12
    2830:	1d 1d       	adc	r17, r13
    2832:	e4 82       	std	Z+4, r14	; 0x04
    2834:	f5 82       	std	Z+5, r15	; 0x05
    2836:	06 83       	std	Z+6, r16	; 0x06
    2838:	17 83       	std	Z+7, r17	; 0x07
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	80 83       	st	Z, r24
    283e:	24 81       	ldd	r18, Z+4	; 0x04
    2840:	35 81       	ldd	r19, Z+5	; 0x05
    2842:	46 81       	ldd	r20, Z+6	; 0x06
    2844:	57 81       	ldd	r21, Z+7	; 0x07
    2846:	57 ff       	sbrs	r21, 7
    2848:	1a c0       	rjmp	.+52     	; 0x287e <_fpadd_parts+0x286>
    284a:	c9 01       	movw	r24, r18
    284c:	aa 27       	eor	r26, r26
    284e:	97 fd       	sbrc	r25, 7
    2850:	a0 95       	com	r26
    2852:	ba 2f       	mov	r27, r26
    2854:	81 70       	andi	r24, 0x01	; 1
    2856:	90 70       	andi	r25, 0x00	; 0
    2858:	a0 70       	andi	r26, 0x00	; 0
    285a:	b0 70       	andi	r27, 0x00	; 0
    285c:	56 95       	lsr	r21
    285e:	47 95       	ror	r20
    2860:	37 95       	ror	r19
    2862:	27 95       	ror	r18
    2864:	82 2b       	or	r24, r18
    2866:	93 2b       	or	r25, r19
    2868:	a4 2b       	or	r26, r20
    286a:	b5 2b       	or	r27, r21
    286c:	84 83       	std	Z+4, r24	; 0x04
    286e:	95 83       	std	Z+5, r25	; 0x05
    2870:	a6 83       	std	Z+6, r26	; 0x06
    2872:	b7 83       	std	Z+7, r27	; 0x07
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	93 83       	std	Z+3, r25	; 0x03
    287c:	82 83       	std	Z+2, r24	; 0x02
    287e:	df 01       	movw	r26, r30
    2880:	01 c0       	rjmp	.+2      	; 0x2884 <_fpadd_parts+0x28c>
    2882:	d2 01       	movw	r26, r4
    2884:	cd 01       	movw	r24, r26
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	e2 e1       	ldi	r30, 0x12	; 18
    288c:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__epilogue_restores__>

00002890 <__subsf3>:
    2890:	a0 e2       	ldi	r26, 0x20	; 32
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ee e4       	ldi	r30, 0x4E	; 78
    2896:	f4 e1       	ldi	r31, 0x14	; 20
    2898:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
    289c:	69 83       	std	Y+1, r22	; 0x01
    289e:	7a 83       	std	Y+2, r23	; 0x02
    28a0:	8b 83       	std	Y+3, r24	; 0x03
    28a2:	9c 83       	std	Y+4, r25	; 0x04
    28a4:	2d 83       	std	Y+5, r18	; 0x05
    28a6:	3e 83       	std	Y+6, r19	; 0x06
    28a8:	4f 83       	std	Y+7, r20	; 0x07
    28aa:	58 87       	std	Y+8, r21	; 0x08
    28ac:	e9 e0       	ldi	r30, 0x09	; 9
    28ae:	ee 2e       	mov	r14, r30
    28b0:	f1 2c       	mov	r15, r1
    28b2:	ec 0e       	add	r14, r28
    28b4:	fd 1e       	adc	r15, r29
    28b6:	ce 01       	movw	r24, r28
    28b8:	01 96       	adiw	r24, 0x01	; 1
    28ba:	b7 01       	movw	r22, r14
    28bc:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    28c0:	8e 01       	movw	r16, r28
    28c2:	0f 5e       	subi	r16, 0xEF	; 239
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	ce 01       	movw	r24, r28
    28c8:	05 96       	adiw	r24, 0x05	; 5
    28ca:	b8 01       	movw	r22, r16
    28cc:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    28d0:	8a 89       	ldd	r24, Y+18	; 0x12
    28d2:	91 e0       	ldi	r25, 0x01	; 1
    28d4:	89 27       	eor	r24, r25
    28d6:	8a 8b       	std	Y+18, r24	; 0x12
    28d8:	c7 01       	movw	r24, r14
    28da:	b8 01       	movw	r22, r16
    28dc:	ae 01       	movw	r20, r28
    28de:	47 5e       	subi	r20, 0xE7	; 231
    28e0:	5f 4f       	sbci	r21, 0xFF	; 255
    28e2:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_fpadd_parts>
    28e6:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__pack_f>
    28ea:	a0 96       	adiw	r28, 0x20	; 32
    28ec:	e6 e0       	ldi	r30, 0x06	; 6
    28ee:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

000028f2 <__addsf3>:
    28f2:	a0 e2       	ldi	r26, 0x20	; 32
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ef e7       	ldi	r30, 0x7F	; 127
    28f8:	f4 e1       	ldi	r31, 0x14	; 20
    28fa:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__prologue_saves__+0x18>
    28fe:	69 83       	std	Y+1, r22	; 0x01
    2900:	7a 83       	std	Y+2, r23	; 0x02
    2902:	8b 83       	std	Y+3, r24	; 0x03
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	2d 83       	std	Y+5, r18	; 0x05
    2908:	3e 83       	std	Y+6, r19	; 0x06
    290a:	4f 83       	std	Y+7, r20	; 0x07
    290c:	58 87       	std	Y+8, r21	; 0x08
    290e:	f9 e0       	ldi	r31, 0x09	; 9
    2910:	ef 2e       	mov	r14, r31
    2912:	f1 2c       	mov	r15, r1
    2914:	ec 0e       	add	r14, r28
    2916:	fd 1e       	adc	r15, r29
    2918:	ce 01       	movw	r24, r28
    291a:	01 96       	adiw	r24, 0x01	; 1
    291c:	b7 01       	movw	r22, r14
    291e:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2922:	8e 01       	movw	r16, r28
    2924:	0f 5e       	subi	r16, 0xEF	; 239
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
    2928:	ce 01       	movw	r24, r28
    292a:	05 96       	adiw	r24, 0x05	; 5
    292c:	b8 01       	movw	r22, r16
    292e:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2932:	c7 01       	movw	r24, r14
    2934:	b8 01       	movw	r22, r16
    2936:	ae 01       	movw	r20, r28
    2938:	47 5e       	subi	r20, 0xE7	; 231
    293a:	5f 4f       	sbci	r21, 0xFF	; 255
    293c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_fpadd_parts>
    2940:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__pack_f>
    2944:	a0 96       	adiw	r28, 0x20	; 32
    2946:	e6 e0       	ldi	r30, 0x06	; 6
    2948:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__epilogue_restores__+0x18>

0000294c <__mulsf3>:
    294c:	a0 e2       	ldi	r26, 0x20	; 32
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	ec ea       	ldi	r30, 0xAC	; 172
    2952:	f4 e1       	ldi	r31, 0x14	; 20
    2954:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__prologue_saves__>
    2958:	69 83       	std	Y+1, r22	; 0x01
    295a:	7a 83       	std	Y+2, r23	; 0x02
    295c:	8b 83       	std	Y+3, r24	; 0x03
    295e:	9c 83       	std	Y+4, r25	; 0x04
    2960:	2d 83       	std	Y+5, r18	; 0x05
    2962:	3e 83       	std	Y+6, r19	; 0x06
    2964:	4f 83       	std	Y+7, r20	; 0x07
    2966:	58 87       	std	Y+8, r21	; 0x08
    2968:	ce 01       	movw	r24, r28
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	be 01       	movw	r22, r28
    296e:	67 5f       	subi	r22, 0xF7	; 247
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2976:	ce 01       	movw	r24, r28
    2978:	05 96       	adiw	r24, 0x05	; 5
    297a:	be 01       	movw	r22, r28
    297c:	6f 5e       	subi	r22, 0xEF	; 239
    297e:	7f 4f       	sbci	r23, 0xFF	; 255
    2980:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2984:	99 85       	ldd	r25, Y+9	; 0x09
    2986:	92 30       	cpi	r25, 0x02	; 2
    2988:	88 f0       	brcs	.+34     	; 0x29ac <__mulsf3+0x60>
    298a:	89 89       	ldd	r24, Y+17	; 0x11
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	c8 f0       	brcs	.+50     	; 0x29c2 <__mulsf3+0x76>
    2990:	94 30       	cpi	r25, 0x04	; 4
    2992:	19 f4       	brne	.+6      	; 0x299a <__mulsf3+0x4e>
    2994:	82 30       	cpi	r24, 0x02	; 2
    2996:	51 f4       	brne	.+20     	; 0x29ac <__mulsf3+0x60>
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <__mulsf3+0x56>
    299a:	84 30       	cpi	r24, 0x04	; 4
    299c:	29 f4       	brne	.+10     	; 0x29a8 <__mulsf3+0x5c>
    299e:	92 30       	cpi	r25, 0x02	; 2
    29a0:	81 f4       	brne	.+32     	; 0x29c2 <__mulsf3+0x76>
    29a2:	87 e0       	ldi	r24, 0x07	; 7
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	c6 c0       	rjmp	.+396    	; 0x2b34 <__mulsf3+0x1e8>
    29a8:	92 30       	cpi	r25, 0x02	; 2
    29aa:	49 f4       	brne	.+18     	; 0x29be <__mulsf3+0x72>
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b0:	8a 89       	ldd	r24, Y+18	; 0x12
    29b2:	98 13       	cpse	r25, r24
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	2a 87       	std	Y+10, r18	; 0x0a
    29b8:	ce 01       	movw	r24, r28
    29ba:	09 96       	adiw	r24, 0x09	; 9
    29bc:	bb c0       	rjmp	.+374    	; 0x2b34 <__mulsf3+0x1e8>
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	49 f4       	brne	.+18     	; 0x29d4 <__mulsf3+0x88>
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	8a 89       	ldd	r24, Y+18	; 0x12
    29c8:	98 13       	cpse	r25, r24
    29ca:	21 e0       	ldi	r18, 0x01	; 1
    29cc:	2a 8b       	std	Y+18, r18	; 0x12
    29ce:	ce 01       	movw	r24, r28
    29d0:	41 96       	adiw	r24, 0x11	; 17
    29d2:	b0 c0       	rjmp	.+352    	; 0x2b34 <__mulsf3+0x1e8>
    29d4:	2d 84       	ldd	r2, Y+13	; 0x0d
    29d6:	3e 84       	ldd	r3, Y+14	; 0x0e
    29d8:	4f 84       	ldd	r4, Y+15	; 0x0f
    29da:	58 88       	ldd	r5, Y+16	; 0x10
    29dc:	6d 88       	ldd	r6, Y+21	; 0x15
    29de:	7e 88       	ldd	r7, Y+22	; 0x16
    29e0:	8f 88       	ldd	r8, Y+23	; 0x17
    29e2:	98 8c       	ldd	r9, Y+24	; 0x18
    29e4:	ee 24       	eor	r14, r14
    29e6:	ff 24       	eor	r15, r15
    29e8:	87 01       	movw	r16, r14
    29ea:	aa 24       	eor	r10, r10
    29ec:	bb 24       	eor	r11, r11
    29ee:	65 01       	movw	r12, r10
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	e0 e0       	ldi	r30, 0x00	; 0
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	c1 01       	movw	r24, r2
    29fe:	81 70       	andi	r24, 0x01	; 1
    2a00:	90 70       	andi	r25, 0x00	; 0
    2a02:	89 2b       	or	r24, r25
    2a04:	e9 f0       	breq	.+58     	; 0x2a40 <__mulsf3+0xf4>
    2a06:	e6 0c       	add	r14, r6
    2a08:	f7 1c       	adc	r15, r7
    2a0a:	08 1d       	adc	r16, r8
    2a0c:	19 1d       	adc	r17, r9
    2a0e:	9a 01       	movw	r18, r20
    2a10:	ab 01       	movw	r20, r22
    2a12:	2a 0d       	add	r18, r10
    2a14:	3b 1d       	adc	r19, r11
    2a16:	4c 1d       	adc	r20, r12
    2a18:	5d 1d       	adc	r21, r13
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e6 14       	cp	r14, r6
    2a24:	f7 04       	cpc	r15, r7
    2a26:	08 05       	cpc	r16, r8
    2a28:	19 05       	cpc	r17, r9
    2a2a:	20 f4       	brcc	.+8      	; 0x2a34 <__mulsf3+0xe8>
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 e0       	ldi	r26, 0x00	; 0
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	ba 01       	movw	r22, r20
    2a36:	a9 01       	movw	r20, r18
    2a38:	48 0f       	add	r20, r24
    2a3a:	59 1f       	adc	r21, r25
    2a3c:	6a 1f       	adc	r22, r26
    2a3e:	7b 1f       	adc	r23, r27
    2a40:	aa 0c       	add	r10, r10
    2a42:	bb 1c       	adc	r11, r11
    2a44:	cc 1c       	adc	r12, r12
    2a46:	dd 1c       	adc	r13, r13
    2a48:	97 fe       	sbrs	r9, 7
    2a4a:	08 c0       	rjmp	.+16     	; 0x2a5c <__mulsf3+0x110>
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	a0 e0       	ldi	r26, 0x00	; 0
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	a8 2a       	or	r10, r24
    2a56:	b9 2a       	or	r11, r25
    2a58:	ca 2a       	or	r12, r26
    2a5a:	db 2a       	or	r13, r27
    2a5c:	31 96       	adiw	r30, 0x01	; 1
    2a5e:	e0 32       	cpi	r30, 0x20	; 32
    2a60:	f1 05       	cpc	r31, r1
    2a62:	49 f0       	breq	.+18     	; 0x2a76 <__mulsf3+0x12a>
    2a64:	66 0c       	add	r6, r6
    2a66:	77 1c       	adc	r7, r7
    2a68:	88 1c       	adc	r8, r8
    2a6a:	99 1c       	adc	r9, r9
    2a6c:	56 94       	lsr	r5
    2a6e:	47 94       	ror	r4
    2a70:	37 94       	ror	r3
    2a72:	27 94       	ror	r2
    2a74:	c3 cf       	rjmp	.-122    	; 0x29fc <__mulsf3+0xb0>
    2a76:	fa 85       	ldd	r31, Y+10	; 0x0a
    2a78:	ea 89       	ldd	r30, Y+18	; 0x12
    2a7a:	2b 89       	ldd	r18, Y+19	; 0x13
    2a7c:	3c 89       	ldd	r19, Y+20	; 0x14
    2a7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a80:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a82:	28 0f       	add	r18, r24
    2a84:	39 1f       	adc	r19, r25
    2a86:	2e 5f       	subi	r18, 0xFE	; 254
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	17 c0       	rjmp	.+46     	; 0x2aba <__mulsf3+0x16e>
    2a8c:	ca 01       	movw	r24, r20
    2a8e:	81 70       	andi	r24, 0x01	; 1
    2a90:	90 70       	andi	r25, 0x00	; 0
    2a92:	89 2b       	or	r24, r25
    2a94:	61 f0       	breq	.+24     	; 0x2aae <__mulsf3+0x162>
    2a96:	16 95       	lsr	r17
    2a98:	07 95       	ror	r16
    2a9a:	f7 94       	ror	r15
    2a9c:	e7 94       	ror	r14
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e8       	ldi	r27, 0x80	; 128
    2aa6:	e8 2a       	or	r14, r24
    2aa8:	f9 2a       	or	r15, r25
    2aaa:	0a 2b       	or	r16, r26
    2aac:	1b 2b       	or	r17, r27
    2aae:	76 95       	lsr	r23
    2ab0:	67 95       	ror	r22
    2ab2:	57 95       	ror	r21
    2ab4:	47 95       	ror	r20
    2ab6:	2f 5f       	subi	r18, 0xFF	; 255
    2ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aba:	77 fd       	sbrc	r23, 7
    2abc:	e7 cf       	rjmp	.-50     	; 0x2a8c <__mulsf3+0x140>
    2abe:	0c c0       	rjmp	.+24     	; 0x2ad8 <__mulsf3+0x18c>
    2ac0:	44 0f       	add	r20, r20
    2ac2:	55 1f       	adc	r21, r21
    2ac4:	66 1f       	adc	r22, r22
    2ac6:	77 1f       	adc	r23, r23
    2ac8:	17 fd       	sbrc	r17, 7
    2aca:	41 60       	ori	r20, 0x01	; 1
    2acc:	ee 0c       	add	r14, r14
    2ace:	ff 1c       	adc	r15, r15
    2ad0:	00 1f       	adc	r16, r16
    2ad2:	11 1f       	adc	r17, r17
    2ad4:	21 50       	subi	r18, 0x01	; 1
    2ad6:	30 40       	sbci	r19, 0x00	; 0
    2ad8:	40 30       	cpi	r20, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	59 07       	cpc	r21, r25
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	69 07       	cpc	r22, r25
    2ae2:	90 e4       	ldi	r25, 0x40	; 64
    2ae4:	79 07       	cpc	r23, r25
    2ae6:	60 f3       	brcs	.-40     	; 0x2ac0 <__mulsf3+0x174>
    2ae8:	2b 8f       	std	Y+27, r18	; 0x1b
    2aea:	3c 8f       	std	Y+28, r19	; 0x1c
    2aec:	db 01       	movw	r26, r22
    2aee:	ca 01       	movw	r24, r20
    2af0:	8f 77       	andi	r24, 0x7F	; 127
    2af2:	90 70       	andi	r25, 0x00	; 0
    2af4:	a0 70       	andi	r26, 0x00	; 0
    2af6:	b0 70       	andi	r27, 0x00	; 0
    2af8:	80 34       	cpi	r24, 0x40	; 64
    2afa:	91 05       	cpc	r25, r1
    2afc:	a1 05       	cpc	r26, r1
    2afe:	b1 05       	cpc	r27, r1
    2b00:	61 f4       	brne	.+24     	; 0x2b1a <__mulsf3+0x1ce>
    2b02:	47 fd       	sbrc	r20, 7
    2b04:	0a c0       	rjmp	.+20     	; 0x2b1a <__mulsf3+0x1ce>
    2b06:	e1 14       	cp	r14, r1
    2b08:	f1 04       	cpc	r15, r1
    2b0a:	01 05       	cpc	r16, r1
    2b0c:	11 05       	cpc	r17, r1
    2b0e:	29 f0       	breq	.+10     	; 0x2b1a <__mulsf3+0x1ce>
    2b10:	40 5c       	subi	r20, 0xC0	; 192
    2b12:	5f 4f       	sbci	r21, 0xFF	; 255
    2b14:	6f 4f       	sbci	r22, 0xFF	; 255
    2b16:	7f 4f       	sbci	r23, 0xFF	; 255
    2b18:	40 78       	andi	r20, 0x80	; 128
    2b1a:	1a 8e       	std	Y+26, r1	; 0x1a
    2b1c:	fe 17       	cp	r31, r30
    2b1e:	11 f0       	breq	.+4      	; 0x2b24 <__mulsf3+0x1d8>
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	8a 8f       	std	Y+26, r24	; 0x1a
    2b24:	4d 8f       	std	Y+29, r20	; 0x1d
    2b26:	5e 8f       	std	Y+30, r21	; 0x1e
    2b28:	6f 8f       	std	Y+31, r22	; 0x1f
    2b2a:	78 a3       	std	Y+32, r23	; 0x20
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	89 8f       	std	Y+25, r24	; 0x19
    2b30:	ce 01       	movw	r24, r28
    2b32:	49 96       	adiw	r24, 0x19	; 25
    2b34:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__pack_f>
    2b38:	a0 96       	adiw	r28, 0x20	; 32
    2b3a:	e2 e1       	ldi	r30, 0x12	; 18
    2b3c:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__epilogue_restores__>

00002b40 <__divsf3>:
    2b40:	a8 e1       	ldi	r26, 0x18	; 24
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e6 ea       	ldi	r30, 0xA6	; 166
    2b46:	f5 e1       	ldi	r31, 0x15	; 21
    2b48:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__prologue_saves__+0x10>
    2b4c:	69 83       	std	Y+1, r22	; 0x01
    2b4e:	7a 83       	std	Y+2, r23	; 0x02
    2b50:	8b 83       	std	Y+3, r24	; 0x03
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	2d 83       	std	Y+5, r18	; 0x05
    2b56:	3e 83       	std	Y+6, r19	; 0x06
    2b58:	4f 83       	std	Y+7, r20	; 0x07
    2b5a:	58 87       	std	Y+8, r21	; 0x08
    2b5c:	b9 e0       	ldi	r27, 0x09	; 9
    2b5e:	eb 2e       	mov	r14, r27
    2b60:	f1 2c       	mov	r15, r1
    2b62:	ec 0e       	add	r14, r28
    2b64:	fd 1e       	adc	r15, r29
    2b66:	ce 01       	movw	r24, r28
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	b7 01       	movw	r22, r14
    2b6c:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2b70:	8e 01       	movw	r16, r28
    2b72:	0f 5e       	subi	r16, 0xEF	; 239
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	ce 01       	movw	r24, r28
    2b78:	05 96       	adiw	r24, 0x05	; 5
    2b7a:	b8 01       	movw	r22, r16
    2b7c:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2b80:	29 85       	ldd	r18, Y+9	; 0x09
    2b82:	22 30       	cpi	r18, 0x02	; 2
    2b84:	08 f4       	brcc	.+2      	; 0x2b88 <__divsf3+0x48>
    2b86:	7e c0       	rjmp	.+252    	; 0x2c84 <__divsf3+0x144>
    2b88:	39 89       	ldd	r19, Y+17	; 0x11
    2b8a:	32 30       	cpi	r19, 0x02	; 2
    2b8c:	10 f4       	brcc	.+4      	; 0x2b92 <__divsf3+0x52>
    2b8e:	b8 01       	movw	r22, r16
    2b90:	7c c0       	rjmp	.+248    	; 0x2c8a <__divsf3+0x14a>
    2b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b94:	9a 89       	ldd	r25, Y+18	; 0x12
    2b96:	89 27       	eor	r24, r25
    2b98:	8a 87       	std	Y+10, r24	; 0x0a
    2b9a:	24 30       	cpi	r18, 0x04	; 4
    2b9c:	11 f0       	breq	.+4      	; 0x2ba2 <__divsf3+0x62>
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 f4       	brne	.+12     	; 0x2bae <__divsf3+0x6e>
    2ba2:	23 17       	cp	r18, r19
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <__divsf3+0x68>
    2ba6:	6e c0       	rjmp	.+220    	; 0x2c84 <__divsf3+0x144>
    2ba8:	67 e0       	ldi	r22, 0x07	; 7
    2baa:	71 e0       	ldi	r23, 0x01	; 1
    2bac:	6e c0       	rjmp	.+220    	; 0x2c8a <__divsf3+0x14a>
    2bae:	34 30       	cpi	r19, 0x04	; 4
    2bb0:	39 f4       	brne	.+14     	; 0x2bc0 <__divsf3+0x80>
    2bb2:	1d 86       	std	Y+13, r1	; 0x0d
    2bb4:	1e 86       	std	Y+14, r1	; 0x0e
    2bb6:	1f 86       	std	Y+15, r1	; 0x0f
    2bb8:	18 8a       	std	Y+16, r1	; 0x10
    2bba:	1c 86       	std	Y+12, r1	; 0x0c
    2bbc:	1b 86       	std	Y+11, r1	; 0x0b
    2bbe:	04 c0       	rjmp	.+8      	; 0x2bc8 <__divsf3+0x88>
    2bc0:	32 30       	cpi	r19, 0x02	; 2
    2bc2:	21 f4       	brne	.+8      	; 0x2bcc <__divsf3+0x8c>
    2bc4:	84 e0       	ldi	r24, 0x04	; 4
    2bc6:	89 87       	std	Y+9, r24	; 0x09
    2bc8:	b7 01       	movw	r22, r14
    2bca:	5f c0       	rjmp	.+190    	; 0x2c8a <__divsf3+0x14a>
    2bcc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bce:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd4:	28 1b       	sub	r18, r24
    2bd6:	39 0b       	sbc	r19, r25
    2bd8:	3c 87       	std	Y+12, r19	; 0x0c
    2bda:	2b 87       	std	Y+11, r18	; 0x0b
    2bdc:	ed 84       	ldd	r14, Y+13	; 0x0d
    2bde:	fe 84       	ldd	r15, Y+14	; 0x0e
    2be0:	0f 85       	ldd	r16, Y+15	; 0x0f
    2be2:	18 89       	ldd	r17, Y+16	; 0x10
    2be4:	ad 88       	ldd	r10, Y+21	; 0x15
    2be6:	be 88       	ldd	r11, Y+22	; 0x16
    2be8:	cf 88       	ldd	r12, Y+23	; 0x17
    2bea:	d8 8c       	ldd	r13, Y+24	; 0x18
    2bec:	ea 14       	cp	r14, r10
    2bee:	fb 04       	cpc	r15, r11
    2bf0:	0c 05       	cpc	r16, r12
    2bf2:	1d 05       	cpc	r17, r13
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <__divsf3+0xc6>
    2bf6:	ee 0c       	add	r14, r14
    2bf8:	ff 1c       	adc	r15, r15
    2bfa:	00 1f       	adc	r16, r16
    2bfc:	11 1f       	adc	r17, r17
    2bfe:	21 50       	subi	r18, 0x01	; 1
    2c00:	30 40       	sbci	r19, 0x00	; 0
    2c02:	3c 87       	std	Y+12, r19	; 0x0c
    2c04:	2b 87       	std	Y+11, r18	; 0x0b
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 e0       	ldi	r26, 0x00	; 0
    2c14:	b0 e4       	ldi	r27, 0x40	; 64
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	ea 14       	cp	r14, r10
    2c1c:	fb 04       	cpc	r15, r11
    2c1e:	0c 05       	cpc	r16, r12
    2c20:	1d 05       	cpc	r17, r13
    2c22:	40 f0       	brcs	.+16     	; 0x2c34 <__divsf3+0xf4>
    2c24:	28 2b       	or	r18, r24
    2c26:	39 2b       	or	r19, r25
    2c28:	4a 2b       	or	r20, r26
    2c2a:	5b 2b       	or	r21, r27
    2c2c:	ea 18       	sub	r14, r10
    2c2e:	fb 08       	sbc	r15, r11
    2c30:	0c 09       	sbc	r16, r12
    2c32:	1d 09       	sbc	r17, r13
    2c34:	b6 95       	lsr	r27
    2c36:	a7 95       	ror	r26
    2c38:	97 95       	ror	r25
    2c3a:	87 95       	ror	r24
    2c3c:	ee 0c       	add	r14, r14
    2c3e:	ff 1c       	adc	r15, r15
    2c40:	00 1f       	adc	r16, r16
    2c42:	11 1f       	adc	r17, r17
    2c44:	6f 5f       	subi	r22, 0xFF	; 255
    2c46:	7f 4f       	sbci	r23, 0xFF	; 255
    2c48:	6f 31       	cpi	r22, 0x1F	; 31
    2c4a:	71 05       	cpc	r23, r1
    2c4c:	31 f7       	brne	.-52     	; 0x2c1a <__divsf3+0xda>
    2c4e:	da 01       	movw	r26, r20
    2c50:	c9 01       	movw	r24, r18
    2c52:	8f 77       	andi	r24, 0x7F	; 127
    2c54:	90 70       	andi	r25, 0x00	; 0
    2c56:	a0 70       	andi	r26, 0x00	; 0
    2c58:	b0 70       	andi	r27, 0x00	; 0
    2c5a:	80 34       	cpi	r24, 0x40	; 64
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	a1 05       	cpc	r26, r1
    2c60:	b1 05       	cpc	r27, r1
    2c62:	61 f4       	brne	.+24     	; 0x2c7c <__divsf3+0x13c>
    2c64:	27 fd       	sbrc	r18, 7
    2c66:	0a c0       	rjmp	.+20     	; 0x2c7c <__divsf3+0x13c>
    2c68:	e1 14       	cp	r14, r1
    2c6a:	f1 04       	cpc	r15, r1
    2c6c:	01 05       	cpc	r16, r1
    2c6e:	11 05       	cpc	r17, r1
    2c70:	29 f0       	breq	.+10     	; 0x2c7c <__divsf3+0x13c>
    2c72:	20 5c       	subi	r18, 0xC0	; 192
    2c74:	3f 4f       	sbci	r19, 0xFF	; 255
    2c76:	4f 4f       	sbci	r20, 0xFF	; 255
    2c78:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7a:	20 78       	andi	r18, 0x80	; 128
    2c7c:	2d 87       	std	Y+13, r18	; 0x0d
    2c7e:	3e 87       	std	Y+14, r19	; 0x0e
    2c80:	4f 87       	std	Y+15, r20	; 0x0f
    2c82:	58 8b       	std	Y+16, r21	; 0x10
    2c84:	be 01       	movw	r22, r28
    2c86:	67 5f       	subi	r22, 0xF7	; 247
    2c88:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__pack_f>
    2c90:	68 96       	adiw	r28, 0x18	; 24
    2c92:	ea e0       	ldi	r30, 0x0A	; 10
    2c94:	0c 94 be 18 	jmp	0x317c	; 0x317c <__epilogue_restores__+0x10>

00002c98 <__floatsisf>:
    2c98:	a8 e0       	ldi	r26, 0x08	; 8
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e2 e5       	ldi	r30, 0x52	; 82
    2c9e:	f6 e1       	ldi	r31, 0x16	; 22
    2ca0:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__prologue_saves__+0x12>
    2ca4:	9b 01       	movw	r18, r22
    2ca6:	ac 01       	movw	r20, r24
    2ca8:	83 e0       	ldi	r24, 0x03	; 3
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	da 01       	movw	r26, r20
    2cae:	c9 01       	movw	r24, r18
    2cb0:	88 27       	eor	r24, r24
    2cb2:	b7 fd       	sbrc	r27, 7
    2cb4:	83 95       	inc	r24
    2cb6:	99 27       	eor	r25, r25
    2cb8:	aa 27       	eor	r26, r26
    2cba:	bb 27       	eor	r27, r27
    2cbc:	b8 2e       	mov	r11, r24
    2cbe:	21 15       	cp	r18, r1
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	41 05       	cpc	r20, r1
    2cc4:	51 05       	cpc	r21, r1
    2cc6:	19 f4       	brne	.+6      	; 0x2cce <__floatsisf+0x36>
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	3a c0       	rjmp	.+116    	; 0x2d42 <__floatsisf+0xaa>
    2cce:	88 23       	and	r24, r24
    2cd0:	a9 f0       	breq	.+42     	; 0x2cfc <__floatsisf+0x64>
    2cd2:	20 30       	cpi	r18, 0x00	; 0
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	38 07       	cpc	r19, r24
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	48 07       	cpc	r20, r24
    2cdc:	80 e8       	ldi	r24, 0x80	; 128
    2cde:	58 07       	cpc	r21, r24
    2ce0:	29 f4       	brne	.+10     	; 0x2cec <__floatsisf+0x54>
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	9f ec       	ldi	r25, 0xCF	; 207
    2cea:	30 c0       	rjmp	.+96     	; 0x2d4c <__floatsisf+0xb4>
    2cec:	ee 24       	eor	r14, r14
    2cee:	ff 24       	eor	r15, r15
    2cf0:	87 01       	movw	r16, r14
    2cf2:	e2 1a       	sub	r14, r18
    2cf4:	f3 0a       	sbc	r15, r19
    2cf6:	04 0b       	sbc	r16, r20
    2cf8:	15 0b       	sbc	r17, r21
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <__floatsisf+0x68>
    2cfc:	79 01       	movw	r14, r18
    2cfe:	8a 01       	movw	r16, r20
    2d00:	8e e1       	ldi	r24, 0x1E	; 30
    2d02:	c8 2e       	mov	r12, r24
    2d04:	d1 2c       	mov	r13, r1
    2d06:	dc 82       	std	Y+4, r13	; 0x04
    2d08:	cb 82       	std	Y+3, r12	; 0x03
    2d0a:	ed 82       	std	Y+5, r14	; 0x05
    2d0c:	fe 82       	std	Y+6, r15	; 0x06
    2d0e:	0f 83       	std	Y+7, r16	; 0x07
    2d10:	18 87       	std	Y+8, r17	; 0x08
    2d12:	c8 01       	movw	r24, r16
    2d14:	b7 01       	movw	r22, r14
    2d16:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__clzsi2>
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	18 16       	cp	r1, r24
    2d1e:	19 06       	cpc	r1, r25
    2d20:	84 f4       	brge	.+32     	; 0x2d42 <__floatsisf+0xaa>
    2d22:	08 2e       	mov	r0, r24
    2d24:	04 c0       	rjmp	.+8      	; 0x2d2e <__floatsisf+0x96>
    2d26:	ee 0c       	add	r14, r14
    2d28:	ff 1c       	adc	r15, r15
    2d2a:	00 1f       	adc	r16, r16
    2d2c:	11 1f       	adc	r17, r17
    2d2e:	0a 94       	dec	r0
    2d30:	d2 f7       	brpl	.-12     	; 0x2d26 <__floatsisf+0x8e>
    2d32:	ed 82       	std	Y+5, r14	; 0x05
    2d34:	fe 82       	std	Y+6, r15	; 0x06
    2d36:	0f 83       	std	Y+7, r16	; 0x07
    2d38:	18 87       	std	Y+8, r17	; 0x08
    2d3a:	c8 1a       	sub	r12, r24
    2d3c:	d9 0a       	sbc	r13, r25
    2d3e:	dc 82       	std	Y+4, r13	; 0x04
    2d40:	cb 82       	std	Y+3, r12	; 0x03
    2d42:	ba 82       	std	Y+2, r11	; 0x02
    2d44:	ce 01       	movw	r24, r28
    2d46:	01 96       	adiw	r24, 0x01	; 1
    2d48:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__pack_f>
    2d4c:	28 96       	adiw	r28, 0x08	; 8
    2d4e:	e9 e0       	ldi	r30, 0x09	; 9
    2d50:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__epilogue_restores__+0x12>

00002d54 <__fixsfsi>:
    2d54:	ac e0       	ldi	r26, 0x0C	; 12
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e0 eb       	ldi	r30, 0xB0	; 176
    2d5a:	f6 e1       	ldi	r31, 0x16	; 22
    2d5c:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__prologue_saves__+0x20>
    2d60:	69 83       	std	Y+1, r22	; 0x01
    2d62:	7a 83       	std	Y+2, r23	; 0x02
    2d64:	8b 83       	std	Y+3, r24	; 0x03
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	ce 01       	movw	r24, r28
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	be 01       	movw	r22, r28
    2d6e:	6b 5f       	subi	r22, 0xFB	; 251
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	0e 94 22 18 	call	0x3044	; 0x3044 <__unpack_f>
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	82 30       	cpi	r24, 0x02	; 2
    2d7a:	61 f1       	breq	.+88     	; 0x2dd4 <__fixsfsi+0x80>
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	50 f1       	brcs	.+84     	; 0x2dd4 <__fixsfsi+0x80>
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	21 f4       	brne	.+8      	; 0x2d8c <__fixsfsi+0x38>
    2d84:	8e 81       	ldd	r24, Y+6	; 0x06
    2d86:	88 23       	and	r24, r24
    2d88:	51 f1       	breq	.+84     	; 0x2dde <__fixsfsi+0x8a>
    2d8a:	2e c0       	rjmp	.+92     	; 0x2de8 <__fixsfsi+0x94>
    2d8c:	2f 81       	ldd	r18, Y+7	; 0x07
    2d8e:	38 85       	ldd	r19, Y+8	; 0x08
    2d90:	37 fd       	sbrc	r19, 7
    2d92:	20 c0       	rjmp	.+64     	; 0x2dd4 <__fixsfsi+0x80>
    2d94:	6e 81       	ldd	r22, Y+6	; 0x06
    2d96:	2f 31       	cpi	r18, 0x1F	; 31
    2d98:	31 05       	cpc	r19, r1
    2d9a:	1c f0       	brlt	.+6      	; 0x2da2 <__fixsfsi+0x4e>
    2d9c:	66 23       	and	r22, r22
    2d9e:	f9 f0       	breq	.+62     	; 0x2dde <__fixsfsi+0x8a>
    2da0:	23 c0       	rjmp	.+70     	; 0x2de8 <__fixsfsi+0x94>
    2da2:	8e e1       	ldi	r24, 0x1E	; 30
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	82 1b       	sub	r24, r18
    2da8:	93 0b       	sbc	r25, r19
    2daa:	29 85       	ldd	r18, Y+9	; 0x09
    2dac:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dae:	4b 85       	ldd	r20, Y+11	; 0x0b
    2db0:	5c 85       	ldd	r21, Y+12	; 0x0c
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <__fixsfsi+0x68>
    2db4:	56 95       	lsr	r21
    2db6:	47 95       	ror	r20
    2db8:	37 95       	ror	r19
    2dba:	27 95       	ror	r18
    2dbc:	8a 95       	dec	r24
    2dbe:	d2 f7       	brpl	.-12     	; 0x2db4 <__fixsfsi+0x60>
    2dc0:	66 23       	and	r22, r22
    2dc2:	b1 f0       	breq	.+44     	; 0x2df0 <__fixsfsi+0x9c>
    2dc4:	50 95       	com	r21
    2dc6:	40 95       	com	r20
    2dc8:	30 95       	com	r19
    2dca:	21 95       	neg	r18
    2dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dce:	4f 4f       	sbci	r20, 0xFF	; 255
    2dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd2:	0e c0       	rjmp	.+28     	; 0x2df0 <__fixsfsi+0x9c>
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e0       	ldi	r20, 0x00	; 0
    2dda:	50 e0       	ldi	r21, 0x00	; 0
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <__fixsfsi+0x9c>
    2dde:	2f ef       	ldi	r18, 0xFF	; 255
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	4f ef       	ldi	r20, 0xFF	; 255
    2de4:	5f e7       	ldi	r21, 0x7F	; 127
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <__fixsfsi+0x9c>
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e8       	ldi	r21, 0x80	; 128
    2df0:	b9 01       	movw	r22, r18
    2df2:	ca 01       	movw	r24, r20
    2df4:	2c 96       	adiw	r28, 0x0c	; 12
    2df6:	e2 e0       	ldi	r30, 0x02	; 2
    2df8:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__epilogue_restores__+0x20>

00002dfc <__clzsi2>:
    2dfc:	ef 92       	push	r14
    2dfe:	ff 92       	push	r15
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	7b 01       	movw	r14, r22
    2e06:	8c 01       	movw	r16, r24
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	e8 16       	cp	r14, r24
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	f8 06       	cpc	r15, r24
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	08 07       	cpc	r16, r24
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	18 07       	cpc	r17, r24
    2e18:	88 f4       	brcc	.+34     	; 0x2e3c <__clzsi2+0x40>
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	e8 16       	cp	r14, r24
    2e1e:	f1 04       	cpc	r15, r1
    2e20:	01 05       	cpc	r16, r1
    2e22:	11 05       	cpc	r17, r1
    2e24:	31 f0       	breq	.+12     	; 0x2e32 <__clzsi2+0x36>
    2e26:	28 f0       	brcs	.+10     	; 0x2e32 <__clzsi2+0x36>
    2e28:	88 e0       	ldi	r24, 0x08	; 8
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	17 c0       	rjmp	.+46     	; 0x2e60 <__clzsi2+0x64>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	a0 e0       	ldi	r26, 0x00	; 0
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	12 c0       	rjmp	.+36     	; 0x2e60 <__clzsi2+0x64>
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	e8 16       	cp	r14, r24
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	f8 06       	cpc	r15, r24
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	08 07       	cpc	r16, r24
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	18 07       	cpc	r17, r24
    2e4c:	28 f0       	brcs	.+10     	; 0x2e58 <__clzsi2+0x5c>
    2e4e:	88 e1       	ldi	r24, 0x18	; 24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a0 e0       	ldi	r26, 0x00	; 0
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <__clzsi2+0x64>
    2e58:	80 e1       	ldi	r24, 0x10	; 16
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e0       	ldi	r26, 0x00	; 0
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	20 e2       	ldi	r18, 0x20	; 32
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	50 e0       	ldi	r21, 0x00	; 0
    2e68:	28 1b       	sub	r18, r24
    2e6a:	39 0b       	sbc	r19, r25
    2e6c:	4a 0b       	sbc	r20, r26
    2e6e:	5b 0b       	sbc	r21, r27
    2e70:	04 c0       	rjmp	.+8      	; 0x2e7a <__clzsi2+0x7e>
    2e72:	16 95       	lsr	r17
    2e74:	07 95       	ror	r16
    2e76:	f7 94       	ror	r15
    2e78:	e7 94       	ror	r14
    2e7a:	8a 95       	dec	r24
    2e7c:	d2 f7       	brpl	.-12     	; 0x2e72 <__clzsi2+0x76>
    2e7e:	f7 01       	movw	r30, r14
    2e80:	e1 5f       	subi	r30, 0xF1	; 241
    2e82:	fe 4f       	sbci	r31, 0xFE	; 254
    2e84:	80 81       	ld	r24, Z
    2e86:	28 1b       	sub	r18, r24
    2e88:	31 09       	sbc	r19, r1
    2e8a:	41 09       	sbc	r20, r1
    2e8c:	51 09       	sbc	r21, r1
    2e8e:	c9 01       	movw	r24, r18
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	08 95       	ret

00002e9a <__pack_f>:
    2e9a:	df 92       	push	r13
    2e9c:	ef 92       	push	r14
    2e9e:	ff 92       	push	r15
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e4 80       	ldd	r14, Z+4	; 0x04
    2ea8:	f5 80       	ldd	r15, Z+5	; 0x05
    2eaa:	06 81       	ldd	r16, Z+6	; 0x06
    2eac:	17 81       	ldd	r17, Z+7	; 0x07
    2eae:	d1 80       	ldd	r13, Z+1	; 0x01
    2eb0:	80 81       	ld	r24, Z
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	48 f4       	brcc	.+18     	; 0x2ec8 <__pack_f+0x2e>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a0 e1       	ldi	r26, 0x10	; 16
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e8 2a       	or	r14, r24
    2ec0:	f9 2a       	or	r15, r25
    2ec2:	0a 2b       	or	r16, r26
    2ec4:	1b 2b       	or	r17, r27
    2ec6:	a5 c0       	rjmp	.+330    	; 0x3012 <__pack_f+0x178>
    2ec8:	84 30       	cpi	r24, 0x04	; 4
    2eca:	09 f4       	brne	.+2      	; 0x2ece <__pack_f+0x34>
    2ecc:	9f c0       	rjmp	.+318    	; 0x300c <__pack_f+0x172>
    2ece:	82 30       	cpi	r24, 0x02	; 2
    2ed0:	21 f4       	brne	.+8      	; 0x2eda <__pack_f+0x40>
    2ed2:	ee 24       	eor	r14, r14
    2ed4:	ff 24       	eor	r15, r15
    2ed6:	87 01       	movw	r16, r14
    2ed8:	05 c0       	rjmp	.+10     	; 0x2ee4 <__pack_f+0x4a>
    2eda:	e1 14       	cp	r14, r1
    2edc:	f1 04       	cpc	r15, r1
    2ede:	01 05       	cpc	r16, r1
    2ee0:	11 05       	cpc	r17, r1
    2ee2:	19 f4       	brne	.+6      	; 0x2eea <__pack_f+0x50>
    2ee4:	e0 e0       	ldi	r30, 0x00	; 0
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	96 c0       	rjmp	.+300    	; 0x3016 <__pack_f+0x17c>
    2eea:	62 81       	ldd	r22, Z+2	; 0x02
    2eec:	73 81       	ldd	r23, Z+3	; 0x03
    2eee:	9f ef       	ldi	r25, 0xFF	; 255
    2ef0:	62 38       	cpi	r22, 0x82	; 130
    2ef2:	79 07       	cpc	r23, r25
    2ef4:	0c f0       	brlt	.+2      	; 0x2ef8 <__pack_f+0x5e>
    2ef6:	5b c0       	rjmp	.+182    	; 0x2fae <__pack_f+0x114>
    2ef8:	22 e8       	ldi	r18, 0x82	; 130
    2efa:	3f ef       	ldi	r19, 0xFF	; 255
    2efc:	26 1b       	sub	r18, r22
    2efe:	37 0b       	sbc	r19, r23
    2f00:	2a 31       	cpi	r18, 0x1A	; 26
    2f02:	31 05       	cpc	r19, r1
    2f04:	2c f0       	brlt	.+10     	; 0x2f10 <__pack_f+0x76>
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	50 e0       	ldi	r21, 0x00	; 0
    2f0e:	2a c0       	rjmp	.+84     	; 0x2f64 <__pack_f+0xca>
    2f10:	b8 01       	movw	r22, r16
    2f12:	a7 01       	movw	r20, r14
    2f14:	02 2e       	mov	r0, r18
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <__pack_f+0x86>
    2f18:	76 95       	lsr	r23
    2f1a:	67 95       	ror	r22
    2f1c:	57 95       	ror	r21
    2f1e:	47 95       	ror	r20
    2f20:	0a 94       	dec	r0
    2f22:	d2 f7       	brpl	.-12     	; 0x2f18 <__pack_f+0x7e>
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e0       	ldi	r26, 0x00	; 0
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <__pack_f+0x9c>
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	aa 1f       	adc	r26, r26
    2f34:	bb 1f       	adc	r27, r27
    2f36:	2a 95       	dec	r18
    2f38:	d2 f7       	brpl	.-12     	; 0x2f2e <__pack_f+0x94>
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	a1 09       	sbc	r26, r1
    2f3e:	b1 09       	sbc	r27, r1
    2f40:	8e 21       	and	r24, r14
    2f42:	9f 21       	and	r25, r15
    2f44:	a0 23       	and	r26, r16
    2f46:	b1 23       	and	r27, r17
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	a1 05       	cpc	r26, r1
    2f4c:	b1 05       	cpc	r27, r1
    2f4e:	21 f0       	breq	.+8      	; 0x2f58 <__pack_f+0xbe>
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	a0 e0       	ldi	r26, 0x00	; 0
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	9a 01       	movw	r18, r20
    2f5a:	ab 01       	movw	r20, r22
    2f5c:	28 2b       	or	r18, r24
    2f5e:	39 2b       	or	r19, r25
    2f60:	4a 2b       	or	r20, r26
    2f62:	5b 2b       	or	r21, r27
    2f64:	da 01       	movw	r26, r20
    2f66:	c9 01       	movw	r24, r18
    2f68:	8f 77       	andi	r24, 0x7F	; 127
    2f6a:	90 70       	andi	r25, 0x00	; 0
    2f6c:	a0 70       	andi	r26, 0x00	; 0
    2f6e:	b0 70       	andi	r27, 0x00	; 0
    2f70:	80 34       	cpi	r24, 0x40	; 64
    2f72:	91 05       	cpc	r25, r1
    2f74:	a1 05       	cpc	r26, r1
    2f76:	b1 05       	cpc	r27, r1
    2f78:	39 f4       	brne	.+14     	; 0x2f88 <__pack_f+0xee>
    2f7a:	27 ff       	sbrs	r18, 7
    2f7c:	09 c0       	rjmp	.+18     	; 0x2f90 <__pack_f+0xf6>
    2f7e:	20 5c       	subi	r18, 0xC0	; 192
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	4f 4f       	sbci	r20, 0xFF	; 255
    2f84:	5f 4f       	sbci	r21, 0xFF	; 255
    2f86:	04 c0       	rjmp	.+8      	; 0x2f90 <__pack_f+0xf6>
    2f88:	21 5c       	subi	r18, 0xC1	; 193
    2f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f90:	e0 e0       	ldi	r30, 0x00	; 0
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	20 30       	cpi	r18, 0x00	; 0
    2f96:	a0 e0       	ldi	r26, 0x00	; 0
    2f98:	3a 07       	cpc	r19, r26
    2f9a:	a0 e0       	ldi	r26, 0x00	; 0
    2f9c:	4a 07       	cpc	r20, r26
    2f9e:	a0 e4       	ldi	r26, 0x40	; 64
    2fa0:	5a 07       	cpc	r21, r26
    2fa2:	10 f0       	brcs	.+4      	; 0x2fa8 <__pack_f+0x10e>
    2fa4:	e1 e0       	ldi	r30, 0x01	; 1
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	79 01       	movw	r14, r18
    2faa:	8a 01       	movw	r16, r20
    2fac:	27 c0       	rjmp	.+78     	; 0x2ffc <__pack_f+0x162>
    2fae:	60 38       	cpi	r22, 0x80	; 128
    2fb0:	71 05       	cpc	r23, r1
    2fb2:	64 f5       	brge	.+88     	; 0x300c <__pack_f+0x172>
    2fb4:	fb 01       	movw	r30, r22
    2fb6:	e1 58       	subi	r30, 0x81	; 129
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	d8 01       	movw	r26, r16
    2fbc:	c7 01       	movw	r24, r14
    2fbe:	8f 77       	andi	r24, 0x7F	; 127
    2fc0:	90 70       	andi	r25, 0x00	; 0
    2fc2:	a0 70       	andi	r26, 0x00	; 0
    2fc4:	b0 70       	andi	r27, 0x00	; 0
    2fc6:	80 34       	cpi	r24, 0x40	; 64
    2fc8:	91 05       	cpc	r25, r1
    2fca:	a1 05       	cpc	r26, r1
    2fcc:	b1 05       	cpc	r27, r1
    2fce:	39 f4       	brne	.+14     	; 0x2fde <__pack_f+0x144>
    2fd0:	e7 fe       	sbrs	r14, 7
    2fd2:	0d c0       	rjmp	.+26     	; 0x2fee <__pack_f+0x154>
    2fd4:	80 e4       	ldi	r24, 0x40	; 64
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 e0       	ldi	r26, 0x00	; 0
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <__pack_f+0x14c>
    2fde:	8f e3       	ldi	r24, 0x3F	; 63
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 e0       	ldi	r26, 0x00	; 0
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e8 0e       	add	r14, r24
    2fe8:	f9 1e       	adc	r15, r25
    2fea:	0a 1f       	adc	r16, r26
    2fec:	1b 1f       	adc	r17, r27
    2fee:	17 ff       	sbrs	r17, 7
    2ff0:	05 c0       	rjmp	.+10     	; 0x2ffc <__pack_f+0x162>
    2ff2:	16 95       	lsr	r17
    2ff4:	07 95       	ror	r16
    2ff6:	f7 94       	ror	r15
    2ff8:	e7 94       	ror	r14
    2ffa:	31 96       	adiw	r30, 0x01	; 1
    2ffc:	87 e0       	ldi	r24, 0x07	; 7
    2ffe:	16 95       	lsr	r17
    3000:	07 95       	ror	r16
    3002:	f7 94       	ror	r15
    3004:	e7 94       	ror	r14
    3006:	8a 95       	dec	r24
    3008:	d1 f7       	brne	.-12     	; 0x2ffe <__pack_f+0x164>
    300a:	05 c0       	rjmp	.+10     	; 0x3016 <__pack_f+0x17c>
    300c:	ee 24       	eor	r14, r14
    300e:	ff 24       	eor	r15, r15
    3010:	87 01       	movw	r16, r14
    3012:	ef ef       	ldi	r30, 0xFF	; 255
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	6e 2f       	mov	r22, r30
    3018:	67 95       	ror	r22
    301a:	66 27       	eor	r22, r22
    301c:	67 95       	ror	r22
    301e:	90 2f       	mov	r25, r16
    3020:	9f 77       	andi	r25, 0x7F	; 127
    3022:	d7 94       	ror	r13
    3024:	dd 24       	eor	r13, r13
    3026:	d7 94       	ror	r13
    3028:	8e 2f       	mov	r24, r30
    302a:	86 95       	lsr	r24
    302c:	49 2f       	mov	r20, r25
    302e:	46 2b       	or	r20, r22
    3030:	58 2f       	mov	r21, r24
    3032:	5d 29       	or	r21, r13
    3034:	b7 01       	movw	r22, r14
    3036:	ca 01       	movw	r24, r20
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	df 90       	pop	r13
    3042:	08 95       	ret

00003044 <__unpack_f>:
    3044:	fc 01       	movw	r30, r24
    3046:	db 01       	movw	r26, r22
    3048:	40 81       	ld	r20, Z
    304a:	51 81       	ldd	r21, Z+1	; 0x01
    304c:	22 81       	ldd	r18, Z+2	; 0x02
    304e:	62 2f       	mov	r22, r18
    3050:	6f 77       	andi	r22, 0x7F	; 127
    3052:	70 e0       	ldi	r23, 0x00	; 0
    3054:	22 1f       	adc	r18, r18
    3056:	22 27       	eor	r18, r18
    3058:	22 1f       	adc	r18, r18
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	89 2f       	mov	r24, r25
    305e:	88 0f       	add	r24, r24
    3060:	82 2b       	or	r24, r18
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	99 1f       	adc	r25, r25
    3068:	99 27       	eor	r25, r25
    306a:	99 1f       	adc	r25, r25
    306c:	11 96       	adiw	r26, 0x01	; 1
    306e:	9c 93       	st	X, r25
    3070:	11 97       	sbiw	r26, 0x01	; 1
    3072:	21 15       	cp	r18, r1
    3074:	31 05       	cpc	r19, r1
    3076:	a9 f5       	brne	.+106    	; 0x30e2 <__unpack_f+0x9e>
    3078:	41 15       	cp	r20, r1
    307a:	51 05       	cpc	r21, r1
    307c:	61 05       	cpc	r22, r1
    307e:	71 05       	cpc	r23, r1
    3080:	11 f4       	brne	.+4      	; 0x3086 <__unpack_f+0x42>
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	37 c0       	rjmp	.+110    	; 0x30f4 <__unpack_f+0xb0>
    3086:	82 e8       	ldi	r24, 0x82	; 130
    3088:	9f ef       	ldi	r25, 0xFF	; 255
    308a:	13 96       	adiw	r26, 0x03	; 3
    308c:	9c 93       	st	X, r25
    308e:	8e 93       	st	-X, r24
    3090:	12 97       	sbiw	r26, 0x02	; 2
    3092:	9a 01       	movw	r18, r20
    3094:	ab 01       	movw	r20, r22
    3096:	67 e0       	ldi	r22, 0x07	; 7
    3098:	22 0f       	add	r18, r18
    309a:	33 1f       	adc	r19, r19
    309c:	44 1f       	adc	r20, r20
    309e:	55 1f       	adc	r21, r21
    30a0:	6a 95       	dec	r22
    30a2:	d1 f7       	brne	.-12     	; 0x3098 <__unpack_f+0x54>
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	8c 93       	st	X, r24
    30a8:	0d c0       	rjmp	.+26     	; 0x30c4 <__unpack_f+0x80>
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	44 1f       	adc	r20, r20
    30b0:	55 1f       	adc	r21, r21
    30b2:	12 96       	adiw	r26, 0x02	; 2
    30b4:	8d 91       	ld	r24, X+
    30b6:	9c 91       	ld	r25, X
    30b8:	13 97       	sbiw	r26, 0x03	; 3
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	13 96       	adiw	r26, 0x03	; 3
    30be:	9c 93       	st	X, r25
    30c0:	8e 93       	st	-X, r24
    30c2:	12 97       	sbiw	r26, 0x02	; 2
    30c4:	20 30       	cpi	r18, 0x00	; 0
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	38 07       	cpc	r19, r24
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	48 07       	cpc	r20, r24
    30ce:	80 e4       	ldi	r24, 0x40	; 64
    30d0:	58 07       	cpc	r21, r24
    30d2:	58 f3       	brcs	.-42     	; 0x30aa <__unpack_f+0x66>
    30d4:	14 96       	adiw	r26, 0x04	; 4
    30d6:	2d 93       	st	X+, r18
    30d8:	3d 93       	st	X+, r19
    30da:	4d 93       	st	X+, r20
    30dc:	5c 93       	st	X, r21
    30de:	17 97       	sbiw	r26, 0x07	; 7
    30e0:	08 95       	ret
    30e2:	2f 3f       	cpi	r18, 0xFF	; 255
    30e4:	31 05       	cpc	r19, r1
    30e6:	79 f4       	brne	.+30     	; 0x3106 <__unpack_f+0xc2>
    30e8:	41 15       	cp	r20, r1
    30ea:	51 05       	cpc	r21, r1
    30ec:	61 05       	cpc	r22, r1
    30ee:	71 05       	cpc	r23, r1
    30f0:	19 f4       	brne	.+6      	; 0x30f8 <__unpack_f+0xb4>
    30f2:	84 e0       	ldi	r24, 0x04	; 4
    30f4:	8c 93       	st	X, r24
    30f6:	08 95       	ret
    30f8:	64 ff       	sbrs	r22, 4
    30fa:	03 c0       	rjmp	.+6      	; 0x3102 <__unpack_f+0xbe>
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	8c 93       	st	X, r24
    3100:	12 c0       	rjmp	.+36     	; 0x3126 <__unpack_f+0xe2>
    3102:	1c 92       	st	X, r1
    3104:	10 c0       	rjmp	.+32     	; 0x3126 <__unpack_f+0xe2>
    3106:	2f 57       	subi	r18, 0x7F	; 127
    3108:	30 40       	sbci	r19, 0x00	; 0
    310a:	13 96       	adiw	r26, 0x03	; 3
    310c:	3c 93       	st	X, r19
    310e:	2e 93       	st	-X, r18
    3110:	12 97       	sbiw	r26, 0x02	; 2
    3112:	83 e0       	ldi	r24, 0x03	; 3
    3114:	8c 93       	st	X, r24
    3116:	87 e0       	ldi	r24, 0x07	; 7
    3118:	44 0f       	add	r20, r20
    311a:	55 1f       	adc	r21, r21
    311c:	66 1f       	adc	r22, r22
    311e:	77 1f       	adc	r23, r23
    3120:	8a 95       	dec	r24
    3122:	d1 f7       	brne	.-12     	; 0x3118 <__unpack_f+0xd4>
    3124:	70 64       	ori	r23, 0x40	; 64
    3126:	14 96       	adiw	r26, 0x04	; 4
    3128:	4d 93       	st	X+, r20
    312a:	5d 93       	st	X+, r21
    312c:	6d 93       	st	X+, r22
    312e:	7c 93       	st	X, r23
    3130:	17 97       	sbiw	r26, 0x07	; 7
    3132:	08 95       	ret

00003134 <__prologue_saves__>:
    3134:	2f 92       	push	r2
    3136:	3f 92       	push	r3
    3138:	4f 92       	push	r4
    313a:	5f 92       	push	r5
    313c:	6f 92       	push	r6
    313e:	7f 92       	push	r7
    3140:	8f 92       	push	r8
    3142:	9f 92       	push	r9
    3144:	af 92       	push	r10
    3146:	bf 92       	push	r11
    3148:	cf 92       	push	r12
    314a:	df 92       	push	r13
    314c:	ef 92       	push	r14
    314e:	ff 92       	push	r15
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	ca 1b       	sub	r28, r26
    315e:	db 0b       	sbc	r29, r27
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	09 94       	ijmp

0000316c <__epilogue_restores__>:
    316c:	2a 88       	ldd	r2, Y+18	; 0x12
    316e:	39 88       	ldd	r3, Y+17	; 0x11
    3170:	48 88       	ldd	r4, Y+16	; 0x10
    3172:	5f 84       	ldd	r5, Y+15	; 0x0f
    3174:	6e 84       	ldd	r6, Y+14	; 0x0e
    3176:	7d 84       	ldd	r7, Y+13	; 0x0d
    3178:	8c 84       	ldd	r8, Y+12	; 0x0c
    317a:	9b 84       	ldd	r9, Y+11	; 0x0b
    317c:	aa 84       	ldd	r10, Y+10	; 0x0a
    317e:	b9 84       	ldd	r11, Y+9	; 0x09
    3180:	c8 84       	ldd	r12, Y+8	; 0x08
    3182:	df 80       	ldd	r13, Y+7	; 0x07
    3184:	ee 80       	ldd	r14, Y+6	; 0x06
    3186:	fd 80       	ldd	r15, Y+5	; 0x05
    3188:	0c 81       	ldd	r16, Y+4	; 0x04
    318a:	1b 81       	ldd	r17, Y+3	; 0x03
    318c:	aa 81       	ldd	r26, Y+2	; 0x02
    318e:	b9 81       	ldd	r27, Y+1	; 0x01
    3190:	ce 0f       	add	r28, r30
    3192:	d1 1d       	adc	r29, r1
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	ed 01       	movw	r28, r26
    31a0:	08 95       	ret

000031a2 <_exit>:
    31a2:	f8 94       	cli

000031a4 <__stop_program>:
    31a4:	ff cf       	rjmp	.-2      	; 0x31a4 <__stop_program>

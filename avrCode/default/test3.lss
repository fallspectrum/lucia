
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  0000562c  000056c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000562c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  000057d0  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  00005850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00005e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  000079ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  000081aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00009668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  00009908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  0000a3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000b733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__ctors_end>
       4:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
       8:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
       c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      10:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      14:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      18:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      1c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      20:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      24:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      28:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      2c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      30:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      34:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      38:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      3c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      40:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      44:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      48:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      4c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      50:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      54:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      58:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      5c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      60:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      64:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      68:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      6c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      70:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      74:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      78:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      7c:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      80:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      84:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>
      88:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 04 09 00 00 00 00 ff 00 05 09 ff 00 00     .p..............
      9c:	00 ff 00 06 09 ff 00 00 00 ff 00 07 09 00 00 00     ................
      ac:	00 ff 00 ff ff 70 17 00 03 ff 00 00 00 00 00 01     .....p..........
      bc:	00 10 00 01 03 ff 00 ff 00 00 00 01 00 10 00 02     ................
      cc:	03 00 00 ff 00 00 00 01 00 10 00 03 03 00 00 ff     ................
      dc:	00 ff 00 01 00 10 00 04 03 00 00 00 00 ff 00 01     ................
      ec:	00 10 00 05 03 ff 00 00 00 ff 00 01 00 10 00 06     ................
      fc:	03 ff 00 00 00 ff 00 01 00 10 00 07 03 00 00 00     ................
     10c:	00 ff 00 01 00 10 00 08 03 00 00 ff 00 ff 00 01     ................
     11c:	00 10 00 09 03 00 00 ff 00 00 00 01 00 10 00 0a     ................
     12c:	03 ff 00 ff 00 00 00 01 00 10 00 0b 03 ff 00 00     ................
     13c:	00 00 00 01 00 10 00 ff ff 70 17 00 05 ff 00 00     .........p......
	...
     154:	00 00 20 01 00 10 00 01 05 ff 00 ff 00 00 00 00     .. .............
     164:	00 00 00 00 00 00 20 01 00 10 00 02 05 00 00 ff     ...... .........
	...
     17c:	00 00 20 01 00 10 00 03 05 00 00 ff 00 ff 00 00     .. .............
     18c:	00 00 00 00 00 00 20 01 00 10 00 04 05 00 00 00     ...... .........
     19c:	00 ff 00 00 00 00 00 00 00 00 20 01 00 10 00 05     .......... .....
     1ac:	05 ff 00 00 00 ff 00 00 00 00 00 00 00 00 20 01     .............. .
     1bc:	00 10 00 06 05 ff 00 00 00 ff 00 00 00 00 00 00     ................
     1cc:	00 00 20 01 00 10 00 07 05 00 00 00 00 ff 00 00     .. .............
     1dc:	00 00 00 00 00 00 20 01 00 10 00 08 05 00 00 ff     ...... .........
     1ec:	00 ff 00 00 00 00 00 00 00 00 20 01 00 10 00 09     .......... .....
     1fc:	05 00 00 ff 00 00 00 00 00 00 00 00 00 00 20 01     .............. .
     20c:	00 10 00 0a 05 ff 00 ff 00 00 00 00 00 00 00 00     ................
     21c:	00 00 20 01 00 10 00 0b 05 ff 00 00 00 00 00 00     .. .............
     22c:	00 00 00 00 00 00 20 01 00 10 00 ff ff 70 17 05     ...... ......p..
     23c:	08 02 00 00 00 00 00 00 00 10 00 00 00 00 00 0f     ................
     24c:	00 01 00 06 08 02 00 00 00 00 00 00 00 10 00 00     ................
     25c:	00 00 00 0f 00 01 00 ff ff 70 17 05 08 02 00 00     .........p......
     26c:	00 00 00 00 00 20 00 00 00 00 00 32 00 01 00 06     ..... .....2....
     27c:	08 02 00 00 00 00 00 00 00 20 00 00 00 00 00 32     ......... .....2
     28c:	00 01 00 ff ff 70 17 05 08 02 00 00 00 00 00 00     .....p..........
     29c:	00 20 00 00 00 00 00 ff 00 01 00 06 08 02 00 00     . ..............
     2ac:	00 00 00 00 00 20 00 00 00 00 00 ff 00 01 00 ff     ..... ..........
     2bc:	ff 70 17 05 08 04 00 00 00 00 00 00 00 20 00 00     .p........... ..
     2cc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 20 00 00     ............. ..
     2dc:	00 ff 00 00 00 01 00 06 08 04 00 00 00 00 00 00     ................
     2ec:	00 20 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     . ..............
     2fc:	00 20 00 ff 00 00 00 7d 00 01 00 ff ff 70 17 05     . .....}.....p..
     30c:	08 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     31c:	00 01 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
     32c:	00 01 00 06 08 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     33c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 20 00 ff     ............. ..
     34c:	00 00 00 7d 00 01 00 ff ff 70 17 05 08 04 00 00     ...}.....p......
     35c:	00 00 00 00 00 08 00 00 00 00 00 ff 00 01 00 00     ................
     36c:	00 00 00 00 00 08 00 00 00 ff 00 00 00 01 00 06     ................
     37c:	08 04 00 00 00 00 00 00 00 08 00 00 00 00 00 ff     ................
     38c:	00 01 00 00 00 00 00 00 00 08 00 ff 00 00 00 7d     ...............}
     39c:	00 01 00 ff ff 70 17 05 08 04 00 00 00 00 00 00     .....p..........
     3ac:	00 03 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     3bc:	00 03 00 00 00 ff 00 00 00 01 00 06 08 04 00 00     ................
     3cc:	00 00 00 00 00 03 00 00 00 00 00 ff 00 01 00 00     ................
     3dc:	00 00 00 00 00 03 00 ff 00 00 00 7d 00 01 00 ff     ...........}....
     3ec:	ff 70 17 05 08 02 00 00 00 7d 00 00 00 09 00 00     .p.......}......
     3fc:	00 00 00 7d 00 09 00 06 08 02 00 ff 00 00 00 7d     ...}...........}
     40c:	00 09 00 00 00 00 00 7d 00 09 00 ff ff 70 17 04     .......}.....p..
     41c:	08 02 00 ff 00 00 00 7d 00 09 00 00 00 00 00 00     .......}........
     42c:	00 10 00 05 08 03 00 00 00 7d 00 00 00 09 00 00     .........}......
     43c:	00 00 00 7d 00 09 00 ff 00 ff 00 ff 00 03 00 06     ...}............
     44c:	08 03 00 ff 00 00 00 7d 00 09 00 00 00 00 00 7d     .......}.......}
     45c:	00 09 00 ff 00 ff 00 ff 00 03 00 07 08 02 00 00     ................
     46c:	00 7d 00 00 00 09 00 00 00 00 00 00 00 10 00 ff     .}..............
     47c:	ff 6f 17 00 08 07 00 ff 00 00 00 00 00 02 00 ff     .o..............
     48c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     49c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     4ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 01     .............&..
     4bc:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     4cc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     4dc:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     4ec:	00 01 00 00 00 00 00 00 00 26 00 02 08 07 00 ff     .........&......
     4fc:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     50c:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     51c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     52c:	00 00 00 00 00 26 00 03 08 07 00 ff 00 00 00 00     .....&..........
     53c:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     54c:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     55c:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     56c:	00 26 00 04 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     57c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     58c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     59c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 05     .............&..
     5ac:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     5bc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     5cc:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     5dc:	00 01 00 00 00 00 00 00 00 26 00 06 08 07 00 ff     .........&......
     5ec:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     5fc:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     60c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     61c:	00 00 00 00 00 26 00 07 08 07 00 ff 00 00 00 00     .....&..........
     62c:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     63c:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     64c:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     65c:	00 26 00 08 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     66c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     67c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     68c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 09     .............&..
     69c:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     6ac:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     6bc:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     6cc:	00 01 00 00 00 00 00 00 00 26 00 0a 08 07 00 ff     .........&......
     6dc:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     6ec:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     6fc:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     70c:	00 00 00 00 00 26 00 0b 08 07 00 ff 00 00 00 00     .....&..........
     71c:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     72c:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     73c:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     74c:	00 26 00 ff ff 38 18 05 03 7d 00 00 00 00 00 01     .&...8...}......
     75c:	00 1e 00 06 03 7d 00 00 00 00 00 01 00 1e 00 ff     .....}..........
     76c:	ff 0a 00 05 03 7d 00 00 00 00 00 01 00 0a 00 06     .....}..........
     77c:	03 7d 00 00 00 00 00 01 00 0a 00 ff ff 09 00 05     .}..............
     78c:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     79c:	00 0a 00 06 05 ff 00 00 00 00 00 ff 00 7d 00 00     .............}..
     7ac:	00 03 00 01 00 0a 00 ff ff 09 00 05 05 ff 00 00     ................
     7bc:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 05 00 06     .....}..........
     7cc:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     7dc:	00 05 00 ff ff 09 00 04 05 ff 00 00 00 00 00 ff     ................
     7ec:	00 7d 00 00 00 03 00 01 00 05 00 05 05 ff 00 00     .}..............
     7fc:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 05 00 06     .....}..........
     80c:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     81c:	00 05 00 07 05 ff 00 00 00 00 00 ff 00 7d 00 00     .............}..
     82c:	00 03 00 01 00 05 00 ff ff 02 00 00 08 08 00 ff     ................
     83c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     84c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     85c:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     86c:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 01     ................
     87c:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     88c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     89c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     8ac:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     8bc:	00 0c 00 02 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     8cc:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     8dc:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     8ec:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     8fc:	00 00 00 00 00 0c 00 03 08 08 00 ff 00 00 00 00     ................
     90c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     91c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     92c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     93c:	00 01 00 00 00 00 00 00 00 0c 00 05 08 04 00 80     ................
     94c:	00 40 00 00 00 04 00 00 00 00 00 00 00 20 00 ff     .@........... ..
     95c:	00 00 00 00 00 04 00 00 00 00 00 00 00 20 00 06     ............. ..
     96c:	08 04 00 ff 00 00 00 00 00 04 00 00 00 00 00 00     ................
     97c:	00 20 00 80 00 1e 00 00 00 04 00 00 00 00 00 00     . ..............
     98c:	00 20 00 08 08 08 00 ff 00 00 00 00 00 01 00 00     . ..............
     99c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     9ac:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     9bc:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     9cc:	00 00 00 00 00 0c 00 09 08 08 00 ff 00 00 00 00     ................
     9dc:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     9ec:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     9fc:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     a0c:	00 01 00 00 00 00 00 00 00 0c 00 0a 08 08 00 ff     ................
     a1c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     a2c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     a3c:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     a4c:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 0b     ................
     a5c:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     a6c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     a7c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     a8c:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     a9c:	00 0c 00 ff ff 73 00 00 08 04 00 40 00 00 00 80     .....s.....@....
     aac:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     abc:	00 01 00 00 00 00 00 00 00 08 00 01 08 04 00 40     ...............@
     acc:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     adc:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 02     .`.`............
     aec:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     afc:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     b0c:	00 08 00 03 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     b1c:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     b2c:	00 00 00 00 00 08 00 05 08 08 00 40 00 00 00 80     ...........@....
     b3c:	00 08 00 00 00 00 00 00 00 20 00 ff 00 1e 00 00     ......... ......
     b4c:	00 08 00 00 00 00 00 00 00 20 00 ff 00 00 00 00     ......... ......
     b5c:	00 08 00 00 00 00 00 00 00 20 00 ff 00 00 00 1e     ......... ......
     b6c:	00 08 00 00 00 00 00 00 00 20 00 06 08 08 00 40     ......... .....@
     b7c:	00 00 00 80 00 08 00 00 00 00 00 00 00 20 00 ff     ............. ..
     b8c:	00 1e 00 00 00 08 00 00 00 00 00 00 00 20 00 ff     ............. ..
     b9c:	00 00 00 00 00 08 00 00 00 00 00 00 00 20 00 ff     ............. ..
     bac:	00 00 00 1e 00 08 00 00 00 00 00 00 00 20 00 08     ............. ..
     bbc:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     bcc:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     bdc:	00 08 00 09 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     bec:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     bfc:	00 00 00 00 00 08 00 0a 08 04 00 40 00 00 00 80     ...........@....
     c0c:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     c1c:	00 01 00 00 00 00 00 00 00 08 00 0b 08 04 00 40     ...............@
     c2c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     c3c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 ff     .`.`............
     c4c:	ff 01 00 04 08 04 00 00 00 00 00 ff 00 04 00 00     ................
     c5c:	00 00 00 00 00 10 00 00 00 ff 00 00 00 04 00 00     ................
     c6c:	00 00 00 00 00 10 00 05 03 ff 00 00 00 80 00 01     ................
     c7c:	00 10 00 06 03 ff 00 00 00 80 00 01 00 10 00 07     ................
     c8c:	08 04 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     ................
     c9c:	00 10 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     ................
     cac:	00 10 00 ff ff 01 00 04 08 04 00 ff 00 00 00 00     ................
     cbc:	00 04 00 00 00 00 00 00 00 10 00 00 00 00 00 ff     ................
     ccc:	00 04 00 00 00 00 00 00 00 10 00 07 08 04 00 00     ................
     cdc:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 ff     ................
     cec:	00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 ff     ................
     cfc:	ff 12 00 00 08 04 00 00 00 ff 00 00 00 01 00 00     ................
     d0c:	00 00 00 00 00 10 00 00 00 ff 00 5a 00 01 00 00     ...........Z....
     d1c:	00 00 00 00 00 10 00 01 08 06 00 00 00 ff 00 00     ................
     d2c:	00 02 00 00 00 00 00 00 00 10 00 60 00 60 00 60     ...........`.`.`
     d3c:	00 02 00 00 00 00 00 00 00 20 00 00 00 ff 00 5a     ......... .....Z
     d4c:	00 02 00 00 00 00 00 00 00 10 00 02 08 06 00 00     ................
     d5c:	00 ff 00 00 00 02 00 00 00 00 00 00 00 10 00 60     ...............`
     d6c:	00 60 00 60 00 02 00 00 00 00 00 00 00 20 00 00     .`.`......... ..
     d7c:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 10 00 03     ...Z............
     d8c:	08 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     d9c:	00 10 00 00 00 ff 00 5a 00 01 00 00 00 00 00 00     .......Z........
     dac:	00 10 00 05 08 02 00 40 00 00 00 80 00 08 00 00     .......@........
     dbc:	00 00 00 00 00 20 00 06 08 02 00 40 00 00 00 80     ..... .....@....
     dcc:	00 08 00 00 00 00 00 00 00 20 00 08 08 04 00 00     ......... ......
     ddc:	00 ff 00 00 00 02 00 00 00 00 00 00 00 10 00 00     ................
     dec:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 10 00 09     ...Z............
     dfc:	08 06 00 00 00 ff 00 00 00 02 00 00 00 00 00 00     ................
     e0c:	00 10 00 60 00 60 00 60 00 02 00 00 00 00 00 00     ...`.`.`........
     e1c:	00 20 00 00 00 ff 00 5a 00 02 00 00 00 00 00 00     . .....Z........
     e2c:	00 10 00 0a 08 06 00 00 00 ff 00 00 00 02 00 00     ................
     e3c:	00 00 00 00 00 10 00 60 00 60 00 60 00 02 00 00     .......`.`.`....
     e4c:	00 00 00 00 00 20 00 00 00 ff 00 5a 00 02 00 00     ..... .....Z....
     e5c:	00 00 00 00 00 10 00 0b 08 04 00 00 00 ff 00 00     ................
     e6c:	00 02 00 00 00 00 00 00 00 10 00 00 00 ff 00 5a     ...............Z
     e7c:	00 02 00 00 00 00 00 00 00 10 00 ff ff 0a 00 00     ................
     e8c:	08 04 00 09 00 09 00 ff 00 01 00 00 00 00 00 00     ................
     e9c:	00 05 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     eac:	00 01 00 01 08 04 00 ff 00 c8 00 00 00 01 00 00     ................
     ebc:	00 00 00 00 00 05 00 09 00 09 00 ff 00 01 00 00     ................
     ecc:	00 00 00 00 00 01 00 02 08 04 00 09 00 09 00 ff     ................
     edc:	00 01 00 00 00 00 00 00 00 05 00 ff 00 c8 00 00     ................
     eec:	00 01 00 00 00 00 00 00 00 01 00 03 08 04 00 ff     ................
     efc:	00 c8 00 00 00 01 00 00 00 00 00 00 00 05 00 09     ................
     f0c:	00 09 00 ff 00 01 00 00 00 00 00 00 00 01 00 05     ................
     f1c:	08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00 00 00     ................
     f2c:	00 20 00 06 08 02 00 ff 00 ff 00 ff 00 10 00 00     . ..............
     f3c:	00 00 00 00 00 20 00 08 08 04 00 ff 00 c8 00 00     ..... ..........
     f4c:	00 01 00 00 00 00 00 00 00 05 00 09 00 09 00 ff     ................
     f5c:	00 01 00 00 00 00 00 00 00 01 00 09 08 04 00 09     ................
     f6c:	00 09 00 ff 00 01 00 00 00 00 00 00 00 05 00 ff     ................
     f7c:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 0a     ................
     f8c:	08 04 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     f9c:	00 05 00 09 00 09 00 ff 00 01 00 00 00 00 00 00     ................
     fac:	00 01 00 0b 08 04 00 09 00 09 00 ff 00 01 00 00     ................
     fbc:	00 00 00 00 00 05 00 ff 00 c8 00 00 00 01 00 00     ................
     fcc:	00 00 00 00 00 01 00 ff ff 05 00 00 08 0a 00 40     ...............@
     fdc:	00 00 00 80 00 01 00 00 00 00 00 00 00 01 00 00     ................
     fec:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     ffc:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
    100c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    101c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 01     ................
    102c:	08 0a 00 ff 00 00 00 10 00 01 00 00 00 00 00 00     ................
    103c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    104c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    105c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    106c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    107c:	00 01 00 02 08 0a 00 ff 00 00 00 10 00 01 00 00     ................
    108c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    109c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    10ac:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    10bc:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    10cc:	00 00 00 00 00 01 00 03 08 0a 00 ff 00 00 00 10     ................
    10dc:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    10ec:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    10fc:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    110c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    111c:	00 01 00 00 00 00 00 00 00 01 00 05 08 0a 00 ff     ................
    112c:	00 00 00 10 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    113c:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    114c:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    115c:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    116c:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 06     ............. ..
    117c:	08 0a 00 ff 00 00 00 10 00 04 00 00 00 00 00 00     ................
    118c:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
    119c:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
    11ac:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
    11bc:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
    11cc:	00 20 00 08 08 0a 00 ff 00 00 00 10 00 01 00 00     . ..............
    11dc:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    11ec:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    11fc:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    120c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    121c:	00 00 00 00 00 01 00 09 08 0a 00 ff 00 00 00 10     ................
    122c:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    123c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    124c:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    125c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    126c:	00 01 00 00 00 00 00 00 00 01 00 0a 08 0a 00 ff     ................
    127c:	00 00 00 10 00 01 00 00 00 00 00 00 00 01 00 00     ................
    128c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    129c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
    12ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    12bc:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 0b     ................
    12cc:	08 0a 00 ff 00 00 00 10 00 01 00 00 00 00 00 00     ................
    12dc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    12ec:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    12fc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    130c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    131c:	00 01 00 ff ff 05 00 00 08 06 00 ff 00 ff 00 ff     ................
    132c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    133c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    134c:	00 01 00 00 00 00 00 00 00 01 00 01 08 06 00 ff     ................
    135c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    136c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
    137c:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 02     ................
    138c:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    139c:	00 08 00 00 00 00 00 00 00 01 00 ff 00 00 00 00     ................
    13ac:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    13bc:	00 01 00 03 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    13cc:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00     ................
    13dc:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    13ec:	00 00 00 00 00 01 00 05 08 04 00 00 00 00 00 ff     ................
    13fc:	00 20 00 00 00 00 00 00 00 40 00 ff 00 00 00 00     . .......@......
    140c:	00 20 00 00 00 00 00 00 00 40 00 06 08 04 00 ff     . .......@......
    141c:	00 00 00 00 00 20 00 00 00 00 00 00 00 40 00 00     ..... .......@..
    142c:	00 00 00 ff 00 20 00 00 00 00 00 00 00 40 00 08     ..... .......@..
    143c:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    144c:	00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    145c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    146c:	00 01 00 09 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    147c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 ff     ................
    148c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    149c:	00 00 00 00 00 01 00 0a 08 06 00 ff 00 ff 00 ff     ................
    14ac:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    14bc:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
    14cc:	00 01 00 00 00 00 00 00 00 01 00 0b 08 06 00 ff     ................
    14dc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    14ec:	00 00 00 00 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    14fc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 ff     ................
    150c:	ff 0a 00 00 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    151c:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    152c:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    153c:	00 00 00 00 00 04 00 01 08 06 00 80 00 00 00 ff     ................
    154c:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    155c:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    156c:	00 01 00 00 00 00 00 00 00 04 00 02 08 06 00 80     ................
    157c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    158c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    159c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 03     ................
    15ac:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 01     ................
    15bc:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 01     ................
    15cc:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 01     ................
    15dc:	00 04 00 04 03 80 00 00 00 ff 00 01 00 40 00 07     .............@..
    15ec:	03 80 00 00 00 ff 00 01 00 40 00 08 08 06 00 80     .........@......
    15fc:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    160c:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    161c:	00 ff 00 00 00 01 00 00 00 00 00 01 00 04 00 09     ................
    162c:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    163c:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    164c:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    165c:	00 04 00 0a 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    166c:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    167c:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    168c:	00 00 00 00 00 04 00 0b 08 06 00 80 00 00 00 ff     ................
    169c:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    16ac:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    16bc:	00 01 00 00 00 00 00 00 00 04 00 ff ff d2 00 00     ................
    16cc:	03 40 00 00 00 80 00 01 00 04 00 01 08 02 00 40     .@.............@
    16dc:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 02     ................
    16ec:	08 03 00 40 00 00 00 80 00 04 00 64 00 14 00 00     ...@.......d....
    16fc:	00 04 00 02 00 00 00 01 00 18 00 03 08 02 00 40     ...............@
    170c:	00 00 00 80 00 19 00 64 00 14 00 00 00 19 00 05     .......d........
    171c:	08 03 00 64 00 00 00 00 00 03 00 ff 00 3c 00 00     ...d.........<..
    172c:	00 03 00 00 00 00 00 00 00 23 00 06 08 03 00 64     .........#.....d
    173c:	00 00 00 00 00 03 00 ff 00 3c 00 00 00 03 00 00     .........<......
    174c:	00 00 00 00 00 23 00 08 08 02 00 40 00 00 00 80     .....#.....@....
    175c:	00 19 00 64 00 14 00 00 00 19 00 09 08 03 00 40     ...d...........@
    176c:	00 00 00 80 00 04 00 64 00 14 00 00 00 04 00 02     .......d........
    177c:	00 00 00 01 00 18 00 0a 08 02 00 40 00 00 00 80     ...........@....
    178c:	00 01 00 00 00 00 00 00 00 08 00 0b 03 40 00 00     .............@..
    179c:	00 80 00 01 00 04 00 ff ff c8 00 00 08 06 00 ff     ................
    17ac:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    17bc:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    17cc:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 01     ................
    17dc:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    17ec:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    17fc:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    180c:	00 01 00 02 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    181c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    182c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    183c:	00 00 00 00 00 01 00 03 08 06 00 ff 00 00 00 00     ................
    184c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    185c:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    186c:	00 08 00 00 00 00 00 00 00 01 00 05 05 ff 00 00     ................
    187c:	00 00 00 00 00 00 00 ff 00 0a 00 14 00 4b 00 06     .............K..
    188c:	05 ff 00 00 00 00 00 00 00 00 00 ff 00 0a 00 14     ................
    189c:	00 4b 00 08 08 06 00 ff 00 00 00 00 00 01 00 00     .K..............
    18ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    18bc:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    18cc:	00 00 00 00 00 01 00 09 08 06 00 ff 00 00 00 00     ................
    18dc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    18ec:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    18fc:	00 08 00 00 00 00 00 00 00 01 00 0a 08 06 00 ff     ................
    190c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    191c:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    192c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 0b     ................
    193c:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    194c:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    195c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    196c:	00 01 00 ff ff 0a 00 00 08 03 00 ff 00 ff 00 ff     ................
    197c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    198c:	00 0c 00 01 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    199c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 02     ................
    19ac:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    19bc:	00 01 00 00 00 00 00 00 00 0c 00 03 08 03 00 ff     ................
    19cc:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    19dc:	00 00 00 00 00 0c 00 04 08 04 00 ff 00 00 00 00     ................
    19ec:	00 04 00 00 00 00 00 00 00 10 00 00 00 00 00 ff     ................
    19fc:	00 04 00 00 00 00 00 00 00 10 00 07 08 04 00 00     ................
    1a0c:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 ff     ................
    1a1c:	00 00 00 00 00 04 00 00 00 00 00 00 00 10 00 08     ................
    1a2c:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1a3c:	00 01 00 00 00 00 00 00 00 0c 00 09 08 03 00 ff     ................
    1a4c:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1a5c:	00 00 00 00 00 0c 00 0a 08 03 00 ff 00 ff 00 ff     ................
    1a6c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1a7c:	00 0c 00 0b 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1a8c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    1a9c:	ff 32 00 00 08 04 00 00 00 00 00 ff 00 01 00 00     .2..............
    1aac:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1abc:	00 00 00 00 00 11 00 01 08 02 00 40 00 00 00 80     ...........@....
    1acc:	00 01 00 00 00 00 00 00 00 08 00 02 08 06 00 00     ................
    1adc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1aec:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 ff     ................
    1afc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 03     ................
    1b0c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1b1c:	00 08 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1b2c:	00 11 00 05 03 1e 00 00 00 3c 00 10 00 10 00 06     .........<......
    1b3c:	03 1e 00 00 00 3c 00 10 00 10 00 08 08 04 00 40     .....<.........@
    1b4c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1b5c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 11 00 09     ................
    1b6c:	08 06 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1b7c:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1b8c:	00 08 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    1b9c:	00 08 00 0a 08 02 00 40 00 00 00 80 00 01 00 00     .......@........
    1bac:	00 00 00 00 00 08 00 0b 08 04 00 00 00 00 00 ff     ................
    1bbc:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    1bcc:	00 01 00 00 00 00 00 00 00 11 00 ff ff 64 00 03     .............d..
    1bdc:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    1bec:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    1bfc:	00 18 00 05 03 1e 00 00 00 3c 00 10 00 10 00 06     .........<......
    1c0c:	03 1e 00 00 00 3c 00 10 00 10 00 08 08 04 00 00     .....<..........
    1c1c:	00 80 00 80 00 01 00 02 00 00 00 01 00 10 00 00     ................
    1c2c:	00 00 00 c8 00 01 00 02 00 00 00 01 00 18 00 ff     ................
    1c3c:	ff 64 00 03 08 04 00 00 00 80 00 80 00 01 00 02     .d..............
    1c4c:	00 00 00 01 00 10 00 00 00 00 00 c8 00 01 00 02     ................
    1c5c:	00 00 00 01 00 18 00 04 03 40 00 00 00 80 00 01     .........@......
    1c6c:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 08     .....@..........
    1c7c:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    1c8c:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    1c9c:	00 18 00 ff ff 64 00 04 03 40 00 00 00 80 00 01     .....d...@......
    1cac:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 ff     .....@..........
    1cbc:	ff 64 00 00 03 14 00 14 00 00 00 01 00 20 00 01     .d........... ..
    1ccc:	03 14 00 14 00 00 00 01 00 20 00 02 03 14 00 14     ......... ......
    1cdc:	00 00 00 01 00 20 00 03 03 14 00 14 00 00 00 01     ..... ..........
    1cec:	00 20 00 05 08 03 00 ff 00 ff 00 00 00 10 00 ff     . ..............
    1cfc:	00 ff 00 ff 00 02 00 00 00 00 00 00 00 20 00 06     ............. ..
    1d0c:	08 03 00 ff 00 ff 00 00 00 10 00 ff 00 ff 00 ff     ................
    1d1c:	00 02 00 00 00 00 00 00 00 20 00 08 03 14 00 14     ......... ......
    1d2c:	00 00 00 01 00 20 00 09 03 14 00 14 00 00 00 01     ..... ..........
    1d3c:	00 20 00 0a 03 14 00 14 00 00 00 01 00 20 00 0b     . ........... ..
    1d4c:	03 14 00 14 00 00 00 01 00 20 00 ff ff 64 00 00     ......... ...d..
    1d5c:	05 14 00 14 00 00 00 ff 00 80 00 00 00 c8 00 02     ................
    1d6c:	00 10 00 01 05 14 00 14 00 00 00 40 00 00 00 80     ...........@....
    1d7c:	00 c8 00 02 00 10 00 02 05 14 00 14 00 00 00 ff     ................
    1d8c:	00 80 00 00 00 c8 00 02 00 10 00 03 05 14 00 14     ................
    1d9c:	00 00 00 40 00 00 00 80 00 c8 00 02 00 10 00 04     ...@............
    1dac:	05 40 00 00 00 80 00 ff 00 80 00 00 00 c8 00 02     .@..............
    1dbc:	00 10 00 07 05 40 00 00 00 80 00 ff 00 80 00 00     .....@..........
    1dcc:	00 c8 00 02 00 10 00 08 05 14 00 14 00 00 00 40     ...............@
    1ddc:	00 00 00 80 00 c8 00 02 00 10 00 09 05 14 00 14     ................
    1dec:	00 00 00 ff 00 80 00 00 00 c8 00 02 00 10 00 0a     ................
    1dfc:	05 14 00 14 00 00 00 40 00 00 00 80 00 c8 00 02     .......@........
    1e0c:	00 10 00 0b 05 14 00 14 00 00 00 ff 00 80 00 00     ................
    1e1c:	00 c8 00 02 00 10 00 ff ff 64 00 00 08 04 00 ff     .........d......
    1e2c:	00 00 00 00 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1e3c:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 01     ................
    1e4c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1e5c:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1e6c:	00 10 00 02 08 04 00 ff 00 00 00 00 00 01 00 00     ................
    1e7c:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1e8c:	00 00 00 00 00 10 00 03 08 04 00 40 00 00 00 80     ...........@....
    1e9c:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    1eac:	00 01 00 00 00 00 00 00 00 10 00 05 07 ff 00 00     ................
    1ebc:	00 00 00 00 00 00 00 ff 00 00 00 ff 00 00 00 2c     ...............,
    1ecc:	01 01 00 01 00 06 07 ff 00 00 00 00 00 00 00 00     ................
    1edc:	00 ff 00 00 00 ff 00 00 00 2c 01 01 00 01 00 08     .........,......
    1eec:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1efc:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1f0c:	00 10 00 09 08 04 00 ff 00 00 00 00 00 01 00 00     ................
    1f1c:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1f2c:	00 00 00 00 00 10 00 0a 08 04 00 40 00 00 00 80     ...........@....
    1f3c:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    1f4c:	00 01 00 00 00 00 00 00 00 10 00 0b 08 04 00 ff     ................
    1f5c:	00 00 00 00 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1f6c:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    1f7c:	ff 64 00 00 08 02 00 14 00 00 00 00 00 01 00 00     .d..............
    1f8c:	00 00 00 00 00 20 00 01 08 02 00 14 00 00 00 00     ..... ..........
    1f9c:	00 01 00 00 00 00 00 00 00 20 00 02 08 02 00 14     ......... ......
    1fac:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 03     ............. ..
    1fbc:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1fcc:	00 20 00 04 08 04 00 ff 00 00 00 00 00 01 00 02     . ..............
    1fdc:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 02     .......@........
    1fec:	00 00 00 00 00 10 00 07 08 04 00 ff 00 00 00 00     ................
    1ffc:	00 01 00 02 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    200c:	00 01 00 02 00 00 00 00 00 10 00 08 08 02 00 14     ................
    201c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 09     ............. ..
    202c:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    203c:	00 20 00 0a 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    204c:	00 00 00 00 00 20 00 0b 08 02 00 14 00 00 00 00     ..... ..........
    205c:	00 01 00 00 00 00 00 00 00 20 00 ff ff 64 00 00     ......... ...d..
    206c:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    207c:	00 20 00 01 08 02 00 ff 00 00 00 00 00 01 00 00     . ..............
    208c:	00 00 00 00 00 20 00 02 08 02 00 ff 00 00 00 00     ..... ..........
    209c:	00 01 00 00 00 00 00 00 00 20 00 03 08 02 00 ff     ......... ......
    20ac:	00 00 00 00 00 01 00 0a 00 00 00 0a 00 10 00 05     ................
    20bc:	08 03 00 7d 00 00 00 fa 00 10 00 7d 00 00 00 00     ...}.......}....
    20cc:	00 10 00 00 00 00 00 00 00 20 00 06 08 03 00 7d     ......... .....}
    20dc:	00 00 00 fa 00 10 00 7d 00 00 00 00 00 10 00 00     .......}........
    20ec:	00 00 00 00 00 20 00 08 08 02 00 ff 00 00 00 00     ..... ..........
    20fc:	00 01 00 0a 00 00 00 0a 00 10 00 09 08 02 00 ff     ................
    210c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 0a     ............. ..
    211c:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    212c:	00 20 00 0b 08 02 00 ff 00 00 00 00 00 01 00 00     . ..............
    213c:	00 00 00 00 00 20 00 ff ff 64 00 00 08 02 00 28     ..... ...d.....(
    214c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 01     ................
    215c:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    216c:	00 10 00 02 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    217c:	00 00 00 00 00 10 00 03 08 02 00 28 00 00 00 00     ...........(....
    218c:	00 01 00 00 00 00 00 00 00 10 00 05 08 03 00 7d     ...............}
    219c:	00 00 00 00 00 10 00 7d 00 7d 00 00 00 10 00 00     .......}.}......
    21ac:	00 00 00 00 00 20 00 06 08 03 00 7d 00 00 00 00     ..... .....}....
    21bc:	00 10 00 7d 00 7d 00 00 00 10 00 00 00 00 00 00     ...}.}..........
    21cc:	00 20 00 08 08 02 00 28 00 00 00 00 00 01 00 00     . .....(........
    21dc:	00 00 00 00 00 10 00 09 08 02 00 28 00 00 00 00     ...........(....
    21ec:	00 01 00 00 00 00 00 00 00 10 00 0a 08 02 00 28     ...............(
    21fc:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 0b     ................
    220c:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    221c:	00 10 00 ff ff 64 00 00 08 04 00 28 00 00 00 00     .....d.....(....
    222c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 80 00 40     ...............@
    223c:	00 01 00 00 00 00 00 00 00 10 00 01 08 02 00 00     ................
    224c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 02     ................
    225c:	08 02 00 00 00 00 00 00 00 01 00 00 00 00 00 00     ................
    226c:	00 10 00 03 08 04 00 28 00 00 00 00 00 01 00 00     .......(........
    227c:	00 00 00 00 00 10 00 ff 00 80 00 40 00 01 00 00     ...........@....
    228c:	00 00 00 00 00 10 00 08 08 04 00 28 00 00 00 00     ...........(....
    229c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 80 00 40     ...............@
    22ac:	00 01 00 00 00 00 00 00 00 10 00 09 08 02 00 28     ...............(
    22bc:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 0a     ................
    22cc:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    22dc:	00 10 00 0b 08 04 00 28 00 00 00 00 00 01 00 00     .......(........
    22ec:	00 00 00 00 00 10 00 ff 00 80 00 40 00 01 00 00     ...........@....
    22fc:	00 00 00 00 00 10 00 ff ff 64 00 05 09 ff 00 ff     .........d......
    230c:	00 ff 00 ff ff 64 00 00 03 80 00 00 00 ff 00 01     .....d..........
    231c:	00 10 00 01 03 80 00 00 00 ff 00 01 00 10 00 02     ................
    232c:	03 80 00 00 00 ff 00 01 00 10 00 03 03 ff 00 00     ................
    233c:	00 00 00 01 00 10 00 04 03 00 00 ff 00 80 00 04     ................
    234c:	00 10 00 07 03 00 00 ff 00 80 00 04 00 10 00 08     ................
    235c:	03 ff 00 00 00 00 00 01 00 10 00 09 03 80 00 00     ................
    236c:	00 ff 00 01 00 10 00 0a 03 80 00 00 00 ff 00 01     ................
    237c:	00 10 00 0b 03 80 00 00 00 ff 00 01 00 10 00 ff     ................
    238c:	ff 64 00 00 08 02 00 80 00 00 00 ff 00 01 00 00     .d..............
    239c:	00 00 00 00 00 09 00 01 08 04 00 80 00 00 00 ff     ................
    23ac:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    23bc:	00 01 00 00 00 00 00 00 00 04 00 02 08 02 00 80     ................
    23cc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 03     ................
    23dc:	08 04 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    23ec:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    23fc:	00 04 00 05 08 02 00 00 00 ff 00 80 00 04 00 00     ................
    240c:	00 00 00 00 00 08 00 06 08 02 00 00 00 ff 00 80     ................
    241c:	00 04 00 00 00 00 00 00 00 08 00 08 08 04 00 80     ................
    242c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    243c:	00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 09     ................
    244c:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    245c:	00 04 00 0a 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    246c:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    247c:	00 00 00 00 00 04 00 0b 08 02 00 80 00 00 00 ff     ................
    248c:	00 01 00 00 00 00 00 00 00 09 00 ff ff 32 00 00     .............2..
    249c:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    24ac:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    24bc:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    24cc:	00 0c 00 1e 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    24dc:	00 01 00 01 08 08 00 ff 00 00 00 00 00 01 00 00     ................
    24ec:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    24fc:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    250c:	00 00 00 00 00 0c 00 1e 00 00 00 ff 00 01 00 00     ................
    251c:	00 00 00 00 00 01 00 02 08 08 00 ff 00 00 00 00     ................
    252c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    253c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    254c:	00 01 00 00 00 00 00 00 00 0c 00 1e 00 00 00 ff     ................
    255c:	00 01 00 00 00 00 00 00 00 01 00 03 08 08 00 ff     ................
    256c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    257c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    258c:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 1e     .<..............
    259c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 04     ................
    25ac:	03 00 00 00 00 3c 00 01 00 20 00 05 08 04 00 80     .....<... ......
    25bc:	00 40 00 00 00 04 00 00 00 00 00 00 00 20 00 00     .@........... ..
    25cc:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 06     ............. ..
    25dc:	08 04 00 80 00 40 00 00 00 04 00 00 00 00 00 00     .....@..........
    25ec:	00 20 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     . ..............
    25fc:	00 20 00 07 03 00 00 3c 00 00 00 01 00 20 00 08     . .....<..... ..
    260c:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    261c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    262c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    263c:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    264c:	00 01 00 09 08 08 00 ff 00 00 00 00 00 01 00 00     ................
    265c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    266c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    267c:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    268c:	00 00 00 00 00 01 00 0a 08 08 00 ff 00 00 00 00     ................
    269c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    26ac:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    26bc:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    26cc:	00 01 00 00 00 00 00 00 00 01 00 0b 08 08 00 ff     ................
    26dc:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    26ec:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    26fc:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     .<..............
    270c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 ff     ................
    271c:	ff 0b 00 00 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    272c:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    273c:	00 00 00 00 00 04 00 01 08 02 00 80 00 00 00 ff     ................
    274c:	00 01 00 00 00 00 00 00 00 04 00 02 08 02 00 80     ................
    275c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 03     ................
    276c:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    277c:	00 04 00 05 08 03 00 ff 00 00 00 00 00 08 00 80     ................
    278c:	00 00 00 ff 00 08 00 00 00 00 00 00 00 20 00 06     ............. ..
    279c:	08 03 00 ff 00 00 00 00 00 08 00 80 00 00 00 ff     ................
    27ac:	00 08 00 00 00 00 00 00 00 20 00 08 08 02 00 80     ......... ......
    27bc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 09     ................
    27cc:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    27dc:	00 04 00 0a 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    27ec:	00 00 00 00 00 04 00 0b 08 04 00 80 00 00 00 ff     ................
    27fc:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    280c:	00 01 00 00 00 00 00 00 00 04 00 ff 6e 00 00 08     ............n...
    281c:	03 00 c8 00 14 00 00 00 04 00 00 00 01 00 01 00     ................
    282c:	20 00 00 00 00 00 00 00 04 00 01 03 00 00 ff 00      ...............
    283c:	ff 00 01 00 0c 00 02 03 00 00 ff 00 ff 00 01 00     ................
    284c:	0c 00 03 08 02 00 c8 00 28 00 00 00 01 00 00 00     ........(.......
    285c:	01 00 01 00 10 00 04 03 00 00 ff 00 ff 00 01 00     ................
    286c:	18 00 07 03 00 00 ff 00 ff 00 01 00 18 00 08 08     ................
    287c:	02 00 c8 00 28 00 00 00 01 00 00 00 01 00 01 00     ....(...........
    288c:	10 00 09 03 00 00 ff 00 ff 00 01 00 0c 00 0a 03     ................
    289c:	00 00 ff 00 ff 00 01 00 0c 00 0b 08 03 00 c8 00     ................
    28ac:	28 00 00 00 04 00 00 00 01 00 01 00 20 00 00 00     (........... ...
    28bc:	00 00 00 00 04 00 ff ff 14 00 00 08 04 00 00 00     ................
    28cc:	ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
    28dc:	ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 01 08     ................
    28ec:	02 00 00 00 ff 00 ff 00 04 00 00 00 01 00 01 00     ................
    28fc:	20 00 02 03 00 00 ff 00 ff 00 01 00 10 00 03 08      ...............
    290c:	04 00 00 00 ff 00 ff 00 01 00 00 00 00 00 00 00     ................
    291c:	04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00     ................
    292c:	10 00 05 08 02 00 00 00 ff 00 ff 00 20 00 00 00     ............ ...
    293c:	00 00 00 00 20 00 06 08 02 00 00 00 00 00 ff 00     .... ...........
    294c:	20 00 00 00 00 00 00 00 20 00 08 08 04 00 00 00      ....... .......
    295c:	ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
    296c:	00 00 ff 00 01 00 00 00 00 00 00 00 10 00 09 03     ................
    297c:	00 00 00 00 ff 00 01 00 10 00 0a 08 02 00 00 00     ................
    298c:	00 00 ff 00 04 00 00 00 00 00 01 00 20 00 0b 08     ............ ...
    299c:	04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00     ................
    29ac:	04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00     ................
    29bc:	10 00 ff ff 0a 00 00 08 04 00 00 00 ff 00 ff 00     ................
    29cc:	01 00 00 00 00 00 00 00 04 00 00 00 ff 00 ff 00     ................
    29dc:	01 00 00 00 00 00 00 00 10 00 01 08 02 00 00 00     ................
    29ec:	ff 00 ff 00 04 00 00 00 01 00 01 00 20 00 02 03     ............ ...
    29fc:	00 00 ff 00 ff 00 01 00 10 00 03 08 04 00 00 00     ................
    2a0c:	ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff 00     ................
    2a1c:	ff 00 00 00 01 00 00 00 00 00 00 00 10 00 05 08     ................
    2a2c:	02 00 00 00 ff 00 ff 00 20 00 00 00 00 00 00 00     ........ .......
    2a3c:	20 00 06 08 02 00 ff 00 ff 00 00 00 20 00 00 00      ........... ...
    2a4c:	00 00 00 00 20 00 08 08 04 00 00 00 ff 00 ff 00     .... ...........
    2a5c:	01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00     ................
    2a6c:	01 00 00 00 00 00 00 00 10 00 09 03 ff 00 ff 00     ................
    2a7c:	00 00 01 00 10 00 0a 08 02 00 ff 00 ff 00 00 00     ................
    2a8c:	04 00 01 00 01 00 00 00 20 00 0b 08 04 00 ff 00     ........ .......
    2a9c:	ff 00 00 00 01 00 00 00 00 00 00 00 04 00 ff 00     ................
    2aac:	ff 00 00 00 01 00 00 00 00 00 00 00 10 00 ff ff     ................
    2abc:	0a 00 00 08 04 00 ff 00 00 00 80 00 01 00 00 00     ................
    2acc:	00 00 00 00 04 00 ff 00 00 00 80 00 01 00 00 00     ................
    2adc:	00 00 00 00 10 00 01 08 02 00 ff 00 00 00 80 00     ................
    2aec:	04 00 02 00 00 00 01 00 20 00 02 03 ff 00 00 00     ........ .......
    2afc:	80 00 01 00 10 00 03 08 04 00 ff 00 00 00 80 00     ................
    2b0c:	01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00     ................
    2b1c:	01 00 00 00 00 00 00 00 10 00 05 08 02 00 ff 00     ................
    2b2c:	00 00 80 00 20 00 00 00 00 00 00 00 20 00 06 08     .... ....... ...
    2b3c:	02 00 ff 00 ff 00 00 00 20 00 00 00 00 00 00 00     ........ .......
    2b4c:	20 00 08 08 04 00 ff 00 00 00 80 00 01 00 00 00      ...............
    2b5c:	00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00 00     ................
    2b6c:	00 00 00 00 10 00 09 03 ff 00 ff 00 00 00 01 00     ................
    2b7c:	10 00 0a 08 02 00 ff 00 ff 00 00 00 04 00 01 00     ................
    2b8c:	01 00 00 00 20 00 0b 08 04 00 ff 00 ff 00 00 00     .... ...........
    2b9c:	01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00     ................
    2bac:	01 00 00 00 00 00 00 00 10 00 ff ff 0a 00 ff 00     ................

00002bbc <__ctors_end>:
    2bbc:	11 24       	eor	r1, r1
    2bbe:	1f be       	out	0x3f, r1	; 63
    2bc0:	cf ef       	ldi	r28, 0xFF	; 255
    2bc2:	d0 e1       	ldi	r29, 0x10	; 16
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	cd bf       	out	0x3d, r28	; 61

00002bc8 <__do_copy_data>:
    2bc8:	12 e0       	ldi	r17, 0x02	; 2
    2bca:	a0 e0       	ldi	r26, 0x00	; 0
    2bcc:	b1 e0       	ldi	r27, 0x01	; 1
    2bce:	ec e2       	ldi	r30, 0x2C	; 44
    2bd0:	f6 e5       	ldi	r31, 0x56	; 86
    2bd2:	00 e0       	ldi	r16, 0x00	; 0
    2bd4:	0b bf       	out	0x3b, r16	; 59
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <__do_copy_data+0x14>
    2bd8:	07 90       	elpm	r0, Z+
    2bda:	0d 92       	st	X+, r0
    2bdc:	a0 31       	cpi	r26, 0x10	; 16
    2bde:	b1 07       	cpc	r27, r17
    2be0:	d9 f7       	brne	.-10     	; 0x2bd8 <__do_copy_data+0x10>

00002be2 <__do_clear_bss>:
    2be2:	1e e0       	ldi	r17, 0x0E	; 14
    2be4:	a0 e1       	ldi	r26, 0x10	; 16
    2be6:	b2 e0       	ldi	r27, 0x02	; 2
    2be8:	01 c0       	rjmp	.+2      	; 0x2bec <.do_clear_bss_start>

00002bea <.do_clear_bss_loop>:
    2bea:	1d 92       	st	X+, r1

00002bec <.do_clear_bss_start>:
    2bec:	a5 3f       	cpi	r26, 0xF5	; 245
    2bee:	b1 07       	cpc	r27, r17
    2bf0:	e1 f7       	brne	.-8      	; 0x2bea <.do_clear_bss_loop>
    2bf2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <main>
    2bf6:	0c 94 14 2b 	jmp	0x5628	; 0x5628 <_exit>

00002bfa <__bad_interrupt>:
    2bfa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002bfe <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
    2bfe:	ef 92       	push	r14
    2c00:	ff 92       	push	r15
    2c02:	0f 93       	push	r16
    2c04:	1f 93       	push	r17
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	ec 01       	movw	r28, r24
    2c0c:	00 e0       	ldi	r16, 0x00	; 0
    2c0e:	10 e0       	ldi	r17, 0x00	; 0
    2c10:	ee 24       	eor	r14, r14
    2c12:	ff 24       	eor	r15, r15
    2c14:	0c c0       	rjmp	.+24     	; 0x2c2e <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
    2c16:	80 91 10 02 	lds	r24, 0x0210
    2c1a:	90 91 11 02 	lds	r25, 0x0211
    2c1e:	0a 97       	sbiw	r24, 0x0a	; 10
    2c20:	4c f5       	brge	.+82     	; 0x2c74 <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    2c22:	0f 5f       	subi	r16, 0xFF	; 255
    2c24:	1f 4f       	sbci	r17, 0xFF	; 255
    2c26:	27 96       	adiw	r28, 0x07	; 7
    2c28:	0c 30       	cpi	r16, 0x0C	; 12
    2c2a:	11 05       	cpc	r17, r1
    2c2c:	79 f0       	breq	.+30     	; 0x2c4c <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
    2c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	89 f3       	breq	.-30     	; 0x2c16 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    2c34:	6c 81       	ldd	r22, Y+4	; 0x04
    2c36:	7d 81       	ldd	r23, Y+5	; 0x05
    2c38:	e8 81       	ld	r30, Y
    2c3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c3c:	c8 01       	movw	r24, r16
    2c3e:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    2c40:	0f 5f       	subi	r16, 0xFF	; 255
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	27 96       	adiw	r28, 0x07	; 7
    2c46:	0c 30       	cpi	r16, 0x0C	; 12
    2c48:	11 05       	cpc	r17, r1
    2c4a:	89 f7       	brne	.-30     	; 0x2c2e <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	e8 16       	cp	r14, r24
    2c50:	f1 04       	cpc	r15, r1
    2c52:	d1 f0       	breq	.+52     	; 0x2c88 <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
    2c54:	80 91 10 02 	lds	r24, 0x0210
    2c58:	90 91 11 02 	lds	r25, 0x0211
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	90 93 11 02 	sts	0x0211, r25
    2c62:	80 93 10 02 	sts	0x0210, r24
	}
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    2c74:	6c 81       	ldd	r22, Y+4	; 0x04
    2c76:	7d 81       	ldd	r23, Y+5	; 0x05
    2c78:	e8 81       	ld	r30, Y
    2c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	09 95       	icall
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	e8 2e       	mov	r14, r24
    2c84:	f1 2c       	mov	r15, r1
    2c86:	cd cf       	rjmp	.-102    	; 0x2c22 <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
    2c88:	10 92 11 02 	sts	0x0211, r1
    2c8c:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	ff 90       	pop	r15
    2c9a:	ef 90       	pop	r14
    2c9c:	08 95       	ret

00002c9e <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
    2c9e:	2f 92       	push	r2
    2ca0:	3f 92       	push	r3
    2ca2:	4f 92       	push	r4
    2ca4:	5f 92       	push	r5
    2ca6:	6f 92       	push	r6
    2ca8:	7f 92       	push	r7
    2caa:	8f 92       	push	r8
    2cac:	9f 92       	push	r9
    2cae:	af 92       	push	r10
    2cb0:	bf 92       	push	r11
    2cb2:	cf 92       	push	r12
    2cb4:	df 92       	push	r13
    2cb6:	ef 92       	push	r14
    2cb8:	ff 92       	push	r15
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	c0 56       	subi	r28, 0x60	; 96
    2cc8:	d0 40       	sbci	r29, 0x00	; 0
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
    2cd4:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
    2cd8:	8f ef       	ldi	r24, 0xFF	; 255
    2cda:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
    2cde:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
    2ce0:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
    2ce2:	8b b3       	in	r24, 0x1b	; 27
    2ce4:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
    2ce6:	8e b5       	in	r24, 0x2e	; 46
    2ce8:	88 60       	ori	r24, 0x08	; 8
    2cea:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
    2cec:	80 e4       	ldi	r24, 0x40	; 64
    2cee:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
    2cf0:	80 ea       	ldi	r24, 0xA0	; 160
    2cf2:	9f e0       	ldi	r25, 0x0F	; 15
    2cf4:	9b bd       	out	0x2b, r25	; 43
    2cf6:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
    2cf8:	8e b5       	in	r24, 0x2e	; 46
    2cfa:	82 60       	ori	r24, 0x02	; 2
    2cfc:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
    2cfe:	0e 94 02 24 	call	0x4804	; 0x4804 <initDecoder>
    2d02:	4d e0       	ldi	r20, 0x0D	; 13
    2d04:	64 2e       	mov	r6, r20
    2d06:	71 2c       	mov	r7, r1
    2d08:	6c 0e       	add	r6, r28
    2d0a:	7d 1e       	adc	r7, r29
    2d0c:	f3 01       	movw	r30, r6
    2d0e:	8c e8       	ldi	r24, 0x8C	; 140
    2d10:	97 e1       	ldi	r25, 0x17	; 23
    2d12:	9e 01       	movw	r18, r28
    2d14:	2f 59       	subi	r18, 0x9F	; 159
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2d18:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
    2d1a:	61 ef       	ldi	r22, 0xF1	; 241
    2d1c:	77 e1       	ldi	r23, 0x17	; 23
    2d1e:	71 83       	std	Z+1, r23	; 0x01
    2d20:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
    2d22:	93 83       	std	Z+3, r25	; 0x03
    2d24:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
    2d26:	15 82       	std	Z+5, r1	; 0x05
    2d28:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2d2a:	4b 8b       	std	Y+19, r20	; 0x13
    2d2c:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
    2d2e:	e2 17       	cp	r30, r18
    2d30:	f3 07       	cpc	r31, r19
    2d32:	99 f7       	brne	.-26     	; 0x2d1a <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
    2d34:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <getNextGroup>
    2d38:	fc 01       	movw	r30, r24
    2d3a:	ee 24       	eor	r14, r14
    2d3c:	ff 24       	eor	r15, r15
    2d3e:	88 24       	eor	r8, r8
    2d40:	8a 94       	dec	r8
    2d42:	98 2c       	mov	r9, r8
    2d44:	2e 01       	movw	r4, r28
    2d46:	08 94       	sec
    2d48:	41 1c       	adc	r4, r1
    2d4a:	51 1c       	adc	r5, r1
    2d4c:	aa 24       	eor	r10, r10
    2d4e:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2d50:	3c e0       	ldi	r19, 0x0C	; 12
    2d52:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
    2d54:	33 24       	eor	r3, r3
    2d56:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
    2d58:	02 81       	ldd	r16, Z+2	; 0x02
    2d5a:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2d5c:	d2 01       	movw	r26, r4
    2d5e:	e2 2d       	mov	r30, r2
    2d60:	1d 92       	st	X+, r1
    2d62:	ea 95       	dec	r30
    2d64:	e9 f7       	brne	.-6      	; 0x2d60 <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
    2d66:	d8 01       	movw	r26, r16
    2d68:	8c 91       	ld	r24, X
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
    2d6c:	f2 01       	movw	r30, r4
    2d6e:	e8 0f       	add	r30, r24
    2d70:	f9 1f       	adc	r31, r25
    2d72:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
    2d74:	fc 01       	movw	r30, r24
    2d76:	ee 0f       	add	r30, r30
    2d78:	ff 1f       	adc	r31, r31
    2d7a:	ee 0f       	add	r30, r30
    2d7c:	ff 1f       	adc	r31, r31
    2d7e:	ee 0f       	add	r30, r30
    2d80:	ff 1f       	adc	r31, r31
    2d82:	e8 1b       	sub	r30, r24
    2d84:	f9 0b       	sbc	r31, r25
    2d86:	e4 0d       	add	r30, r4
    2d88:	f5 1d       	adc	r31, r5
    2d8a:	12 96       	adiw	r26, 0x02	; 2
    2d8c:	2d 91       	ld	r18, X+
    2d8e:	3c 91       	ld	r19, X
    2d90:	13 97       	sbiw	r26, 0x03	; 3
    2d92:	35 87       	std	Z+13, r19	; 0x0d
    2d94:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
    2d96:	16 96       	adiw	r26, 0x06	; 6
    2d98:	6d 91       	ld	r22, X+
    2d9a:	7c 91       	ld	r23, X
    2d9c:	17 97       	sbiw	r26, 0x07	; 7
    2d9e:	71 8b       	std	Z+17, r23	; 0x11
    2da0:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
    2da2:	18 96       	adiw	r26, 0x08	; 8
    2da4:	2c 91       	ld	r18, X
    2da6:	18 97       	sbiw	r26, 0x08	; 8
    2da8:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
    2daa:	14 96       	adiw	r26, 0x04	; 4
    2dac:	ed 91       	ld	r30, X+
    2dae:	fc 91       	ld	r31, X
    2db0:	15 97       	sbiw	r26, 0x05	; 5
    2db2:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
    2db4:	f8 01       	movw	r30, r16
    2db6:	01 85       	ldd	r16, Z+9	; 0x09
    2db8:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
    2dba:	01 15       	cp	r16, r1
    2dbc:	11 05       	cpc	r17, r1
    2dbe:	99 f6       	brne	.-90     	; 0x2d66 <main+0xc8>
    2dc0:	f2 01       	movw	r30, r4
    2dc2:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
    2dc4:	80 81       	ld	r24, Z
    2dc6:	88 23       	and	r24, r24
    2dc8:	61 f4       	brne	.+24     	; 0x2de2 <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
    2dca:	61 ef       	ldi	r22, 0xF1	; 241
    2dcc:	77 e1       	ldi	r23, 0x17	; 23
    2dce:	11 96       	adiw	r26, 0x01	; 1
    2dd0:	7c 93       	st	X, r23
    2dd2:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
    2dd4:	15 96       	adiw	r26, 0x05	; 5
    2dd6:	1c 92       	st	X, r1
    2dd8:	1e 92       	st	-X, r1
    2dda:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
    2ddc:	16 96       	adiw	r26, 0x06	; 6
    2dde:	3c 92       	st	X, r3
    2de0:	16 97       	sbiw	r26, 0x06	; 6
    2de2:	31 96       	adiw	r30, 0x01	; 1
    2de4:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
    2de6:	e6 15       	cp	r30, r6
    2de8:	f7 05       	cpc	r31, r7
    2dea:	61 f7       	brne	.-40     	; 0x2dc4 <main+0x126>
    2dec:	00 e0       	ldi	r16, 0x00	; 0
    2dee:	10 e0       	ldi	r17, 0x00	; 0
    2df0:	cc 24       	eor	r12, r12
    2df2:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2df4:	e1 14       	cp	r14, r1
    2df6:	f1 04       	cpc	r15, r1
    2df8:	19 f4       	brne	.+6      	; 0x2e00 <main+0x162>
    2dfa:	88 24       	eor	r8, r8
    2dfc:	8a 94       	dec	r8
    2dfe:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
    2e00:	c3 01       	movw	r24, r6
    2e02:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <doEffects>
			waitForTimer();
    2e06:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <waitForTimer>
			displayColors();
    2e0a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <displayColors>
			deltaTimer++;
    2e0e:	0f 5f       	subi	r16, 0xFF	; 255
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
    2e12:	0a 30       	cpi	r16, 0x0A	; 10
    2e14:	11 05       	cpc	r17, r1
    2e16:	74 f3       	brlt	.-36     	; 0x2df4 <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
    2e18:	80 91 63 00 	lds	r24, 0x0063
    2e1c:	81 fd       	sbrc	r24, 1
    2e1e:	1a c0       	rjmp	.+52     	; 0x2e54 <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
    2e20:	ab 28       	or	r10, r11
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <main+0x188>
    2e24:	4d c0       	rjmp	.+154    	; 0x2ec0 <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2e26:	80 91 63 00 	lds	r24, 0x0063
    2e2a:	80 fd       	sbrc	r24, 0
    2e2c:	21 c0       	rjmp	.+66     	; 0x2e70 <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
    2e2e:	e0 fe       	sbrs	r14, 0
    2e30:	59 c0       	rjmp	.+178    	; 0x2ee4 <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    2e32:	c1 fe       	sbrs	r12, 1
    2e34:	29 c0       	rjmp	.+82     	; 0x2e88 <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
    2e36:	b1 e0       	ldi	r27, 0x01	; 1
    2e38:	8b 16       	cp	r8, r27
    2e3a:	91 04       	cpc	r9, r1
    2e3c:	b1 f1       	breq	.+108    	; 0x2eaa <main+0x20c>
    2e3e:	22 e0       	ldi	r18, 0x02	; 2
    2e40:	a2 2e       	mov	r10, r18
    2e42:	b1 2c       	mov	r11, r1
    2e44:	ae 20       	and	r10, r14
    2e46:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
    2e48:	00 e0       	ldi	r16, 0x00	; 0
    2e4a:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2e4c:	e1 14       	cp	r14, r1
    2e4e:	f1 04       	cpc	r15, r1
    2e50:	b9 f6       	brne	.-82     	; 0x2e00 <main+0x162>
    2e52:	d3 cf       	rjmp	.-90     	; 0x2dfa <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
    2e54:	ab 28       	or	r10, r11
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
    2e58:	a2 e0       	ldi	r26, 0x02	; 2
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	ca 2a       	or	r12, r26
    2e5e:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
    2e60:	ed ef       	ldi	r30, 0xFD	; 253
    2e62:	ff ef       	ldi	r31, 0xFF	; 255
    2e64:	ee 22       	and	r14, r30
    2e66:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2e68:	80 91 63 00 	lds	r24, 0x0063
    2e6c:	80 ff       	sbrs	r24, 0
    2e6e:	df cf       	rjmp	.-66     	; 0x2e2e <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
    2e70:	e0 fe       	sbrs	r14, 0
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	c8 2a       	or	r12, r24
    2e7a:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
    2e7c:	ae ef       	ldi	r26, 0xFE	; 254
    2e7e:	bf ef       	ldi	r27, 0xFF	; 255
    2e80:	ea 22       	and	r14, r26
    2e82:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    2e84:	c1 fc       	sbrc	r12, 1
    2e86:	d7 cf       	rjmp	.-82     	; 0x2e36 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
    2e88:	c0 fe       	sbrs	r12, 0
    2e8a:	d9 cf       	rjmp	.-78     	; 0x2e3e <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
    2e8c:	e2 e0       	ldi	r30, 0x02	; 2
    2e8e:	8e 16       	cp	r8, r30
    2e90:	91 04       	cpc	r9, r1
    2e92:	a9 f6       	brne	.-86     	; 0x2e3e <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
    2e94:	92 e0       	ldi	r25, 0x02	; 2
    2e96:	a9 2e       	mov	r10, r25
    2e98:	b1 2c       	mov	r11, r1
    2e9a:	ae 20       	and	r10, r14
    2e9c:	bf 20       	and	r11, r15
    2e9e:	e1 fe       	sbrs	r14, 1
    2ea0:	d3 cf       	rjmp	.-90     	; 0x2e48 <main+0x1aa>

							groupNew = getNextGroup();
    2ea2:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <getNextGroup>
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	57 cf       	rjmp	.-338    	; 0x2d58 <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
    2eaa:	e0 fe       	sbrs	r14, 0
    2eac:	c8 cf       	rjmp	.-112    	; 0x2e3e <main+0x1a0>
							groupNew = getPreviousGroup();
    2eae:	0e 94 73 23 	call	0x46e6	; 0x46e6 <getPreviousGroup>
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	32 e0       	ldi	r19, 0x02	; 2
    2eb6:	a3 2e       	mov	r10, r19
    2eb8:	b1 2c       	mov	r11, r1
    2eba:	ae 20       	and	r10, r14
    2ebc:	bf 20       	and	r11, r15
    2ebe:	4c cf       	rjmp	.-360    	; 0x2d58 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    2ec0:	7f ef       	ldi	r23, 0xFF	; 255
    2ec2:	87 16       	cp	r8, r23
    2ec4:	7f ef       	ldi	r23, 0xFF	; 255
    2ec6:	97 06       	cpc	r9, r23
    2ec8:	11 f1       	breq	.+68     	; 0x2f0e <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	e8 2a       	or	r14, r24
    2ed0:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
    2ed2:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <getNextGroup>
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	62 e0       	ldi	r22, 0x02	; 2
    2eda:	a6 2e       	mov	r10, r22
    2edc:	b1 2c       	mov	r11, r1
    2ede:	ae 20       	and	r10, r14
    2ee0:	bf 20       	and	r11, r15
    2ee2:	3a cf       	rjmp	.-396    	; 0x2d58 <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
    2ee4:	61 e0       	ldi	r22, 0x01	; 1
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	e6 2a       	or	r14, r22
    2eea:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
    2eec:	0e 94 73 23 	call	0x46e6	; 0x46e6 <getPreviousGroup>
    2ef0:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
    2ef2:	7f ef       	ldi	r23, 0xFF	; 255
    2ef4:	87 16       	cp	r8, r23
    2ef6:	7f ef       	ldi	r23, 0xFF	; 255
    2ef8:	97 06       	cpc	r9, r23
    2efa:	e1 f6       	brne	.-72     	; 0x2eb4 <main+0x216>
    2efc:	51 e0       	ldi	r21, 0x01	; 1
    2efe:	85 2e       	mov	r8, r21
    2f00:	91 2c       	mov	r9, r1
    2f02:	42 e0       	ldi	r20, 0x02	; 2
    2f04:	a4 2e       	mov	r10, r20
    2f06:	b1 2c       	mov	r11, r1
    2f08:	ae 20       	and	r10, r14
    2f0a:	bf 20       	and	r11, r15
    2f0c:	25 cf       	rjmp	.-438    	; 0x2d58 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    2f0e:	72 e0       	ldi	r23, 0x02	; 2
    2f10:	87 2e       	mov	r8, r23
    2f12:	91 2c       	mov	r9, r1
    2f14:	da cf       	rjmp	.-76     	; 0x2eca <main+0x22c>

00002f16 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
    2f16:	08 95       	ret

00002f18 <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
    2f18:	08 95       	ret

00002f1a <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
    2f1a:	08 95       	ret

00002f1c <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
    2f1c:	08 95       	ret

00002f1e <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
    2f1e:	fc 01       	movw	r30, r24
    2f20:	ee 0f       	add	r30, r30
    2f22:	ff 1f       	adc	r31, r31
    2f24:	ee 0f       	add	r30, r30
    2f26:	ff 1f       	adc	r31, r31
    2f28:	ed 51       	subi	r30, 0x1D	; 29
    2f2a:	fb 4f       	sbci	r31, 0xFB	; 251
    2f2c:	11 82       	std	Z+1, r1	; 0x01
    2f2e:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
    2f30:	13 82       	std	Z+3, r1	; 0x03
    2f32:	12 82       	std	Z+2, r1	; 0x02
}	
    2f34:	08 95       	ret

00002f36 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	8c 01       	movw	r16, r24
    2f40:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
    2f42:	dc 01       	movw	r26, r24
    2f44:	aa 0f       	add	r26, r26
    2f46:	bb 1f       	adc	r27, r27
    2f48:	aa 0f       	add	r26, r26
    2f4a:	bb 1f       	adc	r27, r27
    2f4c:	ad 51       	subi	r26, 0x1D	; 29
    2f4e:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
    2f50:	6e 5f       	subi	r22, 0xFE	; 254
    2f52:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
    2f54:	12 96       	adiw	r26, 0x02	; 2
    2f56:	2d 91       	ld	r18, X+
    2f58:	3c 91       	ld	r19, X
    2f5a:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
    2f5c:	4d 91       	ld	r20, X+
    2f5e:	5c 91       	ld	r21, X
    2f60:	11 97       	sbiw	r26, 0x01	; 1
    2f62:	f9 01       	movw	r30, r18
    2f64:	ee 0f       	add	r30, r30
    2f66:	ff 1f       	adc	r31, r31
    2f68:	ee 0f       	add	r30, r30
    2f6a:	ff 1f       	adc	r31, r31
    2f6c:	ee 0f       	add	r30, r30
    2f6e:	ff 1f       	adc	r31, r31
    2f70:	e6 0f       	add	r30, r22
    2f72:	f7 1f       	adc	r31, r23
    2f74:	86 81       	ldd	r24, Z+6	; 0x06
    2f76:	97 81       	ldd	r25, Z+7	; 0x07
    2f78:	84 17       	cp	r24, r20
    2f7a:	95 07       	cpc	r25, r21
    2f7c:	6c f5       	brge	.+90     	; 0x2fd8 <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
    2f7e:	2f 5f       	subi	r18, 0xFF	; 255
    2f80:	3f 4f       	sbci	r19, 0xFF	; 255
    2f82:	13 96       	adiw	r26, 0x03	; 3
    2f84:	3c 93       	st	X, r19
    2f86:	2e 93       	st	-X, r18
    2f88:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
    2f8a:	88 81       	ld	r24, Y
    2f8c:	99 81       	ldd	r25, Y+1	; 0x01
    2f8e:	28 17       	cp	r18, r24
    2f90:	39 07       	cpc	r19, r25
    2f92:	24 f0       	brlt	.+8      	; 0x2f9c <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
    2f94:	13 96       	adiw	r26, 0x03	; 3
    2f96:	1c 92       	st	X, r1
    2f98:	1e 92       	st	-X, r1
    2f9a:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	1c 92       	st	X, r1
    2fa0:	1e 92       	st	-X, r1
    2fa2:	12 96       	adiw	r26, 0x02	; 2
    2fa4:	2d 91       	ld	r18, X+
    2fa6:	3c 91       	ld	r19, X
    2fa8:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
    2faa:	f9 01       	movw	r30, r18
    2fac:	ee 0f       	add	r30, r30
    2fae:	ff 1f       	adc	r31, r31
    2fb0:	ee 0f       	add	r30, r30
    2fb2:	ff 1f       	adc	r31, r31
    2fb4:	ee 0f       	add	r30, r30
    2fb6:	ff 1f       	adc	r31, r31
    2fb8:	e6 0f       	add	r30, r22
    2fba:	f7 1f       	adc	r31, r23
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	42 81       	ldd	r20, Z+2	; 0x02
    2fc2:	53 81       	ldd	r21, Z+3	; 0x03
    2fc4:	24 81       	ldd	r18, Z+4	; 0x04
    2fc6:	35 81       	ldd	r19, Z+5	; 0x05
    2fc8:	c8 01       	movw	r24, r16
    2fca:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
    2fd8:	4f 5f       	subi	r20, 0xFF	; 255
    2fda:	5f 4f       	sbci	r21, 0xFF	; 255
    2fdc:	4d 93       	st	X+, r20
    2fde:	5c 93       	st	X, r21
    2fe0:	e4 cf       	rjmp	.-56     	; 0x2faa <lightBeamEffect+0x74>

00002fe2 <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
}
    2ff2:	08 95       	ret

00002ff4 <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
    2ff4:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	42 81       	ldd	r20, Z+2	; 0x02
    2ffc:	53 81       	ldd	r21, Z+3	; 0x03
    2ffe:	24 81       	ldd	r18, Z+4	; 0x04
    3000:	35 81       	ldd	r19, Z+5	; 0x05
    3002:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
}
    3006:	08 95       	ret

00003008 <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
    300c:	fc 01       	movw	r30, r24
    300e:	ee 0f       	add	r30, r30
    3010:	ff 1f       	adc	r31, r31
    3012:	df 01       	movw	r26, r30
    3014:	a5 5b       	subi	r26, 0xB5	; 181
    3016:	bc 4f       	sbci	r27, 0xFC	; 252
    3018:	1d 92       	st	X+, r1
    301a:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
    301c:	ed 59       	subi	r30, 0x9D	; 157
    301e:	fc 4f       	sbci	r31, 0xFC	; 252
    3020:	21 e0       	ldi	r18, 0x01	; 1
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	31 83       	std	Z+1, r19	; 0x01
    3026:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    3028:	fb 01       	movw	r30, r22
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	42 81       	ldd	r20, Z+2	; 0x02
    3030:	53 81       	ldd	r21, Z+3	; 0x03
    3032:	24 81       	ldd	r18, Z+4	; 0x04
    3034:	35 81       	ldd	r19, Z+5	; 0x05
    3036:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
}
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	08 95       	ret

00003040 <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
    3040:	ef 92       	push	r14
    3042:	ff 92       	push	r15
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	9c 01       	movw	r18, r24
    304e:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	8c 01       	movw	r16, r24
    3056:	05 5b       	subi	r16, 0xB5	; 181
    3058:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
    305a:	ec 01       	movw	r28, r24
    305c:	cd 59       	subi	r28, 0x9D	; 157
    305e:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
    3060:	60 81       	ld	r22, Z
    3062:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
    3064:	42 81       	ldd	r20, Z+2	; 0x02
    3066:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
    3068:	e4 80       	ldd	r14, Z+4	; 0x04
    306a:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
    306c:	a6 81       	ldd	r26, Z+6	; 0x06
    306e:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
    3070:	00 84       	ldd	r0, Z+8	; 0x08
    3072:	f1 85       	ldd	r31, Z+9	; 0x09
    3074:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
    3076:	88 81       	ld	r24, Y
    3078:	99 81       	ldd	r25, Y+1	; 0x01
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	91 05       	cpc	r25, r1
    307e:	09 f1       	breq	.+66     	; 0x30c2 <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
    3080:	89 2b       	or	r24, r25
    3082:	c1 f4       	brne	.+48     	; 0x30b4 <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
    3084:	31 97       	sbiw	r30, 0x01	; 1
    3086:	d8 01       	movw	r26, r16
    3088:	8d 91       	ld	r24, X+
    308a:	9c 91       	ld	r25, X
    308c:	11 97       	sbiw	r26, 0x01	; 1
    308e:	8e 17       	cp	r24, r30
    3090:	9f 07       	cpc	r25, r31
    3092:	0c f0       	brlt	.+2      	; 0x3096 <pwmEffect+0x56>
    3094:	43 c0       	rjmp	.+134    	; 0x311c <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
    3096:	c9 01       	movw	r24, r18
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
			*curCounter +=1;
    30a8:	f8 01       	movw	r30, r16
    30aa:	80 81       	ld	r24, Z
    30ac:	91 81       	ldd	r25, Z+1	; 0x01
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
		}

	}
	
}
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
    30c2:	11 97       	sbiw	r26, 0x01	; 1
    30c4:	f8 01       	movw	r30, r16
    30c6:	80 81       	ld	r24, Z
    30c8:	91 81       	ldd	r25, Z+1	; 0x01
    30ca:	8a 17       	cp	r24, r26
    30cc:	9b 07       	cpc	r25, r27
    30ce:	a4 f0       	brlt	.+40     	; 0x30f8 <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
    30d0:	19 82       	std	Y+1, r1	; 0x01
    30d2:	18 82       	st	Y, r1
			*curCounter = 0;
    30d4:	11 82       	std	Z+1, r1	; 0x01
    30d6:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
    30d8:	c9 01       	movw	r24, r18
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	70 e0       	ldi	r23, 0x00	; 0
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    30f8:	c9 01       	movw	r24, r18
    30fa:	97 01       	movw	r18, r14
    30fc:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
			*curCounter += 1;
    3100:	d8 01       	movw	r26, r16
    3102:	8d 91       	ld	r24, X+
    3104:	9c 91       	ld	r25, X
    3106:	11 97       	sbiw	r26, 0x01	; 1
    3108:	01 96       	adiw	r24, 0x01	; 1
    310a:	8d 93       	st	X+, r24
    310c:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	99 83       	std	Y+1, r25	; 0x01
    3122:	88 83       	st	Y, r24
			*curCounter = 0;
    3124:	1d 92       	st	X+, r1
    3126:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    3128:	c9 01       	movw	r24, r18
    312a:	97 01       	movw	r18, r14
    312c:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	08 95       	ret

0000313e <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
    313e:	2f 92       	push	r2
    3140:	3f 92       	push	r3
    3142:	4f 92       	push	r4
    3144:	5f 92       	push	r5
    3146:	6f 92       	push	r6
    3148:	7f 92       	push	r7
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	6e 97       	sbiw	r28, 0x1e	; 30
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	9e 8f       	std	Y+30, r25	; 0x1e
    3174:	8d 8f       	std	Y+29, r24	; 0x1d
    3176:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
    3178:	20 81       	ld	r18, Z
    317a:	31 81       	ldd	r19, Z+1	; 0x01
    317c:	3c 8f       	std	Y+28, r19	; 0x1c
    317e:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
    3180:	82 81       	ldd	r24, Z+2	; 0x02
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	9a 8f       	std	Y+26, r25	; 0x1a
    3186:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
    3188:	a4 81       	ldd	r26, Z+4	; 0x04
    318a:	b5 81       	ldd	r27, Z+5	; 0x05
    318c:	b8 8f       	std	Y+24, r27	; 0x18
    318e:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
    3190:	26 81       	ldd	r18, Z+6	; 0x06
    3192:	37 81       	ldd	r19, Z+7	; 0x07
    3194:	3e 8b       	std	Y+22, r19	; 0x16
    3196:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
    3198:	80 85       	ldd	r24, Z+8	; 0x08
    319a:	91 85       	ldd	r25, Z+9	; 0x09
    319c:	9c 8b       	std	Y+20, r25	; 0x14
    319e:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
    31a0:	a2 85       	ldd	r26, Z+10	; 0x0a
    31a2:	b3 85       	ldd	r27, Z+11	; 0x0b
    31a4:	ba 8b       	std	Y+18, r27	; 0x12
    31a6:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
    31a8:	24 85       	ldd	r18, Z+12	; 0x0c
    31aa:	35 85       	ldd	r19, Z+13	; 0x0d
    31ac:	38 8b       	std	Y+16, r19	; 0x10
    31ae:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
    31b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	dc 01       	movw	r26, r24
    31ba:	ad 5c       	subi	r26, 0xCD	; 205
    31bc:	bc 4f       	sbci	r27, 0xFC	; 252
    31be:	be 87       	std	Y+14, r27	; 0x0e
    31c0:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
    31c2:	fc 01       	movw	r30, r24
    31c4:	e5 58       	subi	r30, 0x85	; 133
    31c6:	fc 4f       	sbci	r31, 0xFC	; 252
    31c8:	fc 87       	std	Y+12, r31	; 0x0c
    31ca:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
    31cc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    31ce:	3e 8d       	ldd	r19, Y+30	; 0x1e
    31d0:	82 0f       	add	r24, r18
    31d2:	93 1f       	adc	r25, r19
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	dc 01       	movw	r26, r24
    31de:	ae 5e       	subi	r26, 0xEE	; 238
    31e0:	bd 4f       	sbci	r27, 0xFD	; 253
    31e2:	ba 87       	std	Y+10, r27	; 0x0a
    31e4:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
    31e6:	fc 01       	movw	r30, r24
    31e8:	ea 5e       	subi	r30, 0xEA	; 234
    31ea:	fd 4f       	sbci	r31, 0xFD	; 253
    31ec:	f8 87       	std	Y+8, r31	; 0x08
    31ee:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
    31f0:	9c 01       	movw	r18, r24
    31f2:	26 5e       	subi	r18, 0xE6	; 230
    31f4:	3d 4f       	sbci	r19, 0xFD	; 253
    31f6:	3e 83       	std	Y+6, r19	; 0x06
    31f8:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
    31fa:	80 91 ea 02 	lds	r24, 0x02EA
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	09 f4       	brne	.+2      	; 0x3204 <fadeBetweenColors+0xc6>
    3202:	09 c1       	rjmp	.+530    	; 0x3416 <fadeBetweenColors+0x2d8>
    3204:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3206:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3208:	bd 01       	movw	r22, r26
    320a:	88 27       	eor	r24, r24
    320c:	77 fd       	sbrc	r23, 7
    320e:	80 95       	com	r24
    3210:	98 2f       	mov	r25, r24
    3212:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3216:	3b 01       	movw	r6, r22
    3218:	4c 01       	movw	r8, r24
    321a:	e9 8d       	ldd	r30, Y+25	; 0x19
    321c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    321e:	bf 01       	movw	r22, r30
    3220:	88 27       	eor	r24, r24
    3222:	77 fd       	sbrc	r23, 7
    3224:	80 95       	com	r24
    3226:	98 2f       	mov	r25, r24
    3228:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    322c:	1b 01       	movw	r2, r22
    322e:	2c 01       	movw	r4, r24
    3230:	2f 89       	ldd	r18, Y+23	; 0x17
    3232:	38 8d       	ldd	r19, Y+24	; 0x18
    3234:	b9 01       	movw	r22, r18
    3236:	88 27       	eor	r24, r24
    3238:	77 fd       	sbrc	r23, 7
    323a:	80 95       	com	r24
    323c:	98 2f       	mov	r25, r24
    323e:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3242:	69 83       	std	Y+1, r22	; 0x01
    3244:	7a 83       	std	Y+2, r23	; 0x02
    3246:	8b 83       	std	Y+3, r24	; 0x03
    3248:	9c 83       	std	Y+4, r25	; 0x04
    324a:	ad 85       	ldd	r26, Y+13	; 0x0d
    324c:	be 85       	ldd	r27, Y+14	; 0x0e
    324e:	cd 90       	ld	r12, X+
    3250:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
    3252:	ef 85       	ldd	r30, Y+15	; 0x0f
    3254:	f8 89       	ldd	r31, Y+16	; 0x10
    3256:	bf 01       	movw	r22, r30
    3258:	88 27       	eor	r24, r24
    325a:	77 fd       	sbrc	r23, 7
    325c:	80 95       	com	r24
    325e:	98 2f       	mov	r25, r24
    3260:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3264:	7b 01       	movw	r14, r22
    3266:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
    3268:	b6 01       	movw	r22, r12
    326a:	88 27       	eor	r24, r24
    326c:	77 fd       	sbrc	r23, 7
    326e:	80 95       	com	r24
    3270:	98 2f       	mov	r25, r24
    3272:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3276:	5b 01       	movw	r10, r22
    3278:	6c 01       	movw	r12, r24
    327a:	2d 89       	ldd	r18, Y+21	; 0x15
    327c:	3e 89       	ldd	r19, Y+22	; 0x16
    327e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3282:	28 1b       	sub	r18, r24
    3284:	39 0b       	sbc	r19, r25
    3286:	b9 01       	movw	r22, r18
    3288:	88 27       	eor	r24, r24
    328a:	77 fd       	sbrc	r23, 7
    328c:	80 95       	com	r24
    328e:	98 2f       	mov	r25, r24
    3290:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3294:	a8 01       	movw	r20, r16
    3296:	97 01       	movw	r18, r14
    3298:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__divsf3>
    329c:	9b 01       	movw	r18, r22
    329e:	ac 01       	movw	r20, r24
    32a0:	c6 01       	movw	r24, r12
    32a2:	b5 01       	movw	r22, r10
    32a4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    32a8:	a4 01       	movw	r20, r8
    32aa:	93 01       	movw	r18, r6
    32ac:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__addsf3>
    32b0:	a9 85       	ldd	r26, Y+9	; 0x09
    32b2:	ba 85       	ldd	r27, Y+10	; 0x0a
    32b4:	6d 93       	st	X+, r22
    32b6:	7d 93       	st	X+, r23
    32b8:	8d 93       	st	X+, r24
    32ba:	9c 93       	st	X, r25
    32bc:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
    32be:	eb 89       	ldd	r30, Y+19	; 0x13
    32c0:	fc 89       	ldd	r31, Y+20	; 0x14
    32c2:	29 8d       	ldd	r18, Y+25	; 0x19
    32c4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    32c6:	e2 1b       	sub	r30, r18
    32c8:	f3 0b       	sbc	r31, r19
    32ca:	bf 01       	movw	r22, r30
    32cc:	88 27       	eor	r24, r24
    32ce:	77 fd       	sbrc	r23, 7
    32d0:	80 95       	com	r24
    32d2:	98 2f       	mov	r25, r24
    32d4:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    32d8:	a8 01       	movw	r20, r16
    32da:	97 01       	movw	r18, r14
    32dc:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__divsf3>
    32e0:	a6 01       	movw	r20, r12
    32e2:	95 01       	movw	r18, r10
    32e4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    32e8:	a2 01       	movw	r20, r4
    32ea:	91 01       	movw	r18, r2
    32ec:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__addsf3>
    32f0:	af 81       	ldd	r26, Y+7	; 0x07
    32f2:	b8 85       	ldd	r27, Y+8	; 0x08
    32f4:	6d 93       	st	X+, r22
    32f6:	7d 93       	st	X+, r23
    32f8:	8d 93       	st	X+, r24
    32fa:	9c 93       	st	X, r25
    32fc:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
    32fe:	e9 89       	ldd	r30, Y+17	; 0x11
    3300:	fa 89       	ldd	r31, Y+18	; 0x12
    3302:	2f 89       	ldd	r18, Y+23	; 0x17
    3304:	38 8d       	ldd	r19, Y+24	; 0x18
    3306:	e2 1b       	sub	r30, r18
    3308:	f3 0b       	sbc	r31, r19
    330a:	bf 01       	movw	r22, r30
    330c:	88 27       	eor	r24, r24
    330e:	77 fd       	sbrc	r23, 7
    3310:	80 95       	com	r24
    3312:	98 2f       	mov	r25, r24
    3314:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3318:	a8 01       	movw	r20, r16
    331a:	97 01       	movw	r18, r14
    331c:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <__divsf3>
    3320:	a6 01       	movw	r20, r12
    3322:	95 01       	movw	r18, r10
    3324:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__mulsf3>
    3328:	29 81       	ldd	r18, Y+1	; 0x01
    332a:	3a 81       	ldd	r19, Y+2	; 0x02
    332c:	4b 81       	ldd	r20, Y+3	; 0x03
    332e:	5c 81       	ldd	r21, Y+4	; 0x04
    3330:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__addsf3>
    3334:	7b 01       	movw	r14, r22
    3336:	8c 01       	movw	r16, r24
    3338:	ad 81       	ldd	r26, Y+5	; 0x05
    333a:	be 81       	ldd	r27, Y+6	; 0x06
    333c:	6d 93       	st	X+, r22
    333e:	7d 93       	st	X+, r23
    3340:	8d 93       	st	X+, r24
    3342:	9c 93       	st	X, r25
    3344:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
    3346:	e9 85       	ldd	r30, Y+9	; 0x09
    3348:	fa 85       	ldd	r31, Y+10	; 0x0a
    334a:	60 81       	ld	r22, Z
    334c:	71 81       	ldd	r23, Z+1	; 0x01
    334e:	82 81       	ldd	r24, Z+2	; 0x02
    3350:	93 81       	ldd	r25, Z+3	; 0x03
    3352:	0e 94 ed 28 	call	0x51da	; 0x51da <__fixsfsi>
    3356:	3b 01       	movw	r6, r22
    3358:	4c 01       	movw	r8, r24
    335a:	af 81       	ldd	r26, Y+7	; 0x07
    335c:	b8 85       	ldd	r27, Y+8	; 0x08
    335e:	6d 91       	ld	r22, X+
    3360:	7d 91       	ld	r23, X+
    3362:	8d 91       	ld	r24, X+
    3364:	9c 91       	ld	r25, X
    3366:	0e 94 ed 28 	call	0x51da	; 0x51da <__fixsfsi>
    336a:	5b 01       	movw	r10, r22
    336c:	6c 01       	movw	r12, r24
    336e:	c8 01       	movw	r24, r16
    3370:	b7 01       	movw	r22, r14
    3372:	0e 94 ed 28 	call	0x51da	; 0x51da <__fixsfsi>
    3376:	8b 01       	movw	r16, r22
    3378:	9c 01       	movw	r18, r24
    337a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    337c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    337e:	b3 01       	movw	r22, r6
    3380:	a5 01       	movw	r20, r10
    3382:	98 01       	movw	r18, r16
    3384:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
    3388:	eb 85       	ldd	r30, Y+11	; 0x0b
    338a:	fc 85       	ldd	r31, Y+12	; 0x0c
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	59 f1       	breq	.+86     	; 0x33ea <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
    3394:	ed 85       	ldd	r30, Y+13	; 0x0d
    3396:	fe 85       	ldd	r31, Y+14	; 0x0e
    3398:	80 81       	ld	r24, Z
    339a:	91 81       	ldd	r25, Z+1	; 0x01
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
    33a2:	97 fd       	sbrc	r25, 7
    33a4:	19 c0       	rjmp	.+50     	; 0x33d8 <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
    33a6:	6e 96       	adiw	r28, 0x1e	; 30
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	df 90       	pop	r13
    33c0:	cf 90       	pop	r12
    33c2:	bf 90       	pop	r11
    33c4:	af 90       	pop	r10
    33c6:	9f 90       	pop	r9
    33c8:	8f 90       	pop	r8
    33ca:	7f 90       	pop	r7
    33cc:	6f 90       	pop	r6
    33ce:	5f 90       	pop	r5
    33d0:	4f 90       	pop	r4
    33d2:	3f 90       	pop	r3
    33d4:	2f 90       	pop	r2
    33d6:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
    33d8:	11 82       	std	Z+1, r1	; 0x01
    33da:	10 82       	st	Z, r1
			*direction = 1;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    33e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    33e4:	8d 93       	st	X+, r24
    33e6:	9c 93       	st	X, r25
    33e8:	de cf       	rjmp	.-68     	; 0x33a6 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
    33ea:	ad 85       	ldd	r26, Y+13	; 0x0d
    33ec:	be 85       	ldd	r27, Y+14	; 0x0e
    33ee:	8d 91       	ld	r24, X+
    33f0:	9c 91       	ld	r25, X
    33f2:	11 97       	sbiw	r26, 0x01	; 1
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	8d 93       	st	X+, r24
    33f8:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
    33fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    33fc:	f8 89       	ldd	r31, Y+16	; 0x10
    33fe:	e8 17       	cp	r30, r24
    3400:	f9 07       	cpc	r31, r25
    3402:	8c f6       	brge	.-94     	; 0x33a6 <fadeBetweenColors+0x268>
			*direction = 0;
    3404:	ab 85       	ldd	r26, Y+11	; 0x0b
    3406:	bc 85       	ldd	r27, Y+12	; 0x0c
    3408:	1d 92       	st	X+, r1
    340a:	1c 92       	st	X, r1
			*currentStep = stepCount;
    340c:	ad 85       	ldd	r26, Y+13	; 0x0d
    340e:	be 85       	ldd	r27, Y+14	; 0x0e
    3410:	ed 93       	st	X+, r30
    3412:	fc 93       	st	X, r31
    3414:	c8 cf       	rjmp	.-112    	; 0x33a6 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
    3416:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3418:	fc 8d       	ldd	r31, Y+28	; 0x1c
    341a:	bf 01       	movw	r22, r30
    341c:	88 27       	eor	r24, r24
    341e:	77 fd       	sbrc	r23, 7
    3420:	80 95       	com	r24
    3422:	98 2f       	mov	r25, r24
    3424:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3428:	3b 01       	movw	r6, r22
    342a:	4c 01       	movw	r8, r24
    342c:	a9 85       	ldd	r26, Y+9	; 0x09
    342e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3430:	6d 93       	st	X+, r22
    3432:	7d 93       	st	X+, r23
    3434:	8d 93       	st	X+, r24
    3436:	9c 93       	st	X, r25
    3438:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
    343a:	e9 8d       	ldd	r30, Y+25	; 0x19
    343c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    343e:	bf 01       	movw	r22, r30
    3440:	88 27       	eor	r24, r24
    3442:	77 fd       	sbrc	r23, 7
    3444:	80 95       	com	r24
    3446:	98 2f       	mov	r25, r24
    3448:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    344c:	1b 01       	movw	r2, r22
    344e:	2c 01       	movw	r4, r24
    3450:	af 81       	ldd	r26, Y+7	; 0x07
    3452:	b8 85       	ldd	r27, Y+8	; 0x08
    3454:	6d 93       	st	X+, r22
    3456:	7d 93       	st	X+, r23
    3458:	8d 93       	st	X+, r24
    345a:	9c 93       	st	X, r25
    345c:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
    345e:	ef 89       	ldd	r30, Y+23	; 0x17
    3460:	f8 8d       	ldd	r31, Y+24	; 0x18
    3462:	bf 01       	movw	r22, r30
    3464:	88 27       	eor	r24, r24
    3466:	77 fd       	sbrc	r23, 7
    3468:	80 95       	com	r24
    346a:	98 2f       	mov	r25, r24
    346c:	0e 94 8f 28 	call	0x511e	; 0x511e <__floatsisf>
    3470:	69 83       	std	Y+1, r22	; 0x01
    3472:	7a 83       	std	Y+2, r23	; 0x02
    3474:	8b 83       	std	Y+3, r24	; 0x03
    3476:	9c 83       	std	Y+4, r25	; 0x04
    3478:	ad 81       	ldd	r26, Y+5	; 0x05
    347a:	be 81       	ldd	r27, Y+6	; 0x06
    347c:	6d 93       	st	X+, r22
    347e:	7d 93       	st	X+, r23
    3480:	8d 93       	st	X+, r24
    3482:	9c 93       	st	X, r25
    3484:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    3486:	ed 85       	ldd	r30, Y+13	; 0x0d
    3488:	fe 85       	ldd	r31, Y+14	; 0x0e
    348a:	11 82       	std	Z+1, r1	; 0x01
    348c:	10 82       	st	Z, r1
		*direction = 1;	
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	ab 85       	ldd	r26, Y+11	; 0x0b
    3494:	bc 85       	ldd	r27, Y+12	; 0x0c
    3496:	8d 93       	st	X+, r24
    3498:	9c 93       	st	X, r25
    349a:	cc 24       	eor	r12, r12
    349c:	dd 24       	eor	r13, r13
    349e:	d9 ce       	rjmp	.-590    	; 0x3252 <fadeBetweenColors+0x114>

000034a0 <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    34a0:	21 e0       	ldi	r18, 0x01	; 1
    34a2:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    34a6:	0e 94 9f 18 	call	0x313e	; 0x313e <fadeBetweenColors>
	resetEffect = FALSE;
    34aa:	10 92 ea 02 	sts	0x02EA, r1
}
    34ae:	08 95       	ret

000034b0 <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	2e 97       	sbiw	r28, 0x0e	; 14
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	9c 01       	movw	r18, r24
    34ca:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    34cc:	8c 01       	movw	r16, r24
    34ce:	00 0f       	add	r16, r16
    34d0:	11 1f       	adc	r17, r17
    34d2:	0d 56       	subi	r16, 0x6D	; 109
    34d4:	1c 4f       	sbci	r17, 0xFC	; 252
    34d6:	d8 01       	movw	r26, r16
    34d8:	8d 91       	ld	r24, X+
    34da:	9c 91       	ld	r25, X
    34dc:	42 97       	sbiw	r24, 0x12	; 18
    34de:	14 f5       	brge	.+68     	; 0x3524 <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	9a 83       	std	Y+2, r25	; 0x02
    34e6:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    34e8:	82 81       	ldd	r24, Z+2	; 0x02
    34ea:	93 81       	ldd	r25, Z+3	; 0x03
    34ec:	9c 83       	std	Y+4, r25	; 0x04
    34ee:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    34f0:	84 81       	ldd	r24, Z+4	; 0x04
    34f2:	95 81       	ldd	r25, Z+5	; 0x05
    34f4:	9e 83       	std	Y+6, r25	; 0x06
    34f6:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    34f8:	18 86       	std	Y+8, r1	; 0x08
    34fa:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    34fc:	1a 86       	std	Y+10, r1	; 0x0a
    34fe:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    3500:	1c 86       	std	Y+12, r1	; 0x0c
    3502:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    3504:	82 e1       	ldi	r24, 0x12	; 18
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	9e 87       	std	Y+14, r25	; 0x0e
    350a:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    350c:	c9 01       	movw	r24, r18
    350e:	be 01       	movw	r22, r28
    3510:	6f 5f       	subi	r22, 0xFF	; 255
    3512:	7f 4f       	sbci	r23, 0xFF	; 255
    3514:	0e 94 9f 18 	call	0x313e	; 0x313e <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    3518:	f8 01       	movw	r30, r16
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	01 96       	adiw	r24, 0x01	; 1
    3520:	91 83       	std	Z+1, r25	; 0x01
    3522:	80 83       	st	Z, r24
	
}
    3524:	2e 96       	adiw	r28, 0x0e	; 14
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	08 95       	ret

0000353a <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    353a:	df 93       	push	r29
    353c:	cf 93       	push	r28
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	2e 97       	sbiw	r28, 0x0e	; 14
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    3550:	fc 01       	movw	r30, r24
    3552:	ee 0f       	add	r30, r30
    3554:	ff 1f       	adc	r31, r31
    3556:	ed 56       	subi	r30, 0x6D	; 109
    3558:	fc 4f       	sbci	r31, 0xFC	; 252
    355a:	11 82       	std	Z+1, r1	; 0x01
    355c:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    355e:	2d 91       	ld	r18, X+
    3560:	3c 91       	ld	r19, X
    3562:	11 97       	sbiw	r26, 0x01	; 1
    3564:	3a 83       	std	Y+2, r19	; 0x02
    3566:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    3568:	12 96       	adiw	r26, 0x02	; 2
    356a:	2d 91       	ld	r18, X+
    356c:	3c 91       	ld	r19, X
    356e:	13 97       	sbiw	r26, 0x03	; 3
    3570:	3c 83       	std	Y+4, r19	; 0x04
    3572:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    3574:	14 96       	adiw	r26, 0x04	; 4
    3576:	2d 91       	ld	r18, X+
    3578:	3c 91       	ld	r19, X
    357a:	15 97       	sbiw	r26, 0x05	; 5
    357c:	3e 83       	std	Y+6, r19	; 0x06
    357e:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    3580:	18 86       	std	Y+8, r1	; 0x08
    3582:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    3584:	1a 86       	std	Y+10, r1	; 0x0a
    3586:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    3588:	1c 86       	std	Y+12, r1	; 0x0c
    358a:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    358c:	22 e1       	ldi	r18, 0x12	; 18
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	3e 87       	std	Y+14, r19	; 0x0e
    3592:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    3594:	21 e0       	ldi	r18, 0x01	; 1
    3596:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    359a:	be 01       	movw	r22, r28
    359c:	6f 5f       	subi	r22, 0xFF	; 255
    359e:	7f 4f       	sbci	r23, 0xFF	; 255
    35a0:	0e 94 9f 18 	call	0x313e	; 0x313e <fadeBetweenColors>
	resetEffect=FALSE;
    35a4:	10 92 ea 02 	sts	0x02EA, r1
}
    35a8:	2e 96       	adiw	r28, 0x0e	; 14
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	7c 01       	movw	r14, r24
    35c8:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    35ca:	8c 01       	movw	r16, r24
    35cc:	00 0f       	add	r16, r16
    35ce:	11 1f       	adc	r17, r17
    35d0:	f8 01       	movw	r30, r16
    35d2:	e5 5b       	subi	r30, 0xB5	; 181
    35d4:	fc 4f       	sbci	r31, 0xFC	; 252
    35d6:	11 82       	std	Z+1, r1	; 0x01
    35d8:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    35da:	f8 01       	movw	r30, r16
    35dc:	ed 59       	subi	r30, 0x9D	; 157
    35de:	fc 4f       	sbci	r31, 0xFC	; 252
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    35e8:	f8 01       	movw	r30, r16
    35ea:	e5 55       	subi	r30, 0x55	; 85
    35ec:	fc 4f       	sbci	r31, 0xFC	; 252
    35ee:	11 82       	std	Z+1, r1	; 0x01
    35f0:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    35f2:	c7 01       	movw	r24, r14
    35f4:	0e 94 04 18 	call	0x3008	; 0x3008 <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    35f8:	c7 01       	movw	r24, r14
    35fa:	b6 01       	movw	r22, r12
    35fc:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    3600:	0e 0d       	add	r16, r14
    3602:	1f 1d       	adc	r17, r15
    3604:	00 0f       	add	r16, r16
    3606:	11 1f       	adc	r17, r17
    3608:	0e 55       	subi	r16, 0x5E	; 94
    360a:	1d 4f       	sbci	r17, 0xFD	; 253
    360c:	c7 01       	movw	r24, r14
    360e:	b8 01       	movw	r22, r16
    3610:	0e 94 35 24 	call	0x486a	; 0x486a <getRGBColor>
}
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	08 95       	ret

00003622 <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    3622:	af 92       	push	r10
    3624:	bf 92       	push	r11
    3626:	cf 92       	push	r12
    3628:	df 92       	push	r13
    362a:	ef 92       	push	r14
    362c:	ff 92       	push	r15
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	2a 97       	sbiw	r28, 0x0a	; 10
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	6c 01       	movw	r12, r24
    3648:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    364a:	88 0f       	add	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	8c 01       	movw	r16, r24
    3650:	0c 0d       	add	r16, r12
    3652:	1d 1d       	adc	r17, r13
    3654:	00 0f       	add	r16, r16
    3656:	11 1f       	adc	r17, r17
    3658:	0e 55       	subi	r16, 0x5E	; 94
    365a:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    365c:	5b ea       	ldi	r21, 0xAB	; 171
    365e:	e5 2e       	mov	r14, r21
    3660:	53 e0       	ldi	r21, 0x03	; 3
    3662:	f5 2e       	mov	r15, r21
    3664:	e8 0e       	add	r14, r24
    3666:	f9 1e       	adc	r15, r25
    3668:	d7 01       	movw	r26, r14
    366a:	8d 91       	ld	r24, X+
    366c:	9c 91       	ld	r25, X
    366e:	8a 30       	cpi	r24, 0x0A	; 10
    3670:	91 05       	cpc	r25, r1
    3672:	b4 f5       	brge	.+108    	; 0x36e0 <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	d7 01       	movw	r26, r14
    3678:	8d 93       	st	X+, r24
    367a:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    367c:	f8 01       	movw	r30, r16
    367e:	22 81       	ldd	r18, Z+2	; 0x02
    3680:	33 81       	ldd	r19, Z+3	; 0x03
    3682:	44 81       	ldd	r20, Z+4	; 0x04
    3684:	55 81       	ldd	r21, Z+5	; 0x05
    3686:	d5 01       	movw	r26, r10
    3688:	1e 96       	adiw	r26, 0x0e	; 14
    368a:	6d 91       	ld	r22, X+
    368c:	7c 91       	ld	r23, X
    368e:	1f 97       	sbiw	r26, 0x0f	; 15
    3690:	50 96       	adiw	r26, 0x10	; 16
    3692:	ed 91       	ld	r30, X+
    3694:	fc 91       	ld	r31, X
    3696:	51 97       	sbiw	r26, 0x11	; 17
    3698:	d8 01       	movw	r26, r16
    369a:	8d 91       	ld	r24, X+
    369c:	9c 91       	ld	r25, X
    369e:	9a 83       	std	Y+2, r25	; 0x02
    36a0:	89 83       	std	Y+1, r24	; 0x01
    36a2:	3c 83       	std	Y+4, r19	; 0x04
    36a4:	2b 83       	std	Y+3, r18	; 0x03
    36a6:	5e 83       	std	Y+6, r21	; 0x06
    36a8:	4d 83       	std	Y+5, r20	; 0x05
    36aa:	78 87       	std	Y+8, r23	; 0x08
    36ac:	6f 83       	std	Y+7, r22	; 0x07
    36ae:	fa 87       	std	Y+10, r31	; 0x0a
    36b0:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    36b2:	c6 01       	movw	r24, r12
    36b4:	be 01       	movw	r22, r28
    36b6:	6f 5f       	subi	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	0e 94 20 18 	call	0x3040	; 0x3040 <pwmEffect>

	
	
}
    36be:	2a 96       	adiw	r28, 0x0a	; 10
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	ff 90       	pop	r15
    36d4:	ef 90       	pop	r14
    36d6:	df 90       	pop	r13
    36d8:	cf 90       	pop	r12
    36da:	bf 90       	pop	r11
    36dc:	af 90       	pop	r10
    36de:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    36e0:	c6 01       	movw	r24, r12
    36e2:	b5 01       	movw	r22, r10
    36e4:	0e 94 9f 18 	call	0x313e	; 0x313e <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    36e8:	c6 01       	movw	r24, r12
    36ea:	b8 01       	movw	r22, r16
    36ec:	0e 94 35 24 	call	0x486a	; 0x486a <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    36f0:	f7 01       	movw	r30, r14
    36f2:	11 82       	std	Z+1, r1	; 0x01
    36f4:	10 82       	st	Z, r1
    36f6:	c2 cf       	rjmp	.-124    	; 0x367c <fadeBetweenColorsWithPwm+0x5a>

000036f8 <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    36f8:	ef 92       	push	r14
    36fa:	ff 92       	push	r15
    36fc:	0f 93       	push	r16
    36fe:	1f 93       	push	r17
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	62 97       	sbiw	r28, 0x12	; 18
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	f8 2e       	mov	r15, r24
    3716:	e9 2e       	mov	r14, r25
    3718:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    371a:	1e 96       	adiw	r26, 0x0e	; 14
    371c:	8d 91       	ld	r24, X+
    371e:	9c 91       	ld	r25, X
    3720:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    3722:	81 30       	cpi	r24, 0x01	; 1
    3724:	91 05       	cpc	r25, r1
    3726:	09 f4       	brne	.+2      	; 0x372a <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    3728:	a6 c0       	rjmp	.+332    	; 0x3876 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    372a:	89 2b       	or	r24, r25
    372c:	31 f5       	brne	.+76     	; 0x377a <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    372e:	8f 2d       	mov	r24, r15
    3730:	9e 2d       	mov	r25, r14
    3732:	fc 01       	movw	r30, r24
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	ee 0f       	add	r30, r30
    373a:	ff 1f       	adc	r31, r31
    373c:	ee 0f       	add	r30, r30
    373e:	ff 1f       	adc	r31, r31
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	e8 0f       	add	r30, r24
    3746:	f9 1f       	adc	r31, r25
    3748:	e5 59       	subi	r30, 0x95	; 149
    374a:	fb 4f       	sbci	r31, 0xFB	; 251
    374c:	80 e2       	ldi	r24, 0x20	; 32
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    3754:	8f 2d       	mov	r24, r15
    3756:	9e 2d       	mov	r25, r14
    3758:	fc 01       	movw	r30, r24
    375a:	ee 0f       	add	r30, r30
    375c:	ff 1f       	adc	r31, r31
    375e:	ee 0f       	add	r30, r30
    3760:	ff 1f       	adc	r31, r31
    3762:	ee 0f       	add	r30, r30
    3764:	ff 1f       	adc	r31, r31
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	e8 0f       	add	r30, r24
    376c:	f9 1f       	adc	r31, r25
    376e:	e5 59       	subi	r30, 0x95	; 149
    3770:	fb 4f       	sbci	r31, 0xFB	; 251
    3772:	82 e0       	ldi	r24, 0x02	; 2
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	93 83       	std	Z+3, r25	; 0x03
    3778:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    377a:	8f 2d       	mov	r24, r15
    377c:	9e 2d       	mov	r25, r14
    377e:	fc 01       	movw	r30, r24
    3780:	ee 0f       	add	r30, r30
    3782:	ff 1f       	adc	r31, r31
    3784:	ee 0f       	add	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	ee 0f       	add	r30, r30
    378a:	ff 1f       	adc	r31, r31
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	e8 0f       	add	r30, r24
    3792:	f9 1f       	adc	r31, r25
    3794:	e5 59       	subi	r30, 0x95	; 149
    3796:	fb 4f       	sbci	r31, 0xFB	; 251
    3798:	15 82       	std	Z+5, r1	; 0x05
    379a:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    379c:	8f 2d       	mov	r24, r15
    379e:	9e 2d       	mov	r25, r14
    37a0:	fc 01       	movw	r30, r24
    37a2:	ee 0f       	add	r30, r30
    37a4:	ff 1f       	adc	r31, r31
    37a6:	ee 0f       	add	r30, r30
    37a8:	ff 1f       	adc	r31, r31
    37aa:	ee 0f       	add	r30, r30
    37ac:	ff 1f       	adc	r31, r31
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	e8 0f       	add	r30, r24
    37b4:	f9 1f       	adc	r31, r25
    37b6:	e5 59       	subi	r30, 0x95	; 149
    37b8:	fb 4f       	sbci	r31, 0xFB	; 251
    37ba:	50 96       	adiw	r26, 0x10	; 16
    37bc:	8c 91       	ld	r24, X
    37be:	50 97       	sbiw	r26, 0x10	; 16
    37c0:	51 96       	adiw	r26, 0x11	; 17
    37c2:	9c 91       	ld	r25, X
    37c4:	51 97       	sbiw	r26, 0x11	; 17
    37c6:	9c 01       	movw	r18, r24
    37c8:	22 0f       	add	r18, r18
    37ca:	33 1f       	adc	r19, r19
    37cc:	22 0f       	add	r18, r18
    37ce:	33 1f       	adc	r19, r19
    37d0:	22 0f       	add	r18, r18
    37d2:	33 1f       	adc	r19, r19
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	28 0f       	add	r18, r24
    37da:	39 1f       	adc	r19, r25
    37dc:	31 87       	std	Z+9, r19	; 0x09
    37de:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    37e0:	8e 01       	movw	r16, r28
    37e2:	0f 5f       	subi	r16, 0xFF	; 255
    37e4:	1f 4f       	sbci	r17, 0xFF	; 255
    37e6:	c8 01       	movw	r24, r16
    37e8:	bd 01       	movw	r22, r26
    37ea:	47 e0       	ldi	r20, 0x07	; 7
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    37f2:	8f 2d       	mov	r24, r15
    37f4:	9e 2d       	mov	r25, r14
    37f6:	fc 01       	movw	r30, r24
    37f8:	ee 0f       	add	r30, r30
    37fa:	ff 1f       	adc	r31, r31
    37fc:	ee 0f       	add	r30, r30
    37fe:	ff 1f       	adc	r31, r31
    3800:	ee 0f       	add	r30, r30
    3802:	ff 1f       	adc	r31, r31
    3804:	88 0f       	add	r24, r24
    3806:	99 1f       	adc	r25, r25
    3808:	e8 0f       	add	r30, r24
    380a:	f9 1f       	adc	r31, r25
    380c:	e5 59       	subi	r30, 0x95	; 149
    380e:	fb 4f       	sbci	r31, 0xFB	; 251
    3810:	80 81       	ld	r24, Z
    3812:	91 81       	ldd	r25, Z+1	; 0x01
    3814:	98 8b       	std	Y+16, r25	; 0x10
    3816:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    3818:	8f 2d       	mov	r24, r15
    381a:	9e 2d       	mov	r25, r14
    381c:	fc 01       	movw	r30, r24
    381e:	ee 0f       	add	r30, r30
    3820:	ff 1f       	adc	r31, r31
    3822:	ee 0f       	add	r30, r30
    3824:	ff 1f       	adc	r31, r31
    3826:	ee 0f       	add	r30, r30
    3828:	ff 1f       	adc	r31, r31
    382a:	88 0f       	add	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	e8 0f       	add	r30, r24
    3830:	f9 1f       	adc	r31, r25
    3832:	e5 59       	subi	r30, 0x95	; 149
    3834:	fb 4f       	sbci	r31, 0xFB	; 251
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	93 81       	ldd	r25, Z+3	; 0x03
    383a:	9a 8b       	std	Y+18, r25	; 0x12
    383c:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    383e:	8f 2d       	mov	r24, r15
    3840:	9e 2d       	mov	r25, r14
    3842:	b8 01       	movw	r22, r16
    3844:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    3848:	8f 2d       	mov	r24, r15
    384a:	9e 2d       	mov	r25, r14
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	40 e0       	ldi	r20, 0x00	; 0
    3852:	50 e0       	ldi	r21, 0x00	; 0
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>

}
    385c:	62 96       	adiw	r28, 0x12	; 18
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    3876:	8f 2d       	mov	r24, r15
    3878:	9e 2d       	mov	r25, r14
    387a:	fc 01       	movw	r30, r24
    387c:	ee 0f       	add	r30, r30
    387e:	ff 1f       	adc	r31, r31
    3880:	ee 0f       	add	r30, r30
    3882:	ff 1f       	adc	r31, r31
    3884:	ee 0f       	add	r30, r30
    3886:	ff 1f       	adc	r31, r31
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	e8 0f       	add	r30, r24
    388e:	f9 1f       	adc	r31, r25
    3890:	e5 59       	subi	r30, 0x95	; 149
    3892:	fb 4f       	sbci	r31, 0xFB	; 251
    3894:	11 82       	std	Z+1, r1	; 0x01
    3896:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    3898:	8f 2d       	mov	r24, r15
    389a:	9e 2d       	mov	r25, r14
    389c:	fc 01       	movw	r30, r24
    389e:	ee 0f       	add	r30, r30
    38a0:	ff 1f       	adc	r31, r31
    38a2:	ee 0f       	add	r30, r30
    38a4:	ff 1f       	adc	r31, r31
    38a6:	ee 0f       	add	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	88 0f       	add	r24, r24
    38ac:	99 1f       	adc	r25, r25
    38ae:	e8 0f       	add	r30, r24
    38b0:	f9 1f       	adc	r31, r25
    38b2:	e5 59       	subi	r30, 0x95	; 149
    38b4:	fb 4f       	sbci	r31, 0xFB	; 251
    38b6:	80 e2       	ldi	r24, 0x20	; 32
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	93 83       	std	Z+3, r25	; 0x03
    38bc:	82 83       	std	Z+2, r24	; 0x02
    38be:	5d cf       	rjmp	.-326    	; 0x377a <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

000038c0 <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    38c0:	ef 92       	push	r14
    38c2:	ff 92       	push	r15
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	62 97       	sbiw	r28, 0x12	; 18
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	f8 2e       	mov	r15, r24
    38de:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    38e0:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    38e2:	fb 01       	movw	r30, r22
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	9a 83       	std	Y+2, r25	; 0x02
    38ea:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	9c 83       	std	Y+4, r25	; 0x04
    38f2:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    38f4:	84 81       	ldd	r24, Z+4	; 0x04
    38f6:	95 81       	ldd	r25, Z+5	; 0x05
    38f8:	9e 83       	std	Y+6, r25	; 0x06
    38fa:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    38fc:	86 81       	ldd	r24, Z+6	; 0x06
    38fe:	97 81       	ldd	r25, Z+7	; 0x07
    3900:	98 87       	std	Y+8, r25	; 0x08
    3902:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    3904:	80 85       	ldd	r24, Z+8	; 0x08
    3906:	91 85       	ldd	r25, Z+9	; 0x09
    3908:	9a 87       	std	Y+10, r25	; 0x0a
    390a:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    390c:	82 85       	ldd	r24, Z+10	; 0x0a
    390e:	93 85       	ldd	r25, Z+11	; 0x0b
    3910:	9c 87       	std	Y+12, r25	; 0x0c
    3912:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    3914:	82 89       	ldd	r24, Z+18	; 0x12
    3916:	93 89       	ldd	r25, Z+19	; 0x13
    3918:	9e 87       	std	Y+14, r25	; 0x0e
    391a:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    391c:	84 89       	ldd	r24, Z+20	; 0x14
    391e:	95 89       	ldd	r25, Z+21	; 0x15
    3920:	98 8b       	std	Y+16, r25	; 0x10
    3922:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    3924:	86 89       	ldd	r24, Z+22	; 0x16
    3926:	97 89       	ldd	r25, Z+23	; 0x17
    3928:	9a 8b       	std	Y+18, r25	; 0x12
    392a:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    392c:	8f 2d       	mov	r24, r15
    392e:	9e 2d       	mov	r25, r14
    3930:	be 01       	movw	r22, r28
    3932:	6f 5f       	subi	r22, 0xFF	; 255
    3934:	7f 4f       	sbci	r23, 0xFF	; 255
    3936:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    393a:	a3 ec       	ldi	r26, 0xC3	; 195
    393c:	b3 e0       	ldi	r27, 0x03	; 3
    393e:	8f 2d       	mov	r24, r15
    3940:	9e 2d       	mov	r25, r14
    3942:	88 0f       	add	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	fc 01       	movw	r30, r24
    3948:	ee 0f       	add	r30, r30
    394a:	ff 1f       	adc	r31, r31
    394c:	ee 0f       	add	r30, r30
    394e:	ff 1f       	adc	r31, r31
    3950:	ee 0f       	add	r30, r30
    3952:	ff 1f       	adc	r31, r31
    3954:	e8 1b       	sub	r30, r24
    3956:	f9 0b       	sbc	r31, r25
    3958:	ea 0f       	add	r30, r26
    395a:	fb 1f       	adc	r31, r27
    395c:	11 82       	std	Z+1, r1	; 0x01
    395e:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    3960:	8f 2d       	mov	r24, r15
    3962:	9e 2d       	mov	r25, r14
    3964:	88 0f       	add	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	fc 01       	movw	r30, r24
    396a:	ee 0f       	add	r30, r30
    396c:	ff 1f       	adc	r31, r31
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	ee 0f       	add	r30, r30
    3974:	ff 1f       	adc	r31, r31
    3976:	e8 1b       	sub	r30, r24
    3978:	f9 0b       	sbc	r31, r25
    397a:	ea 0f       	add	r30, r26
    397c:	fb 1f       	adc	r31, r27
    397e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3980:	9e 85       	ldd	r25, Y+14	; 0x0e
    3982:	95 83       	std	Z+5, r25	; 0x05
    3984:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    3986:	8f 2d       	mov	r24, r15
    3988:	9e 2d       	mov	r25, r14
    398a:	88 0f       	add	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	fc 01       	movw	r30, r24
    3990:	ee 0f       	add	r30, r30
    3992:	ff 1f       	adc	r31, r31
    3994:	ee 0f       	add	r30, r30
    3996:	ff 1f       	adc	r31, r31
    3998:	ee 0f       	add	r30, r30
    399a:	ff 1f       	adc	r31, r31
    399c:	e8 1b       	sub	r30, r24
    399e:	f9 0b       	sbc	r31, r25
    39a0:	ea 0f       	add	r30, r26
    39a2:	fb 1f       	adc	r31, r27
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	93 83       	std	Z+3, r25	; 0x03
    39aa:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    39ac:	8f 2d       	mov	r24, r15
    39ae:	9e 2d       	mov	r25, r14
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	fc 01       	movw	r30, r24
    39b6:	ee 0f       	add	r30, r30
    39b8:	ff 1f       	adc	r31, r31
    39ba:	ee 0f       	add	r30, r30
    39bc:	ff 1f       	adc	r31, r31
    39be:	ee 0f       	add	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	e8 1b       	sub	r30, r24
    39c4:	f9 0b       	sbc	r31, r25
    39c6:	ea 0f       	add	r30, r26
    39c8:	fb 1f       	adc	r31, r27
    39ca:	17 82       	std	Z+7, r1	; 0x07
    39cc:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    39ce:	8f 2d       	mov	r24, r15
    39d0:	9e 2d       	mov	r25, r14
    39d2:	88 0f       	add	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	fc 01       	movw	r30, r24
    39d8:	ee 0f       	add	r30, r30
    39da:	ff 1f       	adc	r31, r31
    39dc:	ee 0f       	add	r30, r30
    39de:	ff 1f       	adc	r31, r31
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	e8 1b       	sub	r30, r24
    39e6:	f9 0b       	sbc	r31, r25
    39e8:	ea 0f       	add	r30, r26
    39ea:	fb 1f       	adc	r31, r27
    39ec:	13 87       	std	Z+11, r17	; 0x0b
    39ee:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    39f0:	8f 2d       	mov	r24, r15
    39f2:	9e 2d       	mov	r25, r14
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	9c 01       	movw	r18, r24
    39fa:	22 0f       	add	r18, r18
    39fc:	33 1f       	adc	r19, r19
    39fe:	22 0f       	add	r18, r18
    3a00:	33 1f       	adc	r19, r19
    3a02:	22 0f       	add	r18, r18
    3a04:	33 1f       	adc	r19, r19
    3a06:	28 1b       	sub	r18, r24
    3a08:	39 0b       	sbc	r19, r25
    3a0a:	a2 0f       	add	r26, r18
    3a0c:	b3 1f       	adc	r27, r19
    3a0e:	0a 5f       	subi	r16, 0xFA	; 250
    3a10:	1f 4f       	sbci	r17, 0xFF	; 255
    3a12:	1d 96       	adiw	r26, 0x0d	; 13
    3a14:	1c 93       	st	X, r17
    3a16:	0e 93       	st	-X, r16
    3a18:	1c 97       	sbiw	r26, 0x0c	; 12


}
    3a1a:	62 96       	adiw	r28, 0x12	; 18
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	cf 91       	pop	r28
    3a28:	df 91       	pop	r29
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	08 95       	ret

00003a34 <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3a34:	ef 92       	push	r14
    3a36:	ff 92       	push	r15
    3a38:	0f 93       	push	r16
    3a3a:	1f 93       	push	r17
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	62 97       	sbiw	r28, 0x12	; 18
    3a46:	0f b6       	in	r0, 0x3f	; 63
    3a48:	f8 94       	cli
    3a4a:	de bf       	out	0x3e, r29	; 62
    3a4c:	0f be       	out	0x3f, r0	; 63
    3a4e:	cd bf       	out	0x3d, r28	; 61
    3a50:	f8 2e       	mov	r15, r24
    3a52:	e9 2e       	mov	r14, r25
    3a54:	db 01       	movw	r26, r22
	short direction = data[7];
    3a56:	1e 96       	adiw	r26, 0x0e	; 14
    3a58:	6d 91       	ld	r22, X+
    3a5a:	7c 91       	ld	r23, X
    3a5c:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    3a5e:	fc 01       	movw	r30, r24
    3a60:	ee 0f       	add	r30, r30
    3a62:	ff 1f       	adc	r31, r31
    3a64:	ee 0f       	add	r30, r30
    3a66:	ff 1f       	adc	r31, r31
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	e8 0f       	add	r30, r24
    3a72:	f9 1f       	adc	r31, r25
    3a74:	e5 59       	subi	r30, 0x95	; 149
    3a76:	fb 4f       	sbci	r31, 0xFB	; 251
    3a78:	40 85       	ldd	r20, Z+8	; 0x08
    3a7a:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    3a7c:	8f 2d       	mov	r24, r15
    3a7e:	9e 2d       	mov	r25, r14
    3a80:	fc 01       	movw	r30, r24
    3a82:	ee 0f       	add	r30, r30
    3a84:	ff 1f       	adc	r31, r31
    3a86:	ee 0f       	add	r30, r30
    3a88:	ff 1f       	adc	r31, r31
    3a8a:	ee 0f       	add	r30, r30
    3a8c:	ff 1f       	adc	r31, r31
    3a8e:	88 0f       	add	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	e8 0f       	add	r30, r24
    3a94:	f9 1f       	adc	r31, r25
    3a96:	e5 59       	subi	r30, 0x95	; 149
    3a98:	fb 4f       	sbci	r31, 0xFB	; 251
    3a9a:	86 81       	ldd	r24, Z+6	; 0x06
    3a9c:	97 81       	ldd	r25, Z+7	; 0x07
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <fadeBetweenColorsWithScalingPwmEffect+0x70>
    3aa2:	aa c0       	rjmp	.+340    	; 0x3bf8 <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    3aa4:	8f 2d       	mov	r24, r15
    3aa6:	9e 2d       	mov	r25, r14
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	ee 0f       	add	r30, r30
    3aac:	ff 1f       	adc	r31, r31
    3aae:	ee 0f       	add	r30, r30
    3ab0:	ff 1f       	adc	r31, r31
    3ab2:	ee 0f       	add	r30, r30
    3ab4:	ff 1f       	adc	r31, r31
    3ab6:	88 0f       	add	r24, r24
    3ab8:	99 1f       	adc	r25, r25
    3aba:	e8 0f       	add	r30, r24
    3abc:	f9 1f       	adc	r31, r25
    3abe:	e5 59       	subi	r30, 0x95	; 149
    3ac0:	fb 4f       	sbci	r31, 0xFB	; 251
    3ac2:	24 81       	ldd	r18, Z+4	; 0x04
    3ac4:	35 81       	ldd	r19, Z+5	; 0x05
    3ac6:	24 17       	cp	r18, r20
    3ac8:	35 07       	cpc	r19, r21
    3aca:	0c f0       	brlt	.+2      	; 0x3ace <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    3acc:	54 c0       	rjmp	.+168    	; 0x3b76 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    3ace:	8f 2d       	mov	r24, r15
    3ad0:	9e 2d       	mov	r25, r14
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	ee 0f       	add	r30, r30
    3ad6:	ff 1f       	adc	r31, r31
    3ad8:	ee 0f       	add	r30, r30
    3ada:	ff 1f       	adc	r31, r31
    3adc:	ee 0f       	add	r30, r30
    3ade:	ff 1f       	adc	r31, r31
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	e8 0f       	add	r30, r24
    3ae6:	f9 1f       	adc	r31, r25
    3ae8:	e5 59       	subi	r30, 0x95	; 149
    3aea:	fb 4f       	sbci	r31, 0xFB	; 251
    3aec:	2f 5f       	subi	r18, 0xFF	; 255
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	35 83       	std	Z+5, r19	; 0x05
    3af2:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    3af4:	8e 01       	movw	r16, r28
    3af6:	0f 5f       	subi	r16, 0xFF	; 255
    3af8:	1f 4f       	sbci	r17, 0xFF	; 255
    3afa:	c8 01       	movw	r24, r16
    3afc:	bd 01       	movw	r22, r26
    3afe:	47 e0       	ldi	r20, 0x07	; 7
    3b00:	50 e0       	ldi	r21, 0x00	; 0
    3b02:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    3b06:	8f 2d       	mov	r24, r15
    3b08:	9e 2d       	mov	r25, r14
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	ee 0f       	add	r30, r30
    3b0e:	ff 1f       	adc	r31, r31
    3b10:	ee 0f       	add	r30, r30
    3b12:	ff 1f       	adc	r31, r31
    3b14:	ee 0f       	add	r30, r30
    3b16:	ff 1f       	adc	r31, r31
    3b18:	88 0f       	add	r24, r24
    3b1a:	99 1f       	adc	r25, r25
    3b1c:	e8 0f       	add	r30, r24
    3b1e:	f9 1f       	adc	r31, r25
    3b20:	e5 59       	subi	r30, 0x95	; 149
    3b22:	fb 4f       	sbci	r31, 0xFB	; 251
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	98 8b       	std	Y+16, r25	; 0x10
    3b2a:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    3b2c:	8f 2d       	mov	r24, r15
    3b2e:	9e 2d       	mov	r25, r14
    3b30:	fc 01       	movw	r30, r24
    3b32:	ee 0f       	add	r30, r30
    3b34:	ff 1f       	adc	r31, r31
    3b36:	ee 0f       	add	r30, r30
    3b38:	ff 1f       	adc	r31, r31
    3b3a:	ee 0f       	add	r30, r30
    3b3c:	ff 1f       	adc	r31, r31
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	e8 0f       	add	r30, r24
    3b44:	f9 1f       	adc	r31, r25
    3b46:	e5 59       	subi	r30, 0x95	; 149
    3b48:	fb 4f       	sbci	r31, 0xFB	; 251
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	9a 8b       	std	Y+18, r25	; 0x12
    3b50:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    3b52:	8f 2d       	mov	r24, r15
    3b54:	9e 2d       	mov	r25, r14
    3b56:	b8 01       	movw	r22, r16
    3b58:	0e 94 11 1b 	call	0x3622	; 0x3622 <fadeBetweenColorsWithPwm>
	

}
    3b5c:	62 96       	adiw	r28, 0x12	; 18
    3b5e:	0f b6       	in	r0, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	cd bf       	out	0x3d, r28	; 61
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	ff 90       	pop	r15
    3b72:	ef 90       	pop	r14
    3b74:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    3b76:	8f 2d       	mov	r24, r15
    3b78:	9e 2d       	mov	r25, r14
    3b7a:	fc 01       	movw	r30, r24
    3b7c:	ee 0f       	add	r30, r30
    3b7e:	ff 1f       	adc	r31, r31
    3b80:	ee 0f       	add	r30, r30
    3b82:	ff 1f       	adc	r31, r31
    3b84:	ee 0f       	add	r30, r30
    3b86:	ff 1f       	adc	r31, r31
    3b88:	88 0f       	add	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	e8 0f       	add	r30, r24
    3b8e:	f9 1f       	adc	r31, r25
    3b90:	e5 59       	subi	r30, 0x95	; 149
    3b92:	fb 4f       	sbci	r31, 0xFB	; 251
    3b94:	15 82       	std	Z+5, r1	; 0x05
    3b96:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    3b98:	61 30       	cpi	r22, 0x01	; 1
    3b9a:	71 05       	cpc	r23, r1
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    3b9e:	86 c0       	rjmp	.+268    	; 0x3cac <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    3ba0:	67 2b       	or	r22, r23
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    3ba4:	a7 cf       	rjmp	.-178    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    3ba6:	8f 2d       	mov	r24, r15
    3ba8:	9e 2d       	mov	r25, r14
    3baa:	fc 01       	movw	r30, r24
    3bac:	ee 0f       	add	r30, r30
    3bae:	ff 1f       	adc	r31, r31
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	ee 0f       	add	r30, r30
    3bb6:	ff 1f       	adc	r31, r31
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	e8 0f       	add	r30, r24
    3bbe:	f9 1f       	adc	r31, r25
    3bc0:	e5 59       	subi	r30, 0x95	; 149
    3bc2:	fb 4f       	sbci	r31, 0xFB	; 251
    3bc4:	20 81       	ld	r18, Z
    3bc6:	31 81       	ldd	r19, Z+1	; 0x01
    3bc8:	23 30       	cpi	r18, 0x03	; 3
    3bca:	31 05       	cpc	r19, r1
    3bcc:	0c f4       	brge	.+2      	; 0x3bd0 <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    3bce:	97 c0       	rjmp	.+302    	; 0x3cfe <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    3bd0:	8f 2d       	mov	r24, r15
    3bd2:	9e 2d       	mov	r25, r14
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	ee 0f       	add	r30, r30
    3bd8:	ff 1f       	adc	r31, r31
    3bda:	ee 0f       	add	r30, r30
    3bdc:	ff 1f       	adc	r31, r31
    3bde:	ee 0f       	add	r30, r30
    3be0:	ff 1f       	adc	r31, r31
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	e8 0f       	add	r30, r24
    3be8:	f9 1f       	adc	r31, r25
    3bea:	e5 59       	subi	r30, 0x95	; 149
    3bec:	fb 4f       	sbci	r31, 0xFB	; 251
    3bee:	22 50       	subi	r18, 0x02	; 2
    3bf0:	30 40       	sbci	r19, 0x00	; 0
    3bf2:	31 83       	std	Z+1, r19	; 0x01
    3bf4:	20 83       	st	Z, r18
    3bf6:	7e cf       	rjmp	.-260    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    3bf8:	8f 2d       	mov	r24, r15
    3bfa:	9e 2d       	mov	r25, r14
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	ee 0f       	add	r30, r30
    3c00:	ff 1f       	adc	r31, r31
    3c02:	ee 0f       	add	r30, r30
    3c04:	ff 1f       	adc	r31, r31
    3c06:	ee 0f       	add	r30, r30
    3c08:	ff 1f       	adc	r31, r31
    3c0a:	88 0f       	add	r24, r24
    3c0c:	99 1f       	adc	r25, r25
    3c0e:	e8 0f       	add	r30, r24
    3c10:	f9 1f       	adc	r31, r25
    3c12:	e5 59       	subi	r30, 0x95	; 149
    3c14:	fb 4f       	sbci	r31, 0xFB	; 251
    3c16:	84 81       	ldd	r24, Z+4	; 0x04
    3c18:	95 81       	ldd	r25, Z+5	; 0x05
    3c1a:	0a 97       	sbiw	r24, 0x0a	; 10
    3c1c:	0c f1       	brlt	.+66     	; 0x3c60 <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    3c1e:	61 30       	cpi	r22, 0x01	; 1
    3c20:	71 05       	cpc	r23, r1
    3c22:	09 f4       	brne	.+2      	; 0x3c26 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    3c24:	e6 c0       	rjmp	.+460    	; 0x3df2 <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    3c26:	67 2b       	or	r22, r23
    3c28:	51 f4       	brne	.+20     	; 0x3c3e <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    3c2a:	8f 2d       	mov	r24, r15
    3c2c:	9e 2d       	mov	r25, r14
    3c2e:	60 e0       	ldi	r22, 0x00	; 0
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	40 e0       	ldi	r20, 0x00	; 0
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	0e 94 1b 24 	call	0x4836	; 0x4836 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    3c3e:	8f 2d       	mov	r24, r15
    3c40:	9e 2d       	mov	r25, r14
    3c42:	fc 01       	movw	r30, r24
    3c44:	ee 0f       	add	r30, r30
    3c46:	ff 1f       	adc	r31, r31
    3c48:	ee 0f       	add	r30, r30
    3c4a:	ff 1f       	adc	r31, r31
    3c4c:	ee 0f       	add	r30, r30
    3c4e:	ff 1f       	adc	r31, r31
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	e8 0f       	add	r30, r24
    3c56:	f9 1f       	adc	r31, r25
    3c58:	e5 59       	subi	r30, 0x95	; 149
    3c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    3c5c:	15 82       	std	Z+5, r1	; 0x05
    3c5e:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    3c60:	8f 2d       	mov	r24, r15
    3c62:	9e 2d       	mov	r25, r14
    3c64:	dc 01       	movw	r26, r24
    3c66:	aa 0f       	add	r26, r26
    3c68:	bb 1f       	adc	r27, r27
    3c6a:	aa 0f       	add	r26, r26
    3c6c:	bb 1f       	adc	r27, r27
    3c6e:	aa 0f       	add	r26, r26
    3c70:	bb 1f       	adc	r27, r27
    3c72:	88 0f       	add	r24, r24
    3c74:	99 1f       	adc	r25, r25
    3c76:	a8 0f       	add	r26, r24
    3c78:	b9 1f       	adc	r27, r25
    3c7a:	a5 59       	subi	r26, 0x95	; 149
    3c7c:	bb 4f       	sbci	r27, 0xFB	; 251
    3c7e:	8f 2d       	mov	r24, r15
    3c80:	9e 2d       	mov	r25, r14
    3c82:	fc 01       	movw	r30, r24
    3c84:	ee 0f       	add	r30, r30
    3c86:	ff 1f       	adc	r31, r31
    3c88:	ee 0f       	add	r30, r30
    3c8a:	ff 1f       	adc	r31, r31
    3c8c:	ee 0f       	add	r30, r30
    3c8e:	ff 1f       	adc	r31, r31
    3c90:	88 0f       	add	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	e8 0f       	add	r30, r24
    3c96:	f9 1f       	adc	r31, r25
    3c98:	e5 59       	subi	r30, 0x95	; 149
    3c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    3c9c:	84 81       	ldd	r24, Z+4	; 0x04
    3c9e:	95 81       	ldd	r25, Z+5	; 0x05
    3ca0:	01 96       	adiw	r24, 0x01	; 1
    3ca2:	15 96       	adiw	r26, 0x05	; 5
    3ca4:	9c 93       	st	X, r25
    3ca6:	8e 93       	st	-X, r24
    3ca8:	14 97       	sbiw	r26, 0x04	; 4
    3caa:	58 cf       	rjmp	.-336    	; 0x3b5c <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    3cac:	8f 2d       	mov	r24, r15
    3cae:	9e 2d       	mov	r25, r14
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	ee 0f       	add	r30, r30
    3cb4:	ff 1f       	adc	r31, r31
    3cb6:	ee 0f       	add	r30, r30
    3cb8:	ff 1f       	adc	r31, r31
    3cba:	ee 0f       	add	r30, r30
    3cbc:	ff 1f       	adc	r31, r31
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	e8 0f       	add	r30, r24
    3cc4:	f9 1f       	adc	r31, r25
    3cc6:	e5 59       	subi	r30, 0x95	; 149
    3cc8:	fb 4f       	sbci	r31, 0xFB	; 251
    3cca:	22 81       	ldd	r18, Z+2	; 0x02
    3ccc:	33 81       	ldd	r19, Z+3	; 0x03
    3cce:	23 30       	cpi	r18, 0x03	; 3
    3cd0:	31 05       	cpc	r19, r1
    3cd2:	0c f4       	brge	.+2      	; 0x3cd6 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    3cd4:	52 c0       	rjmp	.+164    	; 0x3d7a <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    3cd6:	8f 2d       	mov	r24, r15
    3cd8:	9e 2d       	mov	r25, r14
    3cda:	fc 01       	movw	r30, r24
    3cdc:	ee 0f       	add	r30, r30
    3cde:	ff 1f       	adc	r31, r31
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	ee 0f       	add	r30, r30
    3ce6:	ff 1f       	adc	r31, r31
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	e8 0f       	add	r30, r24
    3cee:	f9 1f       	adc	r31, r25
    3cf0:	e5 59       	subi	r30, 0x95	; 149
    3cf2:	fb 4f       	sbci	r31, 0xFB	; 251
    3cf4:	22 50       	subi	r18, 0x02	; 2
    3cf6:	30 40       	sbci	r19, 0x00	; 0
    3cf8:	33 83       	std	Z+3, r19	; 0x03
    3cfa:	22 83       	std	Z+2, r18	; 0x02
    3cfc:	fb ce       	rjmp	.-522    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    3cfe:	8f 2d       	mov	r24, r15
    3d00:	9e 2d       	mov	r25, r14
    3d02:	fc 01       	movw	r30, r24
    3d04:	ee 0f       	add	r30, r30
    3d06:	ff 1f       	adc	r31, r31
    3d08:	ee 0f       	add	r30, r30
    3d0a:	ff 1f       	adc	r31, r31
    3d0c:	ee 0f       	add	r30, r30
    3d0e:	ff 1f       	adc	r31, r31
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	e8 0f       	add	r30, r24
    3d16:	f9 1f       	adc	r31, r25
    3d18:	e5 59       	subi	r30, 0x95	; 149
    3d1a:	fb 4f       	sbci	r31, 0xFB	; 251
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	80 32       	cpi	r24, 0x20	; 32
    3d22:	91 05       	cpc	r25, r1
    3d24:	0c f0       	brlt	.+2      	; 0x3d28 <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    3d26:	e6 ce       	rjmp	.-564    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    3d28:	02 96       	adiw	r24, 0x02	; 2
    3d2a:	2f 2d       	mov	r18, r15
    3d2c:	3e 2d       	mov	r19, r14
    3d2e:	f9 01       	movw	r30, r18
    3d30:	ee 0f       	add	r30, r30
    3d32:	ff 1f       	adc	r31, r31
    3d34:	ee 0f       	add	r30, r30
    3d36:	ff 1f       	adc	r31, r31
    3d38:	ee 0f       	add	r30, r30
    3d3a:	ff 1f       	adc	r31, r31
    3d3c:	22 0f       	add	r18, r18
    3d3e:	33 1f       	adc	r19, r19
    3d40:	e2 0f       	add	r30, r18
    3d42:	f3 1f       	adc	r31, r19
    3d44:	e5 59       	subi	r30, 0x95	; 149
    3d46:	fb 4f       	sbci	r31, 0xFB	; 251
    3d48:	93 83       	std	Z+3, r25	; 0x03
    3d4a:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    3d4c:	80 97       	sbiw	r24, 0x20	; 32
    3d4e:	09 f0       	breq	.+2      	; 0x3d52 <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    3d50:	d1 ce       	rjmp	.-606    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    3d52:	8f 2d       	mov	r24, r15
    3d54:	9e 2d       	mov	r25, r14
    3d56:	fc 01       	movw	r30, r24
    3d58:	ee 0f       	add	r30, r30
    3d5a:	ff 1f       	adc	r31, r31
    3d5c:	ee 0f       	add	r30, r30
    3d5e:	ff 1f       	adc	r31, r31
    3d60:	ee 0f       	add	r30, r30
    3d62:	ff 1f       	adc	r31, r31
    3d64:	88 0f       	add	r24, r24
    3d66:	99 1f       	adc	r25, r25
    3d68:	e8 0f       	add	r30, r24
    3d6a:	f9 1f       	adc	r31, r25
    3d6c:	e5 59       	subi	r30, 0x95	; 149
    3d6e:	fb 4f       	sbci	r31, 0xFB	; 251
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	97 83       	std	Z+7, r25	; 0x07
    3d76:	86 83       	std	Z+6, r24	; 0x06
    3d78:	bd ce       	rjmp	.-646    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    3d7a:	8f 2d       	mov	r24, r15
    3d7c:	9e 2d       	mov	r25, r14
    3d7e:	fc 01       	movw	r30, r24
    3d80:	ee 0f       	add	r30, r30
    3d82:	ff 1f       	adc	r31, r31
    3d84:	ee 0f       	add	r30, r30
    3d86:	ff 1f       	adc	r31, r31
    3d88:	ee 0f       	add	r30, r30
    3d8a:	ff 1f       	adc	r31, r31
    3d8c:	88 0f       	add	r24, r24
    3d8e:	99 1f       	adc	r25, r25
    3d90:	e8 0f       	add	r30, r24
    3d92:	f9 1f       	adc	r31, r25
    3d94:	e5 59       	subi	r30, 0x95	; 149
    3d96:	fb 4f       	sbci	r31, 0xFB	; 251
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	80 32       	cpi	r24, 0x20	; 32
    3d9e:	91 05       	cpc	r25, r1
    3da0:	0c f0       	brlt	.+2      	; 0x3da4 <fadeBetweenColorsWithScalingPwmEffect+0x370>
    3da2:	a8 ce       	rjmp	.-688    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    3da4:	02 96       	adiw	r24, 0x02	; 2
    3da6:	2f 2d       	mov	r18, r15
    3da8:	3e 2d       	mov	r19, r14
    3daa:	f9 01       	movw	r30, r18
    3dac:	ee 0f       	add	r30, r30
    3dae:	ff 1f       	adc	r31, r31
    3db0:	ee 0f       	add	r30, r30
    3db2:	ff 1f       	adc	r31, r31
    3db4:	ee 0f       	add	r30, r30
    3db6:	ff 1f       	adc	r31, r31
    3db8:	22 0f       	add	r18, r18
    3dba:	33 1f       	adc	r19, r19
    3dbc:	e2 0f       	add	r30, r18
    3dbe:	f3 1f       	adc	r31, r19
    3dc0:	e5 59       	subi	r30, 0x95	; 149
    3dc2:	fb 4f       	sbci	r31, 0xFB	; 251
    3dc4:	91 83       	std	Z+1, r25	; 0x01
    3dc6:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    3dc8:	80 97       	sbiw	r24, 0x20	; 32
    3dca:	09 f0       	breq	.+2      	; 0x3dce <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    3dcc:	93 ce       	rjmp	.-730    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    3dce:	8f 2d       	mov	r24, r15
    3dd0:	9e 2d       	mov	r25, r14
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	ee 0f       	add	r30, r30
    3dd6:	ff 1f       	adc	r31, r31
    3dd8:	ee 0f       	add	r30, r30
    3dda:	ff 1f       	adc	r31, r31
    3ddc:	ee 0f       	add	r30, r30
    3dde:	ff 1f       	adc	r31, r31
    3de0:	88 0f       	add	r24, r24
    3de2:	99 1f       	adc	r25, r25
    3de4:	e8 0f       	add	r30, r24
    3de6:	f9 1f       	adc	r31, r25
    3de8:	e5 59       	subi	r30, 0x95	; 149
    3dea:	fb 4f       	sbci	r31, 0xFB	; 251
    3dec:	77 83       	std	Z+7, r23	; 0x07
    3dee:	66 83       	std	Z+6, r22	; 0x06
    3df0:	81 ce       	rjmp	.-766    	; 0x3af4 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    3df2:	8f 2d       	mov	r24, r15
    3df4:	9e 2d       	mov	r25, r14
    3df6:	bd 01       	movw	r22, r26
    3df8:	0e 94 9f 18 	call	0x313e	; 0x313e <fadeBetweenColors>
    3dfc:	20 cf       	rjmp	.-448    	; 0x3c3e <fadeBetweenColorsWithScalingPwmEffect+0x20a>

00003dfe <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3dfe:	ef 92       	push	r14
    3e00:	ff 92       	push	r15
    3e02:	0f 93       	push	r16
    3e04:	1f 93       	push	r17
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	cd b7       	in	r28, 0x3d	; 61
    3e0c:	de b7       	in	r29, 0x3e	; 62
    3e0e:	a6 97       	sbiw	r28, 0x26	; 38
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	de bf       	out	0x3e, r29	; 62
    3e16:	0f be       	out	0x3f, r0	; 63
    3e18:	cd bf       	out	0x3d, r28	; 61
    3e1a:	f8 2e       	mov	r15, r24
    3e1c:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    3e1e:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    3e20:	88 0f       	add	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	fc 01       	movw	r30, r24
    3e26:	ee 0f       	add	r30, r30
    3e28:	ff 1f       	adc	r31, r31
    3e2a:	ee 0f       	add	r30, r30
    3e2c:	ff 1f       	adc	r31, r31
    3e2e:	ee 0f       	add	r30, r30
    3e30:	ff 1f       	adc	r31, r31
    3e32:	e8 1b       	sub	r30, r24
    3e34:	f9 0b       	sbc	r31, r25
    3e36:	ed 53       	subi	r30, 0x3D	; 61
    3e38:	fc 4f       	sbci	r31, 0xFC	; 252
    3e3a:	20 85       	ldd	r18, Z+8	; 0x08
    3e3c:	31 85       	ldd	r19, Z+9	; 0x09
    3e3e:	2a 30       	cpi	r18, 0x0A	; 10
    3e40:	31 05       	cpc	r19, r1
    3e42:	0c f4       	brge	.+2      	; 0x3e46 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    3e44:	4b c0       	rjmp	.+150    	; 0x3edc <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    3e46:	8f 2d       	mov	r24, r15
    3e48:	9e 2d       	mov	r25, r14
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	fc 01       	movw	r30, r24
    3e50:	ee 0f       	add	r30, r30
    3e52:	ff 1f       	adc	r31, r31
    3e54:	ee 0f       	add	r30, r30
    3e56:	ff 1f       	adc	r31, r31
    3e58:	ee 0f       	add	r30, r30
    3e5a:	ff 1f       	adc	r31, r31
    3e5c:	e8 1b       	sub	r30, r24
    3e5e:	f9 0b       	sbc	r31, r25
    3e60:	ed 53       	subi	r30, 0x3D	; 61
    3e62:	fc 4f       	sbci	r31, 0xFC	; 252
    3e64:	26 81       	ldd	r18, Z+6	; 0x06
    3e66:	37 81       	ldd	r19, Z+7	; 0x07
    3e68:	8f 2d       	mov	r24, r15
    3e6a:	9e 2d       	mov	r25, r14
    3e6c:	88 0f       	add	r24, r24
    3e6e:	99 1f       	adc	r25, r25
    3e70:	fc 01       	movw	r30, r24
    3e72:	ee 0f       	add	r30, r30
    3e74:	ff 1f       	adc	r31, r31
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	ee 0f       	add	r30, r30
    3e7c:	ff 1f       	adc	r31, r31
    3e7e:	e8 1b       	sub	r30, r24
    3e80:	f9 0b       	sbc	r31, r25
    3e82:	ed 53       	subi	r30, 0x3D	; 61
    3e84:	fc 4f       	sbci	r31, 0xFC	; 252
    3e86:	84 81       	ldd	r24, Z+4	; 0x04
    3e88:	95 81       	ldd	r25, Z+5	; 0x05
    3e8a:	28 17       	cp	r18, r24
    3e8c:	39 07       	cpc	r19, r25
    3e8e:	0c f0       	brlt	.+2      	; 0x3e92 <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    3e90:	95 c0       	rjmp	.+298    	; 0x3fbc <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    3e92:	8f 2d       	mov	r24, r15
    3e94:	9e 2d       	mov	r25, r14
    3e96:	88 0f       	add	r24, r24
    3e98:	99 1f       	adc	r25, r25
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	ee 0f       	add	r30, r30
    3e9e:	ff 1f       	adc	r31, r31
    3ea0:	ee 0f       	add	r30, r30
    3ea2:	ff 1f       	adc	r31, r31
    3ea4:	ee 0f       	add	r30, r30
    3ea6:	ff 1f       	adc	r31, r31
    3ea8:	e8 1b       	sub	r30, r24
    3eaa:	f9 0b       	sbc	r31, r25
    3eac:	ed 53       	subi	r30, 0x3D	; 61
    3eae:	fc 4f       	sbci	r31, 0xFC	; 252
    3eb0:	2f 5f       	subi	r18, 0xFF	; 255
    3eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb4:	37 83       	std	Z+7, r19	; 0x07
    3eb6:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    3eb8:	8f 2d       	mov	r24, r15
    3eba:	9e 2d       	mov	r25, r14
    3ebc:	88 0f       	add	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	ee 0f       	add	r30, r30
    3ec4:	ff 1f       	adc	r31, r31
    3ec6:	ee 0f       	add	r30, r30
    3ec8:	ff 1f       	adc	r31, r31
    3eca:	ee 0f       	add	r30, r30
    3ecc:	ff 1f       	adc	r31, r31
    3ece:	e8 1b       	sub	r30, r24
    3ed0:	f9 0b       	sbc	r31, r25
    3ed2:	ed 53       	subi	r30, 0x3D	; 61
    3ed4:	fc 4f       	sbci	r31, 0xFC	; 252
    3ed6:	11 86       	std	Z+9, r1	; 0x09
    3ed8:	10 86       	std	Z+8, r1	; 0x08
    3eda:	13 c0       	rjmp	.+38     	; 0x3f02 <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    3edc:	8f 2d       	mov	r24, r15
    3ede:	9e 2d       	mov	r25, r14
    3ee0:	88 0f       	add	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	ee 0f       	add	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	ee 0f       	add	r30, r30
    3eec:	ff 1f       	adc	r31, r31
    3eee:	ee 0f       	add	r30, r30
    3ef0:	ff 1f       	adc	r31, r31
    3ef2:	e8 1b       	sub	r30, r24
    3ef4:	f9 0b       	sbc	r31, r25
    3ef6:	ed 53       	subi	r30, 0x3D	; 61
    3ef8:	fc 4f       	sbci	r31, 0xFC	; 252
    3efa:	2f 5f       	subi	r18, 0xFF	; 255
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	31 87       	std	Z+9, r19	; 0x09
    3f00:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    3f02:	8f 2d       	mov	r24, r15
    3f04:	9e 2d       	mov	r25, r14
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	ee 0f       	add	r30, r30
    3f0e:	ff 1f       	adc	r31, r31
    3f10:	ee 0f       	add	r30, r30
    3f12:	ff 1f       	adc	r31, r31
    3f14:	ee 0f       	add	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	e8 1b       	sub	r30, r24
    3f1a:	f9 0b       	sbc	r31, r25
    3f1c:	ed 53       	subi	r30, 0x3D	; 61
    3f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f20:	02 84       	ldd	r0, Z+10	; 0x0a
    3f22:	f3 85       	ldd	r31, Z+11	; 0x0b
    3f24:	e0 2d       	mov	r30, r0
    3f26:	80 81       	ld	r24, Z
    3f28:	91 81       	ldd	r25, Z+1	; 0x01
    3f2a:	9e 8b       	std	Y+22, r25	; 0x16
    3f2c:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    3f2e:	82 81       	ldd	r24, Z+2	; 0x02
    3f30:	93 81       	ldd	r25, Z+3	; 0x03
    3f32:	98 8f       	std	Y+24, r25	; 0x18
    3f34:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    3f36:	84 81       	ldd	r24, Z+4	; 0x04
    3f38:	95 81       	ldd	r25, Z+5	; 0x05
    3f3a:	9a 8f       	std	Y+26, r25	; 0x1a
    3f3c:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    3f3e:	8f 2d       	mov	r24, r15
    3f40:	9e 2d       	mov	r25, r14
    3f42:	88 0f       	add	r24, r24
    3f44:	99 1f       	adc	r25, r25
    3f46:	fc 01       	movw	r30, r24
    3f48:	ee 0f       	add	r30, r30
    3f4a:	ff 1f       	adc	r31, r31
    3f4c:	ee 0f       	add	r30, r30
    3f4e:	ff 1f       	adc	r31, r31
    3f50:	ee 0f       	add	r30, r30
    3f52:	ff 1f       	adc	r31, r31
    3f54:	e8 1b       	sub	r30, r24
    3f56:	f9 0b       	sbc	r31, r25
    3f58:	ed 53       	subi	r30, 0x3D	; 61
    3f5a:	fc 4f       	sbci	r31, 0xFC	; 252
    3f5c:	04 84       	ldd	r0, Z+12	; 0x0c
    3f5e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f60:	e0 2d       	mov	r30, r0
    3f62:	80 81       	ld	r24, Z
    3f64:	91 81       	ldd	r25, Z+1	; 0x01
    3f66:	9c 8f       	std	Y+28, r25	; 0x1c
    3f68:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    3f6a:	82 81       	ldd	r24, Z+2	; 0x02
    3f6c:	93 81       	ldd	r25, Z+3	; 0x03
    3f6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3f70:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    3f72:	84 81       	ldd	r24, Z+4	; 0x04
    3f74:	95 81       	ldd	r25, Z+5	; 0x05
    3f76:	98 a3       	std	Y+32, r25	; 0x20
    3f78:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    3f7a:	f8 01       	movw	r30, r16
    3f7c:	82 89       	ldd	r24, Z+18	; 0x12
    3f7e:	93 89       	ldd	r25, Z+19	; 0x13
    3f80:	9a a3       	std	Y+34, r25	; 0x22
    3f82:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    3f84:	84 89       	ldd	r24, Z+20	; 0x14
    3f86:	95 89       	ldd	r25, Z+21	; 0x15
    3f88:	9c a3       	std	Y+36, r25	; 0x24
    3f8a:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    3f8c:	86 89       	ldd	r24, Z+22	; 0x16
    3f8e:	97 89       	ldd	r25, Z+23	; 0x17
    3f90:	9e a3       	std	Y+38, r25	; 0x26
    3f92:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    3f94:	8f 2d       	mov	r24, r15
    3f96:	9e 2d       	mov	r25, r14
    3f98:	be 01       	movw	r22, r28
    3f9a:	6b 5e       	subi	r22, 0xEB	; 235
    3f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9e:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    3fa2:	a6 96       	adiw	r28, 0x26	; 38
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	1f 91       	pop	r17
    3fb4:	0f 91       	pop	r16
    3fb6:	ff 90       	pop	r15
    3fb8:	ef 90       	pop	r14
    3fba:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    3fbc:	8f 2d       	mov	r24, r15
    3fbe:	9e 2d       	mov	r25, r14
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	fc 01       	movw	r30, r24
    3fc6:	ee 0f       	add	r30, r30
    3fc8:	ff 1f       	adc	r31, r31
    3fca:	ee 0f       	add	r30, r30
    3fcc:	ff 1f       	adc	r31, r31
    3fce:	ee 0f       	add	r30, r30
    3fd0:	ff 1f       	adc	r31, r31
    3fd2:	e8 1b       	sub	r30, r24
    3fd4:	f9 0b       	sbc	r31, r25
    3fd6:	ed 53       	subi	r30, 0x3D	; 61
    3fd8:	fc 4f       	sbci	r31, 0xFC	; 252
    3fda:	42 81       	ldd	r20, Z+2	; 0x02
    3fdc:	53 81       	ldd	r21, Z+3	; 0x03
    3fde:	41 30       	cpi	r20, 0x01	; 1
    3fe0:	51 05       	cpc	r21, r1
    3fe2:	09 f4       	brne	.+2      	; 0x3fe6 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    3fe4:	6a c0       	rjmp	.+212    	; 0x40ba <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    3fe6:	45 2b       	or	r20, r21
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    3fea:	f2 c0       	rjmp	.+484    	; 0x41d0 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    3fec:	8f 2d       	mov	r24, r15
    3fee:	9e 2d       	mov	r25, r14
    3ff0:	88 0f       	add	r24, r24
    3ff2:	99 1f       	adc	r25, r25
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	ee 0f       	add	r30, r30
    3ff8:	ff 1f       	adc	r31, r31
    3ffa:	ee 0f       	add	r30, r30
    3ffc:	ff 1f       	adc	r31, r31
    3ffe:	ee 0f       	add	r30, r30
    4000:	ff 1f       	adc	r31, r31
    4002:	e8 1b       	sub	r30, r24
    4004:	f9 0b       	sbc	r31, r25
    4006:	ed 53       	subi	r30, 0x3D	; 61
    4008:	fc 4f       	sbci	r31, 0xFC	; 252
    400a:	20 81       	ld	r18, Z
    400c:	31 81       	ldd	r19, Z+1	; 0x01
    400e:	21 50       	subi	r18, 0x01	; 1
    4010:	30 40       	sbci	r19, 0x00	; 0
    4012:	8f 2d       	mov	r24, r15
    4014:	9e 2d       	mov	r25, r14
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	fc 01       	movw	r30, r24
    401c:	ee 0f       	add	r30, r30
    401e:	ff 1f       	adc	r31, r31
    4020:	ee 0f       	add	r30, r30
    4022:	ff 1f       	adc	r31, r31
    4024:	ee 0f       	add	r30, r30
    4026:	ff 1f       	adc	r31, r31
    4028:	e8 1b       	sub	r30, r24
    402a:	f9 0b       	sbc	r31, r25
    402c:	ed 53       	subi	r30, 0x3D	; 61
    402e:	fc 4f       	sbci	r31, 0xFC	; 252
    4030:	31 83       	std	Z+1, r19	; 0x01
    4032:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    4034:	23 2b       	or	r18, r19
    4036:	09 f0       	breq	.+2      	; 0x403a <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    4038:	f7 c0       	rjmp	.+494    	; 0x4228 <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    403a:	8f 2d       	mov	r24, r15
    403c:	9e 2d       	mov	r25, r14
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	fc 01       	movw	r30, r24
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	ee 0f       	add	r30, r30
    404a:	ff 1f       	adc	r31, r31
    404c:	ee 0f       	add	r30, r30
    404e:	ff 1f       	adc	r31, r31
    4050:	e8 1b       	sub	r30, r24
    4052:	f9 0b       	sbc	r31, r25
    4054:	ed 53       	subi	r30, 0x3D	; 61
    4056:	fc 4f       	sbci	r31, 0xFC	; 252
    4058:	0a 5f       	subi	r16, 0xFA	; 250
    405a:	1f 4f       	sbci	r17, 0xFF	; 255
    405c:	13 87       	std	Z+11, r17	; 0x0b
    405e:	02 87       	std	Z+10, r16	; 0x0a
    4060:	06 50       	subi	r16, 0x06	; 6
    4062:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    4064:	8f 2d       	mov	r24, r15
    4066:	9e 2d       	mov	r25, r14
    4068:	88 0f       	add	r24, r24
    406a:	99 1f       	adc	r25, r25
    406c:	fc 01       	movw	r30, r24
    406e:	ee 0f       	add	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	ee 0f       	add	r30, r30
    4074:	ff 1f       	adc	r31, r31
    4076:	ee 0f       	add	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	e8 1b       	sub	r30, r24
    407c:	f9 0b       	sbc	r31, r25
    407e:	ed 53       	subi	r30, 0x3D	; 61
    4080:	fc 4f       	sbci	r31, 0xFC	; 252
    4082:	15 87       	std	Z+13, r17	; 0x0d
    4084:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    4086:	f8 01       	movw	r30, r16
    4088:	86 81       	ldd	r24, Z+6	; 0x06
    408a:	97 81       	ldd	r25, Z+7	; 0x07
    408c:	98 87       	std	Y+8, r25	; 0x08
    408e:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    4090:	80 85       	ldd	r24, Z+8	; 0x08
    4092:	91 85       	ldd	r25, Z+9	; 0x09
    4094:	9a 87       	std	Y+10, r25	; 0x0a
    4096:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    4098:	82 85       	ldd	r24, Z+10	; 0x0a
    409a:	93 85       	ldd	r25, Z+11	; 0x0b
    409c:	9c 87       	std	Y+12, r25	; 0x0c
    409e:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    40a0:	80 81       	ld	r24, Z
    40a2:	91 81       	ldd	r25, Z+1	; 0x01
    40a4:	9e 87       	std	Y+14, r25	; 0x0e
    40a6:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
    40aa:	93 81       	ldd	r25, Z+3	; 0x03
    40ac:	98 8b       	std	Y+16, r25	; 0x10
    40ae:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    40b0:	84 81       	ldd	r24, Z+4	; 0x04
    40b2:	95 81       	ldd	r25, Z+5	; 0x05
    40b4:	9a 8b       	std	Y+18, r25	; 0x12
    40b6:	89 8b       	std	Y+17, r24	; 0x11
    40b8:	8b c0       	rjmp	.+278    	; 0x41d0 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    40ba:	8f 2d       	mov	r24, r15
    40bc:	9e 2d       	mov	r25, r14
    40be:	88 0f       	add	r24, r24
    40c0:	99 1f       	adc	r25, r25
    40c2:	fc 01       	movw	r30, r24
    40c4:	ee 0f       	add	r30, r30
    40c6:	ff 1f       	adc	r31, r31
    40c8:	ee 0f       	add	r30, r30
    40ca:	ff 1f       	adc	r31, r31
    40cc:	ee 0f       	add	r30, r30
    40ce:	ff 1f       	adc	r31, r31
    40d0:	e8 1b       	sub	r30, r24
    40d2:	f9 0b       	sbc	r31, r25
    40d4:	ed 53       	subi	r30, 0x3D	; 61
    40d6:	fc 4f       	sbci	r31, 0xFC	; 252
    40d8:	20 81       	ld	r18, Z
    40da:	31 81       	ldd	r19, Z+1	; 0x01
    40dc:	2f 5f       	subi	r18, 0xFF	; 255
    40de:	3f 4f       	sbci	r19, 0xFF	; 255
    40e0:	8f 2d       	mov	r24, r15
    40e2:	9e 2d       	mov	r25, r14
    40e4:	88 0f       	add	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	fc 01       	movw	r30, r24
    40ea:	ee 0f       	add	r30, r30
    40ec:	ff 1f       	adc	r31, r31
    40ee:	ee 0f       	add	r30, r30
    40f0:	ff 1f       	adc	r31, r31
    40f2:	ee 0f       	add	r30, r30
    40f4:	ff 1f       	adc	r31, r31
    40f6:	e8 1b       	sub	r30, r24
    40f8:	f9 0b       	sbc	r31, r25
    40fa:	ed 53       	subi	r30, 0x3D	; 61
    40fc:	fc 4f       	sbci	r31, 0xFC	; 252
    40fe:	31 83       	std	Z+1, r19	; 0x01
    4100:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    4102:	21 30       	cpi	r18, 0x01	; 1
    4104:	31 05       	cpc	r19, r1
    4106:	09 f4       	brne	.+2      	; 0x410a <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    4108:	e5 c0       	rjmp	.+458    	; 0x42d4 <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    410a:	8f 2d       	mov	r24, r15
    410c:	9e 2d       	mov	r25, r14
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	fc 01       	movw	r30, r24
    4114:	ee 0f       	add	r30, r30
    4116:	ff 1f       	adc	r31, r31
    4118:	ee 0f       	add	r30, r30
    411a:	ff 1f       	adc	r31, r31
    411c:	ee 0f       	add	r30, r30
    411e:	ff 1f       	adc	r31, r31
    4120:	e8 1b       	sub	r30, r24
    4122:	f9 0b       	sbc	r31, r25
    4124:	ed 53       	subi	r30, 0x3D	; 61
    4126:	fc 4f       	sbci	r31, 0xFC	; 252
    4128:	13 82       	std	Z+3, r1	; 0x03
    412a:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    412c:	8f 2d       	mov	r24, r15
    412e:	9e 2d       	mov	r25, r14
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	fc 01       	movw	r30, r24
    4136:	ee 0f       	add	r30, r30
    4138:	ff 1f       	adc	r31, r31
    413a:	ee 0f       	add	r30, r30
    413c:	ff 1f       	adc	r31, r31
    413e:	ee 0f       	add	r30, r30
    4140:	ff 1f       	adc	r31, r31
    4142:	e8 1b       	sub	r30, r24
    4144:	f9 0b       	sbc	r31, r25
    4146:	ed 53       	subi	r30, 0x3D	; 61
    4148:	fc 4f       	sbci	r31, 0xFC	; 252
    414a:	51 83       	std	Z+1, r21	; 0x01
    414c:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    414e:	8f 2d       	mov	r24, r15
    4150:	9e 2d       	mov	r25, r14
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	fc 01       	movw	r30, r24
    4158:	ee 0f       	add	r30, r30
    415a:	ff 1f       	adc	r31, r31
    415c:	ee 0f       	add	r30, r30
    415e:	ff 1f       	adc	r31, r31
    4160:	ee 0f       	add	r30, r30
    4162:	ff 1f       	adc	r31, r31
    4164:	e8 1b       	sub	r30, r24
    4166:	f9 0b       	sbc	r31, r25
    4168:	ed 53       	subi	r30, 0x3D	; 61
    416a:	fc 4f       	sbci	r31, 0xFC	; 252
    416c:	04 5f       	subi	r16, 0xF4	; 244
    416e:	1f 4f       	sbci	r17, 0xFF	; 255
    4170:	13 87       	std	Z+11, r17	; 0x0b
    4172:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4174:	8f 2d       	mov	r24, r15
    4176:	9e 2d       	mov	r25, r14
    4178:	88 0f       	add	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	fc 01       	movw	r30, r24
    417e:	ee 0f       	add	r30, r30
    4180:	ff 1f       	adc	r31, r31
    4182:	ee 0f       	add	r30, r30
    4184:	ff 1f       	adc	r31, r31
    4186:	ee 0f       	add	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	e8 1b       	sub	r30, r24
    418c:	f9 0b       	sbc	r31, r25
    418e:	ed 53       	subi	r30, 0x3D	; 61
    4190:	fc 4f       	sbci	r31, 0xFC	; 252
    4192:	06 50       	subi	r16, 0x06	; 6
    4194:	10 40       	sbci	r17, 0x00	; 0
    4196:	15 87       	std	Z+13, r17	; 0x0d
    4198:	04 87       	std	Z+12, r16	; 0x0c
    419a:	06 50       	subi	r16, 0x06	; 6
    419c:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    419e:	f8 01       	movw	r30, r16
    41a0:	84 85       	ldd	r24, Z+12	; 0x0c
    41a2:	95 85       	ldd	r25, Z+13	; 0x0d
    41a4:	98 87       	std	Y+8, r25	; 0x08
    41a6:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    41a8:	86 85       	ldd	r24, Z+14	; 0x0e
    41aa:	97 85       	ldd	r25, Z+15	; 0x0f
    41ac:	9a 87       	std	Y+10, r25	; 0x0a
    41ae:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    41b0:	80 89       	ldd	r24, Z+16	; 0x10
    41b2:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    41b4:	9c 87       	std	Y+12, r25	; 0x0c
    41b6:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    41b8:	86 81       	ldd	r24, Z+6	; 0x06
    41ba:	97 81       	ldd	r25, Z+7	; 0x07
    41bc:	9e 87       	std	Y+14, r25	; 0x0e
    41be:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    41c0:	80 85       	ldd	r24, Z+8	; 0x08
    41c2:	91 85       	ldd	r25, Z+9	; 0x09
    41c4:	98 8b       	std	Y+16, r25	; 0x10
    41c6:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    41c8:	82 85       	ldd	r24, Z+10	; 0x0a
    41ca:	93 85       	ldd	r25, Z+11	; 0x0b
    41cc:	9a 8b       	std	Y+18, r25	; 0x12
    41ce:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    41d0:	8f 2d       	mov	r24, r15
    41d2:	9e 2d       	mov	r25, r14
    41d4:	be 01       	movw	r22, r28
    41d6:	6f 5f       	subi	r22, 0xFF	; 255
    41d8:	7f 4f       	sbci	r23, 0xFF	; 255
    41da:	0e 94 35 24 	call	0x486a	; 0x486a <getRGBColor>
			resetData.beginRed = curColors.red;
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	9a 81       	ldd	r25, Y+2	; 0x02
    41e2:	98 87       	std	Y+8, r25	; 0x08
    41e4:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ea:	9a 87       	std	Y+10, r25	; 0x0a
    41ec:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    41ee:	8d 81       	ldd	r24, Y+5	; 0x05
    41f0:	9e 81       	ldd	r25, Y+6	; 0x06
    41f2:	9c 87       	std	Y+12, r25	; 0x0c
    41f4:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    41f6:	8f 2d       	mov	r24, r15
    41f8:	9e 2d       	mov	r25, r14
    41fa:	be 01       	movw	r22, r28
    41fc:	69 5f       	subi	r22, 0xF9	; 249
    41fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4200:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    4204:	8f 2d       	mov	r24, r15
    4206:	9e 2d       	mov	r25, r14
    4208:	88 0f       	add	r24, r24
    420a:	99 1f       	adc	r25, r25
    420c:	fc 01       	movw	r30, r24
    420e:	ee 0f       	add	r30, r30
    4210:	ff 1f       	adc	r31, r31
    4212:	ee 0f       	add	r30, r30
    4214:	ff 1f       	adc	r31, r31
    4216:	ee 0f       	add	r30, r30
    4218:	ff 1f       	adc	r31, r31
    421a:	e8 1b       	sub	r30, r24
    421c:	f9 0b       	sbc	r31, r25
    421e:	ed 53       	subi	r30, 0x3D	; 61
    4220:	fc 4f       	sbci	r31, 0xFC	; 252
    4222:	17 82       	std	Z+7, r1	; 0x07
    4224:	16 82       	std	Z+6, r1	; 0x06
    4226:	48 ce       	rjmp	.-880    	; 0x3eb8 <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    4228:	8f 2d       	mov	r24, r15
    422a:	9e 2d       	mov	r25, r14
    422c:	88 0f       	add	r24, r24
    422e:	99 1f       	adc	r25, r25
    4230:	fc 01       	movw	r30, r24
    4232:	ee 0f       	add	r30, r30
    4234:	ff 1f       	adc	r31, r31
    4236:	ee 0f       	add	r30, r30
    4238:	ff 1f       	adc	r31, r31
    423a:	ee 0f       	add	r30, r30
    423c:	ff 1f       	adc	r31, r31
    423e:	e8 1b       	sub	r30, r24
    4240:	f9 0b       	sbc	r31, r25
    4242:	ed 53       	subi	r30, 0x3D	; 61
    4244:	fc 4f       	sbci	r31, 0xFC	; 252
    4246:	11 82       	std	Z+1, r1	; 0x01
    4248:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    424a:	8f 2d       	mov	r24, r15
    424c:	9e 2d       	mov	r25, r14
    424e:	88 0f       	add	r24, r24
    4250:	99 1f       	adc	r25, r25
    4252:	fc 01       	movw	r30, r24
    4254:	ee 0f       	add	r30, r30
    4256:	ff 1f       	adc	r31, r31
    4258:	ee 0f       	add	r30, r30
    425a:	ff 1f       	adc	r31, r31
    425c:	ee 0f       	add	r30, r30
    425e:	ff 1f       	adc	r31, r31
    4260:	e8 1b       	sub	r30, r24
    4262:	f9 0b       	sbc	r31, r25
    4264:	ed 53       	subi	r30, 0x3D	; 61
    4266:	fc 4f       	sbci	r31, 0xFC	; 252
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	93 83       	std	Z+3, r25	; 0x03
    426e:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    4270:	8f 2d       	mov	r24, r15
    4272:	9e 2d       	mov	r25, r14
    4274:	88 0f       	add	r24, r24
    4276:	99 1f       	adc	r25, r25
    4278:	fc 01       	movw	r30, r24
    427a:	ee 0f       	add	r30, r30
    427c:	ff 1f       	adc	r31, r31
    427e:	ee 0f       	add	r30, r30
    4280:	ff 1f       	adc	r31, r31
    4282:	ee 0f       	add	r30, r30
    4284:	ff 1f       	adc	r31, r31
    4286:	e8 1b       	sub	r30, r24
    4288:	f9 0b       	sbc	r31, r25
    428a:	ed 53       	subi	r30, 0x3D	; 61
    428c:	fc 4f       	sbci	r31, 0xFC	; 252
    428e:	13 87       	std	Z+11, r17	; 0x0b
    4290:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4292:	8f 2d       	mov	r24, r15
    4294:	9e 2d       	mov	r25, r14
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	fc 01       	movw	r30, r24
    429c:	ee 0f       	add	r30, r30
    429e:	ff 1f       	adc	r31, r31
    42a0:	ee 0f       	add	r30, r30
    42a2:	ff 1f       	adc	r31, r31
    42a4:	ee 0f       	add	r30, r30
    42a6:	ff 1f       	adc	r31, r31
    42a8:	e8 1b       	sub	r30, r24
    42aa:	f9 0b       	sbc	r31, r25
    42ac:	ed 53       	subi	r30, 0x3D	; 61
    42ae:	fc 4f       	sbci	r31, 0xFC	; 252
    42b0:	0a 5f       	subi	r16, 0xFA	; 250
    42b2:	1f 4f       	sbci	r17, 0xFF	; 255
    42b4:	15 87       	std	Z+13, r17	; 0x0d
    42b6:	04 87       	std	Z+12, r16	; 0x0c
    42b8:	06 50       	subi	r16, 0x06	; 6
    42ba:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    42bc:	f8 01       	movw	r30, r16
    42be:	80 81       	ld	r24, Z
    42c0:	91 81       	ldd	r25, Z+1	; 0x01
    42c2:	98 87       	std	Y+8, r25	; 0x08
    42c4:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    42c6:	82 81       	ldd	r24, Z+2	; 0x02
    42c8:	93 81       	ldd	r25, Z+3	; 0x03
    42ca:	9a 87       	std	Y+10, r25	; 0x0a
    42cc:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    42ce:	84 81       	ldd	r24, Z+4	; 0x04
    42d0:	95 81       	ldd	r25, Z+5	; 0x05
    42d2:	70 cf       	rjmp	.-288    	; 0x41b4 <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    42d4:	8f 2d       	mov	r24, r15
    42d6:	9e 2d       	mov	r25, r14
    42d8:	88 0f       	add	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	fc 01       	movw	r30, r24
    42de:	ee 0f       	add	r30, r30
    42e0:	ff 1f       	adc	r31, r31
    42e2:	ee 0f       	add	r30, r30
    42e4:	ff 1f       	adc	r31, r31
    42e6:	ee 0f       	add	r30, r30
    42e8:	ff 1f       	adc	r31, r31
    42ea:	e8 1b       	sub	r30, r24
    42ec:	f9 0b       	sbc	r31, r25
    42ee:	ed 53       	subi	r30, 0x3D	; 61
    42f0:	fc 4f       	sbci	r31, 0xFC	; 252
    42f2:	0a 5f       	subi	r16, 0xFA	; 250
    42f4:	1f 4f       	sbci	r17, 0xFF	; 255
    42f6:	13 87       	std	Z+11, r17	; 0x0b
    42f8:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    42fa:	8f 2d       	mov	r24, r15
    42fc:	9e 2d       	mov	r25, r14
    42fe:	88 0f       	add	r24, r24
    4300:	99 1f       	adc	r25, r25
    4302:	fc 01       	movw	r30, r24
    4304:	ee 0f       	add	r30, r30
    4306:	ff 1f       	adc	r31, r31
    4308:	ee 0f       	add	r30, r30
    430a:	ff 1f       	adc	r31, r31
    430c:	ee 0f       	add	r30, r30
    430e:	ff 1f       	adc	r31, r31
    4310:	e8 1b       	sub	r30, r24
    4312:	f9 0b       	sbc	r31, r25
    4314:	ed 53       	subi	r30, 0x3D	; 61
    4316:	fc 4f       	sbci	r31, 0xFC	; 252
    4318:	0a 5f       	subi	r16, 0xFA	; 250
    431a:	1f 4f       	sbci	r17, 0xFF	; 255
    431c:	15 87       	std	Z+13, r17	; 0x0d
    431e:	04 87       	std	Z+12, r16	; 0x0c
    4320:	0c 50       	subi	r16, 0x0C	; 12
    4322:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    4324:	f8 01       	movw	r30, r16
    4326:	86 81       	ldd	r24, Z+6	; 0x06
    4328:	97 81       	ldd	r25, Z+7	; 0x07
    432a:	98 87       	std	Y+8, r25	; 0x08
    432c:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    432e:	80 85       	ldd	r24, Z+8	; 0x08
    4330:	91 85       	ldd	r25, Z+9	; 0x09
    4332:	9a 87       	std	Y+10, r25	; 0x0a
    4334:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    4336:	82 85       	ldd	r24, Z+10	; 0x0a
    4338:	93 85       	ldd	r25, Z+11	; 0x0b
    433a:	9c 87       	std	Y+12, r25	; 0x0c
    433c:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    433e:	84 85       	ldd	r24, Z+12	; 0x0c
    4340:	95 85       	ldd	r25, Z+13	; 0x0d
    4342:	9e 87       	std	Y+14, r25	; 0x0e
    4344:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    4346:	86 85       	ldd	r24, Z+14	; 0x0e
    4348:	97 85       	ldd	r25, Z+15	; 0x0f
    434a:	98 8b       	std	Y+16, r25	; 0x10
    434c:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    434e:	80 89       	ldd	r24, Z+16	; 0x10
    4350:	91 89       	ldd	r25, Z+17	; 0x11
    4352:	9a 8b       	std	Y+18, r25	; 0x12
    4354:	89 8b       	std	Y+17, r24	; 0x11
    4356:	3c cf       	rjmp	.-392    	; 0x41d0 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00004358 <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    4358:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    435a:	2d 91       	ld	r18, X+
    435c:	3c 91       	ld	r19, X
    435e:	11 97       	sbiw	r26, 0x01	; 1
    4360:	f9 01       	movw	r30, r18
    4362:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4364:	2f 5f       	subi	r18, 0xFF	; 255
    4366:	3f 4f       	sbci	r19, 0xFF	; 255
    4368:	2d 93       	st	X+, r18
    436a:	3c 93       	st	X, r19
    return returnVal;
}
    436c:	08 95       	ret

0000436e <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    436e:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    4370:	8d 91       	ld	r24, X+
    4372:	9c 91       	ld	r25, X
    4374:	11 97       	sbiw	r26, 0x01	; 1
    4376:	fc 01       	movw	r30, r24
    4378:	25 91       	lpm	r18, Z+
    437a:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    437c:	02 96       	adiw	r24, 0x02	; 2
    437e:	8d 93       	st	X+, r24
    4380:	9c 93       	st	X, r25
    return returnVal;
}
    4382:	c9 01       	movw	r24, r18
    4384:	08 95       	ret

00004386 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    438c:	14 16       	cp	r1, r20
    438e:	15 06       	cpc	r1, r21
    4390:	64 f4       	brge	.+24     	; 0x43aa <copyFromFlash+0x24>
    4392:	db 01       	movw	r26, r22
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    4398:	fe 01       	movw	r30, r28
    439a:	e8 0f       	add	r30, r24
    439c:	f9 1f       	adc	r31, r25
    439e:	e4 91       	lpm	r30, Z+
    43a0:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    43a2:	01 96       	adiw	r24, 0x01	; 1
    43a4:	84 17       	cp	r24, r20
    43a6:	95 07       	cpc	r25, r21
    43a8:	bc f3       	brlt	.-18     	; 0x4398 <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    43aa:	df 91       	pop	r29
    43ac:	cf 91       	pop	r28
    43ae:	08 95       	ret

000043b0 <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    43b0:	2f 92       	push	r2
    43b2:	3f 92       	push	r3
    43b4:	4f 92       	push	r4
    43b6:	5f 92       	push	r5
    43b8:	6f 92       	push	r6
    43ba:	7f 92       	push	r7
    43bc:	8f 92       	push	r8
    43be:	9f 92       	push	r9
    43c0:	af 92       	push	r10
    43c2:	bf 92       	push	r11
    43c4:	cf 92       	push	r12
    43c6:	df 92       	push	r13
    43c8:	ef 92       	push	r14
    43ca:	ff 92       	push	r15
    43cc:	1f 93       	push	r17
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <getInstructionGroup+0x24>
    43d4:	00 d0       	rcall	.+0      	; 0x43d6 <getInstructionGroup+0x26>
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    43da:	83 ef       	ldi	r24, 0xF3	; 243
    43dc:	98 e0       	ldi	r25, 0x08	; 8
    43de:	90 93 f4 0e 	sts	0x0EF4, r25
    43e2:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    43e6:	40 91 04 01 	lds	r20, 0x0104
    43ea:	50 91 05 01 	lds	r21, 0x0105
    43ee:	fa 01       	movw	r30, r20
    43f0:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    43f2:	31 96       	adiw	r30, 0x01	; 1
    43f4:	f0 93 05 01 	sts	0x0105, r31
    43f8:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    43fc:	8f 3f       	cpi	r24, 0xFF	; 255
    43fe:	c9 f0       	breq	.+50     	; 0x4432 <getInstructionGroup+0x82>
    4400:	60 e0       	ldi	r22, 0x00	; 0
    4402:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    4404:	cb 01       	movw	r24, r22
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	cf 91       	pop	r28
    4410:	df 91       	pop	r29
    4412:	1f 91       	pop	r17
    4414:	ff 90       	pop	r15
    4416:	ef 90       	pop	r14
    4418:	df 90       	pop	r13
    441a:	cf 90       	pop	r12
    441c:	bf 90       	pop	r11
    441e:	af 90       	pop	r10
    4420:	9f 90       	pop	r9
    4422:	8f 90       	pop	r8
    4424:	7f 90       	pop	r7
    4426:	6f 90       	pop	r6
    4428:	5f 90       	pop	r5
    442a:	4f 90       	pop	r4
    442c:	3f 90       	pop	r3
    442e:	2f 90       	pop	r2
    4430:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    4432:	80 91 00 01 	lds	r24, 0x0100
    4436:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    443a:	20 91 02 01 	lds	r18, 0x0102
    443e:	30 91 03 01 	lds	r19, 0x0103
    4442:	20 93 00 01 	sts	0x0100, r18
    4446:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    444a:	90 93 03 01 	sts	0x0103, r25
    444e:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    4452:	c9 01       	movw	r24, r18
    4454:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4456:	85 91       	lpm	r24, Z+
    4458:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    445a:	9c 01       	movw	r18, r24
    445c:	22 0f       	add	r18, r18
    445e:	33 1f       	adc	r19, r19
    4460:	22 0f       	add	r18, r18
    4462:	33 1f       	adc	r19, r19
    4464:	22 0f       	add	r18, r18
    4466:	33 1f       	adc	r19, r19
    4468:	88 0f       	add	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	28 0f       	add	r18, r24
    446e:	39 1f       	adc	r19, r25
    4470:	fb 01       	movw	r30, r22
    4472:	31 83       	std	Z+1, r19	; 0x01
    4474:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    4476:	db 01       	movw	r26, r22
    4478:	14 96       	adiw	r26, 0x04	; 4
    447a:	b3 83       	std	Z+3, r27	; 0x03
    447c:	a2 83       	std	Z+2, r26	; 0x02
    447e:	4d 5f       	subi	r20, 0xFD	; 253
    4480:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4482:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4484:	9f e9       	ldi	r25, 0x9F	; 159
    4486:	c9 2e       	mov	r12, r25
    4488:	98 e1       	ldi	r25, 0x18	; 24
    448a:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    448c:	80 e5       	ldi	r24, 0x50	; 80
    448e:	a8 2e       	mov	r10, r24
    4490:	8a e1       	ldi	r24, 0x1A	; 26
    4492:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4494:	f0 e2       	ldi	r31, 0x20	; 32
    4496:	8f 2e       	mov	r8, r31
    4498:	f8 e1       	ldi	r31, 0x18	; 24
    449a:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    449c:	e4 e0       	ldi	r30, 0x04	; 4
    449e:	6e 2e       	mov	r6, r30
    44a0:	e8 e1       	ldi	r30, 0x18	; 24
    44a2:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    44a4:	38 e5       	ldi	r19, 0x58	; 88
    44a6:	43 2e       	mov	r4, r19
    44a8:	3a e1       	ldi	r19, 0x1A	; 26
    44aa:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    44ac:	2d e9       	ldi	r18, 0x9D	; 157
    44ae:	22 2e       	mov	r2, r18
    44b0:	2a e1       	ldi	r18, 0x1A	; 26
    44b2:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    44b4:	9e e8       	ldi	r25, 0x8E	; 142
    44b6:	e9 2e       	mov	r14, r25
    44b8:	97 e1       	ldi	r25, 0x17	; 23
    44ba:	f9 2e       	mov	r15, r25
    44bc:	23 c0       	rjmp	.+70     	; 0x4504 <getInstructionGroup+0x154>
    44be:	13 96       	adiw	r26, 0x03	; 3
    44c0:	fc 92       	st	X, r15
    44c2:	ee 92       	st	-X, r14
    44c4:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    44c6:	18 96       	adiw	r26, 0x08	; 8
    44c8:	1c 93       	st	X, r17
    44ca:	18 97       	sbiw	r26, 0x08	; 8
    44cc:	80 91 f3 0e 	lds	r24, 0x0EF3
    44d0:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    44d8:	82 0f       	add	r24, r18
    44da:	93 1f       	adc	r25, r19
    44dc:	90 93 f4 0e 	sts	0x0EF4, r25
    44e0:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    44e4:	40 91 04 01 	lds	r20, 0x0104
    44e8:	50 91 05 01 	lds	r21, 0x0105
    44ec:	42 0f       	add	r20, r18
    44ee:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    44f0:	fa 01       	movw	r30, r20
    44f2:	84 91       	lpm	r24, Z+
    44f4:	8f 3f       	cpi	r24, 0xFF	; 255
    44f6:	09 f4       	brne	.+2      	; 0x44fa <getInstructionGroup+0x14a>
    44f8:	b4 c0       	rjmp	.+360    	; 0x4662 <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    44fa:	1b 96       	adiw	r26, 0x0b	; 11
    44fc:	fd 01       	movw	r30, r26
    44fe:	32 97       	sbiw	r30, 0x02	; 2
    4500:	b1 83       	std	Z+1, r27	; 0x01
    4502:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4504:	fa 01       	movw	r30, r20
    4506:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4508:	4f 5f       	subi	r20, 0xFF	; 255
    450a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    450c:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    450e:	fa 01       	movw	r30, r20
    4510:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4512:	ca 01       	movw	r24, r20
    4514:	01 96       	adiw	r24, 0x01	; 1
    4516:	9a 83       	std	Y+2, r25	; 0x02
    4518:	89 83       	std	Y+1, r24	; 0x01
    451a:	90 93 05 01 	sts	0x0105, r25
    451e:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    4522:	11 96       	adiw	r26, 0x01	; 1
    4524:	2c 93       	st	X, r18
    4526:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    4528:	80 91 f3 0e 	lds	r24, 0x0EF3
    452c:	90 91 f4 0e 	lds	r25, 0x0EF4
    4530:	9c 83       	std	Y+4, r25	; 0x04
    4532:	8b 83       	std	Y+3, r24	; 0x03
    4534:	17 96       	adiw	r26, 0x07	; 7
    4536:	9c 93       	st	X, r25
    4538:	8e 93       	st	-X, r24
    453a:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    453c:	22 23       	and	r18, r18
    453e:	09 f4       	brne	.+2      	; 0x4542 <getInstructionGroup+0x192>
    4540:	be cf       	rjmp	.-132    	; 0x44be <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    4542:	22 30       	cpi	r18, 0x02	; 2
    4544:	39 f1       	breq	.+78     	; 0x4594 <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    4546:	23 30       	cpi	r18, 0x03	; 3
    4548:	09 f4       	brne	.+2      	; 0x454c <getInstructionGroup+0x19c>
    454a:	4b c0       	rjmp	.+150    	; 0x45e2 <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    454c:	24 30       	cpi	r18, 0x04	; 4
    454e:	09 f4       	brne	.+2      	; 0x4552 <getInstructionGroup+0x1a2>
    4550:	68 c0       	rjmp	.+208    	; 0x4622 <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    4552:	25 30       	cpi	r18, 0x05	; 5
    4554:	09 f4       	brne	.+2      	; 0x4558 <getInstructionGroup+0x1a8>
    4556:	73 c0       	rjmp	.+230    	; 0x463e <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    4558:	26 30       	cpi	r18, 0x06	; 6
    455a:	09 f4       	brne	.+2      	; 0x455e <getInstructionGroup+0x1ae>
    455c:	50 c0       	rjmp	.+160    	; 0x45fe <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    455e:	27 30       	cpi	r18, 0x07	; 7
    4560:	09 f4       	brne	.+2      	; 0x4564 <getInstructionGroup+0x1b4>
    4562:	8a c0       	rjmp	.+276    	; 0x4678 <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    4564:	28 30       	cpi	r18, 0x08	; 8
    4566:	09 f4       	brne	.+2      	; 0x456a <getInstructionGroup+0x1ba>
    4568:	99 c0       	rjmp	.+306    	; 0x469c <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    456a:	29 30       	cpi	r18, 0x09	; 9
    456c:	09 f0       	breq	.+2      	; 0x4570 <getInstructionGroup+0x1c0>
    456e:	b2 cf       	rjmp	.-156    	; 0x44d4 <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    4570:	8a ef       	ldi	r24, 0xFA	; 250
    4572:	97 e1       	ldi	r25, 0x17	; 23
    4574:	13 96       	adiw	r26, 0x03	; 3
    4576:	9c 93       	st	X, r25
    4578:	8e 93       	st	-X, r24
    457a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    457c:	eb e8       	ldi	r30, 0x8B	; 139
    457e:	f7 e1       	ldi	r31, 0x17	; 23
    4580:	15 96       	adiw	r26, 0x05	; 5
    4582:	fc 93       	st	X, r31
    4584:	ee 93       	st	-X, r30
    4586:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4588:	18 96       	adiw	r26, 0x08	; 8
    458a:	1c 93       	st	X, r17
    458c:	18 97       	sbiw	r26, 0x08	; 8
    458e:	46 e0       	ldi	r20, 0x06	; 6
    4590:	50 e0       	ldi	r21, 0x00	; 0
    4592:	0d c0       	rjmp	.+26     	; 0x45ae <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4594:	13 96       	adiw	r26, 0x03	; 3
    4596:	5c 92       	st	X, r5
    4598:	4e 92       	st	-X, r4
    459a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    459c:	15 96       	adiw	r26, 0x05	; 5
    459e:	3c 92       	st	X, r3
    45a0:	2e 92       	st	-X, r2
    45a2:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    45a4:	18 96       	adiw	r26, 0x08	; 8
    45a6:	1c 93       	st	X, r17
    45a8:	18 97       	sbiw	r26, 0x08	; 8
    45aa:	46 e0       	ldi	r20, 0x06	; 6
    45ac:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    45b2:	e9 81       	ldd	r30, Y+1	; 0x01
    45b4:	fa 81       	ldd	r31, Y+2	; 0x02
    45b6:	84 91       	lpm	r24, Z+
    45b8:	eb 81       	ldd	r30, Y+3	; 0x03
    45ba:	fc 81       	ldd	r31, Y+4	; 0x04
    45bc:	81 93       	st	Z+, r24
    45be:	fc 83       	std	Y+4, r31	; 0x04
    45c0:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    45c2:	89 81       	ldd	r24, Y+1	; 0x01
    45c4:	9a 81       	ldd	r25, Y+2	; 0x02
    45c6:	01 96       	adiw	r24, 0x01	; 1
    45c8:	9a 83       	std	Y+2, r25	; 0x02
    45ca:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    45cc:	2f 5f       	subi	r18, 0xFF	; 255
    45ce:	3f 4f       	sbci	r19, 0xFF	; 255
    45d0:	24 17       	cp	r18, r20
    45d2:	35 07       	cpc	r19, r21
    45d4:	74 f3       	brlt	.-36     	; 0x45b2 <getInstructionGroup+0x202>
    45d6:	9a 01       	movw	r18, r20
    45d8:	80 91 f3 0e 	lds	r24, 0x0EF3
    45dc:	90 91 f4 0e 	lds	r25, 0x0EF4
    45e0:	7b cf       	rjmp	.-266    	; 0x44d8 <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    45e2:	13 96       	adiw	r26, 0x03	; 3
    45e4:	9c 92       	st	X, r9
    45e6:	8e 92       	st	-X, r8
    45e8:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    45ea:	15 96       	adiw	r26, 0x05	; 5
    45ec:	7c 92       	st	X, r7
    45ee:	6e 92       	st	-X, r6
    45f0:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    45f2:	18 96       	adiw	r26, 0x08	; 8
    45f4:	1c 92       	st	X, r1
    45f6:	18 97       	sbiw	r26, 0x08	; 8
    45f8:	4a e0       	ldi	r20, 0x0A	; 10
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	d8 cf       	rjmp	.-80     	; 0x45ae <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    45fe:	ea e1       	ldi	r30, 0x1A	; 26
    4600:	fd e1       	ldi	r31, 0x1D	; 29
    4602:	13 96       	adiw	r26, 0x03	; 3
    4604:	fc 93       	st	X, r31
    4606:	ee 93       	st	-X, r30
    4608:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    460a:	8c e7       	ldi	r24, 0x7C	; 124
    460c:	9b e1       	ldi	r25, 0x1B	; 27
    460e:	15 96       	adiw	r26, 0x05	; 5
    4610:	9c 93       	st	X, r25
    4612:	8e 93       	st	-X, r24
    4614:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4616:	18 96       	adiw	r26, 0x08	; 8
    4618:	1c 92       	st	X, r1
    461a:	18 97       	sbiw	r26, 0x08	; 8
    461c:	42 e1       	ldi	r20, 0x12	; 18
    461e:	50 e0       	ldi	r21, 0x00	; 0
    4620:	c6 cf       	rjmp	.-116    	; 0x45ae <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4622:	18 96       	adiw	r26, 0x08	; 8
    4624:	1c 93       	st	X, r17
    4626:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4628:	13 96       	adiw	r26, 0x03	; 3
    462a:	dc 92       	st	X, r13
    462c:	ce 92       	st	-X, r12
    462e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    4630:	15 96       	adiw	r26, 0x05	; 5
    4632:	bc 92       	st	X, r11
    4634:	ae 92       	st	-X, r10
    4636:	14 97       	sbiw	r26, 0x04	; 4
    4638:	4e e0       	ldi	r20, 0x0E	; 14
    463a:	50 e0       	ldi	r21, 0x00	; 0
    463c:	b8 cf       	rjmp	.-144    	; 0x45ae <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    463e:	e1 e1       	ldi	r30, 0x11	; 17
    4640:	fb e1       	ldi	r31, 0x1B	; 27
    4642:	13 96       	adiw	r26, 0x03	; 3
    4644:	fc 93       	st	X, r31
    4646:	ee 93       	st	-X, r30
    4648:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    464a:	8d ed       	ldi	r24, 0xDD	; 221
    464c:	9a e1       	ldi	r25, 0x1A	; 26
    464e:	15 96       	adiw	r26, 0x05	; 5
    4650:	9c 93       	st	X, r25
    4652:	8e 93       	st	-X, r24
    4654:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4656:	18 96       	adiw	r26, 0x08	; 8
    4658:	1c 92       	st	X, r1
    465a:	18 97       	sbiw	r26, 0x08	; 8
    465c:	42 e1       	ldi	r20, 0x12	; 18
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	a6 cf       	rjmp	.-180    	; 0x45ae <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    4662:	1a 96       	adiw	r26, 0x0a	; 10
    4664:	1c 92       	st	X, r1
    4666:	1e 92       	st	-X, r1
    4668:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    466a:	4f 5f       	subi	r20, 0xFF	; 255
    466c:	5f 4f       	sbci	r21, 0xFF	; 255
    466e:	50 93 05 01 	sts	0x0105, r21
    4672:	40 93 04 01 	sts	0x0104, r20
    4676:	c6 ce       	rjmp	.-628    	; 0x4404 <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    4678:	ef ef       	ldi	r30, 0xFF	; 255
    467a:	fe e1       	ldi	r31, 0x1E	; 30
    467c:	13 96       	adiw	r26, 0x03	; 3
    467e:	fc 93       	st	X, r31
    4680:	ee 93       	st	-X, r30
    4682:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    4684:	80 e6       	ldi	r24, 0x60	; 96
    4686:	9c e1       	ldi	r25, 0x1C	; 28
    4688:	15 96       	adiw	r26, 0x05	; 5
    468a:	9c 93       	st	X, r25
    468c:	8e 93       	st	-X, r24
    468e:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4690:	18 96       	adiw	r26, 0x08	; 8
    4692:	1c 92       	st	X, r1
    4694:	18 97       	sbiw	r26, 0x08	; 8
    4696:	48 e1       	ldi	r20, 0x18	; 24
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	89 cf       	rjmp	.-238    	; 0x45ae <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    469c:	eb e9       	ldi	r30, 0x9B	; 155
    469e:	f7 e1       	ldi	r31, 0x17	; 23
    46a0:	13 96       	adiw	r26, 0x03	; 3
    46a2:	fc 93       	st	X, r31
    46a4:	ee 93       	st	-X, r30
    46a6:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    46a8:	8f e8       	ldi	r24, 0x8F	; 143
    46aa:	97 e1       	ldi	r25, 0x17	; 23
    46ac:	15 96       	adiw	r26, 0x05	; 5
    46ae:	9c 93       	st	X, r25
    46b0:	8e 93       	st	-X, r24
    46b2:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    46b4:	89 81       	ldd	r24, Y+1	; 0x01
    46b6:	9a 81       	ldd	r25, Y+2	; 0x02
    46b8:	fc 01       	movw	r30, r24
    46ba:	45 91       	lpm	r20, Z+
    46bc:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    46be:	90 93 05 01 	sts	0x0105, r25
    46c2:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    46c6:	44 0f       	add	r20, r20
    46c8:	55 1f       	adc	r21, r21
    46ca:	44 0f       	add	r20, r20
    46cc:	55 1f       	adc	r21, r21
    46ce:	44 0f       	add	r20, r20
    46d0:	55 1f       	adc	r21, r21
    46d2:	4e 5f       	subi	r20, 0xFE	; 254
    46d4:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    46d6:	18 96       	adiw	r26, 0x08	; 8
    46d8:	1c 92       	st	X, r1
    46da:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    46dc:	14 16       	cp	r1, r20
    46de:	15 06       	cpc	r1, r21
    46e0:	0c f4       	brge	.+2      	; 0x46e4 <getInstructionGroup+0x334>
    46e2:	65 cf       	rjmp	.-310    	; 0x45ae <getInstructionGroup+0x1fe>
    46e4:	78 cf       	rjmp	.-272    	; 0x45d6 <getInstructionGroup+0x226>

000046e6 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    46ea:	a0 91 f3 0c 	lds	r26, 0x0CF3
    46ee:	b0 91 f4 0c 	lds	r27, 0x0CF4
    46f2:	a2 30       	cpi	r26, 0x02	; 2
    46f4:	b1 05       	cpc	r27, r1
    46f6:	78 f4       	brcc	.+30     	; 0x4716 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    46f8:	11 97       	sbiw	r26, 0x01	; 1
    46fa:	81 f1       	breq	.+96     	; 0x475c <getPreviousGroup+0x76>
    46fc:	c0 91 04 01 	lds	r28, 0x0104
    4700:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    4704:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <getInstructionGroup>
			dataPtr = tmpPtr;
    4708:	d0 93 05 01 	sts	0x0105, r29
    470c:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    4716:	fd 01       	movw	r30, r26
    4718:	31 97       	sbiw	r30, 0x01	; 1
    471a:	f0 93 f4 0c 	sts	0x0CF4, r31
    471e:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    4722:	aa 0f       	add	r26, r26
    4724:	bb 1f       	adc	r27, r27
    4726:	af 50       	subi	r26, 0x0F	; 15
    4728:	b3 4f       	sbci	r27, 0xF3	; 243
    472a:	ee 0f       	add	r30, r30
    472c:	ff 1f       	adc	r31, r31
    472e:	eb 50       	subi	r30, 0x0B	; 11
    4730:	f3 4f       	sbci	r31, 0xF3	; 243
    4732:	2d 91       	ld	r18, X+
    4734:	3c 91       	ld	r19, X
    4736:	80 81       	ld	r24, Z
    4738:	91 81       	ldd	r25, Z+1	; 0x01
    473a:	28 0f       	add	r18, r24
    473c:	39 1f       	adc	r19, r25
    473e:	80 91 04 01 	lds	r24, 0x0104
    4742:	90 91 05 01 	lds	r25, 0x0105
    4746:	82 1b       	sub	r24, r18
    4748:	93 0b       	sbc	r25, r19
    474a:	90 93 05 01 	sts	0x0105, r25
    474e:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    4752:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    4756:	df 91       	pop	r29
    4758:	cf 91       	pop	r28
    475a:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    475c:	80 91 f5 0c 	lds	r24, 0x0CF5
    4760:	90 91 f6 0c 	lds	r25, 0x0CF6
    4764:	c0 91 04 01 	lds	r28, 0x0104
    4768:	d0 91 05 01 	lds	r29, 0x0105
    476c:	c8 1b       	sub	r28, r24
    476e:	d9 0b       	sbc	r29, r25
    4770:	d0 93 05 01 	sts	0x0105, r29
    4774:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    4778:	10 92 f4 0c 	sts	0x0CF4, r1
    477c:	10 92 f3 0c 	sts	0x0CF3, r1
    4780:	c1 cf       	rjmp	.-126    	; 0x4704 <getPreviousGroup+0x1e>

00004782 <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    4782:	e0 91 f3 0c 	lds	r30, 0x0CF3
    4786:	f0 91 f4 0c 	lds	r31, 0x0CF4
    478a:	ee 0f       	add	r30, r30
    478c:	ff 1f       	adc	r31, r31
    478e:	ed 50       	subi	r30, 0x0D	; 13
    4790:	f3 4f       	sbci	r31, 0xF3	; 243
    4792:	20 81       	ld	r18, Z
    4794:	31 81       	ldd	r19, Z+1	; 0x01
    4796:	80 91 04 01 	lds	r24, 0x0104
    479a:	90 91 05 01 	lds	r25, 0x0105
    479e:	82 1b       	sub	r24, r18
    47a0:	93 0b       	sbc	r25, r19
    47a2:	90 93 05 01 	sts	0x0105, r25
    47a6:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    47aa:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <getInstructionGroup>
}
    47ae:	08 95       	ret

000047b0 <getNextGroup>:

struct instruction_group *getNextGroup() {
    47b0:	cf 93       	push	r28
    47b2:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    47b4:	c0 91 04 01 	lds	r28, 0x0104
    47b8:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    47bc:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <getInstructionGroup>
    47c0:	ac 01       	movw	r20, r24

	if(ig != 0) {
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	d9 f0       	breq	.+54     	; 0x47fc <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    47c6:	20 91 f3 0c 	lds	r18, 0x0CF3
    47ca:	30 91 f4 0c 	lds	r19, 0x0CF4
    47ce:	f9 01       	movw	r30, r18
    47d0:	ee 0f       	add	r30, r30
    47d2:	ff 1f       	adc	r31, r31
    47d4:	eb 50       	subi	r30, 0x0B	; 11
    47d6:	f3 4f       	sbci	r31, 0xF3	; 243
    47d8:	80 91 04 01 	lds	r24, 0x0104
    47dc:	90 91 05 01 	lds	r25, 0x0105
    47e0:	8c 1b       	sub	r24, r28
    47e2:	9d 0b       	sbc	r25, r29
    47e4:	91 83       	std	Z+1, r25	; 0x01
    47e6:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    47e8:	2f 5f       	subi	r18, 0xFF	; 255
    47ea:	3f 4f       	sbci	r19, 0xFF	; 255
    47ec:	30 93 f4 0c 	sts	0x0CF4, r19
    47f0:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    47f4:	ca 01       	movw	r24, r20
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    47fc:	0e 94 c1 23 	call	0x4782	; 0x4782 <getLastGroup>
    4800:	ac 01       	movw	r20, r24
    4802:	f8 cf       	rjmp	.-16     	; 0x47f4 <getNextGroup+0x44>

00004804 <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    4804:	10 92 f4 0c 	sts	0x0CF4, r1
    4808:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    480c:	8e ef       	ldi	r24, 0xFE	; 254
    480e:	91 e0       	ldi	r25, 0x01	; 1
    4810:	e5 ef       	ldi	r30, 0xF5	; 245
    4812:	fc e0       	ldi	r31, 0x0C	; 12
    4814:	df 01       	movw	r26, r30
    4816:	9c 01       	movw	r18, r24
    4818:	1d 92       	st	X+, r1
    481a:	21 50       	subi	r18, 0x01	; 1
    481c:	30 40       	sbci	r19, 0x00	; 0
    481e:	e1 f7       	brne	.-8      	; 0x4818 <initDecoder+0x14>
}
    4820:	08 95       	ret

00004822 <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    4822:	9c 01       	movw	r18, r24
    4824:	97 fd       	sbrc	r25, 7
    4826:	02 c0       	rjmp	.+4      	; 0x482c <abs+0xa>
    4828:	c9 01       	movw	r24, r18
    482a:	08 95       	ret
    482c:	30 95       	com	r19
    482e:	21 95       	neg	r18
    4830:	3f 4f       	sbci	r19, 0xFF	; 255
    4832:	c9 01       	movw	r24, r18
    4834:	08 95       	ret

00004836 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    4836:	86 30       	cpi	r24, 0x06	; 6
    4838:	91 05       	cpc	r25, r1
    483a:	24 f0       	brlt	.+8      	; 0x4844 <setRGBColor+0xe>
		if(led == 6) {
    483c:	86 30       	cpi	r24, 0x06	; 6
    483e:	91 05       	cpc	r25, r1
    4840:	89 f0       	breq	.+34     	; 0x4864 <setRGBColor+0x2e>
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	fc 01       	movw	r30, r24
    4846:	ee 0f       	add	r30, r30
    4848:	ff 1f       	adc	r31, r31
    484a:	e8 0f       	add	r30, r24
    484c:	f9 1f       	adc	r31, r25
    484e:	ee 0f       	add	r30, r30
    4850:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    4852:	e5 51       	subi	r30, 0x15	; 21
    4854:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    4856:	71 83       	std	Z+1, r23	; 0x01
    4858:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    485a:	55 83       	std	Z+5, r21	; 0x05
    485c:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    485e:	33 83       	std	Z+3, r19	; 0x03
    4860:	22 83       	std	Z+2, r18	; 0x02



}
    4862:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    4864:	e2 e4       	ldi	r30, 0x42	; 66
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	f4 cf       	rjmp	.-24     	; 0x4852 <setRGBColor+0x1c>

0000486a <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    486a:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    486c:	86 30       	cpi	r24, 0x06	; 6
    486e:	91 05       	cpc	r25, r1
    4870:	24 f0       	brlt	.+8      	; 0x487a <getRGBColor+0x10>
		if(led == 6) {
    4872:	86 30       	cpi	r24, 0x06	; 6
    4874:	91 05       	cpc	r25, r1
    4876:	e1 f0       	breq	.+56     	; 0x48b0 <getRGBColor+0x46>
    4878:	01 97       	sbiw	r24, 0x01	; 1
    487a:	fc 01       	movw	r30, r24
    487c:	ee 0f       	add	r30, r30
    487e:	ff 1f       	adc	r31, r31
    4880:	e8 0f       	add	r30, r24
    4882:	f9 1f       	adc	r31, r25
    4884:	ee 0f       	add	r30, r30
    4886:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    4888:	e5 51       	subi	r30, 0x15	; 21
    488a:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    488c:	80 81       	ld	r24, Z
    488e:	91 81       	ldd	r25, Z+1	; 0x01
    4890:	11 96       	adiw	r26, 0x01	; 1
    4892:	9c 93       	st	X, r25
    4894:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    4896:	84 81       	ldd	r24, Z+4	; 0x04
    4898:	95 81       	ldd	r25, Z+5	; 0x05
    489a:	13 96       	adiw	r26, 0x03	; 3
    489c:	9c 93       	st	X, r25
    489e:	8e 93       	st	-X, r24
    48a0:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    48a2:	82 81       	ldd	r24, Z+2	; 0x02
    48a4:	93 81       	ldd	r25, Z+3	; 0x03
    48a6:	15 96       	adiw	r26, 0x05	; 5
    48a8:	9c 93       	st	X, r25
    48aa:	8e 93       	st	-X, r24
    48ac:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    48ae:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    48b0:	e2 e4       	ldi	r30, 0x42	; 66
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	e9 cf       	rjmp	.-46     	; 0x4888 <getRGBColor+0x1e>

000048b6 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    48b6:	43 e2       	ldi	r20, 0x23	; 35
    48b8:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    48ba:	fa 01       	movw	r30, r20
    48bc:	ee 0f       	add	r30, r30
    48be:	ff 1f       	adc	r31, r31
    48c0:	e5 51       	subi	r30, 0x15	; 21
    48c2:	fd 4f       	sbci	r31, 0xFD	; 253
    48c4:	01 90       	ld	r0, Z+
    48c6:	f0 81       	ld	r31, Z
    48c8:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    48ca:	e2 95       	swap	r30
    48cc:	f2 95       	swap	r31
    48ce:	f0 7f       	andi	r31, 0xF0	; 240
    48d0:	fe 27       	eor	r31, r30
    48d2:	e0 7f       	andi	r30, 0xF0	; 240
    48d4:	fe 27       	eor	r31, r30
    48d6:	2c e0       	ldi	r18, 0x0C	; 12
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	08 c0       	rjmp	.+16     	; 0x48ec <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    48dc:	8b b3       	in	r24, 0x1b	; 27
    48de:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    48e0:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    48e2:	8b b3       	in	r24, 0x1b	; 27
    48e4:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    48e6:	21 15       	cp	r18, r1
    48e8:	31 05       	cpc	r19, r1
    48ea:	91 f0       	breq	.+36     	; 0x4910 <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    48ec:	21 50       	subi	r18, 0x01	; 1
    48ee:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    48f0:	cf 01       	movw	r24, r30
    48f2:	02 2e       	mov	r0, r18
    48f4:	02 c0       	rjmp	.+4      	; 0x48fa <displayColors+0x44>
    48f6:	95 95       	asr	r25
    48f8:	87 95       	ror	r24
    48fa:	0a 94       	dec	r0
    48fc:	e2 f7       	brpl	.-8      	; 0x48f6 <displayColors+0x40>
    48fe:	80 ff       	sbrs	r24, 0
    4900:	ed cf       	rjmp	.-38     	; 0x48dc <displayColors+0x26>
				PINHIGH(BDI);
    4902:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    4904:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    4906:	8b b3       	in	r24, 0x1b	; 27
    4908:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    490a:	21 15       	cp	r18, r1
    490c:	31 05       	cpc	r19, r1
    490e:	71 f7       	brne	.-36     	; 0x48ec <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    4910:	42 31       	cpi	r20, 0x12	; 18
    4912:	51 05       	cpc	r21, r1
    4914:	41 f0       	breq	.+16     	; 0x4926 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    4916:	41 50       	subi	r20, 0x01	; 1
    4918:	50 40       	sbci	r21, 0x00	; 0
    491a:	57 ff       	sbrs	r21, 7
    491c:	ce cf       	rjmp	.-100    	; 0x48ba <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    491e:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    4920:	8b b3       	in	r24, 0x1b	; 27
    4922:	1b ba       	out	0x1b, r1	; 27
}
    4924:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    4926:	8b b3       	in	r24, 0x1b	; 27
    4928:	1b ba       	out	0x1b, r1	; 27
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    492e:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    4930:	2b b3       	in	r18, 0x1b	; 27
    4932:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    4934:	01 96       	adiw	r24, 0x01	; 1
    4936:	88 34       	cpi	r24, 0x48	; 72
    4938:	91 05       	cpc	r25, r1
    493a:	c9 f7       	brne	.-14     	; 0x492e <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    493c:	41 e1       	ldi	r20, 0x11	; 17
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	bc cf       	rjmp	.-136    	; 0x48ba <displayColors+0x4>

00004942 <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4942:	10 92 ec 02 	sts	0x02EC, r1
    4946:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    494a:	10 92 f0 02 	sts	0x02F0, r1
    494e:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    4952:	10 92 ee 02 	sts	0x02EE, r1
    4956:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    495a:	10 92 f2 02 	sts	0x02F2, r1
    495e:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    4962:	10 92 f6 02 	sts	0x02F6, r1
    4966:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    496a:	10 92 f4 02 	sts	0x02F4, r1
    496e:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    4972:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4976:	84 e6       	ldi	r24, 0x64	; 100
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	90 93 ec 02 	sts	0x02EC, r25
    497e:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    4982:	10 92 f0 02 	sts	0x02F0, r1
    4986:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    498a:	10 92 ee 02 	sts	0x02EE, r1
    498e:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4992:	90 93 f2 02 	sts	0x02F2, r25
    4996:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    499a:	10 92 f6 02 	sts	0x02F6, r1
    499e:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    49a2:	10 92 f4 02 	sts	0x02F4, r1
    49a6:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    49aa:	90 91 06 01 	lds	r25, 0x0106
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    49b2:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    49b4:	86 b7       	in	r24, 0x36	; 54
    49b6:	89 23       	and	r24, r25
    49b8:	e9 f3       	breq	.-6      	; 0x49b4 <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    49ba:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    49bc:	2f 5f       	subi	r18, 0xFF	; 255
    49be:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    49c0:	22 33       	cpi	r18, 0x32	; 50
    49c2:	31 05       	cpc	r19, r1
    49c4:	b9 f7       	brne	.-18     	; 0x49b4 <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    49c6:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    49ca:	10 92 ec 02 	sts	0x02EC, r1
    49ce:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    49d2:	10 92 f0 02 	sts	0x02F0, r1
    49d6:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    49da:	10 92 ee 02 	sts	0x02EE, r1
    49de:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    49e2:	10 92 f2 02 	sts	0x02F2, r1
    49e6:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    49ea:	10 92 f6 02 	sts	0x02F6, r1
    49ee:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    49f2:	10 92 f4 02 	sts	0x02F4, r1
    49f6:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    49fa:	90 91 06 01 	lds	r25, 0x0106
    49fe:	20 e0       	ldi	r18, 0x00	; 0
    4a00:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    4a02:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4a04:	86 b7       	in	r24, 0x36	; 54
    4a06:	89 23       	and	r24, r25
    4a08:	e9 f3       	breq	.-6      	; 0x4a04 <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    4a0a:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    4a0c:	2f 5f       	subi	r18, 0xFF	; 255
    4a0e:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    4a10:	22 33       	cpi	r18, 0x32	; 50
    4a12:	31 05       	cpc	r19, r1
    4a14:	b9 f7       	brne	.-18     	; 0x4a04 <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    4a16:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <displayColors>
}
    4a1a:	08 95       	ret

00004a1c <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4a1c:	90 91 06 01 	lds	r25, 0x0106
    4a20:	86 b7       	in	r24, 0x36	; 54
    4a22:	89 23       	and	r24, r25
    4a24:	e9 f3       	breq	.-6      	; 0x4a20 <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    4a26:	80 e1       	ldi	r24, 0x10	; 16
    4a28:	86 bf       	out	0x36, r24	; 54
}
    4a2a:	08 95       	ret

00004a2c <copy_data>:

void copy_data(char *dest, char *src, short length) {
    4a2c:	cf 93       	push	r28
    4a2e:	df 93       	push	r29
    4a30:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    4a32:	14 16       	cp	r1, r20
    4a34:	15 06       	cpc	r1, r21
    4a36:	7c f4       	brge	.+30     	; 0x4a56 <copy_data+0x2a>
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4a3c:	fe 01       	movw	r30, r28
    4a3e:	e2 0f       	add	r30, r18
    4a40:	f3 1f       	adc	r31, r19
    4a42:	db 01       	movw	r26, r22
    4a44:	a2 0f       	add	r26, r18
    4a46:	b3 1f       	adc	r27, r19
    4a48:	8c 91       	ld	r24, X
    4a4a:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    4a4c:	2f 5f       	subi	r18, 0xFF	; 255
    4a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a50:	24 17       	cp	r18, r20
    4a52:	35 07       	cpc	r19, r21
    4a54:	9c f3       	brlt	.-26     	; 0x4a3c <copy_data+0x10>
		dest[i] = src[i];
	}
}
    4a56:	df 91       	pop	r29
    4a58:	cf 91       	pop	r28
    4a5a:	08 95       	ret

00004a5c <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    4a5c:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    4a5e:	14 16       	cp	r1, r20
    4a60:	15 06       	cpc	r1, r21
    4a62:	64 f4       	brge	.+24     	; 0x4a7c <copy_short_data+0x20>
    4a64:	db 01       	movw	r26, r22
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4a6a:	8d 91       	ld	r24, X+
    4a6c:	9d 91       	ld	r25, X+
    4a6e:	81 93       	st	Z+, r24
    4a70:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    4a72:	2f 5f       	subi	r18, 0xFF	; 255
    4a74:	3f 4f       	sbci	r19, 0xFF	; 255
    4a76:	24 17       	cp	r18, r20
    4a78:	35 07       	cpc	r19, r21
    4a7a:	bc f3       	brlt	.-18     	; 0x4a6a <copy_short_data+0xe>
    4a7c:	08 95       	ret

00004a7e <_fpadd_parts>:
    4a7e:	a0 e0       	ldi	r26, 0x00	; 0
    4a80:	b0 e0       	ldi	r27, 0x00	; 0
    4a82:	e5 e4       	ldi	r30, 0x45	; 69
    4a84:	f5 e2       	ldi	r31, 0x25	; 37
    4a86:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__prologue_saves__>
    4a8a:	dc 01       	movw	r26, r24
    4a8c:	2b 01       	movw	r4, r22
    4a8e:	fa 01       	movw	r30, r20
    4a90:	9c 91       	ld	r25, X
    4a92:	92 30       	cpi	r25, 0x02	; 2
    4a94:	08 f4       	brcc	.+2      	; 0x4a98 <_fpadd_parts+0x1a>
    4a96:	39 c1       	rjmp	.+626    	; 0x4d0a <_fpadd_parts+0x28c>
    4a98:	eb 01       	movw	r28, r22
    4a9a:	88 81       	ld	r24, Y
    4a9c:	82 30       	cpi	r24, 0x02	; 2
    4a9e:	08 f4       	brcc	.+2      	; 0x4aa2 <_fpadd_parts+0x24>
    4aa0:	33 c1       	rjmp	.+614    	; 0x4d08 <_fpadd_parts+0x28a>
    4aa2:	94 30       	cpi	r25, 0x04	; 4
    4aa4:	69 f4       	brne	.+26     	; 0x4ac0 <_fpadd_parts+0x42>
    4aa6:	84 30       	cpi	r24, 0x04	; 4
    4aa8:	09 f0       	breq	.+2      	; 0x4aac <_fpadd_parts+0x2e>
    4aaa:	2f c1       	rjmp	.+606    	; 0x4d0a <_fpadd_parts+0x28c>
    4aac:	11 96       	adiw	r26, 0x01	; 1
    4aae:	9c 91       	ld	r25, X
    4ab0:	11 97       	sbiw	r26, 0x01	; 1
    4ab2:	89 81       	ldd	r24, Y+1	; 0x01
    4ab4:	98 17       	cp	r25, r24
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <_fpadd_parts+0x3c>
    4ab8:	28 c1       	rjmp	.+592    	; 0x4d0a <_fpadd_parts+0x28c>
    4aba:	a7 e0       	ldi	r26, 0x07	; 7
    4abc:	b1 e0       	ldi	r27, 0x01	; 1
    4abe:	25 c1       	rjmp	.+586    	; 0x4d0a <_fpadd_parts+0x28c>
    4ac0:	84 30       	cpi	r24, 0x04	; 4
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <_fpadd_parts+0x48>
    4ac4:	21 c1       	rjmp	.+578    	; 0x4d08 <_fpadd_parts+0x28a>
    4ac6:	82 30       	cpi	r24, 0x02	; 2
    4ac8:	a9 f4       	brne	.+42     	; 0x4af4 <_fpadd_parts+0x76>
    4aca:	92 30       	cpi	r25, 0x02	; 2
    4acc:	09 f0       	breq	.+2      	; 0x4ad0 <_fpadd_parts+0x52>
    4ace:	1d c1       	rjmp	.+570    	; 0x4d0a <_fpadd_parts+0x28c>
    4ad0:	9a 01       	movw	r18, r20
    4ad2:	ad 01       	movw	r20, r26
    4ad4:	88 e0       	ldi	r24, 0x08	; 8
    4ad6:	ea 01       	movw	r28, r20
    4ad8:	09 90       	ld	r0, Y+
    4ada:	ae 01       	movw	r20, r28
    4adc:	e9 01       	movw	r28, r18
    4ade:	09 92       	st	Y+, r0
    4ae0:	9e 01       	movw	r18, r28
    4ae2:	81 50       	subi	r24, 0x01	; 1
    4ae4:	c1 f7       	brne	.-16     	; 0x4ad6 <_fpadd_parts+0x58>
    4ae6:	e2 01       	movw	r28, r4
    4ae8:	89 81       	ldd	r24, Y+1	; 0x01
    4aea:	11 96       	adiw	r26, 0x01	; 1
    4aec:	9c 91       	ld	r25, X
    4aee:	89 23       	and	r24, r25
    4af0:	81 83       	std	Z+1, r24	; 0x01
    4af2:	08 c1       	rjmp	.+528    	; 0x4d04 <_fpadd_parts+0x286>
    4af4:	92 30       	cpi	r25, 0x02	; 2
    4af6:	09 f4       	brne	.+2      	; 0x4afa <_fpadd_parts+0x7c>
    4af8:	07 c1       	rjmp	.+526    	; 0x4d08 <_fpadd_parts+0x28a>
    4afa:	12 96       	adiw	r26, 0x02	; 2
    4afc:	2d 90       	ld	r2, X+
    4afe:	3c 90       	ld	r3, X
    4b00:	13 97       	sbiw	r26, 0x03	; 3
    4b02:	eb 01       	movw	r28, r22
    4b04:	8a 81       	ldd	r24, Y+2	; 0x02
    4b06:	9b 81       	ldd	r25, Y+3	; 0x03
    4b08:	14 96       	adiw	r26, 0x04	; 4
    4b0a:	ad 90       	ld	r10, X+
    4b0c:	bd 90       	ld	r11, X+
    4b0e:	cd 90       	ld	r12, X+
    4b10:	dc 90       	ld	r13, X
    4b12:	17 97       	sbiw	r26, 0x07	; 7
    4b14:	ec 80       	ldd	r14, Y+4	; 0x04
    4b16:	fd 80       	ldd	r15, Y+5	; 0x05
    4b18:	0e 81       	ldd	r16, Y+6	; 0x06
    4b1a:	1f 81       	ldd	r17, Y+7	; 0x07
    4b1c:	91 01       	movw	r18, r2
    4b1e:	28 1b       	sub	r18, r24
    4b20:	39 0b       	sbc	r19, r25
    4b22:	b9 01       	movw	r22, r18
    4b24:	37 ff       	sbrs	r19, 7
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <_fpadd_parts+0xb2>
    4b28:	66 27       	eor	r22, r22
    4b2a:	77 27       	eor	r23, r23
    4b2c:	62 1b       	sub	r22, r18
    4b2e:	73 0b       	sbc	r23, r19
    4b30:	60 32       	cpi	r22, 0x20	; 32
    4b32:	71 05       	cpc	r23, r1
    4b34:	0c f0       	brlt	.+2      	; 0x4b38 <_fpadd_parts+0xba>
    4b36:	61 c0       	rjmp	.+194    	; 0x4bfa <_fpadd_parts+0x17c>
    4b38:	12 16       	cp	r1, r18
    4b3a:	13 06       	cpc	r1, r19
    4b3c:	6c f5       	brge	.+90     	; 0x4b98 <_fpadd_parts+0x11a>
    4b3e:	37 01       	movw	r6, r14
    4b40:	48 01       	movw	r8, r16
    4b42:	06 2e       	mov	r0, r22
    4b44:	04 c0       	rjmp	.+8      	; 0x4b4e <_fpadd_parts+0xd0>
    4b46:	96 94       	lsr	r9
    4b48:	87 94       	ror	r8
    4b4a:	77 94       	ror	r7
    4b4c:	67 94       	ror	r6
    4b4e:	0a 94       	dec	r0
    4b50:	d2 f7       	brpl	.-12     	; 0x4b46 <_fpadd_parts+0xc8>
    4b52:	21 e0       	ldi	r18, 0x01	; 1
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	40 e0       	ldi	r20, 0x00	; 0
    4b58:	50 e0       	ldi	r21, 0x00	; 0
    4b5a:	04 c0       	rjmp	.+8      	; 0x4b64 <_fpadd_parts+0xe6>
    4b5c:	22 0f       	add	r18, r18
    4b5e:	33 1f       	adc	r19, r19
    4b60:	44 1f       	adc	r20, r20
    4b62:	55 1f       	adc	r21, r21
    4b64:	6a 95       	dec	r22
    4b66:	d2 f7       	brpl	.-12     	; 0x4b5c <_fpadd_parts+0xde>
    4b68:	21 50       	subi	r18, 0x01	; 1
    4b6a:	30 40       	sbci	r19, 0x00	; 0
    4b6c:	40 40       	sbci	r20, 0x00	; 0
    4b6e:	50 40       	sbci	r21, 0x00	; 0
    4b70:	2e 21       	and	r18, r14
    4b72:	3f 21       	and	r19, r15
    4b74:	40 23       	and	r20, r16
    4b76:	51 23       	and	r21, r17
    4b78:	21 15       	cp	r18, r1
    4b7a:	31 05       	cpc	r19, r1
    4b7c:	41 05       	cpc	r20, r1
    4b7e:	51 05       	cpc	r21, r1
    4b80:	21 f0       	breq	.+8      	; 0x4b8a <_fpadd_parts+0x10c>
    4b82:	21 e0       	ldi	r18, 0x01	; 1
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	50 e0       	ldi	r21, 0x00	; 0
    4b8a:	79 01       	movw	r14, r18
    4b8c:	8a 01       	movw	r16, r20
    4b8e:	e6 28       	or	r14, r6
    4b90:	f7 28       	or	r15, r7
    4b92:	08 29       	or	r16, r8
    4b94:	19 29       	or	r17, r9
    4b96:	3c c0       	rjmp	.+120    	; 0x4c10 <_fpadd_parts+0x192>
    4b98:	23 2b       	or	r18, r19
    4b9a:	d1 f1       	breq	.+116    	; 0x4c10 <_fpadd_parts+0x192>
    4b9c:	26 0e       	add	r2, r22
    4b9e:	37 1e       	adc	r3, r23
    4ba0:	35 01       	movw	r6, r10
    4ba2:	46 01       	movw	r8, r12
    4ba4:	06 2e       	mov	r0, r22
    4ba6:	04 c0       	rjmp	.+8      	; 0x4bb0 <_fpadd_parts+0x132>
    4ba8:	96 94       	lsr	r9
    4baa:	87 94       	ror	r8
    4bac:	77 94       	ror	r7
    4bae:	67 94       	ror	r6
    4bb0:	0a 94       	dec	r0
    4bb2:	d2 f7       	brpl	.-12     	; 0x4ba8 <_fpadd_parts+0x12a>
    4bb4:	21 e0       	ldi	r18, 0x01	; 1
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e0       	ldi	r20, 0x00	; 0
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	04 c0       	rjmp	.+8      	; 0x4bc6 <_fpadd_parts+0x148>
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	44 1f       	adc	r20, r20
    4bc4:	55 1f       	adc	r21, r21
    4bc6:	6a 95       	dec	r22
    4bc8:	d2 f7       	brpl	.-12     	; 0x4bbe <_fpadd_parts+0x140>
    4bca:	21 50       	subi	r18, 0x01	; 1
    4bcc:	30 40       	sbci	r19, 0x00	; 0
    4bce:	40 40       	sbci	r20, 0x00	; 0
    4bd0:	50 40       	sbci	r21, 0x00	; 0
    4bd2:	2a 21       	and	r18, r10
    4bd4:	3b 21       	and	r19, r11
    4bd6:	4c 21       	and	r20, r12
    4bd8:	5d 21       	and	r21, r13
    4bda:	21 15       	cp	r18, r1
    4bdc:	31 05       	cpc	r19, r1
    4bde:	41 05       	cpc	r20, r1
    4be0:	51 05       	cpc	r21, r1
    4be2:	21 f0       	breq	.+8      	; 0x4bec <_fpadd_parts+0x16e>
    4be4:	21 e0       	ldi	r18, 0x01	; 1
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	40 e0       	ldi	r20, 0x00	; 0
    4bea:	50 e0       	ldi	r21, 0x00	; 0
    4bec:	59 01       	movw	r10, r18
    4bee:	6a 01       	movw	r12, r20
    4bf0:	a6 28       	or	r10, r6
    4bf2:	b7 28       	or	r11, r7
    4bf4:	c8 28       	or	r12, r8
    4bf6:	d9 28       	or	r13, r9
    4bf8:	0b c0       	rjmp	.+22     	; 0x4c10 <_fpadd_parts+0x192>
    4bfa:	82 15       	cp	r24, r2
    4bfc:	93 05       	cpc	r25, r3
    4bfe:	2c f0       	brlt	.+10     	; 0x4c0a <_fpadd_parts+0x18c>
    4c00:	1c 01       	movw	r2, r24
    4c02:	aa 24       	eor	r10, r10
    4c04:	bb 24       	eor	r11, r11
    4c06:	65 01       	movw	r12, r10
    4c08:	03 c0       	rjmp	.+6      	; 0x4c10 <_fpadd_parts+0x192>
    4c0a:	ee 24       	eor	r14, r14
    4c0c:	ff 24       	eor	r15, r15
    4c0e:	87 01       	movw	r16, r14
    4c10:	11 96       	adiw	r26, 0x01	; 1
    4c12:	9c 91       	ld	r25, X
    4c14:	d2 01       	movw	r26, r4
    4c16:	11 96       	adiw	r26, 0x01	; 1
    4c18:	8c 91       	ld	r24, X
    4c1a:	98 17       	cp	r25, r24
    4c1c:	09 f4       	brne	.+2      	; 0x4c20 <_fpadd_parts+0x1a2>
    4c1e:	45 c0       	rjmp	.+138    	; 0x4caa <_fpadd_parts+0x22c>
    4c20:	99 23       	and	r25, r25
    4c22:	39 f0       	breq	.+14     	; 0x4c32 <_fpadd_parts+0x1b4>
    4c24:	a8 01       	movw	r20, r16
    4c26:	97 01       	movw	r18, r14
    4c28:	2a 19       	sub	r18, r10
    4c2a:	3b 09       	sbc	r19, r11
    4c2c:	4c 09       	sbc	r20, r12
    4c2e:	5d 09       	sbc	r21, r13
    4c30:	06 c0       	rjmp	.+12     	; 0x4c3e <_fpadd_parts+0x1c0>
    4c32:	a6 01       	movw	r20, r12
    4c34:	95 01       	movw	r18, r10
    4c36:	2e 19       	sub	r18, r14
    4c38:	3f 09       	sbc	r19, r15
    4c3a:	40 0b       	sbc	r20, r16
    4c3c:	51 0b       	sbc	r21, r17
    4c3e:	57 fd       	sbrc	r21, 7
    4c40:	08 c0       	rjmp	.+16     	; 0x4c52 <_fpadd_parts+0x1d4>
    4c42:	11 82       	std	Z+1, r1	; 0x01
    4c44:	33 82       	std	Z+3, r3	; 0x03
    4c46:	22 82       	std	Z+2, r2	; 0x02
    4c48:	24 83       	std	Z+4, r18	; 0x04
    4c4a:	35 83       	std	Z+5, r19	; 0x05
    4c4c:	46 83       	std	Z+6, r20	; 0x06
    4c4e:	57 83       	std	Z+7, r21	; 0x07
    4c50:	1d c0       	rjmp	.+58     	; 0x4c8c <_fpadd_parts+0x20e>
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	81 83       	std	Z+1, r24	; 0x01
    4c56:	33 82       	std	Z+3, r3	; 0x03
    4c58:	22 82       	std	Z+2, r2	; 0x02
    4c5a:	88 27       	eor	r24, r24
    4c5c:	99 27       	eor	r25, r25
    4c5e:	dc 01       	movw	r26, r24
    4c60:	82 1b       	sub	r24, r18
    4c62:	93 0b       	sbc	r25, r19
    4c64:	a4 0b       	sbc	r26, r20
    4c66:	b5 0b       	sbc	r27, r21
    4c68:	84 83       	std	Z+4, r24	; 0x04
    4c6a:	95 83       	std	Z+5, r25	; 0x05
    4c6c:	a6 83       	std	Z+6, r26	; 0x06
    4c6e:	b7 83       	std	Z+7, r27	; 0x07
    4c70:	0d c0       	rjmp	.+26     	; 0x4c8c <_fpadd_parts+0x20e>
    4c72:	22 0f       	add	r18, r18
    4c74:	33 1f       	adc	r19, r19
    4c76:	44 1f       	adc	r20, r20
    4c78:	55 1f       	adc	r21, r21
    4c7a:	24 83       	std	Z+4, r18	; 0x04
    4c7c:	35 83       	std	Z+5, r19	; 0x05
    4c7e:	46 83       	std	Z+6, r20	; 0x06
    4c80:	57 83       	std	Z+7, r21	; 0x07
    4c82:	82 81       	ldd	r24, Z+2	; 0x02
    4c84:	93 81       	ldd	r25, Z+3	; 0x03
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	93 83       	std	Z+3, r25	; 0x03
    4c8a:	82 83       	std	Z+2, r24	; 0x02
    4c8c:	24 81       	ldd	r18, Z+4	; 0x04
    4c8e:	35 81       	ldd	r19, Z+5	; 0x05
    4c90:	46 81       	ldd	r20, Z+6	; 0x06
    4c92:	57 81       	ldd	r21, Z+7	; 0x07
    4c94:	da 01       	movw	r26, r20
    4c96:	c9 01       	movw	r24, r18
    4c98:	01 97       	sbiw	r24, 0x01	; 1
    4c9a:	a1 09       	sbc	r26, r1
    4c9c:	b1 09       	sbc	r27, r1
    4c9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca2:	af 4f       	sbci	r26, 0xFF	; 255
    4ca4:	bf 43       	sbci	r27, 0x3F	; 63
    4ca6:	28 f3       	brcs	.-54     	; 0x4c72 <_fpadd_parts+0x1f4>
    4ca8:	0b c0       	rjmp	.+22     	; 0x4cc0 <_fpadd_parts+0x242>
    4caa:	91 83       	std	Z+1, r25	; 0x01
    4cac:	33 82       	std	Z+3, r3	; 0x03
    4cae:	22 82       	std	Z+2, r2	; 0x02
    4cb0:	ea 0c       	add	r14, r10
    4cb2:	fb 1c       	adc	r15, r11
    4cb4:	0c 1d       	adc	r16, r12
    4cb6:	1d 1d       	adc	r17, r13
    4cb8:	e4 82       	std	Z+4, r14	; 0x04
    4cba:	f5 82       	std	Z+5, r15	; 0x05
    4cbc:	06 83       	std	Z+6, r16	; 0x06
    4cbe:	17 83       	std	Z+7, r17	; 0x07
    4cc0:	83 e0       	ldi	r24, 0x03	; 3
    4cc2:	80 83       	st	Z, r24
    4cc4:	24 81       	ldd	r18, Z+4	; 0x04
    4cc6:	35 81       	ldd	r19, Z+5	; 0x05
    4cc8:	46 81       	ldd	r20, Z+6	; 0x06
    4cca:	57 81       	ldd	r21, Z+7	; 0x07
    4ccc:	57 ff       	sbrs	r21, 7
    4cce:	1a c0       	rjmp	.+52     	; 0x4d04 <_fpadd_parts+0x286>
    4cd0:	c9 01       	movw	r24, r18
    4cd2:	aa 27       	eor	r26, r26
    4cd4:	97 fd       	sbrc	r25, 7
    4cd6:	a0 95       	com	r26
    4cd8:	ba 2f       	mov	r27, r26
    4cda:	81 70       	andi	r24, 0x01	; 1
    4cdc:	90 70       	andi	r25, 0x00	; 0
    4cde:	a0 70       	andi	r26, 0x00	; 0
    4ce0:	b0 70       	andi	r27, 0x00	; 0
    4ce2:	56 95       	lsr	r21
    4ce4:	47 95       	ror	r20
    4ce6:	37 95       	ror	r19
    4ce8:	27 95       	ror	r18
    4cea:	82 2b       	or	r24, r18
    4cec:	93 2b       	or	r25, r19
    4cee:	a4 2b       	or	r26, r20
    4cf0:	b5 2b       	or	r27, r21
    4cf2:	84 83       	std	Z+4, r24	; 0x04
    4cf4:	95 83       	std	Z+5, r25	; 0x05
    4cf6:	a6 83       	std	Z+6, r26	; 0x06
    4cf8:	b7 83       	std	Z+7, r27	; 0x07
    4cfa:	82 81       	ldd	r24, Z+2	; 0x02
    4cfc:	93 81       	ldd	r25, Z+3	; 0x03
    4cfe:	01 96       	adiw	r24, 0x01	; 1
    4d00:	93 83       	std	Z+3, r25	; 0x03
    4d02:	82 83       	std	Z+2, r24	; 0x02
    4d04:	df 01       	movw	r26, r30
    4d06:	01 c0       	rjmp	.+2      	; 0x4d0a <_fpadd_parts+0x28c>
    4d08:	d2 01       	movw	r26, r4
    4d0a:	cd 01       	movw	r24, r26
    4d0c:	cd b7       	in	r28, 0x3d	; 61
    4d0e:	de b7       	in	r29, 0x3e	; 62
    4d10:	e2 e1       	ldi	r30, 0x12	; 18
    4d12:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__epilogue_restores__>

00004d16 <__subsf3>:
    4d16:	a0 e2       	ldi	r26, 0x20	; 32
    4d18:	b0 e0       	ldi	r27, 0x00	; 0
    4d1a:	e1 e9       	ldi	r30, 0x91	; 145
    4d1c:	f6 e2       	ldi	r31, 0x26	; 38
    4d1e:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
    4d22:	69 83       	std	Y+1, r22	; 0x01
    4d24:	7a 83       	std	Y+2, r23	; 0x02
    4d26:	8b 83       	std	Y+3, r24	; 0x03
    4d28:	9c 83       	std	Y+4, r25	; 0x04
    4d2a:	2d 83       	std	Y+5, r18	; 0x05
    4d2c:	3e 83       	std	Y+6, r19	; 0x06
    4d2e:	4f 83       	std	Y+7, r20	; 0x07
    4d30:	58 87       	std	Y+8, r21	; 0x08
    4d32:	e9 e0       	ldi	r30, 0x09	; 9
    4d34:	ee 2e       	mov	r14, r30
    4d36:	f1 2c       	mov	r15, r1
    4d38:	ec 0e       	add	r14, r28
    4d3a:	fd 1e       	adc	r15, r29
    4d3c:	ce 01       	movw	r24, r28
    4d3e:	01 96       	adiw	r24, 0x01	; 1
    4d40:	b7 01       	movw	r22, r14
    4d42:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4d46:	8e 01       	movw	r16, r28
    4d48:	0f 5e       	subi	r16, 0xEF	; 239
    4d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	05 96       	adiw	r24, 0x05	; 5
    4d50:	b8 01       	movw	r22, r16
    4d52:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4d56:	8a 89       	ldd	r24, Y+18	; 0x12
    4d58:	91 e0       	ldi	r25, 0x01	; 1
    4d5a:	89 27       	eor	r24, r25
    4d5c:	8a 8b       	std	Y+18, r24	; 0x12
    4d5e:	c7 01       	movw	r24, r14
    4d60:	b8 01       	movw	r22, r16
    4d62:	ae 01       	movw	r20, r28
    4d64:	47 5e       	subi	r20, 0xE7	; 231
    4d66:	5f 4f       	sbci	r21, 0xFF	; 255
    4d68:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <_fpadd_parts>
    4d6c:	0e 94 90 29 	call	0x5320	; 0x5320 <__pack_f>
    4d70:	a0 96       	adiw	r28, 0x20	; 32
    4d72:	e6 e0       	ldi	r30, 0x06	; 6
    4d74:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

00004d78 <__addsf3>:
    4d78:	a0 e2       	ldi	r26, 0x20	; 32
    4d7a:	b0 e0       	ldi	r27, 0x00	; 0
    4d7c:	e2 ec       	ldi	r30, 0xC2	; 194
    4d7e:	f6 e2       	ldi	r31, 0x26	; 38
    4d80:	0c 94 e9 2a 	jmp	0x55d2	; 0x55d2 <__prologue_saves__+0x18>
    4d84:	69 83       	std	Y+1, r22	; 0x01
    4d86:	7a 83       	std	Y+2, r23	; 0x02
    4d88:	8b 83       	std	Y+3, r24	; 0x03
    4d8a:	9c 83       	std	Y+4, r25	; 0x04
    4d8c:	2d 83       	std	Y+5, r18	; 0x05
    4d8e:	3e 83       	std	Y+6, r19	; 0x06
    4d90:	4f 83       	std	Y+7, r20	; 0x07
    4d92:	58 87       	std	Y+8, r21	; 0x08
    4d94:	f9 e0       	ldi	r31, 0x09	; 9
    4d96:	ef 2e       	mov	r14, r31
    4d98:	f1 2c       	mov	r15, r1
    4d9a:	ec 0e       	add	r14, r28
    4d9c:	fd 1e       	adc	r15, r29
    4d9e:	ce 01       	movw	r24, r28
    4da0:	01 96       	adiw	r24, 0x01	; 1
    4da2:	b7 01       	movw	r22, r14
    4da4:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4da8:	8e 01       	movw	r16, r28
    4daa:	0f 5e       	subi	r16, 0xEF	; 239
    4dac:	1f 4f       	sbci	r17, 0xFF	; 255
    4dae:	ce 01       	movw	r24, r28
    4db0:	05 96       	adiw	r24, 0x05	; 5
    4db2:	b8 01       	movw	r22, r16
    4db4:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4db8:	c7 01       	movw	r24, r14
    4dba:	b8 01       	movw	r22, r16
    4dbc:	ae 01       	movw	r20, r28
    4dbe:	47 5e       	subi	r20, 0xE7	; 231
    4dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc2:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <_fpadd_parts>
    4dc6:	0e 94 90 29 	call	0x5320	; 0x5320 <__pack_f>
    4dca:	a0 96       	adiw	r28, 0x20	; 32
    4dcc:	e6 e0       	ldi	r30, 0x06	; 6
    4dce:	0c 94 05 2b 	jmp	0x560a	; 0x560a <__epilogue_restores__+0x18>

00004dd2 <__mulsf3>:
    4dd2:	a0 e2       	ldi	r26, 0x20	; 32
    4dd4:	b0 e0       	ldi	r27, 0x00	; 0
    4dd6:	ef ee       	ldi	r30, 0xEF	; 239
    4dd8:	f6 e2       	ldi	r31, 0x26	; 38
    4dda:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__prologue_saves__>
    4dde:	69 83       	std	Y+1, r22	; 0x01
    4de0:	7a 83       	std	Y+2, r23	; 0x02
    4de2:	8b 83       	std	Y+3, r24	; 0x03
    4de4:	9c 83       	std	Y+4, r25	; 0x04
    4de6:	2d 83       	std	Y+5, r18	; 0x05
    4de8:	3e 83       	std	Y+6, r19	; 0x06
    4dea:	4f 83       	std	Y+7, r20	; 0x07
    4dec:	58 87       	std	Y+8, r21	; 0x08
    4dee:	ce 01       	movw	r24, r28
    4df0:	01 96       	adiw	r24, 0x01	; 1
    4df2:	be 01       	movw	r22, r28
    4df4:	67 5f       	subi	r22, 0xF7	; 247
    4df6:	7f 4f       	sbci	r23, 0xFF	; 255
    4df8:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4dfc:	ce 01       	movw	r24, r28
    4dfe:	05 96       	adiw	r24, 0x05	; 5
    4e00:	be 01       	movw	r22, r28
    4e02:	6f 5e       	subi	r22, 0xEF	; 239
    4e04:	7f 4f       	sbci	r23, 0xFF	; 255
    4e06:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4e0a:	99 85       	ldd	r25, Y+9	; 0x09
    4e0c:	92 30       	cpi	r25, 0x02	; 2
    4e0e:	88 f0       	brcs	.+34     	; 0x4e32 <__mulsf3+0x60>
    4e10:	89 89       	ldd	r24, Y+17	; 0x11
    4e12:	82 30       	cpi	r24, 0x02	; 2
    4e14:	c8 f0       	brcs	.+50     	; 0x4e48 <__mulsf3+0x76>
    4e16:	94 30       	cpi	r25, 0x04	; 4
    4e18:	19 f4       	brne	.+6      	; 0x4e20 <__mulsf3+0x4e>
    4e1a:	82 30       	cpi	r24, 0x02	; 2
    4e1c:	51 f4       	brne	.+20     	; 0x4e32 <__mulsf3+0x60>
    4e1e:	04 c0       	rjmp	.+8      	; 0x4e28 <__mulsf3+0x56>
    4e20:	84 30       	cpi	r24, 0x04	; 4
    4e22:	29 f4       	brne	.+10     	; 0x4e2e <__mulsf3+0x5c>
    4e24:	92 30       	cpi	r25, 0x02	; 2
    4e26:	81 f4       	brne	.+32     	; 0x4e48 <__mulsf3+0x76>
    4e28:	87 e0       	ldi	r24, 0x07	; 7
    4e2a:	91 e0       	ldi	r25, 0x01	; 1
    4e2c:	c6 c0       	rjmp	.+396    	; 0x4fba <__mulsf3+0x1e8>
    4e2e:	92 30       	cpi	r25, 0x02	; 2
    4e30:	49 f4       	brne	.+18     	; 0x4e44 <__mulsf3+0x72>
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e36:	8a 89       	ldd	r24, Y+18	; 0x12
    4e38:	98 13       	cpse	r25, r24
    4e3a:	21 e0       	ldi	r18, 0x01	; 1
    4e3c:	2a 87       	std	Y+10, r18	; 0x0a
    4e3e:	ce 01       	movw	r24, r28
    4e40:	09 96       	adiw	r24, 0x09	; 9
    4e42:	bb c0       	rjmp	.+374    	; 0x4fba <__mulsf3+0x1e8>
    4e44:	82 30       	cpi	r24, 0x02	; 2
    4e46:	49 f4       	brne	.+18     	; 0x4e5a <__mulsf3+0x88>
    4e48:	20 e0       	ldi	r18, 0x00	; 0
    4e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e4c:	8a 89       	ldd	r24, Y+18	; 0x12
    4e4e:	98 13       	cpse	r25, r24
    4e50:	21 e0       	ldi	r18, 0x01	; 1
    4e52:	2a 8b       	std	Y+18, r18	; 0x12
    4e54:	ce 01       	movw	r24, r28
    4e56:	41 96       	adiw	r24, 0x11	; 17
    4e58:	b0 c0       	rjmp	.+352    	; 0x4fba <__mulsf3+0x1e8>
    4e5a:	2d 84       	ldd	r2, Y+13	; 0x0d
    4e5c:	3e 84       	ldd	r3, Y+14	; 0x0e
    4e5e:	4f 84       	ldd	r4, Y+15	; 0x0f
    4e60:	58 88       	ldd	r5, Y+16	; 0x10
    4e62:	6d 88       	ldd	r6, Y+21	; 0x15
    4e64:	7e 88       	ldd	r7, Y+22	; 0x16
    4e66:	8f 88       	ldd	r8, Y+23	; 0x17
    4e68:	98 8c       	ldd	r9, Y+24	; 0x18
    4e6a:	ee 24       	eor	r14, r14
    4e6c:	ff 24       	eor	r15, r15
    4e6e:	87 01       	movw	r16, r14
    4e70:	aa 24       	eor	r10, r10
    4e72:	bb 24       	eor	r11, r11
    4e74:	65 01       	movw	r12, r10
    4e76:	40 e0       	ldi	r20, 0x00	; 0
    4e78:	50 e0       	ldi	r21, 0x00	; 0
    4e7a:	60 e0       	ldi	r22, 0x00	; 0
    4e7c:	70 e0       	ldi	r23, 0x00	; 0
    4e7e:	e0 e0       	ldi	r30, 0x00	; 0
    4e80:	f0 e0       	ldi	r31, 0x00	; 0
    4e82:	c1 01       	movw	r24, r2
    4e84:	81 70       	andi	r24, 0x01	; 1
    4e86:	90 70       	andi	r25, 0x00	; 0
    4e88:	89 2b       	or	r24, r25
    4e8a:	e9 f0       	breq	.+58     	; 0x4ec6 <__mulsf3+0xf4>
    4e8c:	e6 0c       	add	r14, r6
    4e8e:	f7 1c       	adc	r15, r7
    4e90:	08 1d       	adc	r16, r8
    4e92:	19 1d       	adc	r17, r9
    4e94:	9a 01       	movw	r18, r20
    4e96:	ab 01       	movw	r20, r22
    4e98:	2a 0d       	add	r18, r10
    4e9a:	3b 1d       	adc	r19, r11
    4e9c:	4c 1d       	adc	r20, r12
    4e9e:	5d 1d       	adc	r21, r13
    4ea0:	80 e0       	ldi	r24, 0x00	; 0
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	a0 e0       	ldi	r26, 0x00	; 0
    4ea6:	b0 e0       	ldi	r27, 0x00	; 0
    4ea8:	e6 14       	cp	r14, r6
    4eaa:	f7 04       	cpc	r15, r7
    4eac:	08 05       	cpc	r16, r8
    4eae:	19 05       	cpc	r17, r9
    4eb0:	20 f4       	brcc	.+8      	; 0x4eba <__mulsf3+0xe8>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	a0 e0       	ldi	r26, 0x00	; 0
    4eb8:	b0 e0       	ldi	r27, 0x00	; 0
    4eba:	ba 01       	movw	r22, r20
    4ebc:	a9 01       	movw	r20, r18
    4ebe:	48 0f       	add	r20, r24
    4ec0:	59 1f       	adc	r21, r25
    4ec2:	6a 1f       	adc	r22, r26
    4ec4:	7b 1f       	adc	r23, r27
    4ec6:	aa 0c       	add	r10, r10
    4ec8:	bb 1c       	adc	r11, r11
    4eca:	cc 1c       	adc	r12, r12
    4ecc:	dd 1c       	adc	r13, r13
    4ece:	97 fe       	sbrs	r9, 7
    4ed0:	08 c0       	rjmp	.+16     	; 0x4ee2 <__mulsf3+0x110>
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	a0 e0       	ldi	r26, 0x00	; 0
    4ed8:	b0 e0       	ldi	r27, 0x00	; 0
    4eda:	a8 2a       	or	r10, r24
    4edc:	b9 2a       	or	r11, r25
    4ede:	ca 2a       	or	r12, r26
    4ee0:	db 2a       	or	r13, r27
    4ee2:	31 96       	adiw	r30, 0x01	; 1
    4ee4:	e0 32       	cpi	r30, 0x20	; 32
    4ee6:	f1 05       	cpc	r31, r1
    4ee8:	49 f0       	breq	.+18     	; 0x4efc <__mulsf3+0x12a>
    4eea:	66 0c       	add	r6, r6
    4eec:	77 1c       	adc	r7, r7
    4eee:	88 1c       	adc	r8, r8
    4ef0:	99 1c       	adc	r9, r9
    4ef2:	56 94       	lsr	r5
    4ef4:	47 94       	ror	r4
    4ef6:	37 94       	ror	r3
    4ef8:	27 94       	ror	r2
    4efa:	c3 cf       	rjmp	.-122    	; 0x4e82 <__mulsf3+0xb0>
    4efc:	fa 85       	ldd	r31, Y+10	; 0x0a
    4efe:	ea 89       	ldd	r30, Y+18	; 0x12
    4f00:	2b 89       	ldd	r18, Y+19	; 0x13
    4f02:	3c 89       	ldd	r19, Y+20	; 0x14
    4f04:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f06:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f08:	28 0f       	add	r18, r24
    4f0a:	39 1f       	adc	r19, r25
    4f0c:	2e 5f       	subi	r18, 0xFE	; 254
    4f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f10:	17 c0       	rjmp	.+46     	; 0x4f40 <__mulsf3+0x16e>
    4f12:	ca 01       	movw	r24, r20
    4f14:	81 70       	andi	r24, 0x01	; 1
    4f16:	90 70       	andi	r25, 0x00	; 0
    4f18:	89 2b       	or	r24, r25
    4f1a:	61 f0       	breq	.+24     	; 0x4f34 <__mulsf3+0x162>
    4f1c:	16 95       	lsr	r17
    4f1e:	07 95       	ror	r16
    4f20:	f7 94       	ror	r15
    4f22:	e7 94       	ror	r14
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	a0 e0       	ldi	r26, 0x00	; 0
    4f2a:	b0 e8       	ldi	r27, 0x80	; 128
    4f2c:	e8 2a       	or	r14, r24
    4f2e:	f9 2a       	or	r15, r25
    4f30:	0a 2b       	or	r16, r26
    4f32:	1b 2b       	or	r17, r27
    4f34:	76 95       	lsr	r23
    4f36:	67 95       	ror	r22
    4f38:	57 95       	ror	r21
    4f3a:	47 95       	ror	r20
    4f3c:	2f 5f       	subi	r18, 0xFF	; 255
    4f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f40:	77 fd       	sbrc	r23, 7
    4f42:	e7 cf       	rjmp	.-50     	; 0x4f12 <__mulsf3+0x140>
    4f44:	0c c0       	rjmp	.+24     	; 0x4f5e <__mulsf3+0x18c>
    4f46:	44 0f       	add	r20, r20
    4f48:	55 1f       	adc	r21, r21
    4f4a:	66 1f       	adc	r22, r22
    4f4c:	77 1f       	adc	r23, r23
    4f4e:	17 fd       	sbrc	r17, 7
    4f50:	41 60       	ori	r20, 0x01	; 1
    4f52:	ee 0c       	add	r14, r14
    4f54:	ff 1c       	adc	r15, r15
    4f56:	00 1f       	adc	r16, r16
    4f58:	11 1f       	adc	r17, r17
    4f5a:	21 50       	subi	r18, 0x01	; 1
    4f5c:	30 40       	sbci	r19, 0x00	; 0
    4f5e:	40 30       	cpi	r20, 0x00	; 0
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	59 07       	cpc	r21, r25
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	69 07       	cpc	r22, r25
    4f68:	90 e4       	ldi	r25, 0x40	; 64
    4f6a:	79 07       	cpc	r23, r25
    4f6c:	60 f3       	brcs	.-40     	; 0x4f46 <__mulsf3+0x174>
    4f6e:	2b 8f       	std	Y+27, r18	; 0x1b
    4f70:	3c 8f       	std	Y+28, r19	; 0x1c
    4f72:	db 01       	movw	r26, r22
    4f74:	ca 01       	movw	r24, r20
    4f76:	8f 77       	andi	r24, 0x7F	; 127
    4f78:	90 70       	andi	r25, 0x00	; 0
    4f7a:	a0 70       	andi	r26, 0x00	; 0
    4f7c:	b0 70       	andi	r27, 0x00	; 0
    4f7e:	80 34       	cpi	r24, 0x40	; 64
    4f80:	91 05       	cpc	r25, r1
    4f82:	a1 05       	cpc	r26, r1
    4f84:	b1 05       	cpc	r27, r1
    4f86:	61 f4       	brne	.+24     	; 0x4fa0 <__mulsf3+0x1ce>
    4f88:	47 fd       	sbrc	r20, 7
    4f8a:	0a c0       	rjmp	.+20     	; 0x4fa0 <__mulsf3+0x1ce>
    4f8c:	e1 14       	cp	r14, r1
    4f8e:	f1 04       	cpc	r15, r1
    4f90:	01 05       	cpc	r16, r1
    4f92:	11 05       	cpc	r17, r1
    4f94:	29 f0       	breq	.+10     	; 0x4fa0 <__mulsf3+0x1ce>
    4f96:	40 5c       	subi	r20, 0xC0	; 192
    4f98:	5f 4f       	sbci	r21, 0xFF	; 255
    4f9a:	6f 4f       	sbci	r22, 0xFF	; 255
    4f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f9e:	40 78       	andi	r20, 0x80	; 128
    4fa0:	1a 8e       	std	Y+26, r1	; 0x1a
    4fa2:	fe 17       	cp	r31, r30
    4fa4:	11 f0       	breq	.+4      	; 0x4faa <__mulsf3+0x1d8>
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	8a 8f       	std	Y+26, r24	; 0x1a
    4faa:	4d 8f       	std	Y+29, r20	; 0x1d
    4fac:	5e 8f       	std	Y+30, r21	; 0x1e
    4fae:	6f 8f       	std	Y+31, r22	; 0x1f
    4fb0:	78 a3       	std	Y+32, r23	; 0x20
    4fb2:	83 e0       	ldi	r24, 0x03	; 3
    4fb4:	89 8f       	std	Y+25, r24	; 0x19
    4fb6:	ce 01       	movw	r24, r28
    4fb8:	49 96       	adiw	r24, 0x19	; 25
    4fba:	0e 94 90 29 	call	0x5320	; 0x5320 <__pack_f>
    4fbe:	a0 96       	adiw	r28, 0x20	; 32
    4fc0:	e2 e1       	ldi	r30, 0x12	; 18
    4fc2:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__epilogue_restores__>

00004fc6 <__divsf3>:
    4fc6:	a8 e1       	ldi	r26, 0x18	; 24
    4fc8:	b0 e0       	ldi	r27, 0x00	; 0
    4fca:	e9 ee       	ldi	r30, 0xE9	; 233
    4fcc:	f7 e2       	ldi	r31, 0x27	; 39
    4fce:	0c 94 e5 2a 	jmp	0x55ca	; 0x55ca <__prologue_saves__+0x10>
    4fd2:	69 83       	std	Y+1, r22	; 0x01
    4fd4:	7a 83       	std	Y+2, r23	; 0x02
    4fd6:	8b 83       	std	Y+3, r24	; 0x03
    4fd8:	9c 83       	std	Y+4, r25	; 0x04
    4fda:	2d 83       	std	Y+5, r18	; 0x05
    4fdc:	3e 83       	std	Y+6, r19	; 0x06
    4fde:	4f 83       	std	Y+7, r20	; 0x07
    4fe0:	58 87       	std	Y+8, r21	; 0x08
    4fe2:	b9 e0       	ldi	r27, 0x09	; 9
    4fe4:	eb 2e       	mov	r14, r27
    4fe6:	f1 2c       	mov	r15, r1
    4fe8:	ec 0e       	add	r14, r28
    4fea:	fd 1e       	adc	r15, r29
    4fec:	ce 01       	movw	r24, r28
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	b7 01       	movw	r22, r14
    4ff2:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    4ff6:	8e 01       	movw	r16, r28
    4ff8:	0f 5e       	subi	r16, 0xEF	; 239
    4ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	05 96       	adiw	r24, 0x05	; 5
    5000:	b8 01       	movw	r22, r16
    5002:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    5006:	29 85       	ldd	r18, Y+9	; 0x09
    5008:	22 30       	cpi	r18, 0x02	; 2
    500a:	08 f4       	brcc	.+2      	; 0x500e <__divsf3+0x48>
    500c:	7e c0       	rjmp	.+252    	; 0x510a <__divsf3+0x144>
    500e:	39 89       	ldd	r19, Y+17	; 0x11
    5010:	32 30       	cpi	r19, 0x02	; 2
    5012:	10 f4       	brcc	.+4      	; 0x5018 <__divsf3+0x52>
    5014:	b8 01       	movw	r22, r16
    5016:	7c c0       	rjmp	.+248    	; 0x5110 <__divsf3+0x14a>
    5018:	8a 85       	ldd	r24, Y+10	; 0x0a
    501a:	9a 89       	ldd	r25, Y+18	; 0x12
    501c:	89 27       	eor	r24, r25
    501e:	8a 87       	std	Y+10, r24	; 0x0a
    5020:	24 30       	cpi	r18, 0x04	; 4
    5022:	11 f0       	breq	.+4      	; 0x5028 <__divsf3+0x62>
    5024:	22 30       	cpi	r18, 0x02	; 2
    5026:	31 f4       	brne	.+12     	; 0x5034 <__divsf3+0x6e>
    5028:	23 17       	cp	r18, r19
    502a:	09 f0       	breq	.+2      	; 0x502e <__divsf3+0x68>
    502c:	6e c0       	rjmp	.+220    	; 0x510a <__divsf3+0x144>
    502e:	67 e0       	ldi	r22, 0x07	; 7
    5030:	71 e0       	ldi	r23, 0x01	; 1
    5032:	6e c0       	rjmp	.+220    	; 0x5110 <__divsf3+0x14a>
    5034:	34 30       	cpi	r19, 0x04	; 4
    5036:	39 f4       	brne	.+14     	; 0x5046 <__divsf3+0x80>
    5038:	1d 86       	std	Y+13, r1	; 0x0d
    503a:	1e 86       	std	Y+14, r1	; 0x0e
    503c:	1f 86       	std	Y+15, r1	; 0x0f
    503e:	18 8a       	std	Y+16, r1	; 0x10
    5040:	1c 86       	std	Y+12, r1	; 0x0c
    5042:	1b 86       	std	Y+11, r1	; 0x0b
    5044:	04 c0       	rjmp	.+8      	; 0x504e <__divsf3+0x88>
    5046:	32 30       	cpi	r19, 0x02	; 2
    5048:	21 f4       	brne	.+8      	; 0x5052 <__divsf3+0x8c>
    504a:	84 e0       	ldi	r24, 0x04	; 4
    504c:	89 87       	std	Y+9, r24	; 0x09
    504e:	b7 01       	movw	r22, r14
    5050:	5f c0       	rjmp	.+190    	; 0x5110 <__divsf3+0x14a>
    5052:	2b 85       	ldd	r18, Y+11	; 0x0b
    5054:	3c 85       	ldd	r19, Y+12	; 0x0c
    5056:	8b 89       	ldd	r24, Y+19	; 0x13
    5058:	9c 89       	ldd	r25, Y+20	; 0x14
    505a:	28 1b       	sub	r18, r24
    505c:	39 0b       	sbc	r19, r25
    505e:	3c 87       	std	Y+12, r19	; 0x0c
    5060:	2b 87       	std	Y+11, r18	; 0x0b
    5062:	ed 84       	ldd	r14, Y+13	; 0x0d
    5064:	fe 84       	ldd	r15, Y+14	; 0x0e
    5066:	0f 85       	ldd	r16, Y+15	; 0x0f
    5068:	18 89       	ldd	r17, Y+16	; 0x10
    506a:	ad 88       	ldd	r10, Y+21	; 0x15
    506c:	be 88       	ldd	r11, Y+22	; 0x16
    506e:	cf 88       	ldd	r12, Y+23	; 0x17
    5070:	d8 8c       	ldd	r13, Y+24	; 0x18
    5072:	ea 14       	cp	r14, r10
    5074:	fb 04       	cpc	r15, r11
    5076:	0c 05       	cpc	r16, r12
    5078:	1d 05       	cpc	r17, r13
    507a:	40 f4       	brcc	.+16     	; 0x508c <__divsf3+0xc6>
    507c:	ee 0c       	add	r14, r14
    507e:	ff 1c       	adc	r15, r15
    5080:	00 1f       	adc	r16, r16
    5082:	11 1f       	adc	r17, r17
    5084:	21 50       	subi	r18, 0x01	; 1
    5086:	30 40       	sbci	r19, 0x00	; 0
    5088:	3c 87       	std	Y+12, r19	; 0x0c
    508a:	2b 87       	std	Y+11, r18	; 0x0b
    508c:	20 e0       	ldi	r18, 0x00	; 0
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	40 e0       	ldi	r20, 0x00	; 0
    5092:	50 e0       	ldi	r21, 0x00	; 0
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	a0 e0       	ldi	r26, 0x00	; 0
    509a:	b0 e4       	ldi	r27, 0x40	; 64
    509c:	60 e0       	ldi	r22, 0x00	; 0
    509e:	70 e0       	ldi	r23, 0x00	; 0
    50a0:	ea 14       	cp	r14, r10
    50a2:	fb 04       	cpc	r15, r11
    50a4:	0c 05       	cpc	r16, r12
    50a6:	1d 05       	cpc	r17, r13
    50a8:	40 f0       	brcs	.+16     	; 0x50ba <__divsf3+0xf4>
    50aa:	28 2b       	or	r18, r24
    50ac:	39 2b       	or	r19, r25
    50ae:	4a 2b       	or	r20, r26
    50b0:	5b 2b       	or	r21, r27
    50b2:	ea 18       	sub	r14, r10
    50b4:	fb 08       	sbc	r15, r11
    50b6:	0c 09       	sbc	r16, r12
    50b8:	1d 09       	sbc	r17, r13
    50ba:	b6 95       	lsr	r27
    50bc:	a7 95       	ror	r26
    50be:	97 95       	ror	r25
    50c0:	87 95       	ror	r24
    50c2:	ee 0c       	add	r14, r14
    50c4:	ff 1c       	adc	r15, r15
    50c6:	00 1f       	adc	r16, r16
    50c8:	11 1f       	adc	r17, r17
    50ca:	6f 5f       	subi	r22, 0xFF	; 255
    50cc:	7f 4f       	sbci	r23, 0xFF	; 255
    50ce:	6f 31       	cpi	r22, 0x1F	; 31
    50d0:	71 05       	cpc	r23, r1
    50d2:	31 f7       	brne	.-52     	; 0x50a0 <__divsf3+0xda>
    50d4:	da 01       	movw	r26, r20
    50d6:	c9 01       	movw	r24, r18
    50d8:	8f 77       	andi	r24, 0x7F	; 127
    50da:	90 70       	andi	r25, 0x00	; 0
    50dc:	a0 70       	andi	r26, 0x00	; 0
    50de:	b0 70       	andi	r27, 0x00	; 0
    50e0:	80 34       	cpi	r24, 0x40	; 64
    50e2:	91 05       	cpc	r25, r1
    50e4:	a1 05       	cpc	r26, r1
    50e6:	b1 05       	cpc	r27, r1
    50e8:	61 f4       	brne	.+24     	; 0x5102 <__divsf3+0x13c>
    50ea:	27 fd       	sbrc	r18, 7
    50ec:	0a c0       	rjmp	.+20     	; 0x5102 <__divsf3+0x13c>
    50ee:	e1 14       	cp	r14, r1
    50f0:	f1 04       	cpc	r15, r1
    50f2:	01 05       	cpc	r16, r1
    50f4:	11 05       	cpc	r17, r1
    50f6:	29 f0       	breq	.+10     	; 0x5102 <__divsf3+0x13c>
    50f8:	20 5c       	subi	r18, 0xC0	; 192
    50fa:	3f 4f       	sbci	r19, 0xFF	; 255
    50fc:	4f 4f       	sbci	r20, 0xFF	; 255
    50fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5100:	20 78       	andi	r18, 0x80	; 128
    5102:	2d 87       	std	Y+13, r18	; 0x0d
    5104:	3e 87       	std	Y+14, r19	; 0x0e
    5106:	4f 87       	std	Y+15, r20	; 0x0f
    5108:	58 8b       	std	Y+16, r21	; 0x10
    510a:	be 01       	movw	r22, r28
    510c:	67 5f       	subi	r22, 0xF7	; 247
    510e:	7f 4f       	sbci	r23, 0xFF	; 255
    5110:	cb 01       	movw	r24, r22
    5112:	0e 94 90 29 	call	0x5320	; 0x5320 <__pack_f>
    5116:	68 96       	adiw	r28, 0x18	; 24
    5118:	ea e0       	ldi	r30, 0x0A	; 10
    511a:	0c 94 01 2b 	jmp	0x5602	; 0x5602 <__epilogue_restores__+0x10>

0000511e <__floatsisf>:
    511e:	a8 e0       	ldi	r26, 0x08	; 8
    5120:	b0 e0       	ldi	r27, 0x00	; 0
    5122:	e5 e9       	ldi	r30, 0x95	; 149
    5124:	f8 e2       	ldi	r31, 0x28	; 40
    5126:	0c 94 e6 2a 	jmp	0x55cc	; 0x55cc <__prologue_saves__+0x12>
    512a:	9b 01       	movw	r18, r22
    512c:	ac 01       	movw	r20, r24
    512e:	83 e0       	ldi	r24, 0x03	; 3
    5130:	89 83       	std	Y+1, r24	; 0x01
    5132:	da 01       	movw	r26, r20
    5134:	c9 01       	movw	r24, r18
    5136:	88 27       	eor	r24, r24
    5138:	b7 fd       	sbrc	r27, 7
    513a:	83 95       	inc	r24
    513c:	99 27       	eor	r25, r25
    513e:	aa 27       	eor	r26, r26
    5140:	bb 27       	eor	r27, r27
    5142:	b8 2e       	mov	r11, r24
    5144:	21 15       	cp	r18, r1
    5146:	31 05       	cpc	r19, r1
    5148:	41 05       	cpc	r20, r1
    514a:	51 05       	cpc	r21, r1
    514c:	19 f4       	brne	.+6      	; 0x5154 <__floatsisf+0x36>
    514e:	82 e0       	ldi	r24, 0x02	; 2
    5150:	89 83       	std	Y+1, r24	; 0x01
    5152:	3a c0       	rjmp	.+116    	; 0x51c8 <__floatsisf+0xaa>
    5154:	88 23       	and	r24, r24
    5156:	a9 f0       	breq	.+42     	; 0x5182 <__floatsisf+0x64>
    5158:	20 30       	cpi	r18, 0x00	; 0
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	38 07       	cpc	r19, r24
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	48 07       	cpc	r20, r24
    5162:	80 e8       	ldi	r24, 0x80	; 128
    5164:	58 07       	cpc	r21, r24
    5166:	29 f4       	brne	.+10     	; 0x5172 <__floatsisf+0x54>
    5168:	60 e0       	ldi	r22, 0x00	; 0
    516a:	70 e0       	ldi	r23, 0x00	; 0
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	9f ec       	ldi	r25, 0xCF	; 207
    5170:	30 c0       	rjmp	.+96     	; 0x51d2 <__floatsisf+0xb4>
    5172:	ee 24       	eor	r14, r14
    5174:	ff 24       	eor	r15, r15
    5176:	87 01       	movw	r16, r14
    5178:	e2 1a       	sub	r14, r18
    517a:	f3 0a       	sbc	r15, r19
    517c:	04 0b       	sbc	r16, r20
    517e:	15 0b       	sbc	r17, r21
    5180:	02 c0       	rjmp	.+4      	; 0x5186 <__floatsisf+0x68>
    5182:	79 01       	movw	r14, r18
    5184:	8a 01       	movw	r16, r20
    5186:	8e e1       	ldi	r24, 0x1E	; 30
    5188:	c8 2e       	mov	r12, r24
    518a:	d1 2c       	mov	r13, r1
    518c:	dc 82       	std	Y+4, r13	; 0x04
    518e:	cb 82       	std	Y+3, r12	; 0x03
    5190:	ed 82       	std	Y+5, r14	; 0x05
    5192:	fe 82       	std	Y+6, r15	; 0x06
    5194:	0f 83       	std	Y+7, r16	; 0x07
    5196:	18 87       	std	Y+8, r17	; 0x08
    5198:	c8 01       	movw	r24, r16
    519a:	b7 01       	movw	r22, r14
    519c:	0e 94 41 29 	call	0x5282	; 0x5282 <__clzsi2>
    51a0:	01 97       	sbiw	r24, 0x01	; 1
    51a2:	18 16       	cp	r1, r24
    51a4:	19 06       	cpc	r1, r25
    51a6:	84 f4       	brge	.+32     	; 0x51c8 <__floatsisf+0xaa>
    51a8:	08 2e       	mov	r0, r24
    51aa:	04 c0       	rjmp	.+8      	; 0x51b4 <__floatsisf+0x96>
    51ac:	ee 0c       	add	r14, r14
    51ae:	ff 1c       	adc	r15, r15
    51b0:	00 1f       	adc	r16, r16
    51b2:	11 1f       	adc	r17, r17
    51b4:	0a 94       	dec	r0
    51b6:	d2 f7       	brpl	.-12     	; 0x51ac <__floatsisf+0x8e>
    51b8:	ed 82       	std	Y+5, r14	; 0x05
    51ba:	fe 82       	std	Y+6, r15	; 0x06
    51bc:	0f 83       	std	Y+7, r16	; 0x07
    51be:	18 87       	std	Y+8, r17	; 0x08
    51c0:	c8 1a       	sub	r12, r24
    51c2:	d9 0a       	sbc	r13, r25
    51c4:	dc 82       	std	Y+4, r13	; 0x04
    51c6:	cb 82       	std	Y+3, r12	; 0x03
    51c8:	ba 82       	std	Y+2, r11	; 0x02
    51ca:	ce 01       	movw	r24, r28
    51cc:	01 96       	adiw	r24, 0x01	; 1
    51ce:	0e 94 90 29 	call	0x5320	; 0x5320 <__pack_f>
    51d2:	28 96       	adiw	r28, 0x08	; 8
    51d4:	e9 e0       	ldi	r30, 0x09	; 9
    51d6:	0c 94 02 2b 	jmp	0x5604	; 0x5604 <__epilogue_restores__+0x12>

000051da <__fixsfsi>:
    51da:	ac e0       	ldi	r26, 0x0C	; 12
    51dc:	b0 e0       	ldi	r27, 0x00	; 0
    51de:	e3 ef       	ldi	r30, 0xF3	; 243
    51e0:	f8 e2       	ldi	r31, 0x28	; 40
    51e2:	0c 94 ed 2a 	jmp	0x55da	; 0x55da <__prologue_saves__+0x20>
    51e6:	69 83       	std	Y+1, r22	; 0x01
    51e8:	7a 83       	std	Y+2, r23	; 0x02
    51ea:	8b 83       	std	Y+3, r24	; 0x03
    51ec:	9c 83       	std	Y+4, r25	; 0x04
    51ee:	ce 01       	movw	r24, r28
    51f0:	01 96       	adiw	r24, 0x01	; 1
    51f2:	be 01       	movw	r22, r28
    51f4:	6b 5f       	subi	r22, 0xFB	; 251
    51f6:	7f 4f       	sbci	r23, 0xFF	; 255
    51f8:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__unpack_f>
    51fc:	8d 81       	ldd	r24, Y+5	; 0x05
    51fe:	82 30       	cpi	r24, 0x02	; 2
    5200:	61 f1       	breq	.+88     	; 0x525a <__fixsfsi+0x80>
    5202:	82 30       	cpi	r24, 0x02	; 2
    5204:	50 f1       	brcs	.+84     	; 0x525a <__fixsfsi+0x80>
    5206:	84 30       	cpi	r24, 0x04	; 4
    5208:	21 f4       	brne	.+8      	; 0x5212 <__fixsfsi+0x38>
    520a:	8e 81       	ldd	r24, Y+6	; 0x06
    520c:	88 23       	and	r24, r24
    520e:	51 f1       	breq	.+84     	; 0x5264 <__fixsfsi+0x8a>
    5210:	2e c0       	rjmp	.+92     	; 0x526e <__fixsfsi+0x94>
    5212:	2f 81       	ldd	r18, Y+7	; 0x07
    5214:	38 85       	ldd	r19, Y+8	; 0x08
    5216:	37 fd       	sbrc	r19, 7
    5218:	20 c0       	rjmp	.+64     	; 0x525a <__fixsfsi+0x80>
    521a:	6e 81       	ldd	r22, Y+6	; 0x06
    521c:	2f 31       	cpi	r18, 0x1F	; 31
    521e:	31 05       	cpc	r19, r1
    5220:	1c f0       	brlt	.+6      	; 0x5228 <__fixsfsi+0x4e>
    5222:	66 23       	and	r22, r22
    5224:	f9 f0       	breq	.+62     	; 0x5264 <__fixsfsi+0x8a>
    5226:	23 c0       	rjmp	.+70     	; 0x526e <__fixsfsi+0x94>
    5228:	8e e1       	ldi	r24, 0x1E	; 30
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	82 1b       	sub	r24, r18
    522e:	93 0b       	sbc	r25, r19
    5230:	29 85       	ldd	r18, Y+9	; 0x09
    5232:	3a 85       	ldd	r19, Y+10	; 0x0a
    5234:	4b 85       	ldd	r20, Y+11	; 0x0b
    5236:	5c 85       	ldd	r21, Y+12	; 0x0c
    5238:	04 c0       	rjmp	.+8      	; 0x5242 <__fixsfsi+0x68>
    523a:	56 95       	lsr	r21
    523c:	47 95       	ror	r20
    523e:	37 95       	ror	r19
    5240:	27 95       	ror	r18
    5242:	8a 95       	dec	r24
    5244:	d2 f7       	brpl	.-12     	; 0x523a <__fixsfsi+0x60>
    5246:	66 23       	and	r22, r22
    5248:	b1 f0       	breq	.+44     	; 0x5276 <__fixsfsi+0x9c>
    524a:	50 95       	com	r21
    524c:	40 95       	com	r20
    524e:	30 95       	com	r19
    5250:	21 95       	neg	r18
    5252:	3f 4f       	sbci	r19, 0xFF	; 255
    5254:	4f 4f       	sbci	r20, 0xFF	; 255
    5256:	5f 4f       	sbci	r21, 0xFF	; 255
    5258:	0e c0       	rjmp	.+28     	; 0x5276 <__fixsfsi+0x9c>
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	40 e0       	ldi	r20, 0x00	; 0
    5260:	50 e0       	ldi	r21, 0x00	; 0
    5262:	09 c0       	rjmp	.+18     	; 0x5276 <__fixsfsi+0x9c>
    5264:	2f ef       	ldi	r18, 0xFF	; 255
    5266:	3f ef       	ldi	r19, 0xFF	; 255
    5268:	4f ef       	ldi	r20, 0xFF	; 255
    526a:	5f e7       	ldi	r21, 0x7F	; 127
    526c:	04 c0       	rjmp	.+8      	; 0x5276 <__fixsfsi+0x9c>
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	30 e0       	ldi	r19, 0x00	; 0
    5272:	40 e0       	ldi	r20, 0x00	; 0
    5274:	50 e8       	ldi	r21, 0x80	; 128
    5276:	b9 01       	movw	r22, r18
    5278:	ca 01       	movw	r24, r20
    527a:	2c 96       	adiw	r28, 0x0c	; 12
    527c:	e2 e0       	ldi	r30, 0x02	; 2
    527e:	0c 94 09 2b 	jmp	0x5612	; 0x5612 <__epilogue_restores__+0x20>

00005282 <__clzsi2>:
    5282:	ef 92       	push	r14
    5284:	ff 92       	push	r15
    5286:	0f 93       	push	r16
    5288:	1f 93       	push	r17
    528a:	7b 01       	movw	r14, r22
    528c:	8c 01       	movw	r16, r24
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	e8 16       	cp	r14, r24
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	f8 06       	cpc	r15, r24
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	08 07       	cpc	r16, r24
    529a:	80 e0       	ldi	r24, 0x00	; 0
    529c:	18 07       	cpc	r17, r24
    529e:	88 f4       	brcc	.+34     	; 0x52c2 <__clzsi2+0x40>
    52a0:	8f ef       	ldi	r24, 0xFF	; 255
    52a2:	e8 16       	cp	r14, r24
    52a4:	f1 04       	cpc	r15, r1
    52a6:	01 05       	cpc	r16, r1
    52a8:	11 05       	cpc	r17, r1
    52aa:	31 f0       	breq	.+12     	; 0x52b8 <__clzsi2+0x36>
    52ac:	28 f0       	brcs	.+10     	; 0x52b8 <__clzsi2+0x36>
    52ae:	88 e0       	ldi	r24, 0x08	; 8
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	a0 e0       	ldi	r26, 0x00	; 0
    52b4:	b0 e0       	ldi	r27, 0x00	; 0
    52b6:	17 c0       	rjmp	.+46     	; 0x52e6 <__clzsi2+0x64>
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	a0 e0       	ldi	r26, 0x00	; 0
    52be:	b0 e0       	ldi	r27, 0x00	; 0
    52c0:	12 c0       	rjmp	.+36     	; 0x52e6 <__clzsi2+0x64>
    52c2:	80 e0       	ldi	r24, 0x00	; 0
    52c4:	e8 16       	cp	r14, r24
    52c6:	80 e0       	ldi	r24, 0x00	; 0
    52c8:	f8 06       	cpc	r15, r24
    52ca:	80 e0       	ldi	r24, 0x00	; 0
    52cc:	08 07       	cpc	r16, r24
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	18 07       	cpc	r17, r24
    52d2:	28 f0       	brcs	.+10     	; 0x52de <__clzsi2+0x5c>
    52d4:	88 e1       	ldi	r24, 0x18	; 24
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	a0 e0       	ldi	r26, 0x00	; 0
    52da:	b0 e0       	ldi	r27, 0x00	; 0
    52dc:	04 c0       	rjmp	.+8      	; 0x52e6 <__clzsi2+0x64>
    52de:	80 e1       	ldi	r24, 0x10	; 16
    52e0:	90 e0       	ldi	r25, 0x00	; 0
    52e2:	a0 e0       	ldi	r26, 0x00	; 0
    52e4:	b0 e0       	ldi	r27, 0x00	; 0
    52e6:	20 e2       	ldi	r18, 0x20	; 32
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	40 e0       	ldi	r20, 0x00	; 0
    52ec:	50 e0       	ldi	r21, 0x00	; 0
    52ee:	28 1b       	sub	r18, r24
    52f0:	39 0b       	sbc	r19, r25
    52f2:	4a 0b       	sbc	r20, r26
    52f4:	5b 0b       	sbc	r21, r27
    52f6:	04 c0       	rjmp	.+8      	; 0x5300 <__clzsi2+0x7e>
    52f8:	16 95       	lsr	r17
    52fa:	07 95       	ror	r16
    52fc:	f7 94       	ror	r15
    52fe:	e7 94       	ror	r14
    5300:	8a 95       	dec	r24
    5302:	d2 f7       	brpl	.-12     	; 0x52f8 <__clzsi2+0x76>
    5304:	f7 01       	movw	r30, r14
    5306:	e1 5f       	subi	r30, 0xF1	; 241
    5308:	fe 4f       	sbci	r31, 0xFE	; 254
    530a:	80 81       	ld	r24, Z
    530c:	28 1b       	sub	r18, r24
    530e:	31 09       	sbc	r19, r1
    5310:	41 09       	sbc	r20, r1
    5312:	51 09       	sbc	r21, r1
    5314:	c9 01       	movw	r24, r18
    5316:	1f 91       	pop	r17
    5318:	0f 91       	pop	r16
    531a:	ff 90       	pop	r15
    531c:	ef 90       	pop	r14
    531e:	08 95       	ret

00005320 <__pack_f>:
    5320:	df 92       	push	r13
    5322:	ef 92       	push	r14
    5324:	ff 92       	push	r15
    5326:	0f 93       	push	r16
    5328:	1f 93       	push	r17
    532a:	fc 01       	movw	r30, r24
    532c:	e4 80       	ldd	r14, Z+4	; 0x04
    532e:	f5 80       	ldd	r15, Z+5	; 0x05
    5330:	06 81       	ldd	r16, Z+6	; 0x06
    5332:	17 81       	ldd	r17, Z+7	; 0x07
    5334:	d1 80       	ldd	r13, Z+1	; 0x01
    5336:	80 81       	ld	r24, Z
    5338:	82 30       	cpi	r24, 0x02	; 2
    533a:	48 f4       	brcc	.+18     	; 0x534e <__pack_f+0x2e>
    533c:	80 e0       	ldi	r24, 0x00	; 0
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	a0 e1       	ldi	r26, 0x10	; 16
    5342:	b0 e0       	ldi	r27, 0x00	; 0
    5344:	e8 2a       	or	r14, r24
    5346:	f9 2a       	or	r15, r25
    5348:	0a 2b       	or	r16, r26
    534a:	1b 2b       	or	r17, r27
    534c:	a5 c0       	rjmp	.+330    	; 0x5498 <__pack_f+0x178>
    534e:	84 30       	cpi	r24, 0x04	; 4
    5350:	09 f4       	brne	.+2      	; 0x5354 <__pack_f+0x34>
    5352:	9f c0       	rjmp	.+318    	; 0x5492 <__pack_f+0x172>
    5354:	82 30       	cpi	r24, 0x02	; 2
    5356:	21 f4       	brne	.+8      	; 0x5360 <__pack_f+0x40>
    5358:	ee 24       	eor	r14, r14
    535a:	ff 24       	eor	r15, r15
    535c:	87 01       	movw	r16, r14
    535e:	05 c0       	rjmp	.+10     	; 0x536a <__pack_f+0x4a>
    5360:	e1 14       	cp	r14, r1
    5362:	f1 04       	cpc	r15, r1
    5364:	01 05       	cpc	r16, r1
    5366:	11 05       	cpc	r17, r1
    5368:	19 f4       	brne	.+6      	; 0x5370 <__pack_f+0x50>
    536a:	e0 e0       	ldi	r30, 0x00	; 0
    536c:	f0 e0       	ldi	r31, 0x00	; 0
    536e:	96 c0       	rjmp	.+300    	; 0x549c <__pack_f+0x17c>
    5370:	62 81       	ldd	r22, Z+2	; 0x02
    5372:	73 81       	ldd	r23, Z+3	; 0x03
    5374:	9f ef       	ldi	r25, 0xFF	; 255
    5376:	62 38       	cpi	r22, 0x82	; 130
    5378:	79 07       	cpc	r23, r25
    537a:	0c f0       	brlt	.+2      	; 0x537e <__pack_f+0x5e>
    537c:	5b c0       	rjmp	.+182    	; 0x5434 <__pack_f+0x114>
    537e:	22 e8       	ldi	r18, 0x82	; 130
    5380:	3f ef       	ldi	r19, 0xFF	; 255
    5382:	26 1b       	sub	r18, r22
    5384:	37 0b       	sbc	r19, r23
    5386:	2a 31       	cpi	r18, 0x1A	; 26
    5388:	31 05       	cpc	r19, r1
    538a:	2c f0       	brlt	.+10     	; 0x5396 <__pack_f+0x76>
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	40 e0       	ldi	r20, 0x00	; 0
    5392:	50 e0       	ldi	r21, 0x00	; 0
    5394:	2a c0       	rjmp	.+84     	; 0x53ea <__pack_f+0xca>
    5396:	b8 01       	movw	r22, r16
    5398:	a7 01       	movw	r20, r14
    539a:	02 2e       	mov	r0, r18
    539c:	04 c0       	rjmp	.+8      	; 0x53a6 <__pack_f+0x86>
    539e:	76 95       	lsr	r23
    53a0:	67 95       	ror	r22
    53a2:	57 95       	ror	r21
    53a4:	47 95       	ror	r20
    53a6:	0a 94       	dec	r0
    53a8:	d2 f7       	brpl	.-12     	; 0x539e <__pack_f+0x7e>
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	a0 e0       	ldi	r26, 0x00	; 0
    53b0:	b0 e0       	ldi	r27, 0x00	; 0
    53b2:	04 c0       	rjmp	.+8      	; 0x53bc <__pack_f+0x9c>
    53b4:	88 0f       	add	r24, r24
    53b6:	99 1f       	adc	r25, r25
    53b8:	aa 1f       	adc	r26, r26
    53ba:	bb 1f       	adc	r27, r27
    53bc:	2a 95       	dec	r18
    53be:	d2 f7       	brpl	.-12     	; 0x53b4 <__pack_f+0x94>
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	a1 09       	sbc	r26, r1
    53c4:	b1 09       	sbc	r27, r1
    53c6:	8e 21       	and	r24, r14
    53c8:	9f 21       	and	r25, r15
    53ca:	a0 23       	and	r26, r16
    53cc:	b1 23       	and	r27, r17
    53ce:	00 97       	sbiw	r24, 0x00	; 0
    53d0:	a1 05       	cpc	r26, r1
    53d2:	b1 05       	cpc	r27, r1
    53d4:	21 f0       	breq	.+8      	; 0x53de <__pack_f+0xbe>
    53d6:	81 e0       	ldi	r24, 0x01	; 1
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	a0 e0       	ldi	r26, 0x00	; 0
    53dc:	b0 e0       	ldi	r27, 0x00	; 0
    53de:	9a 01       	movw	r18, r20
    53e0:	ab 01       	movw	r20, r22
    53e2:	28 2b       	or	r18, r24
    53e4:	39 2b       	or	r19, r25
    53e6:	4a 2b       	or	r20, r26
    53e8:	5b 2b       	or	r21, r27
    53ea:	da 01       	movw	r26, r20
    53ec:	c9 01       	movw	r24, r18
    53ee:	8f 77       	andi	r24, 0x7F	; 127
    53f0:	90 70       	andi	r25, 0x00	; 0
    53f2:	a0 70       	andi	r26, 0x00	; 0
    53f4:	b0 70       	andi	r27, 0x00	; 0
    53f6:	80 34       	cpi	r24, 0x40	; 64
    53f8:	91 05       	cpc	r25, r1
    53fa:	a1 05       	cpc	r26, r1
    53fc:	b1 05       	cpc	r27, r1
    53fe:	39 f4       	brne	.+14     	; 0x540e <__pack_f+0xee>
    5400:	27 ff       	sbrs	r18, 7
    5402:	09 c0       	rjmp	.+18     	; 0x5416 <__pack_f+0xf6>
    5404:	20 5c       	subi	r18, 0xC0	; 192
    5406:	3f 4f       	sbci	r19, 0xFF	; 255
    5408:	4f 4f       	sbci	r20, 0xFF	; 255
    540a:	5f 4f       	sbci	r21, 0xFF	; 255
    540c:	04 c0       	rjmp	.+8      	; 0x5416 <__pack_f+0xf6>
    540e:	21 5c       	subi	r18, 0xC1	; 193
    5410:	3f 4f       	sbci	r19, 0xFF	; 255
    5412:	4f 4f       	sbci	r20, 0xFF	; 255
    5414:	5f 4f       	sbci	r21, 0xFF	; 255
    5416:	e0 e0       	ldi	r30, 0x00	; 0
    5418:	f0 e0       	ldi	r31, 0x00	; 0
    541a:	20 30       	cpi	r18, 0x00	; 0
    541c:	a0 e0       	ldi	r26, 0x00	; 0
    541e:	3a 07       	cpc	r19, r26
    5420:	a0 e0       	ldi	r26, 0x00	; 0
    5422:	4a 07       	cpc	r20, r26
    5424:	a0 e4       	ldi	r26, 0x40	; 64
    5426:	5a 07       	cpc	r21, r26
    5428:	10 f0       	brcs	.+4      	; 0x542e <__pack_f+0x10e>
    542a:	e1 e0       	ldi	r30, 0x01	; 1
    542c:	f0 e0       	ldi	r31, 0x00	; 0
    542e:	79 01       	movw	r14, r18
    5430:	8a 01       	movw	r16, r20
    5432:	27 c0       	rjmp	.+78     	; 0x5482 <__pack_f+0x162>
    5434:	60 38       	cpi	r22, 0x80	; 128
    5436:	71 05       	cpc	r23, r1
    5438:	64 f5       	brge	.+88     	; 0x5492 <__pack_f+0x172>
    543a:	fb 01       	movw	r30, r22
    543c:	e1 58       	subi	r30, 0x81	; 129
    543e:	ff 4f       	sbci	r31, 0xFF	; 255
    5440:	d8 01       	movw	r26, r16
    5442:	c7 01       	movw	r24, r14
    5444:	8f 77       	andi	r24, 0x7F	; 127
    5446:	90 70       	andi	r25, 0x00	; 0
    5448:	a0 70       	andi	r26, 0x00	; 0
    544a:	b0 70       	andi	r27, 0x00	; 0
    544c:	80 34       	cpi	r24, 0x40	; 64
    544e:	91 05       	cpc	r25, r1
    5450:	a1 05       	cpc	r26, r1
    5452:	b1 05       	cpc	r27, r1
    5454:	39 f4       	brne	.+14     	; 0x5464 <__pack_f+0x144>
    5456:	e7 fe       	sbrs	r14, 7
    5458:	0d c0       	rjmp	.+26     	; 0x5474 <__pack_f+0x154>
    545a:	80 e4       	ldi	r24, 0x40	; 64
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	a0 e0       	ldi	r26, 0x00	; 0
    5460:	b0 e0       	ldi	r27, 0x00	; 0
    5462:	04 c0       	rjmp	.+8      	; 0x546c <__pack_f+0x14c>
    5464:	8f e3       	ldi	r24, 0x3F	; 63
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	a0 e0       	ldi	r26, 0x00	; 0
    546a:	b0 e0       	ldi	r27, 0x00	; 0
    546c:	e8 0e       	add	r14, r24
    546e:	f9 1e       	adc	r15, r25
    5470:	0a 1f       	adc	r16, r26
    5472:	1b 1f       	adc	r17, r27
    5474:	17 ff       	sbrs	r17, 7
    5476:	05 c0       	rjmp	.+10     	; 0x5482 <__pack_f+0x162>
    5478:	16 95       	lsr	r17
    547a:	07 95       	ror	r16
    547c:	f7 94       	ror	r15
    547e:	e7 94       	ror	r14
    5480:	31 96       	adiw	r30, 0x01	; 1
    5482:	87 e0       	ldi	r24, 0x07	; 7
    5484:	16 95       	lsr	r17
    5486:	07 95       	ror	r16
    5488:	f7 94       	ror	r15
    548a:	e7 94       	ror	r14
    548c:	8a 95       	dec	r24
    548e:	d1 f7       	brne	.-12     	; 0x5484 <__pack_f+0x164>
    5490:	05 c0       	rjmp	.+10     	; 0x549c <__pack_f+0x17c>
    5492:	ee 24       	eor	r14, r14
    5494:	ff 24       	eor	r15, r15
    5496:	87 01       	movw	r16, r14
    5498:	ef ef       	ldi	r30, 0xFF	; 255
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	6e 2f       	mov	r22, r30
    549e:	67 95       	ror	r22
    54a0:	66 27       	eor	r22, r22
    54a2:	67 95       	ror	r22
    54a4:	90 2f       	mov	r25, r16
    54a6:	9f 77       	andi	r25, 0x7F	; 127
    54a8:	d7 94       	ror	r13
    54aa:	dd 24       	eor	r13, r13
    54ac:	d7 94       	ror	r13
    54ae:	8e 2f       	mov	r24, r30
    54b0:	86 95       	lsr	r24
    54b2:	49 2f       	mov	r20, r25
    54b4:	46 2b       	or	r20, r22
    54b6:	58 2f       	mov	r21, r24
    54b8:	5d 29       	or	r21, r13
    54ba:	b7 01       	movw	r22, r14
    54bc:	ca 01       	movw	r24, r20
    54be:	1f 91       	pop	r17
    54c0:	0f 91       	pop	r16
    54c2:	ff 90       	pop	r15
    54c4:	ef 90       	pop	r14
    54c6:	df 90       	pop	r13
    54c8:	08 95       	ret

000054ca <__unpack_f>:
    54ca:	fc 01       	movw	r30, r24
    54cc:	db 01       	movw	r26, r22
    54ce:	40 81       	ld	r20, Z
    54d0:	51 81       	ldd	r21, Z+1	; 0x01
    54d2:	22 81       	ldd	r18, Z+2	; 0x02
    54d4:	62 2f       	mov	r22, r18
    54d6:	6f 77       	andi	r22, 0x7F	; 127
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	22 1f       	adc	r18, r18
    54dc:	22 27       	eor	r18, r18
    54de:	22 1f       	adc	r18, r18
    54e0:	93 81       	ldd	r25, Z+3	; 0x03
    54e2:	89 2f       	mov	r24, r25
    54e4:	88 0f       	add	r24, r24
    54e6:	82 2b       	or	r24, r18
    54e8:	28 2f       	mov	r18, r24
    54ea:	30 e0       	ldi	r19, 0x00	; 0
    54ec:	99 1f       	adc	r25, r25
    54ee:	99 27       	eor	r25, r25
    54f0:	99 1f       	adc	r25, r25
    54f2:	11 96       	adiw	r26, 0x01	; 1
    54f4:	9c 93       	st	X, r25
    54f6:	11 97       	sbiw	r26, 0x01	; 1
    54f8:	21 15       	cp	r18, r1
    54fa:	31 05       	cpc	r19, r1
    54fc:	a9 f5       	brne	.+106    	; 0x5568 <__unpack_f+0x9e>
    54fe:	41 15       	cp	r20, r1
    5500:	51 05       	cpc	r21, r1
    5502:	61 05       	cpc	r22, r1
    5504:	71 05       	cpc	r23, r1
    5506:	11 f4       	brne	.+4      	; 0x550c <__unpack_f+0x42>
    5508:	82 e0       	ldi	r24, 0x02	; 2
    550a:	37 c0       	rjmp	.+110    	; 0x557a <__unpack_f+0xb0>
    550c:	82 e8       	ldi	r24, 0x82	; 130
    550e:	9f ef       	ldi	r25, 0xFF	; 255
    5510:	13 96       	adiw	r26, 0x03	; 3
    5512:	9c 93       	st	X, r25
    5514:	8e 93       	st	-X, r24
    5516:	12 97       	sbiw	r26, 0x02	; 2
    5518:	9a 01       	movw	r18, r20
    551a:	ab 01       	movw	r20, r22
    551c:	67 e0       	ldi	r22, 0x07	; 7
    551e:	22 0f       	add	r18, r18
    5520:	33 1f       	adc	r19, r19
    5522:	44 1f       	adc	r20, r20
    5524:	55 1f       	adc	r21, r21
    5526:	6a 95       	dec	r22
    5528:	d1 f7       	brne	.-12     	; 0x551e <__unpack_f+0x54>
    552a:	83 e0       	ldi	r24, 0x03	; 3
    552c:	8c 93       	st	X, r24
    552e:	0d c0       	rjmp	.+26     	; 0x554a <__unpack_f+0x80>
    5530:	22 0f       	add	r18, r18
    5532:	33 1f       	adc	r19, r19
    5534:	44 1f       	adc	r20, r20
    5536:	55 1f       	adc	r21, r21
    5538:	12 96       	adiw	r26, 0x02	; 2
    553a:	8d 91       	ld	r24, X+
    553c:	9c 91       	ld	r25, X
    553e:	13 97       	sbiw	r26, 0x03	; 3
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	13 96       	adiw	r26, 0x03	; 3
    5544:	9c 93       	st	X, r25
    5546:	8e 93       	st	-X, r24
    5548:	12 97       	sbiw	r26, 0x02	; 2
    554a:	20 30       	cpi	r18, 0x00	; 0
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	38 07       	cpc	r19, r24
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	48 07       	cpc	r20, r24
    5554:	80 e4       	ldi	r24, 0x40	; 64
    5556:	58 07       	cpc	r21, r24
    5558:	58 f3       	brcs	.-42     	; 0x5530 <__unpack_f+0x66>
    555a:	14 96       	adiw	r26, 0x04	; 4
    555c:	2d 93       	st	X+, r18
    555e:	3d 93       	st	X+, r19
    5560:	4d 93       	st	X+, r20
    5562:	5c 93       	st	X, r21
    5564:	17 97       	sbiw	r26, 0x07	; 7
    5566:	08 95       	ret
    5568:	2f 3f       	cpi	r18, 0xFF	; 255
    556a:	31 05       	cpc	r19, r1
    556c:	79 f4       	brne	.+30     	; 0x558c <__unpack_f+0xc2>
    556e:	41 15       	cp	r20, r1
    5570:	51 05       	cpc	r21, r1
    5572:	61 05       	cpc	r22, r1
    5574:	71 05       	cpc	r23, r1
    5576:	19 f4       	brne	.+6      	; 0x557e <__unpack_f+0xb4>
    5578:	84 e0       	ldi	r24, 0x04	; 4
    557a:	8c 93       	st	X, r24
    557c:	08 95       	ret
    557e:	64 ff       	sbrs	r22, 4
    5580:	03 c0       	rjmp	.+6      	; 0x5588 <__unpack_f+0xbe>
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	8c 93       	st	X, r24
    5586:	12 c0       	rjmp	.+36     	; 0x55ac <__unpack_f+0xe2>
    5588:	1c 92       	st	X, r1
    558a:	10 c0       	rjmp	.+32     	; 0x55ac <__unpack_f+0xe2>
    558c:	2f 57       	subi	r18, 0x7F	; 127
    558e:	30 40       	sbci	r19, 0x00	; 0
    5590:	13 96       	adiw	r26, 0x03	; 3
    5592:	3c 93       	st	X, r19
    5594:	2e 93       	st	-X, r18
    5596:	12 97       	sbiw	r26, 0x02	; 2
    5598:	83 e0       	ldi	r24, 0x03	; 3
    559a:	8c 93       	st	X, r24
    559c:	87 e0       	ldi	r24, 0x07	; 7
    559e:	44 0f       	add	r20, r20
    55a0:	55 1f       	adc	r21, r21
    55a2:	66 1f       	adc	r22, r22
    55a4:	77 1f       	adc	r23, r23
    55a6:	8a 95       	dec	r24
    55a8:	d1 f7       	brne	.-12     	; 0x559e <__unpack_f+0xd4>
    55aa:	70 64       	ori	r23, 0x40	; 64
    55ac:	14 96       	adiw	r26, 0x04	; 4
    55ae:	4d 93       	st	X+, r20
    55b0:	5d 93       	st	X+, r21
    55b2:	6d 93       	st	X+, r22
    55b4:	7c 93       	st	X, r23
    55b6:	17 97       	sbiw	r26, 0x07	; 7
    55b8:	08 95       	ret

000055ba <__prologue_saves__>:
    55ba:	2f 92       	push	r2
    55bc:	3f 92       	push	r3
    55be:	4f 92       	push	r4
    55c0:	5f 92       	push	r5
    55c2:	6f 92       	push	r6
    55c4:	7f 92       	push	r7
    55c6:	8f 92       	push	r8
    55c8:	9f 92       	push	r9
    55ca:	af 92       	push	r10
    55cc:	bf 92       	push	r11
    55ce:	cf 92       	push	r12
    55d0:	df 92       	push	r13
    55d2:	ef 92       	push	r14
    55d4:	ff 92       	push	r15
    55d6:	0f 93       	push	r16
    55d8:	1f 93       	push	r17
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
    55e2:	ca 1b       	sub	r28, r26
    55e4:	db 0b       	sbc	r29, r27
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	f8 94       	cli
    55ea:	de bf       	out	0x3e, r29	; 62
    55ec:	0f be       	out	0x3f, r0	; 63
    55ee:	cd bf       	out	0x3d, r28	; 61
    55f0:	09 94       	ijmp

000055f2 <__epilogue_restores__>:
    55f2:	2a 88       	ldd	r2, Y+18	; 0x12
    55f4:	39 88       	ldd	r3, Y+17	; 0x11
    55f6:	48 88       	ldd	r4, Y+16	; 0x10
    55f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    55fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    55fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    55fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    5600:	9b 84       	ldd	r9, Y+11	; 0x0b
    5602:	aa 84       	ldd	r10, Y+10	; 0x0a
    5604:	b9 84       	ldd	r11, Y+9	; 0x09
    5606:	c8 84       	ldd	r12, Y+8	; 0x08
    5608:	df 80       	ldd	r13, Y+7	; 0x07
    560a:	ee 80       	ldd	r14, Y+6	; 0x06
    560c:	fd 80       	ldd	r15, Y+5	; 0x05
    560e:	0c 81       	ldd	r16, Y+4	; 0x04
    5610:	1b 81       	ldd	r17, Y+3	; 0x03
    5612:	aa 81       	ldd	r26, Y+2	; 0x02
    5614:	b9 81       	ldd	r27, Y+1	; 0x01
    5616:	ce 0f       	add	r28, r30
    5618:	d1 1d       	adc	r29, r1
    561a:	0f b6       	in	r0, 0x3f	; 63
    561c:	f8 94       	cli
    561e:	de bf       	out	0x3e, r29	; 62
    5620:	0f be       	out	0x3f, r0	; 63
    5622:	cd bf       	out	0x3d, r28	; 61
    5624:	ed 01       	movw	r28, r26
    5626:	08 95       	ret

00005628 <_exit>:
    5628:	f8 94       	cli

0000562a <__stop_program>:
    562a:	ff cf       	rjmp	.-2      	; 0x562a <__stop_program>


test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  000056c0  00005754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000056c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  00005864  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00005864  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  000058e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00005ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  00007a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  0000823e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000096fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  0000a438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000b7c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__ctors_end>
       4:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
       8:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
       c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      10:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      14:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      18:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      1c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      20:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      24:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      28:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      2c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      30:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      34:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      38:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      3c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      40:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      44:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      48:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      4c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      50:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      54:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      58:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      5c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      60:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      64:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      68:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      6c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      70:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      74:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      78:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      7c:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      80:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      84:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>
      88:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 04 09 00 00 00 00 ff 00 05 09 ff 00 00     .p..............
      9c:	00 ff 00 06 09 ff 00 00 00 ff 00 07 09 00 00 00     ................
      ac:	00 ff 00 ff ff 70 17 00 03 ff 00 00 00 00 00 01     .....p..........
      bc:	00 10 00 01 03 ff 00 ff 00 00 00 01 00 10 00 02     ................
      cc:	03 00 00 ff 00 00 00 01 00 10 00 03 03 00 00 ff     ................
      dc:	00 ff 00 01 00 10 00 04 03 00 00 00 00 ff 00 01     ................
      ec:	00 10 00 05 03 ff 00 00 00 ff 00 01 00 10 00 06     ................
      fc:	03 ff 00 00 00 ff 00 01 00 10 00 07 03 00 00 00     ................
     10c:	00 ff 00 01 00 10 00 08 03 00 00 ff 00 ff 00 01     ................
     11c:	00 10 00 09 03 00 00 ff 00 00 00 01 00 10 00 0a     ................
     12c:	03 ff 00 ff 00 00 00 01 00 10 00 0b 03 ff 00 00     ................
     13c:	00 00 00 01 00 10 00 ff ff 70 17 00 03 ff 00 ff     .........p......
     14c:	00 ff 00 01 00 10 00 01 03 ff 00 ff 00 ff 00 01     ................
     15c:	00 10 00 02 03 ff 00 ff 00 ff 00 01 00 10 00 03     ................
     16c:	03 ff 00 ff 00 ff 00 01 00 10 00 04 03 ff 00 ff     ................
     17c:	00 ff 00 01 00 10 00 05 03 ff 00 ff 00 ff 00 01     ................
     18c:	00 10 00 06 03 ff 00 ff 00 ff 00 01 00 10 00 07     ................
     19c:	03 ff 00 ff 00 ff 00 01 00 10 00 08 03 ff 00 ff     ................
     1ac:	00 ff 00 01 00 10 00 09 03 ff 00 ff 00 ff 00 01     ................
     1bc:	00 10 00 0a 03 ff 00 ff 00 ff 00 01 00 10 00 0b     ................
     1cc:	03 ff 00 ff 00 ff 00 01 00 10 00 ff ff 70 17 00     .............p..
     1dc:	05 ff 00 00 00 00 00 00 00 00 00 00 00 00 20 01     .............. .
     1ec:	00 10 00 01 05 ff 00 ff 00 00 00 00 00 00 00 00     ................
     1fc:	00 00 20 01 00 10 00 02 05 00 00 ff 00 00 00 00     .. .............
     20c:	00 00 00 00 00 00 20 01 00 10 00 03 05 00 00 ff     ...... .........
     21c:	00 ff 00 00 00 00 00 00 00 00 20 01 00 10 00 04     .......... .....
     22c:	05 00 00 00 00 ff 00 00 00 00 00 00 00 00 20 01     .............. .
     23c:	00 10 00 05 05 ff 00 00 00 ff 00 00 00 00 00 00     ................
     24c:	00 00 20 01 00 10 00 06 05 ff 00 00 00 ff 00 00     .. .............
     25c:	00 00 00 00 00 00 20 01 00 10 00 07 05 00 00 00     ...... .........
     26c:	00 ff 00 00 00 00 00 00 00 00 20 01 00 10 00 08     .......... .....
     27c:	05 00 00 ff 00 ff 00 00 00 00 00 00 00 00 20 01     .............. .
     28c:	00 10 00 09 05 00 00 ff 00 00 00 00 00 00 00 00     ................
     29c:	00 00 20 01 00 10 00 0a 05 ff 00 ff 00 00 00 00     .. .............
     2ac:	00 00 00 00 00 00 20 01 00 10 00 0b 05 ff 00 00     ...... .........
	...
     2c4:	00 00 20 01 00 10 00 ff ff 70 17 05 08 02 00 00     .. ......p......
     2d4:	00 00 00 00 00 10 00 00 00 00 00 0f 00 01 00 06     ................
     2e4:	08 02 00 00 00 00 00 00 00 10 00 00 00 00 00 0f     ................
     2f4:	00 01 00 ff ff 70 17 05 08 02 00 00 00 00 00 00     .....p..........
     304:	00 20 00 00 00 00 00 32 00 01 00 06 08 02 00 00     . .....2........
     314:	00 00 00 00 00 20 00 00 00 00 00 32 00 01 00 ff     ..... .....2....
     324:	ff 70 17 05 08 02 00 00 00 00 00 00 00 20 00 00     .p........... ..
     334:	00 00 00 ff 00 01 00 06 08 02 00 00 00 00 00 00     ................
     344:	00 20 00 00 00 00 00 ff 00 01 00 ff ff 70 17 05     . ...........p..
     354:	08 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     364:	00 01 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
     374:	00 01 00 06 08 04 00 00 00 00 00 00 00 20 00 00     ............. ..
     384:	00 00 00 ff 00 01 00 00 00 00 00 00 00 20 00 ff     ............. ..
     394:	00 00 00 7d 00 01 00 ff ff 70 17 05 08 04 00 00     ...}.....p......
     3a4:	00 00 00 00 00 20 00 00 00 00 00 ff 00 01 00 00     ..... ..........
     3b4:	00 00 00 00 00 20 00 00 00 ff 00 00 00 01 00 06     ..... ..........
     3c4:	08 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     3d4:	00 01 00 00 00 00 00 00 00 20 00 ff 00 00 00 7d     ......... .....}
     3e4:	00 01 00 ff ff 70 17 05 08 04 00 00 00 00 00 00     .....p..........
     3f4:	00 08 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     404:	00 08 00 00 00 ff 00 00 00 01 00 06 08 04 00 00     ................
     414:	00 00 00 00 00 08 00 00 00 00 00 ff 00 01 00 00     ................
     424:	00 00 00 00 00 08 00 ff 00 00 00 7d 00 01 00 ff     ...........}....
     434:	ff 70 17 05 08 04 00 00 00 00 00 00 00 03 00 00     .p..............
     444:	00 00 00 ff 00 01 00 00 00 00 00 00 00 03 00 00     ................
     454:	00 ff 00 00 00 01 00 06 08 04 00 00 00 00 00 00     ................
     464:	00 03 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     474:	00 03 00 ff 00 00 00 7d 00 01 00 ff ff 70 17 05     .......}.....p..
     484:	08 02 00 00 00 7d 00 00 00 09 00 00 00 00 00 7d     .....}.........}
     494:	00 09 00 06 08 02 00 ff 00 00 00 7d 00 09 00 00     ...........}....
     4a4:	00 00 00 7d 00 09 00 ff ff 70 17 04 08 02 00 ff     ...}.....p......
     4b4:	00 00 00 7d 00 09 00 00 00 00 00 00 00 10 00 05     ...}............
     4c4:	08 03 00 00 00 7d 00 00 00 09 00 00 00 00 00 7d     .....}.........}
     4d4:	00 09 00 ff 00 ff 00 ff 00 03 00 06 08 03 00 ff     ................
     4e4:	00 00 00 7d 00 09 00 00 00 00 00 7d 00 09 00 ff     ...}.......}....
     4f4:	00 ff 00 ff 00 03 00 07 08 02 00 00 00 7d 00 00     .............}..
     504:	00 09 00 00 00 00 00 00 00 10 00 ff ff 6f 17 00     .............o..
     514:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     524:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     534:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     544:	00 01 00 00 00 00 00 00 00 26 00 01 08 07 00 ff     .........&......
     554:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     564:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     574:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     584:	00 00 00 00 00 26 00 02 08 07 00 ff 00 00 00 00     .....&..........
     594:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     5a4:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     5b4:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     5c4:	00 26 00 03 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     5d4:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     5e4:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     5f4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 04     .............&..
     604:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     614:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     624:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     634:	00 01 00 00 00 00 00 00 00 26 00 05 08 07 00 ff     .........&......
     644:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     654:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     664:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     674:	00 00 00 00 00 26 00 06 08 07 00 ff 00 00 00 00     .....&..........
     684:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     694:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     6a4:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     6b4:	00 26 00 07 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     6c4:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     6d4:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     6e4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 08     .............&..
     6f4:	08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     704:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     714:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     724:	00 01 00 00 00 00 00 00 00 26 00 09 08 07 00 ff     .........&......
     734:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     744:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     754:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     764:	00 00 00 00 00 26 00 0a 08 07 00 ff 00 00 00 00     .....&..........
     774:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     784:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     794:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     7a4:	00 26 00 0b 08 07 00 ff 00 00 00 00 00 02 00 ff     .&..............
     7b4:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     7c4:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     7d4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 ff     .............&..
     7e4:	ff 38 18 05 03 7d 00 00 00 00 00 01 00 1e 00 06     .8...}..........
     7f4:	03 7d 00 00 00 00 00 01 00 1e 00 ff ff 0a 00 05     .}..............
     804:	03 7d 00 00 00 00 00 01 00 0a 00 06 03 7d 00 00     .}...........}..
     814:	00 00 00 01 00 0a 00 ff ff 09 00 05 05 ff 00 00     ................
     824:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 0a 00 06     .....}..........
     834:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     844:	00 0a 00 ff ff 09 00 05 05 ff 00 00 00 00 00 ff     ................
     854:	00 7d 00 00 00 03 00 01 00 05 00 06 05 ff 00 00     .}..............
     864:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 05 00 ff     .....}..........
     874:	ff 09 00 04 05 ff 00 00 00 00 00 ff 00 7d 00 00     .............}..
     884:	00 03 00 01 00 05 00 05 05 ff 00 00 00 00 00 ff     ................
     894:	00 7d 00 00 00 03 00 01 00 05 00 06 05 ff 00 00     .}..............
     8a4:	00 00 00 ff 00 7d 00 00 00 03 00 01 00 05 00 07     .....}..........
     8b4:	05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03 00 01     .........}......
     8c4:	00 05 00 ff ff 02 00 00 08 08 00 ff 00 00 00 00     ................
     8d4:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     8e4:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     8f4:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     904:	00 01 00 00 00 00 00 00 00 0c 00 01 08 08 00 ff     ................
     914:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     924:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     934:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     944:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 02     ................
     954:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     964:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     974:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     984:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     994:	00 0c 00 03 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     9a4:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     9b4:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     9c4:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     9d4:	00 00 00 00 00 0c 00 05 08 04 00 80 00 40 00 00     .............@..
     9e4:	00 04 00 00 00 00 00 00 00 20 00 ff 00 00 00 00     ......... ......
     9f4:	00 04 00 00 00 00 00 00 00 20 00 06 08 04 00 ff     ......... ......
     a04:	00 00 00 00 00 04 00 00 00 00 00 00 00 20 00 80     ............. ..
     a14:	00 1e 00 00 00 04 00 00 00 00 00 00 00 20 00 08     ............. ..
     a24:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     a34:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     a44:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     a54:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     a64:	00 0c 00 09 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     a74:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     a84:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     a94:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     aa4:	00 00 00 00 00 0c 00 0a 08 08 00 ff 00 00 00 00     ................
     ab4:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     ac4:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     ad4:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     ae4:	00 01 00 00 00 00 00 00 00 0c 00 0b 08 08 00 ff     ................
     af4:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     b04:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     b14:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     b24:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     b34:	ff 73 00 00 08 04 00 40 00 00 00 80 00 01 00 00     .s.....@........
     b44:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     b54:	00 00 00 00 00 08 00 01 08 04 00 40 00 00 00 80     ...........@....
     b64:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     b74:	00 01 00 00 00 00 00 00 00 08 00 02 08 04 00 40     ...............@
     b84:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     b94:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 03     .`.`............
     ba4:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     bb4:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     bc4:	00 08 00 05 08 08 00 40 00 00 00 80 00 08 00 00     .......@........
     bd4:	00 00 00 00 00 20 00 ff 00 1e 00 00 00 08 00 00     ..... ..........
     be4:	00 00 00 00 00 20 00 ff 00 00 00 00 00 08 00 00     ..... ..........
     bf4:	00 00 00 00 00 20 00 ff 00 00 00 1e 00 08 00 00     ..... ..........
     c04:	00 00 00 00 00 20 00 06 08 08 00 40 00 00 00 80     ..... .....@....
     c14:	00 08 00 00 00 00 00 00 00 20 00 ff 00 1e 00 00     ......... ......
     c24:	00 08 00 00 00 00 00 00 00 20 00 ff 00 00 00 00     ......... ......
     c34:	00 08 00 00 00 00 00 00 00 20 00 ff 00 00 00 1e     ......... ......
     c44:	00 08 00 00 00 00 00 00 00 20 00 08 08 04 00 40     ......... .....@
     c54:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     c64:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 09     .`.`............
     c74:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     c84:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     c94:	00 08 00 0a 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     ca4:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     cb4:	00 00 00 00 00 08 00 0b 08 04 00 40 00 00 00 80     ...........@....
     cc4:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     cd4:	00 01 00 00 00 00 00 00 00 08 00 ff ff 01 00 04     ................
     ce4:	08 04 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     ................
     cf4:	00 10 00 00 00 ff 00 00 00 04 00 00 00 00 00 00     ................
     d04:	00 10 00 05 03 ff 00 00 00 80 00 01 00 10 00 06     ................
     d14:	03 ff 00 00 00 80 00 01 00 10 00 07 08 04 00 00     ................
     d24:	00 00 00 ff 00 04 00 00 00 00 00 00 00 10 00 00     ................
     d34:	00 ff 00 00 00 04 00 00 00 00 00 00 00 10 00 ff     ................
     d44:	ff 01 00 04 08 04 00 ff 00 00 00 00 00 04 00 00     ................
     d54:	00 00 00 00 00 10 00 00 00 00 00 ff 00 04 00 00     ................
     d64:	00 00 00 00 00 10 00 07 08 04 00 00 00 00 00 ff     ................
     d74:	00 04 00 00 00 00 00 00 00 10 00 ff 00 00 00 00     ................
     d84:	00 04 00 00 00 00 00 00 00 10 00 ff ff 12 00 00     ................
     d94:	08 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     da4:	00 10 00 00 00 ff 00 5a 00 01 00 00 00 00 00 00     .......Z........
     db4:	00 10 00 01 08 06 00 00 00 ff 00 00 00 02 00 00     ................
     dc4:	00 00 00 00 00 10 00 60 00 60 00 60 00 02 00 00     .......`.`.`....
     dd4:	00 00 00 00 00 20 00 00 00 ff 00 5a 00 02 00 00     ..... .....Z....
     de4:	00 00 00 00 00 10 00 02 08 06 00 00 00 ff 00 00     ................
     df4:	00 02 00 00 00 00 00 00 00 10 00 60 00 60 00 60     ...........`.`.`
     e04:	00 02 00 00 00 00 00 00 00 20 00 00 00 ff 00 5a     ......... .....Z
     e14:	00 02 00 00 00 00 00 00 00 10 00 03 08 04 00 00     ................
     e24:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 00     ................
     e34:	00 ff 00 5a 00 01 00 00 00 00 00 00 00 10 00 05     ...Z............
     e44:	08 02 00 40 00 00 00 80 00 08 00 00 00 00 00 00     ...@............
     e54:	00 20 00 06 08 02 00 40 00 00 00 80 00 08 00 00     . .....@........
     e64:	00 00 00 00 00 20 00 08 08 04 00 00 00 ff 00 00     ..... ..........
     e74:	00 02 00 00 00 00 00 00 00 10 00 00 00 ff 00 5a     ...............Z
     e84:	00 02 00 00 00 00 00 00 00 10 00 09 08 06 00 00     ................
     e94:	00 ff 00 00 00 02 00 00 00 00 00 00 00 10 00 60     ...............`
     ea4:	00 60 00 60 00 02 00 00 00 00 00 00 00 20 00 00     .`.`......... ..
     eb4:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 10 00 0a     ...Z............
     ec4:	08 06 00 00 00 ff 00 00 00 02 00 00 00 00 00 00     ................
     ed4:	00 10 00 60 00 60 00 60 00 02 00 00 00 00 00 00     ...`.`.`........
     ee4:	00 20 00 00 00 ff 00 5a 00 02 00 00 00 00 00 00     . .....Z........
     ef4:	00 10 00 0b 08 04 00 00 00 ff 00 00 00 02 00 00     ................
     f04:	00 00 00 00 00 10 00 00 00 ff 00 5a 00 02 00 00     ...........Z....
     f14:	00 00 00 00 00 10 00 ff ff 0a 00 00 08 04 00 09     ................
     f24:	00 09 00 ff 00 01 00 00 00 00 00 00 00 05 00 ff     ................
     f34:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 01     ................
     f44:	08 04 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     f54:	00 05 00 09 00 09 00 ff 00 01 00 00 00 00 00 00     ................
     f64:	00 01 00 02 08 04 00 09 00 09 00 ff 00 01 00 00     ................
     f74:	00 00 00 00 00 05 00 ff 00 c8 00 00 00 01 00 00     ................
     f84:	00 00 00 00 00 01 00 03 08 04 00 ff 00 c8 00 00     ................
     f94:	00 01 00 00 00 00 00 00 00 05 00 09 00 09 00 ff     ................
     fa4:	00 01 00 00 00 00 00 00 00 01 00 05 08 02 00 ff     ................
     fb4:	00 ff 00 ff 00 10 00 00 00 00 00 00 00 20 00 06     ............. ..
     fc4:	08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00 00 00     ................
     fd4:	00 20 00 08 08 04 00 ff 00 c8 00 00 00 01 00 00     . ..............
     fe4:	00 00 00 00 00 05 00 09 00 09 00 ff 00 01 00 00     ................
     ff4:	00 00 00 00 00 01 00 09 08 04 00 09 00 09 00 ff     ................
    1004:	00 01 00 00 00 00 00 00 00 05 00 ff 00 c8 00 00     ................
    1014:	00 01 00 00 00 00 00 00 00 01 00 0a 08 04 00 ff     ................
    1024:	00 c8 00 00 00 01 00 00 00 00 00 00 00 05 00 09     ................
    1034:	00 09 00 ff 00 01 00 00 00 00 00 00 00 01 00 0b     ................
    1044:	08 04 00 09 00 09 00 ff 00 01 00 00 00 00 00 00     ................
    1054:	00 05 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
    1064:	00 01 00 ff ff 05 00 00 08 0a 00 40 00 00 00 80     ...........@....
    1074:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1084:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    1094:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    10a4:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    10b4:	00 01 00 00 00 00 00 00 00 01 00 01 08 0a 00 ff     ................
    10c4:	00 00 00 10 00 01 00 00 00 00 00 00 00 01 00 00     ................
    10d4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    10e4:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
    10f4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1104:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 02     ................
    1114:	08 0a 00 ff 00 00 00 10 00 01 00 00 00 00 00 00     ................
    1124:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1134:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1144:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1154:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1164:	00 01 00 03 08 0a 00 ff 00 00 00 10 00 01 00 00     ................
    1174:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1184:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    1194:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    11a4:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    11b4:	00 00 00 00 00 01 00 05 08 0a 00 ff 00 00 00 10     ................
    11c4:	00 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
    11d4:	00 04 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
    11e4:	00 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
    11f4:	00 04 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
    1204:	00 04 00 00 00 00 00 00 00 20 00 06 08 0a 00 ff     ......... ......
    1214:	00 00 00 10 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    1224:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    1234:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    1244:	00 00 00 ff 00 04 00 00 00 00 00 00 00 20 00 00     ............. ..
    1254:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 08     ............. ..
    1264:	08 0a 00 ff 00 00 00 10 00 01 00 00 00 00 00 00     ................
    1274:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1284:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1294:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    12a4:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    12b4:	00 01 00 09 08 0a 00 ff 00 00 00 10 00 01 00 00     ................
    12c4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    12d4:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    12e4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    12f4:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    1304:	00 00 00 00 00 01 00 0a 08 0a 00 ff 00 00 00 10     ................
    1314:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1324:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    1334:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1344:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
    1354:	00 01 00 00 00 00 00 00 00 01 00 0b 08 0a 00 ff     ................
    1364:	00 00 00 10 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1374:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1384:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
    1394:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
    13a4:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 ff     ................
    13b4:	ff 05 00 00 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    13c4:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 ff     ................
    13d4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    13e4:	00 00 00 00 00 01 00 01 08 06 00 ff 00 ff 00 ff     ................
    13f4:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1404:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
    1414:	00 01 00 00 00 00 00 00 00 01 00 02 08 06 00 ff     ................
    1424:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1434:	00 00 00 00 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1444:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 03     ................
    1454:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    1464:	00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1474:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1484:	00 01 00 05 08 04 00 00 00 00 00 ff 00 20 00 00     ............. ..
    1494:	00 00 00 00 00 40 00 ff 00 00 00 00 00 20 00 00     .....@....... ..
    14a4:	00 00 00 00 00 40 00 06 08 04 00 ff 00 00 00 00     .....@..........
    14b4:	00 20 00 00 00 00 00 00 00 40 00 00 00 00 00 ff     . .......@......
    14c4:	00 20 00 00 00 00 00 00 00 40 00 08 08 06 00 ff     . .......@......
    14d4:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    14e4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
    14f4:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 09     ................
    1504:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    1514:	00 08 00 00 00 00 00 00 00 01 00 ff 00 00 00 00     ................
    1524:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1534:	00 01 00 0a 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    1544:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00     ................
    1554:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1564:	00 00 00 00 00 01 00 0b 08 06 00 ff 00 ff 00 ff     ................
    1574:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1584:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1594:	00 01 00 00 00 00 00 00 00 01 00 ff ff 0a 00 00     ................
    15a4:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    15b4:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    15c4:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    15d4:	00 04 00 01 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    15e4:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    15f4:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    1604:	00 00 00 00 00 04 00 02 08 06 00 80 00 00 00 ff     ................
    1614:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    1624:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    1634:	00 01 00 00 00 00 00 00 00 04 00 03 08 06 00 80     ................
    1644:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    1654:	00 00 00 ff 00 01 00 00 00 00 00 01 00 04 00 00     ................
    1664:	00 ff 00 00 00 01 00 00 00 00 00 01 00 04 00 04     ................
    1674:	03 80 00 00 00 ff 00 01 00 40 00 07 03 80 00 00     .........@......
    1684:	00 ff 00 01 00 40 00 08 08 06 00 80 00 00 00 ff     .....@..........
    1694:	00 01 00 00 00 00 00 01 00 04 00 00 00 00 00 ff     ................
    16a4:	00 01 00 00 00 00 00 01 00 04 00 00 00 ff 00 00     ................
    16b4:	00 01 00 00 00 00 00 01 00 04 00 09 08 06 00 80     ................
    16c4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    16d4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    16e4:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 0a     ................
    16f4:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1704:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1714:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    1724:	00 04 00 0b 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    1734:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    1744:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    1754:	00 00 00 00 00 04 00 ff ff d2 00 00 03 40 00 00     .............@..
    1764:	00 80 00 01 00 04 00 01 08 02 00 40 00 00 00 80     ...........@....
    1774:	00 01 00 00 00 00 00 00 00 08 00 02 08 03 00 40     ...............@
    1784:	00 00 00 80 00 04 00 64 00 14 00 00 00 04 00 02     .......d........
    1794:	00 00 00 01 00 18 00 03 08 02 00 40 00 00 00 80     ...........@....
    17a4:	00 19 00 64 00 14 00 00 00 19 00 05 08 03 00 64     ...d...........d
    17b4:	00 00 00 00 00 03 00 ff 00 3c 00 00 00 03 00 00     .........<......
    17c4:	00 00 00 00 00 23 00 06 08 03 00 64 00 00 00 00     .....#.....d....
    17d4:	00 03 00 ff 00 3c 00 00 00 03 00 00 00 00 00 00     .....<..........
    17e4:	00 23 00 08 08 02 00 40 00 00 00 80 00 19 00 64     .#.....@.......d
    17f4:	00 14 00 00 00 19 00 09 08 03 00 40 00 00 00 80     ...........@....
    1804:	00 04 00 64 00 14 00 00 00 04 00 02 00 00 00 01     ...d............
    1814:	00 18 00 0a 08 02 00 40 00 00 00 80 00 01 00 00     .......@........
    1824:	00 00 00 00 00 08 00 0b 03 40 00 00 00 80 00 01     .........@......
    1834:	00 04 00 ff ff c8 00 00 08 06 00 ff 00 00 00 00     ................
    1844:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1854:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1864:	00 08 00 00 00 00 00 00 00 01 00 01 08 06 00 ff     ................
    1874:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1884:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1894:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 02     ................
    18a4:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    18b4:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    18c4:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    18d4:	00 01 00 03 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    18e4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    18f4:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1904:	00 00 00 00 00 01 00 05 05 ff 00 00 00 00 00 00     ................
    1914:	00 00 00 ff 00 0a 00 14 00 4b 00 06 05 ff 00 00     .........K......
    1924:	00 00 00 00 00 00 00 ff 00 0a 00 14 00 4b 00 08     .............K..
    1934:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1944:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1954:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1964:	00 01 00 09 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    1974:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1984:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1994:	00 00 00 00 00 01 00 0a 08 06 00 ff 00 00 00 00     ................
    19a4:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    19b4:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    19c4:	00 08 00 00 00 00 00 00 00 01 00 0b 08 06 00 ff     ................
    19d4:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    19e4:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    19f4:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 ff     ................
    1a04:	ff 0a 00 00 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1a14:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 01     ................
    1a24:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1a34:	00 01 00 00 00 00 00 00 00 0c 00 02 08 03 00 ff     ................
    1a44:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1a54:	00 00 00 00 00 0c 00 03 08 03 00 ff 00 ff 00 ff     ................
    1a64:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1a74:	00 0c 00 04 08 04 00 ff 00 00 00 00 00 04 00 00     ................
    1a84:	00 00 00 00 00 10 00 00 00 00 00 ff 00 04 00 00     ................
    1a94:	00 00 00 00 00 10 00 07 08 04 00 00 00 00 00 ff     ................
    1aa4:	00 04 00 00 00 00 00 00 00 10 00 ff 00 00 00 00     ................
    1ab4:	00 04 00 00 00 00 00 00 00 10 00 08 08 03 00 ff     ................
    1ac4:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1ad4:	00 00 00 00 00 0c 00 09 08 03 00 ff 00 ff 00 ff     ................
    1ae4:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1af4:	00 0c 00 0a 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1b04:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 0b     ................
    1b14:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1b24:	00 01 00 00 00 00 00 00 00 0c 00 ff ff 32 00 00     .............2..
    1b34:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1b44:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1b54:	00 11 00 01 08 02 00 40 00 00 00 80 00 01 00 00     .......@........
    1b64:	00 00 00 00 00 08 00 02 08 06 00 00 00 00 00 ff     ................
    1b74:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    1b84:	00 01 00 00 00 00 00 00 00 08 00 ff 00 ff 00 ff     ................
    1b94:	00 01 00 00 00 00 00 00 00 08 00 03 08 04 00 40     ...............@
    1ba4:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1bb4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 11 00 05     ................
    1bc4:	03 1e 00 00 00 3c 00 10 00 10 00 06 03 1e 00 00     .....<..........
    1bd4:	00 3c 00 10 00 10 00 08 08 04 00 40 00 00 00 80     .<.........@....
    1be4:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 ff     ................
    1bf4:	00 01 00 00 00 00 00 00 00 11 00 09 08 06 00 00     ................
    1c04:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1c14:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 ff     ................
    1c24:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 0a     ................
    1c34:	08 02 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1c44:	00 08 00 0b 08 04 00 00 00 00 00 ff 00 01 00 00     ................
    1c54:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1c64:	00 00 00 00 00 11 00 ff ff 64 00 03 08 04 00 00     .........d......
    1c74:	00 80 00 80 00 01 00 02 00 00 00 01 00 10 00 00     ................
    1c84:	00 00 00 c8 00 01 00 02 00 00 00 01 00 18 00 05     ................
    1c94:	03 1e 00 00 00 3c 00 10 00 10 00 06 03 1e 00 00     .....<..........
    1ca4:	00 3c 00 10 00 10 00 08 08 04 00 00 00 80 00 80     .<..............
    1cb4:	00 01 00 02 00 00 00 01 00 10 00 00 00 00 00 c8     ................
    1cc4:	00 01 00 02 00 00 00 01 00 18 00 ff ff 64 00 03     .............d..
    1cd4:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    1ce4:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    1cf4:	00 18 00 04 03 40 00 00 00 80 00 01 00 04 00 07     .....@..........
    1d04:	03 40 00 00 00 80 00 01 00 04 00 08 08 04 00 00     .@..............
    1d14:	00 80 00 80 00 01 00 02 00 00 00 01 00 10 00 00     ................
    1d24:	00 00 00 c8 00 01 00 02 00 00 00 01 00 18 00 ff     ................
    1d34:	ff 64 00 04 03 40 00 00 00 80 00 01 00 04 00 07     .d...@..........
    1d44:	03 40 00 00 00 80 00 01 00 04 00 ff ff 64 00 00     .@...........d..
    1d54:	03 14 00 14 00 00 00 01 00 20 00 01 03 14 00 14     ......... ......
    1d64:	00 00 00 01 00 20 00 02 03 14 00 14 00 00 00 01     ..... ..........
    1d74:	00 20 00 03 03 14 00 14 00 00 00 01 00 20 00 05     . ........... ..
    1d84:	08 03 00 ff 00 ff 00 00 00 10 00 ff 00 ff 00 ff     ................
    1d94:	00 02 00 00 00 00 00 00 00 20 00 06 08 03 00 ff     ......... ......
    1da4:	00 ff 00 00 00 10 00 ff 00 ff 00 ff 00 02 00 00     ................
    1db4:	00 00 00 00 00 20 00 08 03 14 00 14 00 00 00 01     ..... ..........
    1dc4:	00 20 00 09 03 14 00 14 00 00 00 01 00 20 00 0a     . ........... ..
    1dd4:	03 14 00 14 00 00 00 01 00 20 00 0b 03 14 00 14     ......... ......
    1de4:	00 00 00 01 00 20 00 ff ff 64 00 00 05 14 00 14     ..... ...d......
    1df4:	00 00 00 ff 00 80 00 00 00 c8 00 02 00 10 00 01     ................
    1e04:	05 14 00 14 00 00 00 40 00 00 00 80 00 c8 00 02     .......@........
    1e14:	00 10 00 02 05 14 00 14 00 00 00 ff 00 80 00 00     ................
    1e24:	00 c8 00 02 00 10 00 03 05 14 00 14 00 00 00 40     ...............@
    1e34:	00 00 00 80 00 c8 00 02 00 10 00 04 05 40 00 00     .............@..
    1e44:	00 80 00 ff 00 80 00 00 00 c8 00 02 00 10 00 07     ................
    1e54:	05 40 00 00 00 80 00 ff 00 80 00 00 00 c8 00 02     .@..............
    1e64:	00 10 00 08 05 14 00 14 00 00 00 40 00 00 00 80     ...........@....
    1e74:	00 c8 00 02 00 10 00 09 05 14 00 14 00 00 00 ff     ................
    1e84:	00 80 00 00 00 c8 00 02 00 10 00 0a 05 14 00 14     ................
    1e94:	00 00 00 40 00 00 00 80 00 c8 00 02 00 10 00 0b     ...@............
    1ea4:	05 14 00 14 00 00 00 ff 00 80 00 00 00 c8 00 02     ................
    1eb4:	00 10 00 ff ff 64 00 00 08 04 00 ff 00 00 00 00     .....d..........
    1ec4:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    1ed4:	00 01 00 00 00 00 00 00 00 10 00 01 08 04 00 40     ...............@
    1ee4:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1ef4:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 02     ................
    1f04:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1f14:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1f24:	00 10 00 03 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    1f34:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1f44:	00 00 00 00 00 10 00 05 07 ff 00 00 00 00 00 00     ................
    1f54:	00 00 00 ff 00 00 00 ff 00 00 00 2c 01 01 00 01     ...........,....
    1f64:	00 06 07 ff 00 00 00 00 00 00 00 00 00 ff 00 00     ................
    1f74:	00 ff 00 00 00 2c 01 01 00 01 00 08 08 04 00 40     .....,.........@
    1f84:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1f94:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 09     ................
    1fa4:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1fb4:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    1fc4:	00 10 00 0a 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    1fd4:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    1fe4:	00 00 00 00 00 10 00 0b 08 04 00 ff 00 00 00 00     ................
    1ff4:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2004:	00 01 00 00 00 00 00 00 00 10 00 ff ff 64 00 00     .............d..
    2014:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2024:	00 20 00 01 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    2034:	00 00 00 00 00 20 00 02 08 02 00 14 00 00 00 00     ..... ..........
    2044:	00 01 00 00 00 00 00 00 00 20 00 03 08 02 00 14     ......... ......
    2054:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 04     ............. ..
    2064:	08 04 00 ff 00 00 00 00 00 01 00 02 00 00 00 00     ................
    2074:	00 08 00 40 00 00 00 80 00 01 00 02 00 00 00 00     ...@............
    2084:	00 10 00 07 08 04 00 ff 00 00 00 00 00 01 00 02     ................
    2094:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 02     .......@........
    20a4:	00 00 00 00 00 10 00 08 08 02 00 14 00 00 00 00     ................
    20b4:	00 01 00 00 00 00 00 00 00 20 00 09 08 02 00 14     ......... ......
    20c4:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 0a     ............. ..
    20d4:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    20e4:	00 20 00 0b 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    20f4:	00 00 00 00 00 20 00 ff ff 64 00 00 08 02 00 ff     ..... ...d......
    2104:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 01     ............. ..
    2114:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2124:	00 20 00 02 08 02 00 ff 00 00 00 00 00 01 00 00     . ..............
    2134:	00 00 00 00 00 20 00 03 08 02 00 ff 00 00 00 00     ..... ..........
    2144:	00 01 00 0a 00 00 00 0a 00 10 00 05 08 03 00 7d     ...............}
    2154:	00 00 00 fa 00 10 00 7d 00 00 00 00 00 10 00 00     .......}........
    2164:	00 00 00 00 00 20 00 06 08 03 00 7d 00 00 00 fa     ..... .....}....
    2174:	00 10 00 7d 00 00 00 00 00 10 00 00 00 00 00 00     ...}............
    2184:	00 20 00 08 08 02 00 ff 00 00 00 00 00 01 00 0a     . ..............
    2194:	00 00 00 0a 00 10 00 09 08 02 00 ff 00 00 00 00     ................
    21a4:	00 01 00 00 00 00 00 00 00 20 00 0a 08 02 00 ff     ......... ......
    21b4:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 0b     ............. ..
    21c4:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    21d4:	00 20 00 ff ff 64 00 00 08 02 00 28 00 00 00 00     . ...d.....(....
    21e4:	00 01 00 00 00 00 00 00 00 10 00 01 08 02 00 28     ...............(
    21f4:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 02     ................
    2204:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2214:	00 10 00 03 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2224:	00 00 00 00 00 10 00 05 08 03 00 7d 00 00 00 00     ...........}....
    2234:	00 10 00 7d 00 7d 00 00 00 10 00 00 00 00 00 00     ...}.}..........
    2244:	00 20 00 06 08 03 00 7d 00 00 00 00 00 10 00 7d     . .....}.......}
    2254:	00 7d 00 00 00 10 00 00 00 00 00 00 00 20 00 08     .}........... ..
    2264:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2274:	00 10 00 09 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2284:	00 00 00 00 00 10 00 0a 08 02 00 28 00 00 00 00     ...........(....
    2294:	00 01 00 00 00 00 00 00 00 10 00 0b 08 02 00 28     ...............(
    22a4:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    22b4:	ff 64 00 00 08 04 00 28 00 00 00 00 00 01 00 00     .d.....(........
    22c4:	00 00 00 00 00 10 00 ff 00 80 00 40 00 01 00 00     ...........@....
    22d4:	00 00 00 00 00 10 00 01 08 02 00 00 00 00 00 00     ................
    22e4:	00 01 00 00 00 00 00 00 00 10 00 02 08 02 00 00     ................
    22f4:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 03     ................
    2304:	08 04 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2314:	00 10 00 ff 00 80 00 40 00 01 00 00 00 00 00 00     .......@........
    2324:	00 10 00 08 08 04 00 28 00 00 00 00 00 01 00 00     .......(........
    2334:	00 00 00 00 00 10 00 ff 00 80 00 40 00 01 00 00     ...........@....
    2344:	00 00 00 00 00 10 00 09 08 02 00 28 00 00 00 00     ...........(....
    2354:	00 01 00 00 00 00 00 00 00 10 00 0a 08 02 00 28     ...............(
    2364:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 0b     ................
    2374:	08 04 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2384:	00 10 00 ff 00 80 00 40 00 01 00 00 00 00 00 00     .......@........
    2394:	00 10 00 ff ff 64 00 05 09 ff 00 ff 00 ff 00 ff     .....d..........
    23a4:	ff 64 00 00 03 80 00 00 00 ff 00 01 00 10 00 01     .d..............
    23b4:	03 80 00 00 00 ff 00 01 00 10 00 02 03 80 00 00     ................
    23c4:	00 ff 00 01 00 10 00 03 03 ff 00 00 00 00 00 01     ................
    23d4:	00 10 00 04 03 00 00 ff 00 80 00 04 00 10 00 07     ................
    23e4:	03 00 00 ff 00 80 00 04 00 10 00 08 03 ff 00 00     ................
    23f4:	00 00 00 01 00 10 00 09 03 80 00 00 00 ff 00 01     ................
    2404:	00 10 00 0a 03 80 00 00 00 ff 00 01 00 10 00 0b     ................
    2414:	03 80 00 00 00 ff 00 01 00 10 00 ff ff 64 00 00     .............d..
    2424:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2434:	00 09 00 01 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    2444:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    2454:	00 00 00 00 00 04 00 02 08 02 00 80 00 00 00 ff     ................
    2464:	00 01 00 00 00 00 00 00 00 04 00 03 08 04 00 80     ................
    2474:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    2484:	00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 05     ................
    2494:	08 02 00 00 00 ff 00 80 00 04 00 00 00 00 00 00     ................
    24a4:	00 08 00 06 08 02 00 00 00 ff 00 80 00 04 00 00     ................
    24b4:	00 00 00 00 00 08 00 08 08 04 00 80 00 00 00 ff     ................
    24c4:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    24d4:	00 01 00 00 00 00 00 00 00 04 00 09 08 02 00 80     ................
    24e4:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 0a     ................
    24f4:	08 04 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2504:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2514:	00 04 00 0b 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    2524:	00 00 00 00 00 09 00 ff ff 32 00 00 08 08 00 ff     .........2......
    2534:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    2544:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    2554:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 1e     .<..............
    2564:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 01     ................
    2574:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2584:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    2594:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    25a4:	00 0c 00 1e 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    25b4:	00 01 00 02 08 08 00 ff 00 00 00 00 00 01 00 00     ................
    25c4:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    25d4:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    25e4:	00 00 00 00 00 0c 00 1e 00 00 00 ff 00 01 00 00     ................
    25f4:	00 00 00 00 00 01 00 03 08 08 00 ff 00 00 00 00     ................
    2604:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    2614:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    2624:	00 01 00 00 00 00 00 00 00 0c 00 1e 00 00 00 ff     ................
    2634:	00 01 00 00 00 00 00 00 00 01 00 04 03 00 00 00     ................
    2644:	00 3c 00 01 00 20 00 05 08 04 00 80 00 40 00 00     .<... .......@..
    2654:	00 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
    2664:	00 04 00 00 00 00 00 00 00 20 00 06 08 04 00 80     ......... ......
    2674:	00 40 00 00 00 04 00 00 00 00 00 00 00 20 00 00     .@........... ..
    2684:	00 ff 00 00 00 04 00 00 00 00 00 00 00 20 00 07     ............. ..
    2694:	03 00 00 3c 00 00 00 01 00 20 00 08 08 08 00 ff     ...<..... ......
    26a4:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    26b4:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    26c4:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     .<..............
    26d4:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 09     ................
    26e4:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    26f4:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    2704:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    2714:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    2724:	00 01 00 0a 08 08 00 ff 00 00 00 00 00 01 00 00     ................
    2734:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    2744:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    2754:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    2764:	00 00 00 00 00 01 00 0b 08 08 00 ff 00 00 00 00     ................
    2774:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    2784:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    2794:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    27a4:	00 01 00 00 00 00 00 00 00 01 00 ff ff 0b 00 00     ................
    27b4:	08 04 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    27c4:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    27d4:	00 04 00 01 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    27e4:	00 00 00 00 00 04 00 02 08 02 00 80 00 00 00 ff     ................
    27f4:	00 01 00 00 00 00 00 00 00 04 00 03 08 02 00 80     ................
    2804:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 05     ................
    2814:	08 03 00 ff 00 00 00 00 00 08 00 80 00 00 00 ff     ................
    2824:	00 08 00 00 00 00 00 00 00 20 00 06 08 03 00 ff     ......... ......
    2834:	00 00 00 00 00 08 00 80 00 00 00 ff 00 08 00 00     ................
    2844:	00 00 00 00 00 20 00 08 08 02 00 80 00 00 00 ff     ..... ..........
    2854:	00 01 00 00 00 00 00 00 00 04 00 09 08 02 00 80     ................
    2864:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 0a     ................
    2874:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    2884:	00 04 00 0b 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    2894:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    28a4:	00 00 00 00 00 04 00 ff 6e 00 00 08 03 00 c8 00     ........n.......
    28b4:	14 00 00 00 04 00 00 00 01 00 01 00 20 00 00 00     ............ ...
    28c4:	00 00 00 00 04 00 01 03 00 00 ff 00 ff 00 01 00     ................
    28d4:	0c 00 02 03 00 00 ff 00 ff 00 01 00 0c 00 03 08     ................
    28e4:	02 00 c8 00 28 00 00 00 01 00 00 00 01 00 01 00     ....(...........
    28f4:	10 00 04 03 00 00 ff 00 ff 00 01 00 18 00 07 03     ................
    2904:	00 00 ff 00 ff 00 01 00 18 00 08 08 02 00 c8 00     ................
    2914:	28 00 00 00 01 00 00 00 01 00 01 00 10 00 09 03     (...............
    2924:	00 00 ff 00 ff 00 01 00 0c 00 0a 03 00 00 ff 00     ................
    2934:	ff 00 01 00 0c 00 0b 08 03 00 c8 00 28 00 00 00     ............(...
    2944:	04 00 00 00 01 00 01 00 20 00 00 00 00 00 00 00     ........ .......
    2954:	04 00 ff ff 14 00 00 08 04 00 00 00 ff 00 ff 00     ................
    2964:	01 00 00 00 00 00 00 00 04 00 00 00 ff 00 ff 00     ................
    2974:	01 00 00 00 00 00 00 00 10 00 01 08 02 00 00 00     ................
    2984:	ff 00 ff 00 04 00 00 00 01 00 01 00 20 00 02 03     ............ ...
    2994:	00 00 ff 00 ff 00 01 00 10 00 03 08 04 00 00 00     ................
    29a4:	ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
    29b4:	00 00 ff 00 01 00 00 00 00 00 00 00 10 00 05 08     ................
    29c4:	02 00 00 00 ff 00 ff 00 20 00 00 00 00 00 00 00     ........ .......
    29d4:	20 00 06 08 02 00 00 00 00 00 ff 00 20 00 00 00      ........... ...
    29e4:	00 00 00 00 20 00 08 08 04 00 00 00 ff 00 ff 00     .... ...........
    29f4:	01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff 00     ................
    2a04:	01 00 00 00 00 00 00 00 10 00 09 03 00 00 00 00     ................
    2a14:	ff 00 01 00 10 00 0a 08 02 00 00 00 00 00 ff 00     ................
    2a24:	04 00 00 00 00 00 01 00 20 00 0b 08 04 00 00 00     ........ .......
    2a34:	00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00     ................
    2a44:	00 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff ff     ................
    2a54:	0a 00 00 08 04 00 00 00 ff 00 ff 00 01 00 00 00     ................
    2a64:	00 00 00 00 04 00 00 00 ff 00 ff 00 01 00 00 00     ................
    2a74:	00 00 00 00 10 00 01 08 02 00 00 00 ff 00 ff 00     ................
    2a84:	04 00 00 00 01 00 01 00 20 00 02 03 00 00 ff 00     ........ .......
    2a94:	ff 00 01 00 10 00 03 08 04 00 00 00 ff 00 ff 00     ................
    2aa4:	01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00     ................
    2ab4:	01 00 00 00 00 00 00 00 10 00 05 08 02 00 00 00     ................
    2ac4:	ff 00 ff 00 20 00 00 00 00 00 00 00 20 00 06 08     .... ....... ...
    2ad4:	02 00 ff 00 ff 00 00 00 20 00 00 00 00 00 00 00     ........ .......
    2ae4:	20 00 08 08 04 00 00 00 ff 00 ff 00 01 00 00 00      ...............
    2af4:	00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00 00     ................
    2b04:	00 00 00 00 10 00 09 03 ff 00 ff 00 00 00 01 00     ................
    2b14:	10 00 0a 08 02 00 ff 00 ff 00 00 00 04 00 01 00     ................
    2b24:	01 00 00 00 20 00 0b 08 04 00 ff 00 ff 00 00 00     .... ...........
    2b34:	01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00     ................
    2b44:	01 00 00 00 00 00 00 00 10 00 ff ff 0a 00 00 08     ................
    2b54:	04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00 00     ................
    2b64:	04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00 00     ................
    2b74:	10 00 01 08 02 00 ff 00 00 00 80 00 04 00 02 00     ................
    2b84:	00 00 01 00 20 00 02 03 ff 00 00 00 80 00 01 00     .... ...........
    2b94:	10 00 03 08 04 00 ff 00 00 00 80 00 01 00 00 00     ................
    2ba4:	00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00 00     ................
    2bb4:	00 00 00 00 10 00 05 08 02 00 ff 00 00 00 80 00     ................
    2bc4:	20 00 00 00 00 00 00 00 20 00 06 08 02 00 ff 00      ....... .......
    2bd4:	ff 00 00 00 20 00 00 00 00 00 00 00 20 00 08 08     .... ....... ...
    2be4:	04 00 ff 00 00 00 80 00 01 00 00 00 00 00 00 00     ................
    2bf4:	04 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00 00     ................
    2c04:	10 00 09 03 ff 00 ff 00 00 00 01 00 10 00 0a 08     ................
    2c14:	02 00 ff 00 ff 00 00 00 04 00 01 00 01 00 00 00     ................
    2c24:	20 00 0b 08 04 00 ff 00 ff 00 00 00 01 00 00 00      ...............
    2c34:	00 00 00 00 04 00 ff 00 ff 00 00 00 01 00 00 00     ................
    2c44:	00 00 00 00 10 00 ff ff 0a 00 ff 00                 ............

00002c50 <__ctors_end>:
    2c50:	11 24       	eor	r1, r1
    2c52:	1f be       	out	0x3f, r1	; 63
    2c54:	cf ef       	ldi	r28, 0xFF	; 255
    2c56:	d0 e1       	ldi	r29, 0x10	; 16
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	cd bf       	out	0x3d, r28	; 61

00002c5c <__do_copy_data>:
    2c5c:	12 e0       	ldi	r17, 0x02	; 2
    2c5e:	a0 e0       	ldi	r26, 0x00	; 0
    2c60:	b1 e0       	ldi	r27, 0x01	; 1
    2c62:	e0 ec       	ldi	r30, 0xC0	; 192
    2c64:	f6 e5       	ldi	r31, 0x56	; 86
    2c66:	00 e0       	ldi	r16, 0x00	; 0
    2c68:	0b bf       	out	0x3b, r16	; 59
    2c6a:	02 c0       	rjmp	.+4      	; 0x2c70 <__do_copy_data+0x14>
    2c6c:	07 90       	elpm	r0, Z+
    2c6e:	0d 92       	st	X+, r0
    2c70:	a0 31       	cpi	r26, 0x10	; 16
    2c72:	b1 07       	cpc	r27, r17
    2c74:	d9 f7       	brne	.-10     	; 0x2c6c <__do_copy_data+0x10>

00002c76 <__do_clear_bss>:
    2c76:	1e e0       	ldi	r17, 0x0E	; 14
    2c78:	a0 e1       	ldi	r26, 0x10	; 16
    2c7a:	b2 e0       	ldi	r27, 0x02	; 2
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <.do_clear_bss_start>

00002c7e <.do_clear_bss_loop>:
    2c7e:	1d 92       	st	X+, r1

00002c80 <.do_clear_bss_start>:
    2c80:	a5 3f       	cpi	r26, 0xF5	; 245
    2c82:	b1 07       	cpc	r27, r17
    2c84:	e1 f7       	brne	.-8      	; 0x2c7e <.do_clear_bss_loop>
    2c86:	0e 94 99 16 	call	0x2d32	; 0x2d32 <main>
    2c8a:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <_exit>

00002c8e <__bad_interrupt>:
    2c8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002c92 <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
    2c92:	ef 92       	push	r14
    2c94:	ff 92       	push	r15
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	ec 01       	movw	r28, r24
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	10 e0       	ldi	r17, 0x00	; 0
    2ca4:	ee 24       	eor	r14, r14
    2ca6:	ff 24       	eor	r15, r15
    2ca8:	0c c0       	rjmp	.+24     	; 0x2cc2 <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
    2caa:	80 91 10 02 	lds	r24, 0x0210
    2cae:	90 91 11 02 	lds	r25, 0x0211
    2cb2:	0a 97       	sbiw	r24, 0x0a	; 10
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    2cb6:	0f 5f       	subi	r16, 0xFF	; 255
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	27 96       	adiw	r28, 0x07	; 7
    2cbc:	0c 30       	cpi	r16, 0x0C	; 12
    2cbe:	11 05       	cpc	r17, r1
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
    2cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	89 f3       	breq	.-30     	; 0x2caa <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    2cc8:	6c 81       	ldd	r22, Y+4	; 0x04
    2cca:	7d 81       	ldd	r23, Y+5	; 0x05
    2ccc:	e8 81       	ld	r30, Y
    2cce:	f9 81       	ldd	r31, Y+1	; 0x01
    2cd0:	c8 01       	movw	r24, r16
    2cd2:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    2cd4:	0f 5f       	subi	r16, 0xFF	; 255
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	27 96       	adiw	r28, 0x07	; 7
    2cda:	0c 30       	cpi	r16, 0x0C	; 12
    2cdc:	11 05       	cpc	r17, r1
    2cde:	89 f7       	brne	.-30     	; 0x2cc2 <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	e8 16       	cp	r14, r24
    2ce4:	f1 04       	cpc	r15, r1
    2ce6:	d1 f0       	breq	.+52     	; 0x2d1c <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
    2ce8:	80 91 10 02 	lds	r24, 0x0210
    2cec:	90 91 11 02 	lds	r25, 0x0211
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	90 93 11 02 	sts	0x0211, r25
    2cf6:	80 93 10 02 	sts	0x0210, r24
	}
}
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    2d08:	6c 81       	ldd	r22, Y+4	; 0x04
    2d0a:	7d 81       	ldd	r23, Y+5	; 0x05
    2d0c:	e8 81       	ld	r30, Y
    2d0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2d10:	c8 01       	movw	r24, r16
    2d12:	09 95       	icall
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	e8 2e       	mov	r14, r24
    2d18:	f1 2c       	mov	r15, r1
    2d1a:	cd cf       	rjmp	.-102    	; 0x2cb6 <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
    2d1c:	10 92 11 02 	sts	0x0211, r1
    2d20:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	08 95       	ret

00002d32 <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
    2d32:	2f 92       	push	r2
    2d34:	3f 92       	push	r3
    2d36:	4f 92       	push	r4
    2d38:	5f 92       	push	r5
    2d3a:	6f 92       	push	r6
    2d3c:	7f 92       	push	r7
    2d3e:	8f 92       	push	r8
    2d40:	9f 92       	push	r9
    2d42:	af 92       	push	r10
    2d44:	bf 92       	push	r11
    2d46:	cf 92       	push	r12
    2d48:	df 92       	push	r13
    2d4a:	ef 92       	push	r14
    2d4c:	ff 92       	push	r15
    2d4e:	0f 93       	push	r16
    2d50:	1f 93       	push	r17
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	c0 56       	subi	r28, 0x60	; 96
    2d5c:	d0 40       	sbci	r29, 0x00	; 0
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
    2d68:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
    2d6c:	8f ef       	ldi	r24, 0xFF	; 255
    2d6e:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
    2d72:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
    2d74:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
    2d76:	8b b3       	in	r24, 0x1b	; 27
    2d78:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
    2d7a:	8e b5       	in	r24, 0x2e	; 46
    2d7c:	88 60       	ori	r24, 0x08	; 8
    2d7e:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
    2d80:	80 e4       	ldi	r24, 0x40	; 64
    2d82:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
    2d84:	80 ea       	ldi	r24, 0xA0	; 160
    2d86:	9f e0       	ldi	r25, 0x0F	; 15
    2d88:	9b bd       	out	0x2b, r25	; 43
    2d8a:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
    2d8c:	8e b5       	in	r24, 0x2e	; 46
    2d8e:	82 60       	ori	r24, 0x02	; 2
    2d90:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
    2d92:	0e 94 4c 24 	call	0x4898	; 0x4898 <initDecoder>
    2d96:	4d e0       	ldi	r20, 0x0D	; 13
    2d98:	64 2e       	mov	r6, r20
    2d9a:	71 2c       	mov	r7, r1
    2d9c:	6c 0e       	add	r6, r28
    2d9e:	7d 1e       	adc	r7, r29
    2da0:	f3 01       	movw	r30, r6
    2da2:	86 ed       	ldi	r24, 0xD6	; 214
    2da4:	97 e1       	ldi	r25, 0x17	; 23
    2da6:	9e 01       	movw	r18, r28
    2da8:	2f 59       	subi	r18, 0x9F	; 159
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2dac:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
    2dae:	6b e3       	ldi	r22, 0x3B	; 59
    2db0:	78 e1       	ldi	r23, 0x18	; 24
    2db2:	71 83       	std	Z+1, r23	; 0x01
    2db4:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
    2db6:	93 83       	std	Z+3, r25	; 0x03
    2db8:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
    2dba:	15 82       	std	Z+5, r1	; 0x05
    2dbc:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2dbe:	4b 8b       	std	Y+19, r20	; 0x13
    2dc0:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
    2dc2:	e2 17       	cp	r30, r18
    2dc4:	f3 07       	cpc	r31, r19
    2dc6:	99 f7       	brne	.-26     	; 0x2dae <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
    2dc8:	0e 94 22 24 	call	0x4844	; 0x4844 <getNextGroup>
    2dcc:	fc 01       	movw	r30, r24
    2dce:	ee 24       	eor	r14, r14
    2dd0:	ff 24       	eor	r15, r15
    2dd2:	88 24       	eor	r8, r8
    2dd4:	8a 94       	dec	r8
    2dd6:	98 2c       	mov	r9, r8
    2dd8:	2e 01       	movw	r4, r28
    2dda:	08 94       	sec
    2ddc:	41 1c       	adc	r4, r1
    2dde:	51 1c       	adc	r5, r1
    2de0:	aa 24       	eor	r10, r10
    2de2:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2de4:	3c e0       	ldi	r19, 0x0C	; 12
    2de6:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
    2de8:	33 24       	eor	r3, r3
    2dea:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
    2dec:	02 81       	ldd	r16, Z+2	; 0x02
    2dee:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2df0:	d2 01       	movw	r26, r4
    2df2:	e2 2d       	mov	r30, r2
    2df4:	1d 92       	st	X+, r1
    2df6:	ea 95       	dec	r30
    2df8:	e9 f7       	brne	.-6      	; 0x2df4 <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
    2dfa:	d8 01       	movw	r26, r16
    2dfc:	8c 91       	ld	r24, X
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
    2e00:	f2 01       	movw	r30, r4
    2e02:	e8 0f       	add	r30, r24
    2e04:	f9 1f       	adc	r31, r25
    2e06:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
    2e08:	fc 01       	movw	r30, r24
    2e0a:	ee 0f       	add	r30, r30
    2e0c:	ff 1f       	adc	r31, r31
    2e0e:	ee 0f       	add	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	ee 0f       	add	r30, r30
    2e14:	ff 1f       	adc	r31, r31
    2e16:	e8 1b       	sub	r30, r24
    2e18:	f9 0b       	sbc	r31, r25
    2e1a:	e4 0d       	add	r30, r4
    2e1c:	f5 1d       	adc	r31, r5
    2e1e:	12 96       	adiw	r26, 0x02	; 2
    2e20:	2d 91       	ld	r18, X+
    2e22:	3c 91       	ld	r19, X
    2e24:	13 97       	sbiw	r26, 0x03	; 3
    2e26:	35 87       	std	Z+13, r19	; 0x0d
    2e28:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
    2e2a:	16 96       	adiw	r26, 0x06	; 6
    2e2c:	6d 91       	ld	r22, X+
    2e2e:	7c 91       	ld	r23, X
    2e30:	17 97       	sbiw	r26, 0x07	; 7
    2e32:	71 8b       	std	Z+17, r23	; 0x11
    2e34:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
    2e36:	18 96       	adiw	r26, 0x08	; 8
    2e38:	2c 91       	ld	r18, X
    2e3a:	18 97       	sbiw	r26, 0x08	; 8
    2e3c:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
    2e3e:	14 96       	adiw	r26, 0x04	; 4
    2e40:	ed 91       	ld	r30, X+
    2e42:	fc 91       	ld	r31, X
    2e44:	15 97       	sbiw	r26, 0x05	; 5
    2e46:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
    2e48:	f8 01       	movw	r30, r16
    2e4a:	01 85       	ldd	r16, Z+9	; 0x09
    2e4c:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
    2e4e:	01 15       	cp	r16, r1
    2e50:	11 05       	cpc	r17, r1
    2e52:	99 f6       	brne	.-90     	; 0x2dfa <main+0xc8>
    2e54:	f2 01       	movw	r30, r4
    2e56:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
    2e58:	80 81       	ld	r24, Z
    2e5a:	88 23       	and	r24, r24
    2e5c:	61 f4       	brne	.+24     	; 0x2e76 <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
    2e5e:	6b e3       	ldi	r22, 0x3B	; 59
    2e60:	78 e1       	ldi	r23, 0x18	; 24
    2e62:	11 96       	adiw	r26, 0x01	; 1
    2e64:	7c 93       	st	X, r23
    2e66:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
    2e68:	15 96       	adiw	r26, 0x05	; 5
    2e6a:	1c 92       	st	X, r1
    2e6c:	1e 92       	st	-X, r1
    2e6e:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
    2e70:	16 96       	adiw	r26, 0x06	; 6
    2e72:	3c 92       	st	X, r3
    2e74:	16 97       	sbiw	r26, 0x06	; 6
    2e76:	31 96       	adiw	r30, 0x01	; 1
    2e78:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
    2e7a:	e6 15       	cp	r30, r6
    2e7c:	f7 05       	cpc	r31, r7
    2e7e:	61 f7       	brne	.-40     	; 0x2e58 <main+0x126>
    2e80:	00 e0       	ldi	r16, 0x00	; 0
    2e82:	10 e0       	ldi	r17, 0x00	; 0
    2e84:	cc 24       	eor	r12, r12
    2e86:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2e88:	e1 14       	cp	r14, r1
    2e8a:	f1 04       	cpc	r15, r1
    2e8c:	19 f4       	brne	.+6      	; 0x2e94 <main+0x162>
    2e8e:	88 24       	eor	r8, r8
    2e90:	8a 94       	dec	r8
    2e92:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
    2e94:	c3 01       	movw	r24, r6
    2e96:	0e 94 49 16 	call	0x2c92	; 0x2c92 <doEffects>
			waitForTimer();
    2e9a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <waitForTimer>
			displayColors();
    2e9e:	0e 94 a5 24 	call	0x494a	; 0x494a <displayColors>
			deltaTimer++;
    2ea2:	0f 5f       	subi	r16, 0xFF	; 255
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
    2ea6:	0a 30       	cpi	r16, 0x0A	; 10
    2ea8:	11 05       	cpc	r17, r1
    2eaa:	74 f3       	brlt	.-36     	; 0x2e88 <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
    2eac:	80 91 63 00 	lds	r24, 0x0063
    2eb0:	81 fd       	sbrc	r24, 1
    2eb2:	1a c0       	rjmp	.+52     	; 0x2ee8 <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
    2eb4:	ab 28       	or	r10, r11
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <main+0x188>
    2eb8:	4d c0       	rjmp	.+154    	; 0x2f54 <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2eba:	80 91 63 00 	lds	r24, 0x0063
    2ebe:	80 fd       	sbrc	r24, 0
    2ec0:	21 c0       	rjmp	.+66     	; 0x2f04 <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
    2ec2:	e0 fe       	sbrs	r14, 0
    2ec4:	59 c0       	rjmp	.+178    	; 0x2f78 <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    2ec6:	c1 fe       	sbrs	r12, 1
    2ec8:	29 c0       	rjmp	.+82     	; 0x2f1c <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
    2eca:	b1 e0       	ldi	r27, 0x01	; 1
    2ecc:	8b 16       	cp	r8, r27
    2ece:	91 04       	cpc	r9, r1
    2ed0:	b1 f1       	breq	.+108    	; 0x2f3e <main+0x20c>
    2ed2:	22 e0       	ldi	r18, 0x02	; 2
    2ed4:	a2 2e       	mov	r10, r18
    2ed6:	b1 2c       	mov	r11, r1
    2ed8:	ae 20       	and	r10, r14
    2eda:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
    2edc:	00 e0       	ldi	r16, 0x00	; 0
    2ede:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2ee0:	e1 14       	cp	r14, r1
    2ee2:	f1 04       	cpc	r15, r1
    2ee4:	b9 f6       	brne	.-82     	; 0x2e94 <main+0x162>
    2ee6:	d3 cf       	rjmp	.-90     	; 0x2e8e <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
    2ee8:	ab 28       	or	r10, r11
    2eea:	21 f0       	breq	.+8      	; 0x2ef4 <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
    2eec:	a2 e0       	ldi	r26, 0x02	; 2
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	ca 2a       	or	r12, r26
    2ef2:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
    2ef4:	ed ef       	ldi	r30, 0xFD	; 253
    2ef6:	ff ef       	ldi	r31, 0xFF	; 255
    2ef8:	ee 22       	and	r14, r30
    2efa:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2efc:	80 91 63 00 	lds	r24, 0x0063
    2f00:	80 ff       	sbrs	r24, 0
    2f02:	df cf       	rjmp	.-66     	; 0x2ec2 <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
    2f04:	e0 fe       	sbrs	r14, 0
    2f06:	04 c0       	rjmp	.+8      	; 0x2f10 <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	c8 2a       	or	r12, r24
    2f0e:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
    2f10:	ae ef       	ldi	r26, 0xFE	; 254
    2f12:	bf ef       	ldi	r27, 0xFF	; 255
    2f14:	ea 22       	and	r14, r26
    2f16:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    2f18:	c1 fc       	sbrc	r12, 1
    2f1a:	d7 cf       	rjmp	.-82     	; 0x2eca <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
    2f1c:	c0 fe       	sbrs	r12, 0
    2f1e:	d9 cf       	rjmp	.-78     	; 0x2ed2 <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
    2f20:	e2 e0       	ldi	r30, 0x02	; 2
    2f22:	8e 16       	cp	r8, r30
    2f24:	91 04       	cpc	r9, r1
    2f26:	a9 f6       	brne	.-86     	; 0x2ed2 <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
    2f28:	92 e0       	ldi	r25, 0x02	; 2
    2f2a:	a9 2e       	mov	r10, r25
    2f2c:	b1 2c       	mov	r11, r1
    2f2e:	ae 20       	and	r10, r14
    2f30:	bf 20       	and	r11, r15
    2f32:	e1 fe       	sbrs	r14, 1
    2f34:	d3 cf       	rjmp	.-90     	; 0x2edc <main+0x1aa>

							groupNew = getNextGroup();
    2f36:	0e 94 22 24 	call	0x4844	; 0x4844 <getNextGroup>
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	57 cf       	rjmp	.-338    	; 0x2dec <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
    2f3e:	e0 fe       	sbrs	r14, 0
    2f40:	c8 cf       	rjmp	.-112    	; 0x2ed2 <main+0x1a0>
							groupNew = getPreviousGroup();
    2f42:	0e 94 bd 23 	call	0x477a	; 0x477a <getPreviousGroup>
    2f46:	fc 01       	movw	r30, r24
    2f48:	32 e0       	ldi	r19, 0x02	; 2
    2f4a:	a3 2e       	mov	r10, r19
    2f4c:	b1 2c       	mov	r11, r1
    2f4e:	ae 20       	and	r10, r14
    2f50:	bf 20       	and	r11, r15
    2f52:	4c cf       	rjmp	.-360    	; 0x2dec <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    2f54:	7f ef       	ldi	r23, 0xFF	; 255
    2f56:	87 16       	cp	r8, r23
    2f58:	7f ef       	ldi	r23, 0xFF	; 255
    2f5a:	97 06       	cpc	r9, r23
    2f5c:	11 f1       	breq	.+68     	; 0x2fa2 <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	e8 2a       	or	r14, r24
    2f64:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
    2f66:	0e 94 22 24 	call	0x4844	; 0x4844 <getNextGroup>
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	a6 2e       	mov	r10, r22
    2f70:	b1 2c       	mov	r11, r1
    2f72:	ae 20       	and	r10, r14
    2f74:	bf 20       	and	r11, r15
    2f76:	3a cf       	rjmp	.-396    	; 0x2dec <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
    2f78:	61 e0       	ldi	r22, 0x01	; 1
    2f7a:	70 e0       	ldi	r23, 0x00	; 0
    2f7c:	e6 2a       	or	r14, r22
    2f7e:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
    2f80:	0e 94 bd 23 	call	0x477a	; 0x477a <getPreviousGroup>
    2f84:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
    2f86:	7f ef       	ldi	r23, 0xFF	; 255
    2f88:	87 16       	cp	r8, r23
    2f8a:	7f ef       	ldi	r23, 0xFF	; 255
    2f8c:	97 06       	cpc	r9, r23
    2f8e:	e1 f6       	brne	.-72     	; 0x2f48 <main+0x216>
    2f90:	51 e0       	ldi	r21, 0x01	; 1
    2f92:	85 2e       	mov	r8, r21
    2f94:	91 2c       	mov	r9, r1
    2f96:	42 e0       	ldi	r20, 0x02	; 2
    2f98:	a4 2e       	mov	r10, r20
    2f9a:	b1 2c       	mov	r11, r1
    2f9c:	ae 20       	and	r10, r14
    2f9e:	bf 20       	and	r11, r15
    2fa0:	25 cf       	rjmp	.-438    	; 0x2dec <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    2fa2:	72 e0       	ldi	r23, 0x02	; 2
    2fa4:	87 2e       	mov	r8, r23
    2fa6:	91 2c       	mov	r9, r1
    2fa8:	da cf       	rjmp	.-76     	; 0x2f5e <main+0x22c>

00002faa <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
    2faa:	08 95       	ret

00002fac <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
    2fac:	08 95       	ret

00002fae <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
    2fae:	08 95       	ret

00002fb0 <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
    2fb0:	08 95       	ret

00002fb2 <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	ee 0f       	add	r30, r30
    2fb6:	ff 1f       	adc	r31, r31
    2fb8:	ee 0f       	add	r30, r30
    2fba:	ff 1f       	adc	r31, r31
    2fbc:	ed 51       	subi	r30, 0x1D	; 29
    2fbe:	fb 4f       	sbci	r31, 0xFB	; 251
    2fc0:	11 82       	std	Z+1, r1	; 0x01
    2fc2:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
    2fc4:	13 82       	std	Z+3, r1	; 0x03
    2fc6:	12 82       	std	Z+2, r1	; 0x02
}	
    2fc8:	08 95       	ret

00002fca <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	8c 01       	movw	r16, r24
    2fd4:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	aa 0f       	add	r26, r26
    2fda:	bb 1f       	adc	r27, r27
    2fdc:	aa 0f       	add	r26, r26
    2fde:	bb 1f       	adc	r27, r27
    2fe0:	ad 51       	subi	r26, 0x1D	; 29
    2fe2:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
    2fe4:	6e 5f       	subi	r22, 0xFE	; 254
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
    2fe8:	12 96       	adiw	r26, 0x02	; 2
    2fea:	2d 91       	ld	r18, X+
    2fec:	3c 91       	ld	r19, X
    2fee:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
    2ff0:	4d 91       	ld	r20, X+
    2ff2:	5c 91       	ld	r21, X
    2ff4:	11 97       	sbiw	r26, 0x01	; 1
    2ff6:	f9 01       	movw	r30, r18
    2ff8:	ee 0f       	add	r30, r30
    2ffa:	ff 1f       	adc	r31, r31
    2ffc:	ee 0f       	add	r30, r30
    2ffe:	ff 1f       	adc	r31, r31
    3000:	ee 0f       	add	r30, r30
    3002:	ff 1f       	adc	r31, r31
    3004:	e6 0f       	add	r30, r22
    3006:	f7 1f       	adc	r31, r23
    3008:	86 81       	ldd	r24, Z+6	; 0x06
    300a:	97 81       	ldd	r25, Z+7	; 0x07
    300c:	84 17       	cp	r24, r20
    300e:	95 07       	cpc	r25, r21
    3010:	6c f5       	brge	.+90     	; 0x306c <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
    3012:	2f 5f       	subi	r18, 0xFF	; 255
    3014:	3f 4f       	sbci	r19, 0xFF	; 255
    3016:	13 96       	adiw	r26, 0x03	; 3
    3018:	3c 93       	st	X, r19
    301a:	2e 93       	st	-X, r18
    301c:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
    301e:	88 81       	ld	r24, Y
    3020:	99 81       	ldd	r25, Y+1	; 0x01
    3022:	28 17       	cp	r18, r24
    3024:	39 07       	cpc	r19, r25
    3026:	24 f0       	brlt	.+8      	; 0x3030 <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
    3028:	13 96       	adiw	r26, 0x03	; 3
    302a:	1c 92       	st	X, r1
    302c:	1e 92       	st	-X, r1
    302e:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	1c 92       	st	X, r1
    3034:	1e 92       	st	-X, r1
    3036:	12 96       	adiw	r26, 0x02	; 2
    3038:	2d 91       	ld	r18, X+
    303a:	3c 91       	ld	r19, X
    303c:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
    303e:	f9 01       	movw	r30, r18
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	ee 0f       	add	r30, r30
    3046:	ff 1f       	adc	r31, r31
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	e6 0f       	add	r30, r22
    304e:	f7 1f       	adc	r31, r23
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	42 81       	ldd	r20, Z+2	; 0x02
    3056:	53 81       	ldd	r21, Z+3	; 0x03
    3058:	24 81       	ldd	r18, Z+4	; 0x04
    305a:	35 81       	ldd	r19, Z+5	; 0x05
    305c:	c8 01       	movw	r24, r16
    305e:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
    306c:	4f 5f       	subi	r20, 0xFF	; 255
    306e:	5f 4f       	sbci	r21, 0xFF	; 255
    3070:	4d 93       	st	X+, r20
    3072:	5c 93       	st	X, r21
    3074:	e4 cf       	rjmp	.-56     	; 0x303e <lightBeamEffect+0x74>

00003076 <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	70 e0       	ldi	r23, 0x00	; 0
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
}
    3086:	08 95       	ret

00003088 <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
    3088:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	42 81       	ldd	r20, Z+2	; 0x02
    3090:	53 81       	ldd	r21, Z+3	; 0x03
    3092:	24 81       	ldd	r18, Z+4	; 0x04
    3094:	35 81       	ldd	r19, Z+5	; 0x05
    3096:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
}
    309a:	08 95       	ret

0000309c <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
    30a0:	fc 01       	movw	r30, r24
    30a2:	ee 0f       	add	r30, r30
    30a4:	ff 1f       	adc	r31, r31
    30a6:	df 01       	movw	r26, r30
    30a8:	a5 5b       	subi	r26, 0xB5	; 181
    30aa:	bc 4f       	sbci	r27, 0xFC	; 252
    30ac:	1d 92       	st	X+, r1
    30ae:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
    30b0:	ed 59       	subi	r30, 0x9D	; 157
    30b2:	fc 4f       	sbci	r31, 0xFC	; 252
    30b4:	21 e0       	ldi	r18, 0x01	; 1
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	31 83       	std	Z+1, r19	; 0x01
    30ba:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    30bc:	fb 01       	movw	r30, r22
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	42 81       	ldd	r20, Z+2	; 0x02
    30c4:	53 81       	ldd	r21, Z+3	; 0x03
    30c6:	24 81       	ldd	r18, Z+4	; 0x04
    30c8:	35 81       	ldd	r19, Z+5	; 0x05
    30ca:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
}
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	08 95       	ret

000030d4 <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
    30d4:	ef 92       	push	r14
    30d6:	ff 92       	push	r15
    30d8:	0f 93       	push	r16
    30da:	1f 93       	push	r17
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	9c 01       	movw	r18, r24
    30e2:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	8c 01       	movw	r16, r24
    30ea:	05 5b       	subi	r16, 0xB5	; 181
    30ec:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
    30ee:	ec 01       	movw	r28, r24
    30f0:	cd 59       	subi	r28, 0x9D	; 157
    30f2:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
    30f8:	42 81       	ldd	r20, Z+2	; 0x02
    30fa:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
    30fc:	e4 80       	ldd	r14, Z+4	; 0x04
    30fe:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
    3100:	a6 81       	ldd	r26, Z+6	; 0x06
    3102:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
    3104:	00 84       	ldd	r0, Z+8	; 0x08
    3106:	f1 85       	ldd	r31, Z+9	; 0x09
    3108:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
    310a:	88 81       	ld	r24, Y
    310c:	99 81       	ldd	r25, Y+1	; 0x01
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	91 05       	cpc	r25, r1
    3112:	09 f1       	breq	.+66     	; 0x3156 <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
    3114:	89 2b       	or	r24, r25
    3116:	c1 f4       	brne	.+48     	; 0x3148 <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
    3118:	31 97       	sbiw	r30, 0x01	; 1
    311a:	d8 01       	movw	r26, r16
    311c:	8d 91       	ld	r24, X+
    311e:	9c 91       	ld	r25, X
    3120:	11 97       	sbiw	r26, 0x01	; 1
    3122:	8e 17       	cp	r24, r30
    3124:	9f 07       	cpc	r25, r31
    3126:	0c f0       	brlt	.+2      	; 0x312a <pwmEffect+0x56>
    3128:	43 c0       	rjmp	.+134    	; 0x31b0 <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
    312a:	c9 01       	movw	r24, r18
    312c:	60 e0       	ldi	r22, 0x00	; 0
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	50 e0       	ldi	r21, 0x00	; 0
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
			*curCounter +=1;
    313c:	f8 01       	movw	r30, r16
    313e:	80 81       	ld	r24, Z
    3140:	91 81       	ldd	r25, Z+1	; 0x01
    3142:	01 96       	adiw	r24, 0x01	; 1
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	80 83       	st	Z, r24
		}

	}
	
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	1f 91       	pop	r17
    314e:	0f 91       	pop	r16
    3150:	ff 90       	pop	r15
    3152:	ef 90       	pop	r14
    3154:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
    3156:	11 97       	sbiw	r26, 0x01	; 1
    3158:	f8 01       	movw	r30, r16
    315a:	80 81       	ld	r24, Z
    315c:	91 81       	ldd	r25, Z+1	; 0x01
    315e:	8a 17       	cp	r24, r26
    3160:	9b 07       	cpc	r25, r27
    3162:	a4 f0       	brlt	.+40     	; 0x318c <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
    3164:	19 82       	std	Y+1, r1	; 0x01
    3166:	18 82       	st	Y, r1
			*curCounter = 0;
    3168:	11 82       	std	Z+1, r1	; 0x01
    316a:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
    316c:	c9 01       	movw	r24, r18
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	40 e0       	ldi	r20, 0x00	; 0
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	ff 90       	pop	r15
    3188:	ef 90       	pop	r14
    318a:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    318c:	c9 01       	movw	r24, r18
    318e:	97 01       	movw	r18, r14
    3190:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
			*curCounter += 1;
    3194:	d8 01       	movw	r26, r16
    3196:	8d 91       	ld	r24, X+
    3198:	9c 91       	ld	r25, X
    319a:	11 97       	sbiw	r26, 0x01	; 1
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	8d 93       	st	X+, r24
    31a0:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	ff 90       	pop	r15
    31ac:	ef 90       	pop	r14
    31ae:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	99 83       	std	Y+1, r25	; 0x01
    31b6:	88 83       	st	Y, r24
			*curCounter = 0;
    31b8:	1d 92       	st	X+, r1
    31ba:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    31bc:	c9 01       	movw	r24, r18
    31be:	97 01       	movw	r18, r14
    31c0:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	08 95       	ret

000031d2 <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
    31d2:	2f 92       	push	r2
    31d4:	3f 92       	push	r3
    31d6:	4f 92       	push	r4
    31d8:	5f 92       	push	r5
    31da:	6f 92       	push	r6
    31dc:	7f 92       	push	r7
    31de:	8f 92       	push	r8
    31e0:	9f 92       	push	r9
    31e2:	af 92       	push	r10
    31e4:	bf 92       	push	r11
    31e6:	cf 92       	push	r12
    31e8:	df 92       	push	r13
    31ea:	ef 92       	push	r14
    31ec:	ff 92       	push	r15
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	6e 97       	sbiw	r28, 0x1e	; 30
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	9e 8f       	std	Y+30, r25	; 0x1e
    3208:	8d 8f       	std	Y+29, r24	; 0x1d
    320a:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
    320c:	20 81       	ld	r18, Z
    320e:	31 81       	ldd	r19, Z+1	; 0x01
    3210:	3c 8f       	std	Y+28, r19	; 0x1c
    3212:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	93 81       	ldd	r25, Z+3	; 0x03
    3218:	9a 8f       	std	Y+26, r25	; 0x1a
    321a:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
    321c:	a4 81       	ldd	r26, Z+4	; 0x04
    321e:	b5 81       	ldd	r27, Z+5	; 0x05
    3220:	b8 8f       	std	Y+24, r27	; 0x18
    3222:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
    3224:	26 81       	ldd	r18, Z+6	; 0x06
    3226:	37 81       	ldd	r19, Z+7	; 0x07
    3228:	3e 8b       	std	Y+22, r19	; 0x16
    322a:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
    322c:	80 85       	ldd	r24, Z+8	; 0x08
    322e:	91 85       	ldd	r25, Z+9	; 0x09
    3230:	9c 8b       	std	Y+20, r25	; 0x14
    3232:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
    3234:	a2 85       	ldd	r26, Z+10	; 0x0a
    3236:	b3 85       	ldd	r27, Z+11	; 0x0b
    3238:	ba 8b       	std	Y+18, r27	; 0x12
    323a:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
    323c:	24 85       	ldd	r18, Z+12	; 0x0c
    323e:	35 85       	ldd	r19, Z+13	; 0x0d
    3240:	38 8b       	std	Y+16, r19	; 0x10
    3242:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
    3244:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3246:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	dc 01       	movw	r26, r24
    324e:	ad 5c       	subi	r26, 0xCD	; 205
    3250:	bc 4f       	sbci	r27, 0xFC	; 252
    3252:	be 87       	std	Y+14, r27	; 0x0e
    3254:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
    3256:	fc 01       	movw	r30, r24
    3258:	e5 58       	subi	r30, 0x85	; 133
    325a:	fc 4f       	sbci	r31, 0xFC	; 252
    325c:	fc 87       	std	Y+12, r31	; 0x0c
    325e:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
    3260:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3262:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3264:	82 0f       	add	r24, r18
    3266:	93 1f       	adc	r25, r19
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	88 0f       	add	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	dc 01       	movw	r26, r24
    3272:	ae 5e       	subi	r26, 0xEE	; 238
    3274:	bd 4f       	sbci	r27, 0xFD	; 253
    3276:	ba 87       	std	Y+10, r27	; 0x0a
    3278:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
    327a:	fc 01       	movw	r30, r24
    327c:	ea 5e       	subi	r30, 0xEA	; 234
    327e:	fd 4f       	sbci	r31, 0xFD	; 253
    3280:	f8 87       	std	Y+8, r31	; 0x08
    3282:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
    3284:	9c 01       	movw	r18, r24
    3286:	26 5e       	subi	r18, 0xE6	; 230
    3288:	3d 4f       	sbci	r19, 0xFD	; 253
    328a:	3e 83       	std	Y+6, r19	; 0x06
    328c:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
    328e:	80 91 ea 02 	lds	r24, 0x02EA
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	09 f4       	brne	.+2      	; 0x3298 <fadeBetweenColors+0xc6>
    3296:	09 c1       	rjmp	.+530    	; 0x34aa <fadeBetweenColors+0x2d8>
    3298:	ab 8d       	ldd	r26, Y+27	; 0x1b
    329a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    329c:	bd 01       	movw	r22, r26
    329e:	88 27       	eor	r24, r24
    32a0:	77 fd       	sbrc	r23, 7
    32a2:	80 95       	com	r24
    32a4:	98 2f       	mov	r25, r24
    32a6:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    32aa:	3b 01       	movw	r6, r22
    32ac:	4c 01       	movw	r8, r24
    32ae:	e9 8d       	ldd	r30, Y+25	; 0x19
    32b0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    32b2:	bf 01       	movw	r22, r30
    32b4:	88 27       	eor	r24, r24
    32b6:	77 fd       	sbrc	r23, 7
    32b8:	80 95       	com	r24
    32ba:	98 2f       	mov	r25, r24
    32bc:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    32c0:	1b 01       	movw	r2, r22
    32c2:	2c 01       	movw	r4, r24
    32c4:	2f 89       	ldd	r18, Y+23	; 0x17
    32c6:	38 8d       	ldd	r19, Y+24	; 0x18
    32c8:	b9 01       	movw	r22, r18
    32ca:	88 27       	eor	r24, r24
    32cc:	77 fd       	sbrc	r23, 7
    32ce:	80 95       	com	r24
    32d0:	98 2f       	mov	r25, r24
    32d2:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    32d6:	69 83       	std	Y+1, r22	; 0x01
    32d8:	7a 83       	std	Y+2, r23	; 0x02
    32da:	8b 83       	std	Y+3, r24	; 0x03
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	ad 85       	ldd	r26, Y+13	; 0x0d
    32e0:	be 85       	ldd	r27, Y+14	; 0x0e
    32e2:	cd 90       	ld	r12, X+
    32e4:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
    32e6:	ef 85       	ldd	r30, Y+15	; 0x0f
    32e8:	f8 89       	ldd	r31, Y+16	; 0x10
    32ea:	bf 01       	movw	r22, r30
    32ec:	88 27       	eor	r24, r24
    32ee:	77 fd       	sbrc	r23, 7
    32f0:	80 95       	com	r24
    32f2:	98 2f       	mov	r25, r24
    32f4:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    32f8:	7b 01       	movw	r14, r22
    32fa:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
    32fc:	b6 01       	movw	r22, r12
    32fe:	88 27       	eor	r24, r24
    3300:	77 fd       	sbrc	r23, 7
    3302:	80 95       	com	r24
    3304:	98 2f       	mov	r25, r24
    3306:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    330a:	5b 01       	movw	r10, r22
    330c:	6c 01       	movw	r12, r24
    330e:	2d 89       	ldd	r18, Y+21	; 0x15
    3310:	3e 89       	ldd	r19, Y+22	; 0x16
    3312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3316:	28 1b       	sub	r18, r24
    3318:	39 0b       	sbc	r19, r25
    331a:	b9 01       	movw	r22, r18
    331c:	88 27       	eor	r24, r24
    331e:	77 fd       	sbrc	r23, 7
    3320:	80 95       	com	r24
    3322:	98 2f       	mov	r25, r24
    3324:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    3328:	a8 01       	movw	r20, r16
    332a:	97 01       	movw	r18, r14
    332c:	0e 94 2d 28 	call	0x505a	; 0x505a <__divsf3>
    3330:	9b 01       	movw	r18, r22
    3332:	ac 01       	movw	r20, r24
    3334:	c6 01       	movw	r24, r12
    3336:	b5 01       	movw	r22, r10
    3338:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__mulsf3>
    333c:	a4 01       	movw	r20, r8
    333e:	93 01       	movw	r18, r6
    3340:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__addsf3>
    3344:	a9 85       	ldd	r26, Y+9	; 0x09
    3346:	ba 85       	ldd	r27, Y+10	; 0x0a
    3348:	6d 93       	st	X+, r22
    334a:	7d 93       	st	X+, r23
    334c:	8d 93       	st	X+, r24
    334e:	9c 93       	st	X, r25
    3350:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
    3352:	eb 89       	ldd	r30, Y+19	; 0x13
    3354:	fc 89       	ldd	r31, Y+20	; 0x14
    3356:	29 8d       	ldd	r18, Y+25	; 0x19
    3358:	3a 8d       	ldd	r19, Y+26	; 0x1a
    335a:	e2 1b       	sub	r30, r18
    335c:	f3 0b       	sbc	r31, r19
    335e:	bf 01       	movw	r22, r30
    3360:	88 27       	eor	r24, r24
    3362:	77 fd       	sbrc	r23, 7
    3364:	80 95       	com	r24
    3366:	98 2f       	mov	r25, r24
    3368:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    336c:	a8 01       	movw	r20, r16
    336e:	97 01       	movw	r18, r14
    3370:	0e 94 2d 28 	call	0x505a	; 0x505a <__divsf3>
    3374:	a6 01       	movw	r20, r12
    3376:	95 01       	movw	r18, r10
    3378:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__mulsf3>
    337c:	a2 01       	movw	r20, r4
    337e:	91 01       	movw	r18, r2
    3380:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__addsf3>
    3384:	af 81       	ldd	r26, Y+7	; 0x07
    3386:	b8 85       	ldd	r27, Y+8	; 0x08
    3388:	6d 93       	st	X+, r22
    338a:	7d 93       	st	X+, r23
    338c:	8d 93       	st	X+, r24
    338e:	9c 93       	st	X, r25
    3390:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
    3392:	e9 89       	ldd	r30, Y+17	; 0x11
    3394:	fa 89       	ldd	r31, Y+18	; 0x12
    3396:	2f 89       	ldd	r18, Y+23	; 0x17
    3398:	38 8d       	ldd	r19, Y+24	; 0x18
    339a:	e2 1b       	sub	r30, r18
    339c:	f3 0b       	sbc	r31, r19
    339e:	bf 01       	movw	r22, r30
    33a0:	88 27       	eor	r24, r24
    33a2:	77 fd       	sbrc	r23, 7
    33a4:	80 95       	com	r24
    33a6:	98 2f       	mov	r25, r24
    33a8:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    33ac:	a8 01       	movw	r20, r16
    33ae:	97 01       	movw	r18, r14
    33b0:	0e 94 2d 28 	call	0x505a	; 0x505a <__divsf3>
    33b4:	a6 01       	movw	r20, r12
    33b6:	95 01       	movw	r18, r10
    33b8:	0e 94 33 27 	call	0x4e66	; 0x4e66 <__mulsf3>
    33bc:	29 81       	ldd	r18, Y+1	; 0x01
    33be:	3a 81       	ldd	r19, Y+2	; 0x02
    33c0:	4b 81       	ldd	r20, Y+3	; 0x03
    33c2:	5c 81       	ldd	r21, Y+4	; 0x04
    33c4:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__addsf3>
    33c8:	7b 01       	movw	r14, r22
    33ca:	8c 01       	movw	r16, r24
    33cc:	ad 81       	ldd	r26, Y+5	; 0x05
    33ce:	be 81       	ldd	r27, Y+6	; 0x06
    33d0:	6d 93       	st	X+, r22
    33d2:	7d 93       	st	X+, r23
    33d4:	8d 93       	st	X+, r24
    33d6:	9c 93       	st	X, r25
    33d8:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
    33da:	e9 85       	ldd	r30, Y+9	; 0x09
    33dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	0e 94 37 29 	call	0x526e	; 0x526e <__fixsfsi>
    33ea:	3b 01       	movw	r6, r22
    33ec:	4c 01       	movw	r8, r24
    33ee:	af 81       	ldd	r26, Y+7	; 0x07
    33f0:	b8 85       	ldd	r27, Y+8	; 0x08
    33f2:	6d 91       	ld	r22, X+
    33f4:	7d 91       	ld	r23, X+
    33f6:	8d 91       	ld	r24, X+
    33f8:	9c 91       	ld	r25, X
    33fa:	0e 94 37 29 	call	0x526e	; 0x526e <__fixsfsi>
    33fe:	5b 01       	movw	r10, r22
    3400:	6c 01       	movw	r12, r24
    3402:	c8 01       	movw	r24, r16
    3404:	b7 01       	movw	r22, r14
    3406:	0e 94 37 29 	call	0x526e	; 0x526e <__fixsfsi>
    340a:	8b 01       	movw	r16, r22
    340c:	9c 01       	movw	r18, r24
    340e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3412:	b3 01       	movw	r22, r6
    3414:	a5 01       	movw	r20, r10
    3416:	98 01       	movw	r18, r16
    3418:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
    341c:	eb 85       	ldd	r30, Y+11	; 0x0b
    341e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	59 f1       	breq	.+86     	; 0x347e <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
    3428:	ed 85       	ldd	r30, Y+13	; 0x0d
    342a:	fe 85       	ldd	r31, Y+14	; 0x0e
    342c:	80 81       	ld	r24, Z
    342e:	91 81       	ldd	r25, Z+1	; 0x01
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
    3436:	97 fd       	sbrc	r25, 7
    3438:	19 c0       	rjmp	.+50     	; 0x346c <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
    343a:	6e 96       	adiw	r28, 0x1e	; 30
    343c:	0f b6       	in	r0, 0x3f	; 63
    343e:	f8 94       	cli
    3440:	de bf       	out	0x3e, r29	; 62
    3442:	0f be       	out	0x3f, r0	; 63
    3444:	cd bf       	out	0x3d, r28	; 61
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	df 90       	pop	r13
    3454:	cf 90       	pop	r12
    3456:	bf 90       	pop	r11
    3458:	af 90       	pop	r10
    345a:	9f 90       	pop	r9
    345c:	8f 90       	pop	r8
    345e:	7f 90       	pop	r7
    3460:	6f 90       	pop	r6
    3462:	5f 90       	pop	r5
    3464:	4f 90       	pop	r4
    3466:	3f 90       	pop	r3
    3468:	2f 90       	pop	r2
    346a:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
    346c:	11 82       	std	Z+1, r1	; 0x01
    346e:	10 82       	st	Z, r1
			*direction = 1;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	ab 85       	ldd	r26, Y+11	; 0x0b
    3476:	bc 85       	ldd	r27, Y+12	; 0x0c
    3478:	8d 93       	st	X+, r24
    347a:	9c 93       	st	X, r25
    347c:	de cf       	rjmp	.-68     	; 0x343a <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
    347e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3480:	be 85       	ldd	r27, Y+14	; 0x0e
    3482:	8d 91       	ld	r24, X+
    3484:	9c 91       	ld	r25, X
    3486:	11 97       	sbiw	r26, 0x01	; 1
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	8d 93       	st	X+, r24
    348c:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
    348e:	ef 85       	ldd	r30, Y+15	; 0x0f
    3490:	f8 89       	ldd	r31, Y+16	; 0x10
    3492:	e8 17       	cp	r30, r24
    3494:	f9 07       	cpc	r31, r25
    3496:	8c f6       	brge	.-94     	; 0x343a <fadeBetweenColors+0x268>
			*direction = 0;
    3498:	ab 85       	ldd	r26, Y+11	; 0x0b
    349a:	bc 85       	ldd	r27, Y+12	; 0x0c
    349c:	1d 92       	st	X+, r1
    349e:	1c 92       	st	X, r1
			*currentStep = stepCount;
    34a0:	ad 85       	ldd	r26, Y+13	; 0x0d
    34a2:	be 85       	ldd	r27, Y+14	; 0x0e
    34a4:	ed 93       	st	X+, r30
    34a6:	fc 93       	st	X, r31
    34a8:	c8 cf       	rjmp	.-112    	; 0x343a <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
    34aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    34ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
    34ae:	bf 01       	movw	r22, r30
    34b0:	88 27       	eor	r24, r24
    34b2:	77 fd       	sbrc	r23, 7
    34b4:	80 95       	com	r24
    34b6:	98 2f       	mov	r25, r24
    34b8:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    34bc:	3b 01       	movw	r6, r22
    34be:	4c 01       	movw	r8, r24
    34c0:	a9 85       	ldd	r26, Y+9	; 0x09
    34c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    34c4:	6d 93       	st	X+, r22
    34c6:	7d 93       	st	X+, r23
    34c8:	8d 93       	st	X+, r24
    34ca:	9c 93       	st	X, r25
    34cc:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
    34ce:	e9 8d       	ldd	r30, Y+25	; 0x19
    34d0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    34d2:	bf 01       	movw	r22, r30
    34d4:	88 27       	eor	r24, r24
    34d6:	77 fd       	sbrc	r23, 7
    34d8:	80 95       	com	r24
    34da:	98 2f       	mov	r25, r24
    34dc:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    34e0:	1b 01       	movw	r2, r22
    34e2:	2c 01       	movw	r4, r24
    34e4:	af 81       	ldd	r26, Y+7	; 0x07
    34e6:	b8 85       	ldd	r27, Y+8	; 0x08
    34e8:	6d 93       	st	X+, r22
    34ea:	7d 93       	st	X+, r23
    34ec:	8d 93       	st	X+, r24
    34ee:	9c 93       	st	X, r25
    34f0:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
    34f2:	ef 89       	ldd	r30, Y+23	; 0x17
    34f4:	f8 8d       	ldd	r31, Y+24	; 0x18
    34f6:	bf 01       	movw	r22, r30
    34f8:	88 27       	eor	r24, r24
    34fa:	77 fd       	sbrc	r23, 7
    34fc:	80 95       	com	r24
    34fe:	98 2f       	mov	r25, r24
    3500:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <__floatsisf>
    3504:	69 83       	std	Y+1, r22	; 0x01
    3506:	7a 83       	std	Y+2, r23	; 0x02
    3508:	8b 83       	std	Y+3, r24	; 0x03
    350a:	9c 83       	std	Y+4, r25	; 0x04
    350c:	ad 81       	ldd	r26, Y+5	; 0x05
    350e:	be 81       	ldd	r27, Y+6	; 0x06
    3510:	6d 93       	st	X+, r22
    3512:	7d 93       	st	X+, r23
    3514:	8d 93       	st	X+, r24
    3516:	9c 93       	st	X, r25
    3518:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    351a:	ed 85       	ldd	r30, Y+13	; 0x0d
    351c:	fe 85       	ldd	r31, Y+14	; 0x0e
    351e:	11 82       	std	Z+1, r1	; 0x01
    3520:	10 82       	st	Z, r1
		*direction = 1;	
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	ab 85       	ldd	r26, Y+11	; 0x0b
    3528:	bc 85       	ldd	r27, Y+12	; 0x0c
    352a:	8d 93       	st	X+, r24
    352c:	9c 93       	st	X, r25
    352e:	cc 24       	eor	r12, r12
    3530:	dd 24       	eor	r13, r13
    3532:	d9 ce       	rjmp	.-590    	; 0x32e6 <fadeBetweenColors+0x114>

00003534 <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    3534:	21 e0       	ldi	r18, 0x01	; 1
    3536:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    353a:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <fadeBetweenColors>
	resetEffect = FALSE;
    353e:	10 92 ea 02 	sts	0x02EA, r1
}
    3542:	08 95       	ret

00003544 <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	2e 97       	sbiw	r28, 0x0e	; 14
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	9c 01       	movw	r18, r24
    355e:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    3560:	8c 01       	movw	r16, r24
    3562:	00 0f       	add	r16, r16
    3564:	11 1f       	adc	r17, r17
    3566:	0d 56       	subi	r16, 0x6D	; 109
    3568:	1c 4f       	sbci	r17, 0xFC	; 252
    356a:	d8 01       	movw	r26, r16
    356c:	8d 91       	ld	r24, X+
    356e:	9c 91       	ld	r25, X
    3570:	42 97       	sbiw	r24, 0x12	; 18
    3572:	14 f5       	brge	.+68     	; 0x35b8 <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    3574:	80 81       	ld	r24, Z
    3576:	91 81       	ldd	r25, Z+1	; 0x01
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	9c 83       	std	Y+4, r25	; 0x04
    3582:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    3584:	84 81       	ldd	r24, Z+4	; 0x04
    3586:	95 81       	ldd	r25, Z+5	; 0x05
    3588:	9e 83       	std	Y+6, r25	; 0x06
    358a:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    358c:	18 86       	std	Y+8, r1	; 0x08
    358e:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    3590:	1a 86       	std	Y+10, r1	; 0x0a
    3592:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    3594:	1c 86       	std	Y+12, r1	; 0x0c
    3596:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    3598:	82 e1       	ldi	r24, 0x12	; 18
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9e 87       	std	Y+14, r25	; 0x0e
    359e:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    35a0:	c9 01       	movw	r24, r18
    35a2:	be 01       	movw	r22, r28
    35a4:	6f 5f       	subi	r22, 0xFF	; 255
    35a6:	7f 4f       	sbci	r23, 0xFF	; 255
    35a8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    35ac:	f8 01       	movw	r30, r16
    35ae:	80 81       	ld	r24, Z
    35b0:	91 81       	ldd	r25, Z+1	; 0x01
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	80 83       	st	Z, r24
	
}
    35b8:	2e 96       	adiw	r28, 0x0e	; 14
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	1f 91       	pop	r17
    35ca:	0f 91       	pop	r16
    35cc:	08 95       	ret

000035ce <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	2e 97       	sbiw	r28, 0x0e	; 14
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    35e4:	fc 01       	movw	r30, r24
    35e6:	ee 0f       	add	r30, r30
    35e8:	ff 1f       	adc	r31, r31
    35ea:	ed 56       	subi	r30, 0x6D	; 109
    35ec:	fc 4f       	sbci	r31, 0xFC	; 252
    35ee:	11 82       	std	Z+1, r1	; 0x01
    35f0:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    35f2:	2d 91       	ld	r18, X+
    35f4:	3c 91       	ld	r19, X
    35f6:	11 97       	sbiw	r26, 0x01	; 1
    35f8:	3a 83       	std	Y+2, r19	; 0x02
    35fa:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    35fc:	12 96       	adiw	r26, 0x02	; 2
    35fe:	2d 91       	ld	r18, X+
    3600:	3c 91       	ld	r19, X
    3602:	13 97       	sbiw	r26, 0x03	; 3
    3604:	3c 83       	std	Y+4, r19	; 0x04
    3606:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    3608:	14 96       	adiw	r26, 0x04	; 4
    360a:	2d 91       	ld	r18, X+
    360c:	3c 91       	ld	r19, X
    360e:	15 97       	sbiw	r26, 0x05	; 5
    3610:	3e 83       	std	Y+6, r19	; 0x06
    3612:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    3614:	18 86       	std	Y+8, r1	; 0x08
    3616:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    3618:	1a 86       	std	Y+10, r1	; 0x0a
    361a:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    361c:	1c 86       	std	Y+12, r1	; 0x0c
    361e:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    3620:	22 e1       	ldi	r18, 0x12	; 18
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	3e 87       	std	Y+14, r19	; 0x0e
    3626:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    3628:	21 e0       	ldi	r18, 0x01	; 1
    362a:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    362e:	be 01       	movw	r22, r28
    3630:	6f 5f       	subi	r22, 0xFF	; 255
    3632:	7f 4f       	sbci	r23, 0xFF	; 255
    3634:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <fadeBetweenColors>
	resetEffect=FALSE;
    3638:	10 92 ea 02 	sts	0x02EA, r1
}
    363c:	2e 96       	adiw	r28, 0x0e	; 14
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    364e:	cf 92       	push	r12
    3650:	df 92       	push	r13
    3652:	ef 92       	push	r14
    3654:	ff 92       	push	r15
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	7c 01       	movw	r14, r24
    365c:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    365e:	8c 01       	movw	r16, r24
    3660:	00 0f       	add	r16, r16
    3662:	11 1f       	adc	r17, r17
    3664:	f8 01       	movw	r30, r16
    3666:	e5 5b       	subi	r30, 0xB5	; 181
    3668:	fc 4f       	sbci	r31, 0xFC	; 252
    366a:	11 82       	std	Z+1, r1	; 0x01
    366c:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    366e:	f8 01       	movw	r30, r16
    3670:	ed 59       	subi	r30, 0x9D	; 157
    3672:	fc 4f       	sbci	r31, 0xFC	; 252
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    367c:	f8 01       	movw	r30, r16
    367e:	e5 55       	subi	r30, 0x55	; 85
    3680:	fc 4f       	sbci	r31, 0xFC	; 252
    3682:	11 82       	std	Z+1, r1	; 0x01
    3684:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    3686:	c7 01       	movw	r24, r14
    3688:	0e 94 4e 18 	call	0x309c	; 0x309c <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    368c:	c7 01       	movw	r24, r14
    368e:	b6 01       	movw	r22, r12
    3690:	0e 94 9a 1a 	call	0x3534	; 0x3534 <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    3694:	0e 0d       	add	r16, r14
    3696:	1f 1d       	adc	r17, r15
    3698:	00 0f       	add	r16, r16
    369a:	11 1f       	adc	r17, r17
    369c:	0e 55       	subi	r16, 0x5E	; 94
    369e:	1d 4f       	sbci	r17, 0xFD	; 253
    36a0:	c7 01       	movw	r24, r14
    36a2:	b8 01       	movw	r22, r16
    36a4:	0e 94 7f 24 	call	0x48fe	; 0x48fe <getRGBColor>
}
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ff 90       	pop	r15
    36ae:	ef 90       	pop	r14
    36b0:	df 90       	pop	r13
    36b2:	cf 90       	pop	r12
    36b4:	08 95       	ret

000036b6 <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    36b6:	af 92       	push	r10
    36b8:	bf 92       	push	r11
    36ba:	cf 92       	push	r12
    36bc:	df 92       	push	r13
    36be:	ef 92       	push	r14
    36c0:	ff 92       	push	r15
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
    36ce:	2a 97       	sbiw	r28, 0x0a	; 10
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	6c 01       	movw	r12, r24
    36dc:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	8c 01       	movw	r16, r24
    36e4:	0c 0d       	add	r16, r12
    36e6:	1d 1d       	adc	r17, r13
    36e8:	00 0f       	add	r16, r16
    36ea:	11 1f       	adc	r17, r17
    36ec:	0e 55       	subi	r16, 0x5E	; 94
    36ee:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    36f0:	5b ea       	ldi	r21, 0xAB	; 171
    36f2:	e5 2e       	mov	r14, r21
    36f4:	53 e0       	ldi	r21, 0x03	; 3
    36f6:	f5 2e       	mov	r15, r21
    36f8:	e8 0e       	add	r14, r24
    36fa:	f9 1e       	adc	r15, r25
    36fc:	d7 01       	movw	r26, r14
    36fe:	8d 91       	ld	r24, X+
    3700:	9c 91       	ld	r25, X
    3702:	8a 30       	cpi	r24, 0x0A	; 10
    3704:	91 05       	cpc	r25, r1
    3706:	b4 f5       	brge	.+108    	; 0x3774 <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    3708:	01 96       	adiw	r24, 0x01	; 1
    370a:	d7 01       	movw	r26, r14
    370c:	8d 93       	st	X+, r24
    370e:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    3710:	f8 01       	movw	r30, r16
    3712:	22 81       	ldd	r18, Z+2	; 0x02
    3714:	33 81       	ldd	r19, Z+3	; 0x03
    3716:	44 81       	ldd	r20, Z+4	; 0x04
    3718:	55 81       	ldd	r21, Z+5	; 0x05
    371a:	d5 01       	movw	r26, r10
    371c:	1e 96       	adiw	r26, 0x0e	; 14
    371e:	6d 91       	ld	r22, X+
    3720:	7c 91       	ld	r23, X
    3722:	1f 97       	sbiw	r26, 0x0f	; 15
    3724:	50 96       	adiw	r26, 0x10	; 16
    3726:	ed 91       	ld	r30, X+
    3728:	fc 91       	ld	r31, X
    372a:	51 97       	sbiw	r26, 0x11	; 17
    372c:	d8 01       	movw	r26, r16
    372e:	8d 91       	ld	r24, X+
    3730:	9c 91       	ld	r25, X
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	3c 83       	std	Y+4, r19	; 0x04
    3738:	2b 83       	std	Y+3, r18	; 0x03
    373a:	5e 83       	std	Y+6, r21	; 0x06
    373c:	4d 83       	std	Y+5, r20	; 0x05
    373e:	78 87       	std	Y+8, r23	; 0x08
    3740:	6f 83       	std	Y+7, r22	; 0x07
    3742:	fa 87       	std	Y+10, r31	; 0x0a
    3744:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    3746:	c6 01       	movw	r24, r12
    3748:	be 01       	movw	r22, r28
    374a:	6f 5f       	subi	r22, 0xFF	; 255
    374c:	7f 4f       	sbci	r23, 0xFF	; 255
    374e:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <pwmEffect>

	
	
}
    3752:	2a 96       	adiw	r28, 0x0a	; 10
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	ff 90       	pop	r15
    3768:	ef 90       	pop	r14
    376a:	df 90       	pop	r13
    376c:	cf 90       	pop	r12
    376e:	bf 90       	pop	r11
    3770:	af 90       	pop	r10
    3772:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    3774:	c6 01       	movw	r24, r12
    3776:	b5 01       	movw	r22, r10
    3778:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    377c:	c6 01       	movw	r24, r12
    377e:	b8 01       	movw	r22, r16
    3780:	0e 94 7f 24 	call	0x48fe	; 0x48fe <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    3784:	f7 01       	movw	r30, r14
    3786:	11 82       	std	Z+1, r1	; 0x01
    3788:	10 82       	st	Z, r1
    378a:	c2 cf       	rjmp	.-124    	; 0x3710 <fadeBetweenColorsWithPwm+0x5a>

0000378c <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	62 97       	sbiw	r28, 0x12	; 18
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	f8 2e       	mov	r15, r24
    37aa:	e9 2e       	mov	r14, r25
    37ac:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    37ae:	1e 96       	adiw	r26, 0x0e	; 14
    37b0:	8d 91       	ld	r24, X+
    37b2:	9c 91       	ld	r25, X
    37b4:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    37b6:	81 30       	cpi	r24, 0x01	; 1
    37b8:	91 05       	cpc	r25, r1
    37ba:	09 f4       	brne	.+2      	; 0x37be <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    37bc:	a6 c0       	rjmp	.+332    	; 0x390a <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    37be:	89 2b       	or	r24, r25
    37c0:	31 f5       	brne	.+76     	; 0x380e <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    37c2:	8f 2d       	mov	r24, r15
    37c4:	9e 2d       	mov	r25, r14
    37c6:	fc 01       	movw	r30, r24
    37c8:	ee 0f       	add	r30, r30
    37ca:	ff 1f       	adc	r31, r31
    37cc:	ee 0f       	add	r30, r30
    37ce:	ff 1f       	adc	r31, r31
    37d0:	ee 0f       	add	r30, r30
    37d2:	ff 1f       	adc	r31, r31
    37d4:	88 0f       	add	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	e8 0f       	add	r30, r24
    37da:	f9 1f       	adc	r31, r25
    37dc:	e5 59       	subi	r30, 0x95	; 149
    37de:	fb 4f       	sbci	r31, 0xFB	; 251
    37e0:	80 e2       	ldi	r24, 0x20	; 32
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    37e8:	8f 2d       	mov	r24, r15
    37ea:	9e 2d       	mov	r25, r14
    37ec:	fc 01       	movw	r30, r24
    37ee:	ee 0f       	add	r30, r30
    37f0:	ff 1f       	adc	r31, r31
    37f2:	ee 0f       	add	r30, r30
    37f4:	ff 1f       	adc	r31, r31
    37f6:	ee 0f       	add	r30, r30
    37f8:	ff 1f       	adc	r31, r31
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	e8 0f       	add	r30, r24
    3800:	f9 1f       	adc	r31, r25
    3802:	e5 59       	subi	r30, 0x95	; 149
    3804:	fb 4f       	sbci	r31, 0xFB	; 251
    3806:	82 e0       	ldi	r24, 0x02	; 2
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	93 83       	std	Z+3, r25	; 0x03
    380c:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    380e:	8f 2d       	mov	r24, r15
    3810:	9e 2d       	mov	r25, r14
    3812:	fc 01       	movw	r30, r24
    3814:	ee 0f       	add	r30, r30
    3816:	ff 1f       	adc	r31, r31
    3818:	ee 0f       	add	r30, r30
    381a:	ff 1f       	adc	r31, r31
    381c:	ee 0f       	add	r30, r30
    381e:	ff 1f       	adc	r31, r31
    3820:	88 0f       	add	r24, r24
    3822:	99 1f       	adc	r25, r25
    3824:	e8 0f       	add	r30, r24
    3826:	f9 1f       	adc	r31, r25
    3828:	e5 59       	subi	r30, 0x95	; 149
    382a:	fb 4f       	sbci	r31, 0xFB	; 251
    382c:	15 82       	std	Z+5, r1	; 0x05
    382e:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    3830:	8f 2d       	mov	r24, r15
    3832:	9e 2d       	mov	r25, r14
    3834:	fc 01       	movw	r30, r24
    3836:	ee 0f       	add	r30, r30
    3838:	ff 1f       	adc	r31, r31
    383a:	ee 0f       	add	r30, r30
    383c:	ff 1f       	adc	r31, r31
    383e:	ee 0f       	add	r30, r30
    3840:	ff 1f       	adc	r31, r31
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	e8 0f       	add	r30, r24
    3848:	f9 1f       	adc	r31, r25
    384a:	e5 59       	subi	r30, 0x95	; 149
    384c:	fb 4f       	sbci	r31, 0xFB	; 251
    384e:	50 96       	adiw	r26, 0x10	; 16
    3850:	8c 91       	ld	r24, X
    3852:	50 97       	sbiw	r26, 0x10	; 16
    3854:	51 96       	adiw	r26, 0x11	; 17
    3856:	9c 91       	ld	r25, X
    3858:	51 97       	sbiw	r26, 0x11	; 17
    385a:	9c 01       	movw	r18, r24
    385c:	22 0f       	add	r18, r18
    385e:	33 1f       	adc	r19, r19
    3860:	22 0f       	add	r18, r18
    3862:	33 1f       	adc	r19, r19
    3864:	22 0f       	add	r18, r18
    3866:	33 1f       	adc	r19, r19
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	28 0f       	add	r18, r24
    386e:	39 1f       	adc	r19, r25
    3870:	31 87       	std	Z+9, r19	; 0x09
    3872:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    3874:	8e 01       	movw	r16, r28
    3876:	0f 5f       	subi	r16, 0xFF	; 255
    3878:	1f 4f       	sbci	r17, 0xFF	; 255
    387a:	c8 01       	movw	r24, r16
    387c:	bd 01       	movw	r22, r26
    387e:	47 e0       	ldi	r20, 0x07	; 7
    3880:	50 e0       	ldi	r21, 0x00	; 0
    3882:	0e 94 78 25 	call	0x4af0	; 0x4af0 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    3886:	8f 2d       	mov	r24, r15
    3888:	9e 2d       	mov	r25, r14
    388a:	fc 01       	movw	r30, r24
    388c:	ee 0f       	add	r30, r30
    388e:	ff 1f       	adc	r31, r31
    3890:	ee 0f       	add	r30, r30
    3892:	ff 1f       	adc	r31, r31
    3894:	ee 0f       	add	r30, r30
    3896:	ff 1f       	adc	r31, r31
    3898:	88 0f       	add	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	e8 0f       	add	r30, r24
    389e:	f9 1f       	adc	r31, r25
    38a0:	e5 59       	subi	r30, 0x95	; 149
    38a2:	fb 4f       	sbci	r31, 0xFB	; 251
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	98 8b       	std	Y+16, r25	; 0x10
    38aa:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    38ac:	8f 2d       	mov	r24, r15
    38ae:	9e 2d       	mov	r25, r14
    38b0:	fc 01       	movw	r30, r24
    38b2:	ee 0f       	add	r30, r30
    38b4:	ff 1f       	adc	r31, r31
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31
    38ba:	ee 0f       	add	r30, r30
    38bc:	ff 1f       	adc	r31, r31
    38be:	88 0f       	add	r24, r24
    38c0:	99 1f       	adc	r25, r25
    38c2:	e8 0f       	add	r30, r24
    38c4:	f9 1f       	adc	r31, r25
    38c6:	e5 59       	subi	r30, 0x95	; 149
    38c8:	fb 4f       	sbci	r31, 0xFB	; 251
    38ca:	82 81       	ldd	r24, Z+2	; 0x02
    38cc:	93 81       	ldd	r25, Z+3	; 0x03
    38ce:	9a 8b       	std	Y+18, r25	; 0x12
    38d0:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    38d2:	8f 2d       	mov	r24, r15
    38d4:	9e 2d       	mov	r25, r14
    38d6:	b8 01       	movw	r22, r16
    38d8:	0e 94 27 1b 	call	0x364e	; 0x364e <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    38dc:	8f 2d       	mov	r24, r15
    38de:	9e 2d       	mov	r25, r14
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>

}
    38f0:	62 96       	adiw	r28, 0x12	; 18
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
    38fc:	cf 91       	pop	r28
    38fe:	df 91       	pop	r29
    3900:	1f 91       	pop	r17
    3902:	0f 91       	pop	r16
    3904:	ff 90       	pop	r15
    3906:	ef 90       	pop	r14
    3908:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    390a:	8f 2d       	mov	r24, r15
    390c:	9e 2d       	mov	r25, r14
    390e:	fc 01       	movw	r30, r24
    3910:	ee 0f       	add	r30, r30
    3912:	ff 1f       	adc	r31, r31
    3914:	ee 0f       	add	r30, r30
    3916:	ff 1f       	adc	r31, r31
    3918:	ee 0f       	add	r30, r30
    391a:	ff 1f       	adc	r31, r31
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	e8 0f       	add	r30, r24
    3922:	f9 1f       	adc	r31, r25
    3924:	e5 59       	subi	r30, 0x95	; 149
    3926:	fb 4f       	sbci	r31, 0xFB	; 251
    3928:	11 82       	std	Z+1, r1	; 0x01
    392a:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    392c:	8f 2d       	mov	r24, r15
    392e:	9e 2d       	mov	r25, r14
    3930:	fc 01       	movw	r30, r24
    3932:	ee 0f       	add	r30, r30
    3934:	ff 1f       	adc	r31, r31
    3936:	ee 0f       	add	r30, r30
    3938:	ff 1f       	adc	r31, r31
    393a:	ee 0f       	add	r30, r30
    393c:	ff 1f       	adc	r31, r31
    393e:	88 0f       	add	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	e8 0f       	add	r30, r24
    3944:	f9 1f       	adc	r31, r25
    3946:	e5 59       	subi	r30, 0x95	; 149
    3948:	fb 4f       	sbci	r31, 0xFB	; 251
    394a:	80 e2       	ldi	r24, 0x20	; 32
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	93 83       	std	Z+3, r25	; 0x03
    3950:	82 83       	std	Z+2, r24	; 0x02
    3952:	5d cf       	rjmp	.-326    	; 0x380e <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

00003954 <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3954:	ef 92       	push	r14
    3956:	ff 92       	push	r15
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	df 93       	push	r29
    395e:	cf 93       	push	r28
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	62 97       	sbiw	r28, 0x12	; 18
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	f8 2e       	mov	r15, r24
    3972:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    3974:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    3976:	fb 01       	movw	r30, r22
    3978:	80 81       	ld	r24, Z
    397a:	91 81       	ldd	r25, Z+1	; 0x01
    397c:	9a 83       	std	Y+2, r25	; 0x02
    397e:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    3980:	82 81       	ldd	r24, Z+2	; 0x02
    3982:	93 81       	ldd	r25, Z+3	; 0x03
    3984:	9c 83       	std	Y+4, r25	; 0x04
    3986:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    3988:	84 81       	ldd	r24, Z+4	; 0x04
    398a:	95 81       	ldd	r25, Z+5	; 0x05
    398c:	9e 83       	std	Y+6, r25	; 0x06
    398e:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    3990:	86 81       	ldd	r24, Z+6	; 0x06
    3992:	97 81       	ldd	r25, Z+7	; 0x07
    3994:	98 87       	std	Y+8, r25	; 0x08
    3996:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    3998:	80 85       	ldd	r24, Z+8	; 0x08
    399a:	91 85       	ldd	r25, Z+9	; 0x09
    399c:	9a 87       	std	Y+10, r25	; 0x0a
    399e:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    39a0:	82 85       	ldd	r24, Z+10	; 0x0a
    39a2:	93 85       	ldd	r25, Z+11	; 0x0b
    39a4:	9c 87       	std	Y+12, r25	; 0x0c
    39a6:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    39a8:	82 89       	ldd	r24, Z+18	; 0x12
    39aa:	93 89       	ldd	r25, Z+19	; 0x13
    39ac:	9e 87       	std	Y+14, r25	; 0x0e
    39ae:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    39b0:	84 89       	ldd	r24, Z+20	; 0x14
    39b2:	95 89       	ldd	r25, Z+21	; 0x15
    39b4:	98 8b       	std	Y+16, r25	; 0x10
    39b6:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    39b8:	86 89       	ldd	r24, Z+22	; 0x16
    39ba:	97 89       	ldd	r25, Z+23	; 0x17
    39bc:	9a 8b       	std	Y+18, r25	; 0x12
    39be:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    39c0:	8f 2d       	mov	r24, r15
    39c2:	9e 2d       	mov	r25, r14
    39c4:	be 01       	movw	r22, r28
    39c6:	6f 5f       	subi	r22, 0xFF	; 255
    39c8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ca:	0e 94 c6 1b 	call	0x378c	; 0x378c <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    39ce:	a3 ec       	ldi	r26, 0xC3	; 195
    39d0:	b3 e0       	ldi	r27, 0x03	; 3
    39d2:	8f 2d       	mov	r24, r15
    39d4:	9e 2d       	mov	r25, r14
    39d6:	88 0f       	add	r24, r24
    39d8:	99 1f       	adc	r25, r25
    39da:	fc 01       	movw	r30, r24
    39dc:	ee 0f       	add	r30, r30
    39de:	ff 1f       	adc	r31, r31
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	ee 0f       	add	r30, r30
    39e6:	ff 1f       	adc	r31, r31
    39e8:	e8 1b       	sub	r30, r24
    39ea:	f9 0b       	sbc	r31, r25
    39ec:	ea 0f       	add	r30, r26
    39ee:	fb 1f       	adc	r31, r27
    39f0:	11 82       	std	Z+1, r1	; 0x01
    39f2:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    39f4:	8f 2d       	mov	r24, r15
    39f6:	9e 2d       	mov	r25, r14
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	fc 01       	movw	r30, r24
    39fe:	ee 0f       	add	r30, r30
    3a00:	ff 1f       	adc	r31, r31
    3a02:	ee 0f       	add	r30, r30
    3a04:	ff 1f       	adc	r31, r31
    3a06:	ee 0f       	add	r30, r30
    3a08:	ff 1f       	adc	r31, r31
    3a0a:	e8 1b       	sub	r30, r24
    3a0c:	f9 0b       	sbc	r31, r25
    3a0e:	ea 0f       	add	r30, r26
    3a10:	fb 1f       	adc	r31, r27
    3a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a16:	95 83       	std	Z+5, r25	; 0x05
    3a18:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    3a1a:	8f 2d       	mov	r24, r15
    3a1c:	9e 2d       	mov	r25, r14
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	fc 01       	movw	r30, r24
    3a24:	ee 0f       	add	r30, r30
    3a26:	ff 1f       	adc	r31, r31
    3a28:	ee 0f       	add	r30, r30
    3a2a:	ff 1f       	adc	r31, r31
    3a2c:	ee 0f       	add	r30, r30
    3a2e:	ff 1f       	adc	r31, r31
    3a30:	e8 1b       	sub	r30, r24
    3a32:	f9 0b       	sbc	r31, r25
    3a34:	ea 0f       	add	r30, r26
    3a36:	fb 1f       	adc	r31, r27
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	93 83       	std	Z+3, r25	; 0x03
    3a3e:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    3a40:	8f 2d       	mov	r24, r15
    3a42:	9e 2d       	mov	r25, r14
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	fc 01       	movw	r30, r24
    3a4a:	ee 0f       	add	r30, r30
    3a4c:	ff 1f       	adc	r31, r31
    3a4e:	ee 0f       	add	r30, r30
    3a50:	ff 1f       	adc	r31, r31
    3a52:	ee 0f       	add	r30, r30
    3a54:	ff 1f       	adc	r31, r31
    3a56:	e8 1b       	sub	r30, r24
    3a58:	f9 0b       	sbc	r31, r25
    3a5a:	ea 0f       	add	r30, r26
    3a5c:	fb 1f       	adc	r31, r27
    3a5e:	17 82       	std	Z+7, r1	; 0x07
    3a60:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    3a62:	8f 2d       	mov	r24, r15
    3a64:	9e 2d       	mov	r25, r14
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	ee 0f       	add	r30, r30
    3a6e:	ff 1f       	adc	r31, r31
    3a70:	ee 0f       	add	r30, r30
    3a72:	ff 1f       	adc	r31, r31
    3a74:	ee 0f       	add	r30, r30
    3a76:	ff 1f       	adc	r31, r31
    3a78:	e8 1b       	sub	r30, r24
    3a7a:	f9 0b       	sbc	r31, r25
    3a7c:	ea 0f       	add	r30, r26
    3a7e:	fb 1f       	adc	r31, r27
    3a80:	13 87       	std	Z+11, r17	; 0x0b
    3a82:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    3a84:	8f 2d       	mov	r24, r15
    3a86:	9e 2d       	mov	r25, r14
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	9c 01       	movw	r18, r24
    3a8e:	22 0f       	add	r18, r18
    3a90:	33 1f       	adc	r19, r19
    3a92:	22 0f       	add	r18, r18
    3a94:	33 1f       	adc	r19, r19
    3a96:	22 0f       	add	r18, r18
    3a98:	33 1f       	adc	r19, r19
    3a9a:	28 1b       	sub	r18, r24
    3a9c:	39 0b       	sbc	r19, r25
    3a9e:	a2 0f       	add	r26, r18
    3aa0:	b3 1f       	adc	r27, r19
    3aa2:	0a 5f       	subi	r16, 0xFA	; 250
    3aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa6:	1d 96       	adiw	r26, 0x0d	; 13
    3aa8:	1c 93       	st	X, r17
    3aaa:	0e 93       	st	-X, r16
    3aac:	1c 97       	sbiw	r26, 0x0c	; 12


}
    3aae:	62 96       	adiw	r28, 0x12	; 18
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	1f 91       	pop	r17
    3ac0:	0f 91       	pop	r16
    3ac2:	ff 90       	pop	r15
    3ac4:	ef 90       	pop	r14
    3ac6:	08 95       	ret

00003ac8 <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3ac8:	ef 92       	push	r14
    3aca:	ff 92       	push	r15
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	62 97       	sbiw	r28, 0x12	; 18
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	f8 2e       	mov	r15, r24
    3ae6:	e9 2e       	mov	r14, r25
    3ae8:	db 01       	movw	r26, r22
	short direction = data[7];
    3aea:	1e 96       	adiw	r26, 0x0e	; 14
    3aec:	6d 91       	ld	r22, X+
    3aee:	7c 91       	ld	r23, X
    3af0:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    3af2:	fc 01       	movw	r30, r24
    3af4:	ee 0f       	add	r30, r30
    3af6:	ff 1f       	adc	r31, r31
    3af8:	ee 0f       	add	r30, r30
    3afa:	ff 1f       	adc	r31, r31
    3afc:	ee 0f       	add	r30, r30
    3afe:	ff 1f       	adc	r31, r31
    3b00:	88 0f       	add	r24, r24
    3b02:	99 1f       	adc	r25, r25
    3b04:	e8 0f       	add	r30, r24
    3b06:	f9 1f       	adc	r31, r25
    3b08:	e5 59       	subi	r30, 0x95	; 149
    3b0a:	fb 4f       	sbci	r31, 0xFB	; 251
    3b0c:	40 85       	ldd	r20, Z+8	; 0x08
    3b0e:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    3b10:	8f 2d       	mov	r24, r15
    3b12:	9e 2d       	mov	r25, r14
    3b14:	fc 01       	movw	r30, r24
    3b16:	ee 0f       	add	r30, r30
    3b18:	ff 1f       	adc	r31, r31
    3b1a:	ee 0f       	add	r30, r30
    3b1c:	ff 1f       	adc	r31, r31
    3b1e:	ee 0f       	add	r30, r30
    3b20:	ff 1f       	adc	r31, r31
    3b22:	88 0f       	add	r24, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	e8 0f       	add	r30, r24
    3b28:	f9 1f       	adc	r31, r25
    3b2a:	e5 59       	subi	r30, 0x95	; 149
    3b2c:	fb 4f       	sbci	r31, 0xFB	; 251
    3b2e:	86 81       	ldd	r24, Z+6	; 0x06
    3b30:	97 81       	ldd	r25, Z+7	; 0x07
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <fadeBetweenColorsWithScalingPwmEffect+0x70>
    3b36:	aa c0       	rjmp	.+340    	; 0x3c8c <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    3b38:	8f 2d       	mov	r24, r15
    3b3a:	9e 2d       	mov	r25, r14
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	ee 0f       	add	r30, r30
    3b40:	ff 1f       	adc	r31, r31
    3b42:	ee 0f       	add	r30, r30
    3b44:	ff 1f       	adc	r31, r31
    3b46:	ee 0f       	add	r30, r30
    3b48:	ff 1f       	adc	r31, r31
    3b4a:	88 0f       	add	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	e8 0f       	add	r30, r24
    3b50:	f9 1f       	adc	r31, r25
    3b52:	e5 59       	subi	r30, 0x95	; 149
    3b54:	fb 4f       	sbci	r31, 0xFB	; 251
    3b56:	24 81       	ldd	r18, Z+4	; 0x04
    3b58:	35 81       	ldd	r19, Z+5	; 0x05
    3b5a:	24 17       	cp	r18, r20
    3b5c:	35 07       	cpc	r19, r21
    3b5e:	0c f0       	brlt	.+2      	; 0x3b62 <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    3b60:	54 c0       	rjmp	.+168    	; 0x3c0a <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    3b62:	8f 2d       	mov	r24, r15
    3b64:	9e 2d       	mov	r25, r14
    3b66:	fc 01       	movw	r30, r24
    3b68:	ee 0f       	add	r30, r30
    3b6a:	ff 1f       	adc	r31, r31
    3b6c:	ee 0f       	add	r30, r30
    3b6e:	ff 1f       	adc	r31, r31
    3b70:	ee 0f       	add	r30, r30
    3b72:	ff 1f       	adc	r31, r31
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	e8 0f       	add	r30, r24
    3b7a:	f9 1f       	adc	r31, r25
    3b7c:	e5 59       	subi	r30, 0x95	; 149
    3b7e:	fb 4f       	sbci	r31, 0xFB	; 251
    3b80:	2f 5f       	subi	r18, 0xFF	; 255
    3b82:	3f 4f       	sbci	r19, 0xFF	; 255
    3b84:	35 83       	std	Z+5, r19	; 0x05
    3b86:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    3b88:	8e 01       	movw	r16, r28
    3b8a:	0f 5f       	subi	r16, 0xFF	; 255
    3b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8e:	c8 01       	movw	r24, r16
    3b90:	bd 01       	movw	r22, r26
    3b92:	47 e0       	ldi	r20, 0x07	; 7
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	0e 94 78 25 	call	0x4af0	; 0x4af0 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    3b9a:	8f 2d       	mov	r24, r15
    3b9c:	9e 2d       	mov	r25, r14
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	ee 0f       	add	r30, r30
    3ba2:	ff 1f       	adc	r31, r31
    3ba4:	ee 0f       	add	r30, r30
    3ba6:	ff 1f       	adc	r31, r31
    3ba8:	ee 0f       	add	r30, r30
    3baa:	ff 1f       	adc	r31, r31
    3bac:	88 0f       	add	r24, r24
    3bae:	99 1f       	adc	r25, r25
    3bb0:	e8 0f       	add	r30, r24
    3bb2:	f9 1f       	adc	r31, r25
    3bb4:	e5 59       	subi	r30, 0x95	; 149
    3bb6:	fb 4f       	sbci	r31, 0xFB	; 251
    3bb8:	80 81       	ld	r24, Z
    3bba:	91 81       	ldd	r25, Z+1	; 0x01
    3bbc:	98 8b       	std	Y+16, r25	; 0x10
    3bbe:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    3bc0:	8f 2d       	mov	r24, r15
    3bc2:	9e 2d       	mov	r25, r14
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	ee 0f       	add	r30, r30
    3bc8:	ff 1f       	adc	r31, r31
    3bca:	ee 0f       	add	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	ee 0f       	add	r30, r30
    3bd0:	ff 1f       	adc	r31, r31
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	e8 0f       	add	r30, r24
    3bd8:	f9 1f       	adc	r31, r25
    3bda:	e5 59       	subi	r30, 0x95	; 149
    3bdc:	fb 4f       	sbci	r31, 0xFB	; 251
    3bde:	82 81       	ldd	r24, Z+2	; 0x02
    3be0:	93 81       	ldd	r25, Z+3	; 0x03
    3be2:	9a 8b       	std	Y+18, r25	; 0x12
    3be4:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    3be6:	8f 2d       	mov	r24, r15
    3be8:	9e 2d       	mov	r25, r14
    3bea:	b8 01       	movw	r22, r16
    3bec:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <fadeBetweenColorsWithPwm>
	

}
    3bf0:	62 96       	adiw	r28, 0x12	; 18
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	f8 94       	cli
    3bf6:	de bf       	out	0x3e, r29	; 62
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	cf 91       	pop	r28
    3bfe:	df 91       	pop	r29
    3c00:	1f 91       	pop	r17
    3c02:	0f 91       	pop	r16
    3c04:	ff 90       	pop	r15
    3c06:	ef 90       	pop	r14
    3c08:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    3c0a:	8f 2d       	mov	r24, r15
    3c0c:	9e 2d       	mov	r25, r14
    3c0e:	fc 01       	movw	r30, r24
    3c10:	ee 0f       	add	r30, r30
    3c12:	ff 1f       	adc	r31, r31
    3c14:	ee 0f       	add	r30, r30
    3c16:	ff 1f       	adc	r31, r31
    3c18:	ee 0f       	add	r30, r30
    3c1a:	ff 1f       	adc	r31, r31
    3c1c:	88 0f       	add	r24, r24
    3c1e:	99 1f       	adc	r25, r25
    3c20:	e8 0f       	add	r30, r24
    3c22:	f9 1f       	adc	r31, r25
    3c24:	e5 59       	subi	r30, 0x95	; 149
    3c26:	fb 4f       	sbci	r31, 0xFB	; 251
    3c28:	15 82       	std	Z+5, r1	; 0x05
    3c2a:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    3c2c:	61 30       	cpi	r22, 0x01	; 1
    3c2e:	71 05       	cpc	r23, r1
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    3c32:	86 c0       	rjmp	.+268    	; 0x3d40 <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    3c34:	67 2b       	or	r22, r23
    3c36:	09 f0       	breq	.+2      	; 0x3c3a <fadeBetweenColorsWithScalingPwmEffect+0x172>
    3c38:	a7 cf       	rjmp	.-178    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    3c3a:	8f 2d       	mov	r24, r15
    3c3c:	9e 2d       	mov	r25, r14
    3c3e:	fc 01       	movw	r30, r24
    3c40:	ee 0f       	add	r30, r30
    3c42:	ff 1f       	adc	r31, r31
    3c44:	ee 0f       	add	r30, r30
    3c46:	ff 1f       	adc	r31, r31
    3c48:	ee 0f       	add	r30, r30
    3c4a:	ff 1f       	adc	r31, r31
    3c4c:	88 0f       	add	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	e8 0f       	add	r30, r24
    3c52:	f9 1f       	adc	r31, r25
    3c54:	e5 59       	subi	r30, 0x95	; 149
    3c56:	fb 4f       	sbci	r31, 0xFB	; 251
    3c58:	20 81       	ld	r18, Z
    3c5a:	31 81       	ldd	r19, Z+1	; 0x01
    3c5c:	23 30       	cpi	r18, 0x03	; 3
    3c5e:	31 05       	cpc	r19, r1
    3c60:	0c f4       	brge	.+2      	; 0x3c64 <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    3c62:	97 c0       	rjmp	.+302    	; 0x3d92 <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    3c64:	8f 2d       	mov	r24, r15
    3c66:	9e 2d       	mov	r25, r14
    3c68:	fc 01       	movw	r30, r24
    3c6a:	ee 0f       	add	r30, r30
    3c6c:	ff 1f       	adc	r31, r31
    3c6e:	ee 0f       	add	r30, r30
    3c70:	ff 1f       	adc	r31, r31
    3c72:	ee 0f       	add	r30, r30
    3c74:	ff 1f       	adc	r31, r31
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	e8 0f       	add	r30, r24
    3c7c:	f9 1f       	adc	r31, r25
    3c7e:	e5 59       	subi	r30, 0x95	; 149
    3c80:	fb 4f       	sbci	r31, 0xFB	; 251
    3c82:	22 50       	subi	r18, 0x02	; 2
    3c84:	30 40       	sbci	r19, 0x00	; 0
    3c86:	31 83       	std	Z+1, r19	; 0x01
    3c88:	20 83       	st	Z, r18
    3c8a:	7e cf       	rjmp	.-260    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    3c8c:	8f 2d       	mov	r24, r15
    3c8e:	9e 2d       	mov	r25, r14
    3c90:	fc 01       	movw	r30, r24
    3c92:	ee 0f       	add	r30, r30
    3c94:	ff 1f       	adc	r31, r31
    3c96:	ee 0f       	add	r30, r30
    3c98:	ff 1f       	adc	r31, r31
    3c9a:	ee 0f       	add	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	e8 0f       	add	r30, r24
    3ca4:	f9 1f       	adc	r31, r25
    3ca6:	e5 59       	subi	r30, 0x95	; 149
    3ca8:	fb 4f       	sbci	r31, 0xFB	; 251
    3caa:	84 81       	ldd	r24, Z+4	; 0x04
    3cac:	95 81       	ldd	r25, Z+5	; 0x05
    3cae:	0a 97       	sbiw	r24, 0x0a	; 10
    3cb0:	0c f1       	brlt	.+66     	; 0x3cf4 <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    3cb2:	61 30       	cpi	r22, 0x01	; 1
    3cb4:	71 05       	cpc	r23, r1
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    3cb8:	e6 c0       	rjmp	.+460    	; 0x3e86 <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    3cba:	67 2b       	or	r22, r23
    3cbc:	51 f4       	brne	.+20     	; 0x3cd2 <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    3cbe:	8f 2d       	mov	r24, r15
    3cc0:	9e 2d       	mov	r25, r14
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	40 e0       	ldi	r20, 0x00	; 0
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	0e 94 65 24 	call	0x48ca	; 0x48ca <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    3cd2:	8f 2d       	mov	r24, r15
    3cd4:	9e 2d       	mov	r25, r14
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	ee 0f       	add	r30, r30
    3cda:	ff 1f       	adc	r31, r31
    3cdc:	ee 0f       	add	r30, r30
    3cde:	ff 1f       	adc	r31, r31
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	88 0f       	add	r24, r24
    3ce6:	99 1f       	adc	r25, r25
    3ce8:	e8 0f       	add	r30, r24
    3cea:	f9 1f       	adc	r31, r25
    3cec:	e5 59       	subi	r30, 0x95	; 149
    3cee:	fb 4f       	sbci	r31, 0xFB	; 251
    3cf0:	15 82       	std	Z+5, r1	; 0x05
    3cf2:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    3cf4:	8f 2d       	mov	r24, r15
    3cf6:	9e 2d       	mov	r25, r14
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	aa 0f       	add	r26, r26
    3cfc:	bb 1f       	adc	r27, r27
    3cfe:	aa 0f       	add	r26, r26
    3d00:	bb 1f       	adc	r27, r27
    3d02:	aa 0f       	add	r26, r26
    3d04:	bb 1f       	adc	r27, r27
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	a8 0f       	add	r26, r24
    3d0c:	b9 1f       	adc	r27, r25
    3d0e:	a5 59       	subi	r26, 0x95	; 149
    3d10:	bb 4f       	sbci	r27, 0xFB	; 251
    3d12:	8f 2d       	mov	r24, r15
    3d14:	9e 2d       	mov	r25, r14
    3d16:	fc 01       	movw	r30, r24
    3d18:	ee 0f       	add	r30, r30
    3d1a:	ff 1f       	adc	r31, r31
    3d1c:	ee 0f       	add	r30, r30
    3d1e:	ff 1f       	adc	r31, r31
    3d20:	ee 0f       	add	r30, r30
    3d22:	ff 1f       	adc	r31, r31
    3d24:	88 0f       	add	r24, r24
    3d26:	99 1f       	adc	r25, r25
    3d28:	e8 0f       	add	r30, r24
    3d2a:	f9 1f       	adc	r31, r25
    3d2c:	e5 59       	subi	r30, 0x95	; 149
    3d2e:	fb 4f       	sbci	r31, 0xFB	; 251
    3d30:	84 81       	ldd	r24, Z+4	; 0x04
    3d32:	95 81       	ldd	r25, Z+5	; 0x05
    3d34:	01 96       	adiw	r24, 0x01	; 1
    3d36:	15 96       	adiw	r26, 0x05	; 5
    3d38:	9c 93       	st	X, r25
    3d3a:	8e 93       	st	-X, r24
    3d3c:	14 97       	sbiw	r26, 0x04	; 4
    3d3e:	58 cf       	rjmp	.-336    	; 0x3bf0 <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    3d40:	8f 2d       	mov	r24, r15
    3d42:	9e 2d       	mov	r25, r14
    3d44:	fc 01       	movw	r30, r24
    3d46:	ee 0f       	add	r30, r30
    3d48:	ff 1f       	adc	r31, r31
    3d4a:	ee 0f       	add	r30, r30
    3d4c:	ff 1f       	adc	r31, r31
    3d4e:	ee 0f       	add	r30, r30
    3d50:	ff 1f       	adc	r31, r31
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	e8 0f       	add	r30, r24
    3d58:	f9 1f       	adc	r31, r25
    3d5a:	e5 59       	subi	r30, 0x95	; 149
    3d5c:	fb 4f       	sbci	r31, 0xFB	; 251
    3d5e:	22 81       	ldd	r18, Z+2	; 0x02
    3d60:	33 81       	ldd	r19, Z+3	; 0x03
    3d62:	23 30       	cpi	r18, 0x03	; 3
    3d64:	31 05       	cpc	r19, r1
    3d66:	0c f4       	brge	.+2      	; 0x3d6a <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    3d68:	52 c0       	rjmp	.+164    	; 0x3e0e <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    3d6a:	8f 2d       	mov	r24, r15
    3d6c:	9e 2d       	mov	r25, r14
    3d6e:	fc 01       	movw	r30, r24
    3d70:	ee 0f       	add	r30, r30
    3d72:	ff 1f       	adc	r31, r31
    3d74:	ee 0f       	add	r30, r30
    3d76:	ff 1f       	adc	r31, r31
    3d78:	ee 0f       	add	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	88 0f       	add	r24, r24
    3d7e:	99 1f       	adc	r25, r25
    3d80:	e8 0f       	add	r30, r24
    3d82:	f9 1f       	adc	r31, r25
    3d84:	e5 59       	subi	r30, 0x95	; 149
    3d86:	fb 4f       	sbci	r31, 0xFB	; 251
    3d88:	22 50       	subi	r18, 0x02	; 2
    3d8a:	30 40       	sbci	r19, 0x00	; 0
    3d8c:	33 83       	std	Z+3, r19	; 0x03
    3d8e:	22 83       	std	Z+2, r18	; 0x02
    3d90:	fb ce       	rjmp	.-522    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    3d92:	8f 2d       	mov	r24, r15
    3d94:	9e 2d       	mov	r25, r14
    3d96:	fc 01       	movw	r30, r24
    3d98:	ee 0f       	add	r30, r30
    3d9a:	ff 1f       	adc	r31, r31
    3d9c:	ee 0f       	add	r30, r30
    3d9e:	ff 1f       	adc	r31, r31
    3da0:	ee 0f       	add	r30, r30
    3da2:	ff 1f       	adc	r31, r31
    3da4:	88 0f       	add	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	e8 0f       	add	r30, r24
    3daa:	f9 1f       	adc	r31, r25
    3dac:	e5 59       	subi	r30, 0x95	; 149
    3dae:	fb 4f       	sbci	r31, 0xFB	; 251
    3db0:	82 81       	ldd	r24, Z+2	; 0x02
    3db2:	93 81       	ldd	r25, Z+3	; 0x03
    3db4:	80 32       	cpi	r24, 0x20	; 32
    3db6:	91 05       	cpc	r25, r1
    3db8:	0c f0       	brlt	.+2      	; 0x3dbc <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    3dba:	e6 ce       	rjmp	.-564    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    3dbc:	02 96       	adiw	r24, 0x02	; 2
    3dbe:	2f 2d       	mov	r18, r15
    3dc0:	3e 2d       	mov	r19, r14
    3dc2:	f9 01       	movw	r30, r18
    3dc4:	ee 0f       	add	r30, r30
    3dc6:	ff 1f       	adc	r31, r31
    3dc8:	ee 0f       	add	r30, r30
    3dca:	ff 1f       	adc	r31, r31
    3dcc:	ee 0f       	add	r30, r30
    3dce:	ff 1f       	adc	r31, r31
    3dd0:	22 0f       	add	r18, r18
    3dd2:	33 1f       	adc	r19, r19
    3dd4:	e2 0f       	add	r30, r18
    3dd6:	f3 1f       	adc	r31, r19
    3dd8:	e5 59       	subi	r30, 0x95	; 149
    3dda:	fb 4f       	sbci	r31, 0xFB	; 251
    3ddc:	93 83       	std	Z+3, r25	; 0x03
    3dde:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    3de0:	80 97       	sbiw	r24, 0x20	; 32
    3de2:	09 f0       	breq	.+2      	; 0x3de6 <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    3de4:	d1 ce       	rjmp	.-606    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    3de6:	8f 2d       	mov	r24, r15
    3de8:	9e 2d       	mov	r25, r14
    3dea:	fc 01       	movw	r30, r24
    3dec:	ee 0f       	add	r30, r30
    3dee:	ff 1f       	adc	r31, r31
    3df0:	ee 0f       	add	r30, r30
    3df2:	ff 1f       	adc	r31, r31
    3df4:	ee 0f       	add	r30, r30
    3df6:	ff 1f       	adc	r31, r31
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	e8 0f       	add	r30, r24
    3dfe:	f9 1f       	adc	r31, r25
    3e00:	e5 59       	subi	r30, 0x95	; 149
    3e02:	fb 4f       	sbci	r31, 0xFB	; 251
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	97 83       	std	Z+7, r25	; 0x07
    3e0a:	86 83       	std	Z+6, r24	; 0x06
    3e0c:	bd ce       	rjmp	.-646    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    3e0e:	8f 2d       	mov	r24, r15
    3e10:	9e 2d       	mov	r25, r14
    3e12:	fc 01       	movw	r30, r24
    3e14:	ee 0f       	add	r30, r30
    3e16:	ff 1f       	adc	r31, r31
    3e18:	ee 0f       	add	r30, r30
    3e1a:	ff 1f       	adc	r31, r31
    3e1c:	ee 0f       	add	r30, r30
    3e1e:	ff 1f       	adc	r31, r31
    3e20:	88 0f       	add	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	e8 0f       	add	r30, r24
    3e26:	f9 1f       	adc	r31, r25
    3e28:	e5 59       	subi	r30, 0x95	; 149
    3e2a:	fb 4f       	sbci	r31, 0xFB	; 251
    3e2c:	80 81       	ld	r24, Z
    3e2e:	91 81       	ldd	r25, Z+1	; 0x01
    3e30:	80 32       	cpi	r24, 0x20	; 32
    3e32:	91 05       	cpc	r25, r1
    3e34:	0c f0       	brlt	.+2      	; 0x3e38 <fadeBetweenColorsWithScalingPwmEffect+0x370>
    3e36:	a8 ce       	rjmp	.-688    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    3e38:	02 96       	adiw	r24, 0x02	; 2
    3e3a:	2f 2d       	mov	r18, r15
    3e3c:	3e 2d       	mov	r19, r14
    3e3e:	f9 01       	movw	r30, r18
    3e40:	ee 0f       	add	r30, r30
    3e42:	ff 1f       	adc	r31, r31
    3e44:	ee 0f       	add	r30, r30
    3e46:	ff 1f       	adc	r31, r31
    3e48:	ee 0f       	add	r30, r30
    3e4a:	ff 1f       	adc	r31, r31
    3e4c:	22 0f       	add	r18, r18
    3e4e:	33 1f       	adc	r19, r19
    3e50:	e2 0f       	add	r30, r18
    3e52:	f3 1f       	adc	r31, r19
    3e54:	e5 59       	subi	r30, 0x95	; 149
    3e56:	fb 4f       	sbci	r31, 0xFB	; 251
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    3e5c:	80 97       	sbiw	r24, 0x20	; 32
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    3e60:	93 ce       	rjmp	.-730    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    3e62:	8f 2d       	mov	r24, r15
    3e64:	9e 2d       	mov	r25, r14
    3e66:	fc 01       	movw	r30, r24
    3e68:	ee 0f       	add	r30, r30
    3e6a:	ff 1f       	adc	r31, r31
    3e6c:	ee 0f       	add	r30, r30
    3e6e:	ff 1f       	adc	r31, r31
    3e70:	ee 0f       	add	r30, r30
    3e72:	ff 1f       	adc	r31, r31
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	e8 0f       	add	r30, r24
    3e7a:	f9 1f       	adc	r31, r25
    3e7c:	e5 59       	subi	r30, 0x95	; 149
    3e7e:	fb 4f       	sbci	r31, 0xFB	; 251
    3e80:	77 83       	std	Z+7, r23	; 0x07
    3e82:	66 83       	std	Z+6, r22	; 0x06
    3e84:	81 ce       	rjmp	.-766    	; 0x3b88 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    3e86:	8f 2d       	mov	r24, r15
    3e88:	9e 2d       	mov	r25, r14
    3e8a:	bd 01       	movw	r22, r26
    3e8c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <fadeBetweenColors>
    3e90:	20 cf       	rjmp	.-448    	; 0x3cd2 <fadeBetweenColorsWithScalingPwmEffect+0x20a>

00003e92 <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3e92:	ef 92       	push	r14
    3e94:	ff 92       	push	r15
    3e96:	0f 93       	push	r16
    3e98:	1f 93       	push	r17
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	cd b7       	in	r28, 0x3d	; 61
    3ea0:	de b7       	in	r29, 0x3e	; 62
    3ea2:	a6 97       	sbiw	r28, 0x26	; 38
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	f8 2e       	mov	r15, r24
    3eb0:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    3eb2:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    3eb4:	88 0f       	add	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	fc 01       	movw	r30, r24
    3eba:	ee 0f       	add	r30, r30
    3ebc:	ff 1f       	adc	r31, r31
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	ff 1f       	adc	r31, r31
    3ec2:	ee 0f       	add	r30, r30
    3ec4:	ff 1f       	adc	r31, r31
    3ec6:	e8 1b       	sub	r30, r24
    3ec8:	f9 0b       	sbc	r31, r25
    3eca:	ed 53       	subi	r30, 0x3D	; 61
    3ecc:	fc 4f       	sbci	r31, 0xFC	; 252
    3ece:	20 85       	ldd	r18, Z+8	; 0x08
    3ed0:	31 85       	ldd	r19, Z+9	; 0x09
    3ed2:	2a 30       	cpi	r18, 0x0A	; 10
    3ed4:	31 05       	cpc	r19, r1
    3ed6:	0c f4       	brge	.+2      	; 0x3eda <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    3ed8:	4b c0       	rjmp	.+150    	; 0x3f70 <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    3eda:	8f 2d       	mov	r24, r15
    3edc:	9e 2d       	mov	r25, r14
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	ee 0f       	add	r30, r30
    3ee6:	ff 1f       	adc	r31, r31
    3ee8:	ee 0f       	add	r30, r30
    3eea:	ff 1f       	adc	r31, r31
    3eec:	ee 0f       	add	r30, r30
    3eee:	ff 1f       	adc	r31, r31
    3ef0:	e8 1b       	sub	r30, r24
    3ef2:	f9 0b       	sbc	r31, r25
    3ef4:	ed 53       	subi	r30, 0x3D	; 61
    3ef6:	fc 4f       	sbci	r31, 0xFC	; 252
    3ef8:	26 81       	ldd	r18, Z+6	; 0x06
    3efa:	37 81       	ldd	r19, Z+7	; 0x07
    3efc:	8f 2d       	mov	r24, r15
    3efe:	9e 2d       	mov	r25, r14
    3f00:	88 0f       	add	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	fc 01       	movw	r30, r24
    3f06:	ee 0f       	add	r30, r30
    3f08:	ff 1f       	adc	r31, r31
    3f0a:	ee 0f       	add	r30, r30
    3f0c:	ff 1f       	adc	r31, r31
    3f0e:	ee 0f       	add	r30, r30
    3f10:	ff 1f       	adc	r31, r31
    3f12:	e8 1b       	sub	r30, r24
    3f14:	f9 0b       	sbc	r31, r25
    3f16:	ed 53       	subi	r30, 0x3D	; 61
    3f18:	fc 4f       	sbci	r31, 0xFC	; 252
    3f1a:	84 81       	ldd	r24, Z+4	; 0x04
    3f1c:	95 81       	ldd	r25, Z+5	; 0x05
    3f1e:	28 17       	cp	r18, r24
    3f20:	39 07       	cpc	r19, r25
    3f22:	0c f0       	brlt	.+2      	; 0x3f26 <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    3f24:	95 c0       	rjmp	.+298    	; 0x4050 <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    3f26:	8f 2d       	mov	r24, r15
    3f28:	9e 2d       	mov	r25, r14
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	fc 01       	movw	r30, r24
    3f30:	ee 0f       	add	r30, r30
    3f32:	ff 1f       	adc	r31, r31
    3f34:	ee 0f       	add	r30, r30
    3f36:	ff 1f       	adc	r31, r31
    3f38:	ee 0f       	add	r30, r30
    3f3a:	ff 1f       	adc	r31, r31
    3f3c:	e8 1b       	sub	r30, r24
    3f3e:	f9 0b       	sbc	r31, r25
    3f40:	ed 53       	subi	r30, 0x3D	; 61
    3f42:	fc 4f       	sbci	r31, 0xFC	; 252
    3f44:	2f 5f       	subi	r18, 0xFF	; 255
    3f46:	3f 4f       	sbci	r19, 0xFF	; 255
    3f48:	37 83       	std	Z+7, r19	; 0x07
    3f4a:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    3f4c:	8f 2d       	mov	r24, r15
    3f4e:	9e 2d       	mov	r25, r14
    3f50:	88 0f       	add	r24, r24
    3f52:	99 1f       	adc	r25, r25
    3f54:	fc 01       	movw	r30, r24
    3f56:	ee 0f       	add	r30, r30
    3f58:	ff 1f       	adc	r31, r31
    3f5a:	ee 0f       	add	r30, r30
    3f5c:	ff 1f       	adc	r31, r31
    3f5e:	ee 0f       	add	r30, r30
    3f60:	ff 1f       	adc	r31, r31
    3f62:	e8 1b       	sub	r30, r24
    3f64:	f9 0b       	sbc	r31, r25
    3f66:	ed 53       	subi	r30, 0x3D	; 61
    3f68:	fc 4f       	sbci	r31, 0xFC	; 252
    3f6a:	11 86       	std	Z+9, r1	; 0x09
    3f6c:	10 86       	std	Z+8, r1	; 0x08
    3f6e:	13 c0       	rjmp	.+38     	; 0x3f96 <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    3f70:	8f 2d       	mov	r24, r15
    3f72:	9e 2d       	mov	r25, r14
    3f74:	88 0f       	add	r24, r24
    3f76:	99 1f       	adc	r25, r25
    3f78:	fc 01       	movw	r30, r24
    3f7a:	ee 0f       	add	r30, r30
    3f7c:	ff 1f       	adc	r31, r31
    3f7e:	ee 0f       	add	r30, r30
    3f80:	ff 1f       	adc	r31, r31
    3f82:	ee 0f       	add	r30, r30
    3f84:	ff 1f       	adc	r31, r31
    3f86:	e8 1b       	sub	r30, r24
    3f88:	f9 0b       	sbc	r31, r25
    3f8a:	ed 53       	subi	r30, 0x3D	; 61
    3f8c:	fc 4f       	sbci	r31, 0xFC	; 252
    3f8e:	2f 5f       	subi	r18, 0xFF	; 255
    3f90:	3f 4f       	sbci	r19, 0xFF	; 255
    3f92:	31 87       	std	Z+9, r19	; 0x09
    3f94:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    3f96:	8f 2d       	mov	r24, r15
    3f98:	9e 2d       	mov	r25, r14
    3f9a:	88 0f       	add	r24, r24
    3f9c:	99 1f       	adc	r25, r25
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	ee 0f       	add	r30, r30
    3fa2:	ff 1f       	adc	r31, r31
    3fa4:	ee 0f       	add	r30, r30
    3fa6:	ff 1f       	adc	r31, r31
    3fa8:	ee 0f       	add	r30, r30
    3faa:	ff 1f       	adc	r31, r31
    3fac:	e8 1b       	sub	r30, r24
    3fae:	f9 0b       	sbc	r31, r25
    3fb0:	ed 53       	subi	r30, 0x3D	; 61
    3fb2:	fc 4f       	sbci	r31, 0xFC	; 252
    3fb4:	02 84       	ldd	r0, Z+10	; 0x0a
    3fb6:	f3 85       	ldd	r31, Z+11	; 0x0b
    3fb8:	e0 2d       	mov	r30, r0
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	9e 8b       	std	Y+22, r25	; 0x16
    3fc0:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    3fc2:	82 81       	ldd	r24, Z+2	; 0x02
    3fc4:	93 81       	ldd	r25, Z+3	; 0x03
    3fc6:	98 8f       	std	Y+24, r25	; 0x18
    3fc8:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    3fca:	84 81       	ldd	r24, Z+4	; 0x04
    3fcc:	95 81       	ldd	r25, Z+5	; 0x05
    3fce:	9a 8f       	std	Y+26, r25	; 0x1a
    3fd0:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    3fd2:	8f 2d       	mov	r24, r15
    3fd4:	9e 2d       	mov	r25, r14
    3fd6:	88 0f       	add	r24, r24
    3fd8:	99 1f       	adc	r25, r25
    3fda:	fc 01       	movw	r30, r24
    3fdc:	ee 0f       	add	r30, r30
    3fde:	ff 1f       	adc	r31, r31
    3fe0:	ee 0f       	add	r30, r30
    3fe2:	ff 1f       	adc	r31, r31
    3fe4:	ee 0f       	add	r30, r30
    3fe6:	ff 1f       	adc	r31, r31
    3fe8:	e8 1b       	sub	r30, r24
    3fea:	f9 0b       	sbc	r31, r25
    3fec:	ed 53       	subi	r30, 0x3D	; 61
    3fee:	fc 4f       	sbci	r31, 0xFC	; 252
    3ff0:	04 84       	ldd	r0, Z+12	; 0x0c
    3ff2:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ff4:	e0 2d       	mov	r30, r0
    3ff6:	80 81       	ld	r24, Z
    3ff8:	91 81       	ldd	r25, Z+1	; 0x01
    3ffa:	9c 8f       	std	Y+28, r25	; 0x1c
    3ffc:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    3ffe:	82 81       	ldd	r24, Z+2	; 0x02
    4000:	93 81       	ldd	r25, Z+3	; 0x03
    4002:	9e 8f       	std	Y+30, r25	; 0x1e
    4004:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    4006:	84 81       	ldd	r24, Z+4	; 0x04
    4008:	95 81       	ldd	r25, Z+5	; 0x05
    400a:	98 a3       	std	Y+32, r25	; 0x20
    400c:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    400e:	f8 01       	movw	r30, r16
    4010:	82 89       	ldd	r24, Z+18	; 0x12
    4012:	93 89       	ldd	r25, Z+19	; 0x13
    4014:	9a a3       	std	Y+34, r25	; 0x22
    4016:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    4018:	84 89       	ldd	r24, Z+20	; 0x14
    401a:	95 89       	ldd	r25, Z+21	; 0x15
    401c:	9c a3       	std	Y+36, r25	; 0x24
    401e:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    4020:	86 89       	ldd	r24, Z+22	; 0x16
    4022:	97 89       	ldd	r25, Z+23	; 0x17
    4024:	9e a3       	std	Y+38, r25	; 0x26
    4026:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    4028:	8f 2d       	mov	r24, r15
    402a:	9e 2d       	mov	r25, r14
    402c:	be 01       	movw	r22, r28
    402e:	6b 5e       	subi	r22, 0xEB	; 235
    4030:	7f 4f       	sbci	r23, 0xFF	; 255
    4032:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    4036:	a6 96       	adiw	r28, 0x26	; 38
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	cf 91       	pop	r28
    4044:	df 91       	pop	r29
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	ff 90       	pop	r15
    404c:	ef 90       	pop	r14
    404e:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    4050:	8f 2d       	mov	r24, r15
    4052:	9e 2d       	mov	r25, r14
    4054:	88 0f       	add	r24, r24
    4056:	99 1f       	adc	r25, r25
    4058:	fc 01       	movw	r30, r24
    405a:	ee 0f       	add	r30, r30
    405c:	ff 1f       	adc	r31, r31
    405e:	ee 0f       	add	r30, r30
    4060:	ff 1f       	adc	r31, r31
    4062:	ee 0f       	add	r30, r30
    4064:	ff 1f       	adc	r31, r31
    4066:	e8 1b       	sub	r30, r24
    4068:	f9 0b       	sbc	r31, r25
    406a:	ed 53       	subi	r30, 0x3D	; 61
    406c:	fc 4f       	sbci	r31, 0xFC	; 252
    406e:	42 81       	ldd	r20, Z+2	; 0x02
    4070:	53 81       	ldd	r21, Z+3	; 0x03
    4072:	41 30       	cpi	r20, 0x01	; 1
    4074:	51 05       	cpc	r21, r1
    4076:	09 f4       	brne	.+2      	; 0x407a <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    4078:	6a c0       	rjmp	.+212    	; 0x414e <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    407a:	45 2b       	or	r20, r21
    407c:	09 f0       	breq	.+2      	; 0x4080 <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    407e:	f2 c0       	rjmp	.+484    	; 0x4264 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    4080:	8f 2d       	mov	r24, r15
    4082:	9e 2d       	mov	r25, r14
    4084:	88 0f       	add	r24, r24
    4086:	99 1f       	adc	r25, r25
    4088:	fc 01       	movw	r30, r24
    408a:	ee 0f       	add	r30, r30
    408c:	ff 1f       	adc	r31, r31
    408e:	ee 0f       	add	r30, r30
    4090:	ff 1f       	adc	r31, r31
    4092:	ee 0f       	add	r30, r30
    4094:	ff 1f       	adc	r31, r31
    4096:	e8 1b       	sub	r30, r24
    4098:	f9 0b       	sbc	r31, r25
    409a:	ed 53       	subi	r30, 0x3D	; 61
    409c:	fc 4f       	sbci	r31, 0xFC	; 252
    409e:	20 81       	ld	r18, Z
    40a0:	31 81       	ldd	r19, Z+1	; 0x01
    40a2:	21 50       	subi	r18, 0x01	; 1
    40a4:	30 40       	sbci	r19, 0x00	; 0
    40a6:	8f 2d       	mov	r24, r15
    40a8:	9e 2d       	mov	r25, r14
    40aa:	88 0f       	add	r24, r24
    40ac:	99 1f       	adc	r25, r25
    40ae:	fc 01       	movw	r30, r24
    40b0:	ee 0f       	add	r30, r30
    40b2:	ff 1f       	adc	r31, r31
    40b4:	ee 0f       	add	r30, r30
    40b6:	ff 1f       	adc	r31, r31
    40b8:	ee 0f       	add	r30, r30
    40ba:	ff 1f       	adc	r31, r31
    40bc:	e8 1b       	sub	r30, r24
    40be:	f9 0b       	sbc	r31, r25
    40c0:	ed 53       	subi	r30, 0x3D	; 61
    40c2:	fc 4f       	sbci	r31, 0xFC	; 252
    40c4:	31 83       	std	Z+1, r19	; 0x01
    40c6:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    40c8:	23 2b       	or	r18, r19
    40ca:	09 f0       	breq	.+2      	; 0x40ce <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    40cc:	f7 c0       	rjmp	.+494    	; 0x42bc <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    40ce:	8f 2d       	mov	r24, r15
    40d0:	9e 2d       	mov	r25, r14
    40d2:	88 0f       	add	r24, r24
    40d4:	99 1f       	adc	r25, r25
    40d6:	fc 01       	movw	r30, r24
    40d8:	ee 0f       	add	r30, r30
    40da:	ff 1f       	adc	r31, r31
    40dc:	ee 0f       	add	r30, r30
    40de:	ff 1f       	adc	r31, r31
    40e0:	ee 0f       	add	r30, r30
    40e2:	ff 1f       	adc	r31, r31
    40e4:	e8 1b       	sub	r30, r24
    40e6:	f9 0b       	sbc	r31, r25
    40e8:	ed 53       	subi	r30, 0x3D	; 61
    40ea:	fc 4f       	sbci	r31, 0xFC	; 252
    40ec:	0a 5f       	subi	r16, 0xFA	; 250
    40ee:	1f 4f       	sbci	r17, 0xFF	; 255
    40f0:	13 87       	std	Z+11, r17	; 0x0b
    40f2:	02 87       	std	Z+10, r16	; 0x0a
    40f4:	06 50       	subi	r16, 0x06	; 6
    40f6:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    40f8:	8f 2d       	mov	r24, r15
    40fa:	9e 2d       	mov	r25, r14
    40fc:	88 0f       	add	r24, r24
    40fe:	99 1f       	adc	r25, r25
    4100:	fc 01       	movw	r30, r24
    4102:	ee 0f       	add	r30, r30
    4104:	ff 1f       	adc	r31, r31
    4106:	ee 0f       	add	r30, r30
    4108:	ff 1f       	adc	r31, r31
    410a:	ee 0f       	add	r30, r30
    410c:	ff 1f       	adc	r31, r31
    410e:	e8 1b       	sub	r30, r24
    4110:	f9 0b       	sbc	r31, r25
    4112:	ed 53       	subi	r30, 0x3D	; 61
    4114:	fc 4f       	sbci	r31, 0xFC	; 252
    4116:	15 87       	std	Z+13, r17	; 0x0d
    4118:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    411a:	f8 01       	movw	r30, r16
    411c:	86 81       	ldd	r24, Z+6	; 0x06
    411e:	97 81       	ldd	r25, Z+7	; 0x07
    4120:	98 87       	std	Y+8, r25	; 0x08
    4122:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    4124:	80 85       	ldd	r24, Z+8	; 0x08
    4126:	91 85       	ldd	r25, Z+9	; 0x09
    4128:	9a 87       	std	Y+10, r25	; 0x0a
    412a:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    412c:	82 85       	ldd	r24, Z+10	; 0x0a
    412e:	93 85       	ldd	r25, Z+11	; 0x0b
    4130:	9c 87       	std	Y+12, r25	; 0x0c
    4132:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	9e 87       	std	Y+14, r25	; 0x0e
    413a:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    413c:	82 81       	ldd	r24, Z+2	; 0x02
    413e:	93 81       	ldd	r25, Z+3	; 0x03
    4140:	98 8b       	std	Y+16, r25	; 0x10
    4142:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    4144:	84 81       	ldd	r24, Z+4	; 0x04
    4146:	95 81       	ldd	r25, Z+5	; 0x05
    4148:	9a 8b       	std	Y+18, r25	; 0x12
    414a:	89 8b       	std	Y+17, r24	; 0x11
    414c:	8b c0       	rjmp	.+278    	; 0x4264 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    414e:	8f 2d       	mov	r24, r15
    4150:	9e 2d       	mov	r25, r14
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	fc 01       	movw	r30, r24
    4158:	ee 0f       	add	r30, r30
    415a:	ff 1f       	adc	r31, r31
    415c:	ee 0f       	add	r30, r30
    415e:	ff 1f       	adc	r31, r31
    4160:	ee 0f       	add	r30, r30
    4162:	ff 1f       	adc	r31, r31
    4164:	e8 1b       	sub	r30, r24
    4166:	f9 0b       	sbc	r31, r25
    4168:	ed 53       	subi	r30, 0x3D	; 61
    416a:	fc 4f       	sbci	r31, 0xFC	; 252
    416c:	20 81       	ld	r18, Z
    416e:	31 81       	ldd	r19, Z+1	; 0x01
    4170:	2f 5f       	subi	r18, 0xFF	; 255
    4172:	3f 4f       	sbci	r19, 0xFF	; 255
    4174:	8f 2d       	mov	r24, r15
    4176:	9e 2d       	mov	r25, r14
    4178:	88 0f       	add	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	fc 01       	movw	r30, r24
    417e:	ee 0f       	add	r30, r30
    4180:	ff 1f       	adc	r31, r31
    4182:	ee 0f       	add	r30, r30
    4184:	ff 1f       	adc	r31, r31
    4186:	ee 0f       	add	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	e8 1b       	sub	r30, r24
    418c:	f9 0b       	sbc	r31, r25
    418e:	ed 53       	subi	r30, 0x3D	; 61
    4190:	fc 4f       	sbci	r31, 0xFC	; 252
    4192:	31 83       	std	Z+1, r19	; 0x01
    4194:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    4196:	21 30       	cpi	r18, 0x01	; 1
    4198:	31 05       	cpc	r19, r1
    419a:	09 f4       	brne	.+2      	; 0x419e <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    419c:	e5 c0       	rjmp	.+458    	; 0x4368 <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    419e:	8f 2d       	mov	r24, r15
    41a0:	9e 2d       	mov	r25, r14
    41a2:	88 0f       	add	r24, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	fc 01       	movw	r30, r24
    41a8:	ee 0f       	add	r30, r30
    41aa:	ff 1f       	adc	r31, r31
    41ac:	ee 0f       	add	r30, r30
    41ae:	ff 1f       	adc	r31, r31
    41b0:	ee 0f       	add	r30, r30
    41b2:	ff 1f       	adc	r31, r31
    41b4:	e8 1b       	sub	r30, r24
    41b6:	f9 0b       	sbc	r31, r25
    41b8:	ed 53       	subi	r30, 0x3D	; 61
    41ba:	fc 4f       	sbci	r31, 0xFC	; 252
    41bc:	13 82       	std	Z+3, r1	; 0x03
    41be:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    41c0:	8f 2d       	mov	r24, r15
    41c2:	9e 2d       	mov	r25, r14
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	fc 01       	movw	r30, r24
    41ca:	ee 0f       	add	r30, r30
    41cc:	ff 1f       	adc	r31, r31
    41ce:	ee 0f       	add	r30, r30
    41d0:	ff 1f       	adc	r31, r31
    41d2:	ee 0f       	add	r30, r30
    41d4:	ff 1f       	adc	r31, r31
    41d6:	e8 1b       	sub	r30, r24
    41d8:	f9 0b       	sbc	r31, r25
    41da:	ed 53       	subi	r30, 0x3D	; 61
    41dc:	fc 4f       	sbci	r31, 0xFC	; 252
    41de:	51 83       	std	Z+1, r21	; 0x01
    41e0:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    41e2:	8f 2d       	mov	r24, r15
    41e4:	9e 2d       	mov	r25, r14
    41e6:	88 0f       	add	r24, r24
    41e8:	99 1f       	adc	r25, r25
    41ea:	fc 01       	movw	r30, r24
    41ec:	ee 0f       	add	r30, r30
    41ee:	ff 1f       	adc	r31, r31
    41f0:	ee 0f       	add	r30, r30
    41f2:	ff 1f       	adc	r31, r31
    41f4:	ee 0f       	add	r30, r30
    41f6:	ff 1f       	adc	r31, r31
    41f8:	e8 1b       	sub	r30, r24
    41fa:	f9 0b       	sbc	r31, r25
    41fc:	ed 53       	subi	r30, 0x3D	; 61
    41fe:	fc 4f       	sbci	r31, 0xFC	; 252
    4200:	04 5f       	subi	r16, 0xF4	; 244
    4202:	1f 4f       	sbci	r17, 0xFF	; 255
    4204:	13 87       	std	Z+11, r17	; 0x0b
    4206:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4208:	8f 2d       	mov	r24, r15
    420a:	9e 2d       	mov	r25, r14
    420c:	88 0f       	add	r24, r24
    420e:	99 1f       	adc	r25, r25
    4210:	fc 01       	movw	r30, r24
    4212:	ee 0f       	add	r30, r30
    4214:	ff 1f       	adc	r31, r31
    4216:	ee 0f       	add	r30, r30
    4218:	ff 1f       	adc	r31, r31
    421a:	ee 0f       	add	r30, r30
    421c:	ff 1f       	adc	r31, r31
    421e:	e8 1b       	sub	r30, r24
    4220:	f9 0b       	sbc	r31, r25
    4222:	ed 53       	subi	r30, 0x3D	; 61
    4224:	fc 4f       	sbci	r31, 0xFC	; 252
    4226:	06 50       	subi	r16, 0x06	; 6
    4228:	10 40       	sbci	r17, 0x00	; 0
    422a:	15 87       	std	Z+13, r17	; 0x0d
    422c:	04 87       	std	Z+12, r16	; 0x0c
    422e:	06 50       	subi	r16, 0x06	; 6
    4230:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    4232:	f8 01       	movw	r30, r16
    4234:	84 85       	ldd	r24, Z+12	; 0x0c
    4236:	95 85       	ldd	r25, Z+13	; 0x0d
    4238:	98 87       	std	Y+8, r25	; 0x08
    423a:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    423c:	86 85       	ldd	r24, Z+14	; 0x0e
    423e:	97 85       	ldd	r25, Z+15	; 0x0f
    4240:	9a 87       	std	Y+10, r25	; 0x0a
    4242:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    4244:	80 89       	ldd	r24, Z+16	; 0x10
    4246:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    4248:	9c 87       	std	Y+12, r25	; 0x0c
    424a:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    424c:	86 81       	ldd	r24, Z+6	; 0x06
    424e:	97 81       	ldd	r25, Z+7	; 0x07
    4250:	9e 87       	std	Y+14, r25	; 0x0e
    4252:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    4254:	80 85       	ldd	r24, Z+8	; 0x08
    4256:	91 85       	ldd	r25, Z+9	; 0x09
    4258:	98 8b       	std	Y+16, r25	; 0x10
    425a:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    425c:	82 85       	ldd	r24, Z+10	; 0x0a
    425e:	93 85       	ldd	r25, Z+11	; 0x0b
    4260:	9a 8b       	std	Y+18, r25	; 0x12
    4262:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    4264:	8f 2d       	mov	r24, r15
    4266:	9e 2d       	mov	r25, r14
    4268:	be 01       	movw	r22, r28
    426a:	6f 5f       	subi	r22, 0xFF	; 255
    426c:	7f 4f       	sbci	r23, 0xFF	; 255
    426e:	0e 94 7f 24 	call	0x48fe	; 0x48fe <getRGBColor>
			resetData.beginRed = curColors.red;
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	9a 81       	ldd	r25, Y+2	; 0x02
    4276:	98 87       	std	Y+8, r25	; 0x08
    4278:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    427a:	8b 81       	ldd	r24, Y+3	; 0x03
    427c:	9c 81       	ldd	r25, Y+4	; 0x04
    427e:	9a 87       	std	Y+10, r25	; 0x0a
    4280:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    4282:	8d 81       	ldd	r24, Y+5	; 0x05
    4284:	9e 81       	ldd	r25, Y+6	; 0x06
    4286:	9c 87       	std	Y+12, r25	; 0x0c
    4288:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    428a:	8f 2d       	mov	r24, r15
    428c:	9e 2d       	mov	r25, r14
    428e:	be 01       	movw	r22, r28
    4290:	69 5f       	subi	r22, 0xF9	; 249
    4292:	7f 4f       	sbci	r23, 0xFF	; 255
    4294:	0e 94 9a 1a 	call	0x3534	; 0x3534 <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    4298:	8f 2d       	mov	r24, r15
    429a:	9e 2d       	mov	r25, r14
    429c:	88 0f       	add	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	fc 01       	movw	r30, r24
    42a2:	ee 0f       	add	r30, r30
    42a4:	ff 1f       	adc	r31, r31
    42a6:	ee 0f       	add	r30, r30
    42a8:	ff 1f       	adc	r31, r31
    42aa:	ee 0f       	add	r30, r30
    42ac:	ff 1f       	adc	r31, r31
    42ae:	e8 1b       	sub	r30, r24
    42b0:	f9 0b       	sbc	r31, r25
    42b2:	ed 53       	subi	r30, 0x3D	; 61
    42b4:	fc 4f       	sbci	r31, 0xFC	; 252
    42b6:	17 82       	std	Z+7, r1	; 0x07
    42b8:	16 82       	std	Z+6, r1	; 0x06
    42ba:	48 ce       	rjmp	.-880    	; 0x3f4c <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    42bc:	8f 2d       	mov	r24, r15
    42be:	9e 2d       	mov	r25, r14
    42c0:	88 0f       	add	r24, r24
    42c2:	99 1f       	adc	r25, r25
    42c4:	fc 01       	movw	r30, r24
    42c6:	ee 0f       	add	r30, r30
    42c8:	ff 1f       	adc	r31, r31
    42ca:	ee 0f       	add	r30, r30
    42cc:	ff 1f       	adc	r31, r31
    42ce:	ee 0f       	add	r30, r30
    42d0:	ff 1f       	adc	r31, r31
    42d2:	e8 1b       	sub	r30, r24
    42d4:	f9 0b       	sbc	r31, r25
    42d6:	ed 53       	subi	r30, 0x3D	; 61
    42d8:	fc 4f       	sbci	r31, 0xFC	; 252
    42da:	11 82       	std	Z+1, r1	; 0x01
    42dc:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    42de:	8f 2d       	mov	r24, r15
    42e0:	9e 2d       	mov	r25, r14
    42e2:	88 0f       	add	r24, r24
    42e4:	99 1f       	adc	r25, r25
    42e6:	fc 01       	movw	r30, r24
    42e8:	ee 0f       	add	r30, r30
    42ea:	ff 1f       	adc	r31, r31
    42ec:	ee 0f       	add	r30, r30
    42ee:	ff 1f       	adc	r31, r31
    42f0:	ee 0f       	add	r30, r30
    42f2:	ff 1f       	adc	r31, r31
    42f4:	e8 1b       	sub	r30, r24
    42f6:	f9 0b       	sbc	r31, r25
    42f8:	ed 53       	subi	r30, 0x3D	; 61
    42fa:	fc 4f       	sbci	r31, 0xFC	; 252
    42fc:	81 e0       	ldi	r24, 0x01	; 1
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	93 83       	std	Z+3, r25	; 0x03
    4302:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    4304:	8f 2d       	mov	r24, r15
    4306:	9e 2d       	mov	r25, r14
    4308:	88 0f       	add	r24, r24
    430a:	99 1f       	adc	r25, r25
    430c:	fc 01       	movw	r30, r24
    430e:	ee 0f       	add	r30, r30
    4310:	ff 1f       	adc	r31, r31
    4312:	ee 0f       	add	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	ee 0f       	add	r30, r30
    4318:	ff 1f       	adc	r31, r31
    431a:	e8 1b       	sub	r30, r24
    431c:	f9 0b       	sbc	r31, r25
    431e:	ed 53       	subi	r30, 0x3D	; 61
    4320:	fc 4f       	sbci	r31, 0xFC	; 252
    4322:	13 87       	std	Z+11, r17	; 0x0b
    4324:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4326:	8f 2d       	mov	r24, r15
    4328:	9e 2d       	mov	r25, r14
    432a:	88 0f       	add	r24, r24
    432c:	99 1f       	adc	r25, r25
    432e:	fc 01       	movw	r30, r24
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	ee 0f       	add	r30, r30
    4336:	ff 1f       	adc	r31, r31
    4338:	ee 0f       	add	r30, r30
    433a:	ff 1f       	adc	r31, r31
    433c:	e8 1b       	sub	r30, r24
    433e:	f9 0b       	sbc	r31, r25
    4340:	ed 53       	subi	r30, 0x3D	; 61
    4342:	fc 4f       	sbci	r31, 0xFC	; 252
    4344:	0a 5f       	subi	r16, 0xFA	; 250
    4346:	1f 4f       	sbci	r17, 0xFF	; 255
    4348:	15 87       	std	Z+13, r17	; 0x0d
    434a:	04 87       	std	Z+12, r16	; 0x0c
    434c:	06 50       	subi	r16, 0x06	; 6
    434e:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    4350:	f8 01       	movw	r30, r16
    4352:	80 81       	ld	r24, Z
    4354:	91 81       	ldd	r25, Z+1	; 0x01
    4356:	98 87       	std	Y+8, r25	; 0x08
    4358:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    435a:	82 81       	ldd	r24, Z+2	; 0x02
    435c:	93 81       	ldd	r25, Z+3	; 0x03
    435e:	9a 87       	std	Y+10, r25	; 0x0a
    4360:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    4362:	84 81       	ldd	r24, Z+4	; 0x04
    4364:	95 81       	ldd	r25, Z+5	; 0x05
    4366:	70 cf       	rjmp	.-288    	; 0x4248 <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    4368:	8f 2d       	mov	r24, r15
    436a:	9e 2d       	mov	r25, r14
    436c:	88 0f       	add	r24, r24
    436e:	99 1f       	adc	r25, r25
    4370:	fc 01       	movw	r30, r24
    4372:	ee 0f       	add	r30, r30
    4374:	ff 1f       	adc	r31, r31
    4376:	ee 0f       	add	r30, r30
    4378:	ff 1f       	adc	r31, r31
    437a:	ee 0f       	add	r30, r30
    437c:	ff 1f       	adc	r31, r31
    437e:	e8 1b       	sub	r30, r24
    4380:	f9 0b       	sbc	r31, r25
    4382:	ed 53       	subi	r30, 0x3D	; 61
    4384:	fc 4f       	sbci	r31, 0xFC	; 252
    4386:	0a 5f       	subi	r16, 0xFA	; 250
    4388:	1f 4f       	sbci	r17, 0xFF	; 255
    438a:	13 87       	std	Z+11, r17	; 0x0b
    438c:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    438e:	8f 2d       	mov	r24, r15
    4390:	9e 2d       	mov	r25, r14
    4392:	88 0f       	add	r24, r24
    4394:	99 1f       	adc	r25, r25
    4396:	fc 01       	movw	r30, r24
    4398:	ee 0f       	add	r30, r30
    439a:	ff 1f       	adc	r31, r31
    439c:	ee 0f       	add	r30, r30
    439e:	ff 1f       	adc	r31, r31
    43a0:	ee 0f       	add	r30, r30
    43a2:	ff 1f       	adc	r31, r31
    43a4:	e8 1b       	sub	r30, r24
    43a6:	f9 0b       	sbc	r31, r25
    43a8:	ed 53       	subi	r30, 0x3D	; 61
    43aa:	fc 4f       	sbci	r31, 0xFC	; 252
    43ac:	0a 5f       	subi	r16, 0xFA	; 250
    43ae:	1f 4f       	sbci	r17, 0xFF	; 255
    43b0:	15 87       	std	Z+13, r17	; 0x0d
    43b2:	04 87       	std	Z+12, r16	; 0x0c
    43b4:	0c 50       	subi	r16, 0x0C	; 12
    43b6:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    43b8:	f8 01       	movw	r30, r16
    43ba:	86 81       	ldd	r24, Z+6	; 0x06
    43bc:	97 81       	ldd	r25, Z+7	; 0x07
    43be:	98 87       	std	Y+8, r25	; 0x08
    43c0:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    43c2:	80 85       	ldd	r24, Z+8	; 0x08
    43c4:	91 85       	ldd	r25, Z+9	; 0x09
    43c6:	9a 87       	std	Y+10, r25	; 0x0a
    43c8:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    43ca:	82 85       	ldd	r24, Z+10	; 0x0a
    43cc:	93 85       	ldd	r25, Z+11	; 0x0b
    43ce:	9c 87       	std	Y+12, r25	; 0x0c
    43d0:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    43d2:	84 85       	ldd	r24, Z+12	; 0x0c
    43d4:	95 85       	ldd	r25, Z+13	; 0x0d
    43d6:	9e 87       	std	Y+14, r25	; 0x0e
    43d8:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    43da:	86 85       	ldd	r24, Z+14	; 0x0e
    43dc:	97 85       	ldd	r25, Z+15	; 0x0f
    43de:	98 8b       	std	Y+16, r25	; 0x10
    43e0:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    43e2:	80 89       	ldd	r24, Z+16	; 0x10
    43e4:	91 89       	ldd	r25, Z+17	; 0x11
    43e6:	9a 8b       	std	Y+18, r25	; 0x12
    43e8:	89 8b       	std	Y+17, r24	; 0x11
    43ea:	3c cf       	rjmp	.-392    	; 0x4264 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

000043ec <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    43ec:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    43ee:	2d 91       	ld	r18, X+
    43f0:	3c 91       	ld	r19, X
    43f2:	11 97       	sbiw	r26, 0x01	; 1
    43f4:	f9 01       	movw	r30, r18
    43f6:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    43f8:	2f 5f       	subi	r18, 0xFF	; 255
    43fa:	3f 4f       	sbci	r19, 0xFF	; 255
    43fc:	2d 93       	st	X+, r18
    43fe:	3c 93       	st	X, r19
    return returnVal;
}
    4400:	08 95       	ret

00004402 <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    4402:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    4404:	8d 91       	ld	r24, X+
    4406:	9c 91       	ld	r25, X
    4408:	11 97       	sbiw	r26, 0x01	; 1
    440a:	fc 01       	movw	r30, r24
    440c:	25 91       	lpm	r18, Z+
    440e:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    4410:	02 96       	adiw	r24, 0x02	; 2
    4412:	8d 93       	st	X+, r24
    4414:	9c 93       	st	X, r25
    return returnVal;
}
    4416:	c9 01       	movw	r24, r18
    4418:	08 95       	ret

0000441a <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4420:	14 16       	cp	r1, r20
    4422:	15 06       	cpc	r1, r21
    4424:	64 f4       	brge	.+24     	; 0x443e <copyFromFlash+0x24>
    4426:	db 01       	movw	r26, r22
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    442c:	fe 01       	movw	r30, r28
    442e:	e8 0f       	add	r30, r24
    4430:	f9 1f       	adc	r31, r25
    4432:	e4 91       	lpm	r30, Z+
    4434:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4436:	01 96       	adiw	r24, 0x01	; 1
    4438:	84 17       	cp	r24, r20
    443a:	95 07       	cpc	r25, r21
    443c:	bc f3       	brlt	.-18     	; 0x442c <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    443e:	df 91       	pop	r29
    4440:	cf 91       	pop	r28
    4442:	08 95       	ret

00004444 <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    4444:	2f 92       	push	r2
    4446:	3f 92       	push	r3
    4448:	4f 92       	push	r4
    444a:	5f 92       	push	r5
    444c:	6f 92       	push	r6
    444e:	7f 92       	push	r7
    4450:	8f 92       	push	r8
    4452:	9f 92       	push	r9
    4454:	af 92       	push	r10
    4456:	bf 92       	push	r11
    4458:	cf 92       	push	r12
    445a:	df 92       	push	r13
    445c:	ef 92       	push	r14
    445e:	ff 92       	push	r15
    4460:	1f 93       	push	r17
    4462:	df 93       	push	r29
    4464:	cf 93       	push	r28
    4466:	00 d0       	rcall	.+0      	; 0x4468 <getInstructionGroup+0x24>
    4468:	00 d0       	rcall	.+0      	; 0x446a <getInstructionGroup+0x26>
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    446e:	83 ef       	ldi	r24, 0xF3	; 243
    4470:	98 e0       	ldi	r25, 0x08	; 8
    4472:	90 93 f4 0e 	sts	0x0EF4, r25
    4476:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    447a:	40 91 04 01 	lds	r20, 0x0104
    447e:	50 91 05 01 	lds	r21, 0x0105
    4482:	fa 01       	movw	r30, r20
    4484:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4486:	31 96       	adiw	r30, 0x01	; 1
    4488:	f0 93 05 01 	sts	0x0105, r31
    448c:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    4490:	8f 3f       	cpi	r24, 0xFF	; 255
    4492:	c9 f0       	breq	.+50     	; 0x44c6 <getInstructionGroup+0x82>
    4494:	60 e0       	ldi	r22, 0x00	; 0
    4496:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    4498:	cb 01       	movw	r24, r22
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	0f 90       	pop	r0
    44a2:	cf 91       	pop	r28
    44a4:	df 91       	pop	r29
    44a6:	1f 91       	pop	r17
    44a8:	ff 90       	pop	r15
    44aa:	ef 90       	pop	r14
    44ac:	df 90       	pop	r13
    44ae:	cf 90       	pop	r12
    44b0:	bf 90       	pop	r11
    44b2:	af 90       	pop	r10
    44b4:	9f 90       	pop	r9
    44b6:	8f 90       	pop	r8
    44b8:	7f 90       	pop	r7
    44ba:	6f 90       	pop	r6
    44bc:	5f 90       	pop	r5
    44be:	4f 90       	pop	r4
    44c0:	3f 90       	pop	r3
    44c2:	2f 90       	pop	r2
    44c4:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    44c6:	80 91 00 01 	lds	r24, 0x0100
    44ca:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    44ce:	20 91 02 01 	lds	r18, 0x0102
    44d2:	30 91 03 01 	lds	r19, 0x0103
    44d6:	20 93 00 01 	sts	0x0100, r18
    44da:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    44de:	90 93 03 01 	sts	0x0103, r25
    44e2:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    44e6:	c9 01       	movw	r24, r18
    44e8:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    44ea:	85 91       	lpm	r24, Z+
    44ec:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    44ee:	9c 01       	movw	r18, r24
    44f0:	22 0f       	add	r18, r18
    44f2:	33 1f       	adc	r19, r19
    44f4:	22 0f       	add	r18, r18
    44f6:	33 1f       	adc	r19, r19
    44f8:	22 0f       	add	r18, r18
    44fa:	33 1f       	adc	r19, r19
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	28 0f       	add	r18, r24
    4502:	39 1f       	adc	r19, r25
    4504:	fb 01       	movw	r30, r22
    4506:	31 83       	std	Z+1, r19	; 0x01
    4508:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    450a:	db 01       	movw	r26, r22
    450c:	14 96       	adiw	r26, 0x04	; 4
    450e:	b3 83       	std	Z+3, r27	; 0x03
    4510:	a2 83       	std	Z+2, r26	; 0x02
    4512:	4d 5f       	subi	r20, 0xFD	; 253
    4514:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4516:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4518:	99 ee       	ldi	r25, 0xE9	; 233
    451a:	c9 2e       	mov	r12, r25
    451c:	98 e1       	ldi	r25, 0x18	; 24
    451e:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    4520:	8a e9       	ldi	r24, 0x9A	; 154
    4522:	a8 2e       	mov	r10, r24
    4524:	8a e1       	ldi	r24, 0x1A	; 26
    4526:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4528:	fa e6       	ldi	r31, 0x6A	; 106
    452a:	8f 2e       	mov	r8, r31
    452c:	f8 e1       	ldi	r31, 0x18	; 24
    452e:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    4530:	ee e4       	ldi	r30, 0x4E	; 78
    4532:	6e 2e       	mov	r6, r30
    4534:	e8 e1       	ldi	r30, 0x18	; 24
    4536:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4538:	32 ea       	ldi	r19, 0xA2	; 162
    453a:	43 2e       	mov	r4, r19
    453c:	3a e1       	ldi	r19, 0x1A	; 26
    453e:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4540:	27 ee       	ldi	r18, 0xE7	; 231
    4542:	22 2e       	mov	r2, r18
    4544:	2a e1       	ldi	r18, 0x1A	; 26
    4546:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    4548:	98 ed       	ldi	r25, 0xD8	; 216
    454a:	e9 2e       	mov	r14, r25
    454c:	97 e1       	ldi	r25, 0x17	; 23
    454e:	f9 2e       	mov	r15, r25
    4550:	23 c0       	rjmp	.+70     	; 0x4598 <getInstructionGroup+0x154>
    4552:	13 96       	adiw	r26, 0x03	; 3
    4554:	fc 92       	st	X, r15
    4556:	ee 92       	st	-X, r14
    4558:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    455a:	18 96       	adiw	r26, 0x08	; 8
    455c:	1c 93       	st	X, r17
    455e:	18 97       	sbiw	r26, 0x08	; 8
    4560:	80 91 f3 0e 	lds	r24, 0x0EF3
    4564:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    456c:	82 0f       	add	r24, r18
    456e:	93 1f       	adc	r25, r19
    4570:	90 93 f4 0e 	sts	0x0EF4, r25
    4574:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    4578:	40 91 04 01 	lds	r20, 0x0104
    457c:	50 91 05 01 	lds	r21, 0x0105
    4580:	42 0f       	add	r20, r18
    4582:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    4584:	fa 01       	movw	r30, r20
    4586:	84 91       	lpm	r24, Z+
    4588:	8f 3f       	cpi	r24, 0xFF	; 255
    458a:	09 f4       	brne	.+2      	; 0x458e <getInstructionGroup+0x14a>
    458c:	b4 c0       	rjmp	.+360    	; 0x46f6 <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    458e:	1b 96       	adiw	r26, 0x0b	; 11
    4590:	fd 01       	movw	r30, r26
    4592:	32 97       	sbiw	r30, 0x02	; 2
    4594:	b1 83       	std	Z+1, r27	; 0x01
    4596:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4598:	fa 01       	movw	r30, r20
    459a:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    459c:	4f 5f       	subi	r20, 0xFF	; 255
    459e:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    45a0:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    45a2:	fa 01       	movw	r30, r20
    45a4:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    45a6:	ca 01       	movw	r24, r20
    45a8:	01 96       	adiw	r24, 0x01	; 1
    45aa:	9a 83       	std	Y+2, r25	; 0x02
    45ac:	89 83       	std	Y+1, r24	; 0x01
    45ae:	90 93 05 01 	sts	0x0105, r25
    45b2:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    45b6:	11 96       	adiw	r26, 0x01	; 1
    45b8:	2c 93       	st	X, r18
    45ba:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    45bc:	80 91 f3 0e 	lds	r24, 0x0EF3
    45c0:	90 91 f4 0e 	lds	r25, 0x0EF4
    45c4:	9c 83       	std	Y+4, r25	; 0x04
    45c6:	8b 83       	std	Y+3, r24	; 0x03
    45c8:	17 96       	adiw	r26, 0x07	; 7
    45ca:	9c 93       	st	X, r25
    45cc:	8e 93       	st	-X, r24
    45ce:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    45d0:	22 23       	and	r18, r18
    45d2:	09 f4       	brne	.+2      	; 0x45d6 <getInstructionGroup+0x192>
    45d4:	be cf       	rjmp	.-132    	; 0x4552 <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    45d6:	22 30       	cpi	r18, 0x02	; 2
    45d8:	39 f1       	breq	.+78     	; 0x4628 <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    45da:	23 30       	cpi	r18, 0x03	; 3
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <getInstructionGroup+0x19c>
    45de:	4b c0       	rjmp	.+150    	; 0x4676 <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    45e0:	24 30       	cpi	r18, 0x04	; 4
    45e2:	09 f4       	brne	.+2      	; 0x45e6 <getInstructionGroup+0x1a2>
    45e4:	68 c0       	rjmp	.+208    	; 0x46b6 <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    45e6:	25 30       	cpi	r18, 0x05	; 5
    45e8:	09 f4       	brne	.+2      	; 0x45ec <getInstructionGroup+0x1a8>
    45ea:	73 c0       	rjmp	.+230    	; 0x46d2 <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    45ec:	26 30       	cpi	r18, 0x06	; 6
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <getInstructionGroup+0x1ae>
    45f0:	50 c0       	rjmp	.+160    	; 0x4692 <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    45f2:	27 30       	cpi	r18, 0x07	; 7
    45f4:	09 f4       	brne	.+2      	; 0x45f8 <getInstructionGroup+0x1b4>
    45f6:	8a c0       	rjmp	.+276    	; 0x470c <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    45f8:	28 30       	cpi	r18, 0x08	; 8
    45fa:	09 f4       	brne	.+2      	; 0x45fe <getInstructionGroup+0x1ba>
    45fc:	99 c0       	rjmp	.+306    	; 0x4730 <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    45fe:	29 30       	cpi	r18, 0x09	; 9
    4600:	09 f0       	breq	.+2      	; 0x4604 <getInstructionGroup+0x1c0>
    4602:	b2 cf       	rjmp	.-156    	; 0x4568 <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    4604:	84 e4       	ldi	r24, 0x44	; 68
    4606:	98 e1       	ldi	r25, 0x18	; 24
    4608:	13 96       	adiw	r26, 0x03	; 3
    460a:	9c 93       	st	X, r25
    460c:	8e 93       	st	-X, r24
    460e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    4610:	e5 ed       	ldi	r30, 0xD5	; 213
    4612:	f7 e1       	ldi	r31, 0x17	; 23
    4614:	15 96       	adiw	r26, 0x05	; 5
    4616:	fc 93       	st	X, r31
    4618:	ee 93       	st	-X, r30
    461a:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    461c:	18 96       	adiw	r26, 0x08	; 8
    461e:	1c 93       	st	X, r17
    4620:	18 97       	sbiw	r26, 0x08	; 8
    4622:	46 e0       	ldi	r20, 0x06	; 6
    4624:	50 e0       	ldi	r21, 0x00	; 0
    4626:	0d c0       	rjmp	.+26     	; 0x4642 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4628:	13 96       	adiw	r26, 0x03	; 3
    462a:	5c 92       	st	X, r5
    462c:	4e 92       	st	-X, r4
    462e:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4630:	15 96       	adiw	r26, 0x05	; 5
    4632:	3c 92       	st	X, r3
    4634:	2e 92       	st	-X, r2
    4636:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4638:	18 96       	adiw	r26, 0x08	; 8
    463a:	1c 93       	st	X, r17
    463c:	18 97       	sbiw	r26, 0x08	; 8
    463e:	46 e0       	ldi	r20, 0x06	; 6
    4640:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    4646:	e9 81       	ldd	r30, Y+1	; 0x01
    4648:	fa 81       	ldd	r31, Y+2	; 0x02
    464a:	84 91       	lpm	r24, Z+
    464c:	eb 81       	ldd	r30, Y+3	; 0x03
    464e:	fc 81       	ldd	r31, Y+4	; 0x04
    4650:	81 93       	st	Z+, r24
    4652:	fc 83       	std	Y+4, r31	; 0x04
    4654:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    4656:	89 81       	ldd	r24, Y+1	; 0x01
    4658:	9a 81       	ldd	r25, Y+2	; 0x02
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	9a 83       	std	Y+2, r25	; 0x02
    465e:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4660:	2f 5f       	subi	r18, 0xFF	; 255
    4662:	3f 4f       	sbci	r19, 0xFF	; 255
    4664:	24 17       	cp	r18, r20
    4666:	35 07       	cpc	r19, r21
    4668:	74 f3       	brlt	.-36     	; 0x4646 <getInstructionGroup+0x202>
    466a:	9a 01       	movw	r18, r20
    466c:	80 91 f3 0e 	lds	r24, 0x0EF3
    4670:	90 91 f4 0e 	lds	r25, 0x0EF4
    4674:	7b cf       	rjmp	.-266    	; 0x456c <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4676:	13 96       	adiw	r26, 0x03	; 3
    4678:	9c 92       	st	X, r9
    467a:	8e 92       	st	-X, r8
    467c:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    467e:	15 96       	adiw	r26, 0x05	; 5
    4680:	7c 92       	st	X, r7
    4682:	6e 92       	st	-X, r6
    4684:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4686:	18 96       	adiw	r26, 0x08	; 8
    4688:	1c 92       	st	X, r1
    468a:	18 97       	sbiw	r26, 0x08	; 8
    468c:	4a e0       	ldi	r20, 0x0A	; 10
    468e:	50 e0       	ldi	r21, 0x00	; 0
    4690:	d8 cf       	rjmp	.-80     	; 0x4642 <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    4692:	e4 e6       	ldi	r30, 0x64	; 100
    4694:	fd e1       	ldi	r31, 0x1D	; 29
    4696:	13 96       	adiw	r26, 0x03	; 3
    4698:	fc 93       	st	X, r31
    469a:	ee 93       	st	-X, r30
    469c:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    469e:	86 ec       	ldi	r24, 0xC6	; 198
    46a0:	9b e1       	ldi	r25, 0x1B	; 27
    46a2:	15 96       	adiw	r26, 0x05	; 5
    46a4:	9c 93       	st	X, r25
    46a6:	8e 93       	st	-X, r24
    46a8:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    46aa:	18 96       	adiw	r26, 0x08	; 8
    46ac:	1c 92       	st	X, r1
    46ae:	18 97       	sbiw	r26, 0x08	; 8
    46b0:	42 e1       	ldi	r20, 0x12	; 18
    46b2:	50 e0       	ldi	r21, 0x00	; 0
    46b4:	c6 cf       	rjmp	.-116    	; 0x4642 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    46b6:	18 96       	adiw	r26, 0x08	; 8
    46b8:	1c 93       	st	X, r17
    46ba:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    46bc:	13 96       	adiw	r26, 0x03	; 3
    46be:	dc 92       	st	X, r13
    46c0:	ce 92       	st	-X, r12
    46c2:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    46c4:	15 96       	adiw	r26, 0x05	; 5
    46c6:	bc 92       	st	X, r11
    46c8:	ae 92       	st	-X, r10
    46ca:	14 97       	sbiw	r26, 0x04	; 4
    46cc:	4e e0       	ldi	r20, 0x0E	; 14
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	b8 cf       	rjmp	.-144    	; 0x4642 <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    46d2:	eb e5       	ldi	r30, 0x5B	; 91
    46d4:	fb e1       	ldi	r31, 0x1B	; 27
    46d6:	13 96       	adiw	r26, 0x03	; 3
    46d8:	fc 93       	st	X, r31
    46da:	ee 93       	st	-X, r30
    46dc:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    46de:	87 e2       	ldi	r24, 0x27	; 39
    46e0:	9b e1       	ldi	r25, 0x1B	; 27
    46e2:	15 96       	adiw	r26, 0x05	; 5
    46e4:	9c 93       	st	X, r25
    46e6:	8e 93       	st	-X, r24
    46e8:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    46ea:	18 96       	adiw	r26, 0x08	; 8
    46ec:	1c 92       	st	X, r1
    46ee:	18 97       	sbiw	r26, 0x08	; 8
    46f0:	42 e1       	ldi	r20, 0x12	; 18
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	a6 cf       	rjmp	.-180    	; 0x4642 <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    46f6:	1a 96       	adiw	r26, 0x0a	; 10
    46f8:	1c 92       	st	X, r1
    46fa:	1e 92       	st	-X, r1
    46fc:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    46fe:	4f 5f       	subi	r20, 0xFF	; 255
    4700:	5f 4f       	sbci	r21, 0xFF	; 255
    4702:	50 93 05 01 	sts	0x0105, r21
    4706:	40 93 04 01 	sts	0x0104, r20
    470a:	c6 ce       	rjmp	.-628    	; 0x4498 <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    470c:	e9 e4       	ldi	r30, 0x49	; 73
    470e:	ff e1       	ldi	r31, 0x1F	; 31
    4710:	13 96       	adiw	r26, 0x03	; 3
    4712:	fc 93       	st	X, r31
    4714:	ee 93       	st	-X, r30
    4716:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    4718:	8a ea       	ldi	r24, 0xAA	; 170
    471a:	9c e1       	ldi	r25, 0x1C	; 28
    471c:	15 96       	adiw	r26, 0x05	; 5
    471e:	9c 93       	st	X, r25
    4720:	8e 93       	st	-X, r24
    4722:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4724:	18 96       	adiw	r26, 0x08	; 8
    4726:	1c 92       	st	X, r1
    4728:	18 97       	sbiw	r26, 0x08	; 8
    472a:	48 e1       	ldi	r20, 0x18	; 24
    472c:	50 e0       	ldi	r21, 0x00	; 0
    472e:	89 cf       	rjmp	.-238    	; 0x4642 <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    4730:	e5 ee       	ldi	r30, 0xE5	; 229
    4732:	f7 e1       	ldi	r31, 0x17	; 23
    4734:	13 96       	adiw	r26, 0x03	; 3
    4736:	fc 93       	st	X, r31
    4738:	ee 93       	st	-X, r30
    473a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    473c:	89 ed       	ldi	r24, 0xD9	; 217
    473e:	97 e1       	ldi	r25, 0x17	; 23
    4740:	15 96       	adiw	r26, 0x05	; 5
    4742:	9c 93       	st	X, r25
    4744:	8e 93       	st	-X, r24
    4746:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4748:	89 81       	ldd	r24, Y+1	; 0x01
    474a:	9a 81       	ldd	r25, Y+2	; 0x02
    474c:	fc 01       	movw	r30, r24
    474e:	45 91       	lpm	r20, Z+
    4750:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    4752:	90 93 05 01 	sts	0x0105, r25
    4756:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    475a:	44 0f       	add	r20, r20
    475c:	55 1f       	adc	r21, r21
    475e:	44 0f       	add	r20, r20
    4760:	55 1f       	adc	r21, r21
    4762:	44 0f       	add	r20, r20
    4764:	55 1f       	adc	r21, r21
    4766:	4e 5f       	subi	r20, 0xFE	; 254
    4768:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    476a:	18 96       	adiw	r26, 0x08	; 8
    476c:	1c 92       	st	X, r1
    476e:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4770:	14 16       	cp	r1, r20
    4772:	15 06       	cpc	r1, r21
    4774:	0c f4       	brge	.+2      	; 0x4778 <getInstructionGroup+0x334>
    4776:	65 cf       	rjmp	.-310    	; 0x4642 <getInstructionGroup+0x1fe>
    4778:	78 cf       	rjmp	.-272    	; 0x466a <getInstructionGroup+0x226>

0000477a <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    477a:	cf 93       	push	r28
    477c:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    477e:	a0 91 f3 0c 	lds	r26, 0x0CF3
    4782:	b0 91 f4 0c 	lds	r27, 0x0CF4
    4786:	a2 30       	cpi	r26, 0x02	; 2
    4788:	b1 05       	cpc	r27, r1
    478a:	78 f4       	brcc	.+30     	; 0x47aa <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    478c:	11 97       	sbiw	r26, 0x01	; 1
    478e:	81 f1       	breq	.+96     	; 0x47f0 <getPreviousGroup+0x76>
    4790:	c0 91 04 01 	lds	r28, 0x0104
    4794:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    4798:	0e 94 22 22 	call	0x4444	; 0x4444 <getInstructionGroup>
			dataPtr = tmpPtr;
    479c:	d0 93 05 01 	sts	0x0105, r29
    47a0:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    47a4:	df 91       	pop	r29
    47a6:	cf 91       	pop	r28
    47a8:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    47aa:	fd 01       	movw	r30, r26
    47ac:	31 97       	sbiw	r30, 0x01	; 1
    47ae:	f0 93 f4 0c 	sts	0x0CF4, r31
    47b2:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    47b6:	aa 0f       	add	r26, r26
    47b8:	bb 1f       	adc	r27, r27
    47ba:	af 50       	subi	r26, 0x0F	; 15
    47bc:	b3 4f       	sbci	r27, 0xF3	; 243
    47be:	ee 0f       	add	r30, r30
    47c0:	ff 1f       	adc	r31, r31
    47c2:	eb 50       	subi	r30, 0x0B	; 11
    47c4:	f3 4f       	sbci	r31, 0xF3	; 243
    47c6:	2d 91       	ld	r18, X+
    47c8:	3c 91       	ld	r19, X
    47ca:	80 81       	ld	r24, Z
    47cc:	91 81       	ldd	r25, Z+1	; 0x01
    47ce:	28 0f       	add	r18, r24
    47d0:	39 1f       	adc	r19, r25
    47d2:	80 91 04 01 	lds	r24, 0x0104
    47d6:	90 91 05 01 	lds	r25, 0x0105
    47da:	82 1b       	sub	r24, r18
    47dc:	93 0b       	sbc	r25, r19
    47de:	90 93 05 01 	sts	0x0105, r25
    47e2:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    47e6:	0e 94 22 22 	call	0x4444	; 0x4444 <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    47f0:	80 91 f5 0c 	lds	r24, 0x0CF5
    47f4:	90 91 f6 0c 	lds	r25, 0x0CF6
    47f8:	c0 91 04 01 	lds	r28, 0x0104
    47fc:	d0 91 05 01 	lds	r29, 0x0105
    4800:	c8 1b       	sub	r28, r24
    4802:	d9 0b       	sbc	r29, r25
    4804:	d0 93 05 01 	sts	0x0105, r29
    4808:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    480c:	10 92 f4 0c 	sts	0x0CF4, r1
    4810:	10 92 f3 0c 	sts	0x0CF3, r1
    4814:	c1 cf       	rjmp	.-126    	; 0x4798 <getPreviousGroup+0x1e>

00004816 <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    4816:	e0 91 f3 0c 	lds	r30, 0x0CF3
    481a:	f0 91 f4 0c 	lds	r31, 0x0CF4
    481e:	ee 0f       	add	r30, r30
    4820:	ff 1f       	adc	r31, r31
    4822:	ed 50       	subi	r30, 0x0D	; 13
    4824:	f3 4f       	sbci	r31, 0xF3	; 243
    4826:	20 81       	ld	r18, Z
    4828:	31 81       	ldd	r19, Z+1	; 0x01
    482a:	80 91 04 01 	lds	r24, 0x0104
    482e:	90 91 05 01 	lds	r25, 0x0105
    4832:	82 1b       	sub	r24, r18
    4834:	93 0b       	sbc	r25, r19
    4836:	90 93 05 01 	sts	0x0105, r25
    483a:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    483e:	0e 94 22 22 	call	0x4444	; 0x4444 <getInstructionGroup>
}
    4842:	08 95       	ret

00004844 <getNextGroup>:

struct instruction_group *getNextGroup() {
    4844:	cf 93       	push	r28
    4846:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    4848:	c0 91 04 01 	lds	r28, 0x0104
    484c:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    4850:	0e 94 22 22 	call	0x4444	; 0x4444 <getInstructionGroup>
    4854:	ac 01       	movw	r20, r24

	if(ig != 0) {
    4856:	00 97       	sbiw	r24, 0x00	; 0
    4858:	d9 f0       	breq	.+54     	; 0x4890 <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    485a:	20 91 f3 0c 	lds	r18, 0x0CF3
    485e:	30 91 f4 0c 	lds	r19, 0x0CF4
    4862:	f9 01       	movw	r30, r18
    4864:	ee 0f       	add	r30, r30
    4866:	ff 1f       	adc	r31, r31
    4868:	eb 50       	subi	r30, 0x0B	; 11
    486a:	f3 4f       	sbci	r31, 0xF3	; 243
    486c:	80 91 04 01 	lds	r24, 0x0104
    4870:	90 91 05 01 	lds	r25, 0x0105
    4874:	8c 1b       	sub	r24, r28
    4876:	9d 0b       	sbc	r25, r29
    4878:	91 83       	std	Z+1, r25	; 0x01
    487a:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    487c:	2f 5f       	subi	r18, 0xFF	; 255
    487e:	3f 4f       	sbci	r19, 0xFF	; 255
    4880:	30 93 f4 0c 	sts	0x0CF4, r19
    4884:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    4888:	ca 01       	movw	r24, r20
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    4890:	0e 94 0b 24 	call	0x4816	; 0x4816 <getLastGroup>
    4894:	ac 01       	movw	r20, r24
    4896:	f8 cf       	rjmp	.-16     	; 0x4888 <getNextGroup+0x44>

00004898 <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    4898:	10 92 f4 0c 	sts	0x0CF4, r1
    489c:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    48a0:	8e ef       	ldi	r24, 0xFE	; 254
    48a2:	91 e0       	ldi	r25, 0x01	; 1
    48a4:	e5 ef       	ldi	r30, 0xF5	; 245
    48a6:	fc e0       	ldi	r31, 0x0C	; 12
    48a8:	df 01       	movw	r26, r30
    48aa:	9c 01       	movw	r18, r24
    48ac:	1d 92       	st	X+, r1
    48ae:	21 50       	subi	r18, 0x01	; 1
    48b0:	30 40       	sbci	r19, 0x00	; 0
    48b2:	e1 f7       	brne	.-8      	; 0x48ac <initDecoder+0x14>
}
    48b4:	08 95       	ret

000048b6 <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    48b6:	9c 01       	movw	r18, r24
    48b8:	97 fd       	sbrc	r25, 7
    48ba:	02 c0       	rjmp	.+4      	; 0x48c0 <abs+0xa>
    48bc:	c9 01       	movw	r24, r18
    48be:	08 95       	ret
    48c0:	30 95       	com	r19
    48c2:	21 95       	neg	r18
    48c4:	3f 4f       	sbci	r19, 0xFF	; 255
    48c6:	c9 01       	movw	r24, r18
    48c8:	08 95       	ret

000048ca <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    48ca:	86 30       	cpi	r24, 0x06	; 6
    48cc:	91 05       	cpc	r25, r1
    48ce:	24 f0       	brlt	.+8      	; 0x48d8 <setRGBColor+0xe>
		if(led == 6) {
    48d0:	86 30       	cpi	r24, 0x06	; 6
    48d2:	91 05       	cpc	r25, r1
    48d4:	89 f0       	breq	.+34     	; 0x48f8 <setRGBColor+0x2e>
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	fc 01       	movw	r30, r24
    48da:	ee 0f       	add	r30, r30
    48dc:	ff 1f       	adc	r31, r31
    48de:	e8 0f       	add	r30, r24
    48e0:	f9 1f       	adc	r31, r25
    48e2:	ee 0f       	add	r30, r30
    48e4:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    48e6:	e5 51       	subi	r30, 0x15	; 21
    48e8:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    48ea:	71 83       	std	Z+1, r23	; 0x01
    48ec:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    48ee:	55 83       	std	Z+5, r21	; 0x05
    48f0:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    48f2:	33 83       	std	Z+3, r19	; 0x03
    48f4:	22 83       	std	Z+2, r18	; 0x02



}
    48f6:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    48f8:	e2 e4       	ldi	r30, 0x42	; 66
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	f4 cf       	rjmp	.-24     	; 0x48e6 <setRGBColor+0x1c>

000048fe <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    48fe:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    4900:	86 30       	cpi	r24, 0x06	; 6
    4902:	91 05       	cpc	r25, r1
    4904:	24 f0       	brlt	.+8      	; 0x490e <getRGBColor+0x10>
		if(led == 6) {
    4906:	86 30       	cpi	r24, 0x06	; 6
    4908:	91 05       	cpc	r25, r1
    490a:	e1 f0       	breq	.+56     	; 0x4944 <getRGBColor+0x46>
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	fc 01       	movw	r30, r24
    4910:	ee 0f       	add	r30, r30
    4912:	ff 1f       	adc	r31, r31
    4914:	e8 0f       	add	r30, r24
    4916:	f9 1f       	adc	r31, r25
    4918:	ee 0f       	add	r30, r30
    491a:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    491c:	e5 51       	subi	r30, 0x15	; 21
    491e:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    4920:	80 81       	ld	r24, Z
    4922:	91 81       	ldd	r25, Z+1	; 0x01
    4924:	11 96       	adiw	r26, 0x01	; 1
    4926:	9c 93       	st	X, r25
    4928:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    492a:	84 81       	ldd	r24, Z+4	; 0x04
    492c:	95 81       	ldd	r25, Z+5	; 0x05
    492e:	13 96       	adiw	r26, 0x03	; 3
    4930:	9c 93       	st	X, r25
    4932:	8e 93       	st	-X, r24
    4934:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    4936:	82 81       	ldd	r24, Z+2	; 0x02
    4938:	93 81       	ldd	r25, Z+3	; 0x03
    493a:	15 96       	adiw	r26, 0x05	; 5
    493c:	9c 93       	st	X, r25
    493e:	8e 93       	st	-X, r24
    4940:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    4942:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    4944:	e2 e4       	ldi	r30, 0x42	; 66
    4946:	f0 e0       	ldi	r31, 0x00	; 0
    4948:	e9 cf       	rjmp	.-46     	; 0x491c <getRGBColor+0x1e>

0000494a <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    494a:	43 e2       	ldi	r20, 0x23	; 35
    494c:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    494e:	fa 01       	movw	r30, r20
    4950:	ee 0f       	add	r30, r30
    4952:	ff 1f       	adc	r31, r31
    4954:	e5 51       	subi	r30, 0x15	; 21
    4956:	fd 4f       	sbci	r31, 0xFD	; 253
    4958:	01 90       	ld	r0, Z+
    495a:	f0 81       	ld	r31, Z
    495c:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    495e:	e2 95       	swap	r30
    4960:	f2 95       	swap	r31
    4962:	f0 7f       	andi	r31, 0xF0	; 240
    4964:	fe 27       	eor	r31, r30
    4966:	e0 7f       	andi	r30, 0xF0	; 240
    4968:	fe 27       	eor	r31, r30
    496a:	2c e0       	ldi	r18, 0x0C	; 12
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	08 c0       	rjmp	.+16     	; 0x4980 <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    4970:	8b b3       	in	r24, 0x1b	; 27
    4972:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    4974:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    4976:	8b b3       	in	r24, 0x1b	; 27
    4978:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    497a:	21 15       	cp	r18, r1
    497c:	31 05       	cpc	r19, r1
    497e:	91 f0       	breq	.+36     	; 0x49a4 <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    4980:	21 50       	subi	r18, 0x01	; 1
    4982:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    4984:	cf 01       	movw	r24, r30
    4986:	02 2e       	mov	r0, r18
    4988:	02 c0       	rjmp	.+4      	; 0x498e <displayColors+0x44>
    498a:	95 95       	asr	r25
    498c:	87 95       	ror	r24
    498e:	0a 94       	dec	r0
    4990:	e2 f7       	brpl	.-8      	; 0x498a <displayColors+0x40>
    4992:	80 ff       	sbrs	r24, 0
    4994:	ed cf       	rjmp	.-38     	; 0x4970 <displayColors+0x26>
				PINHIGH(BDI);
    4996:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    4998:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    499a:	8b b3       	in	r24, 0x1b	; 27
    499c:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    499e:	21 15       	cp	r18, r1
    49a0:	31 05       	cpc	r19, r1
    49a2:	71 f7       	brne	.-36     	; 0x4980 <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    49a4:	42 31       	cpi	r20, 0x12	; 18
    49a6:	51 05       	cpc	r21, r1
    49a8:	41 f0       	breq	.+16     	; 0x49ba <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    49aa:	41 50       	subi	r20, 0x01	; 1
    49ac:	50 40       	sbci	r21, 0x00	; 0
    49ae:	57 ff       	sbrs	r21, 7
    49b0:	ce cf       	rjmp	.-100    	; 0x494e <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    49b2:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    49b4:	8b b3       	in	r24, 0x1b	; 27
    49b6:	1b ba       	out	0x1b, r1	; 27
}
    49b8:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    49ba:	8b b3       	in	r24, 0x1b	; 27
    49bc:	1b ba       	out	0x1b, r1	; 27
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    49c2:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    49c4:	2b b3       	in	r18, 0x1b	; 27
    49c6:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    49c8:	01 96       	adiw	r24, 0x01	; 1
    49ca:	88 34       	cpi	r24, 0x48	; 72
    49cc:	91 05       	cpc	r25, r1
    49ce:	c9 f7       	brne	.-14     	; 0x49c2 <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    49d0:	41 e1       	ldi	r20, 0x11	; 17
    49d2:	50 e0       	ldi	r21, 0x00	; 0
    49d4:	bc cf       	rjmp	.-136    	; 0x494e <displayColors+0x4>

000049d6 <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    49d6:	10 92 ec 02 	sts	0x02EC, r1
    49da:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    49de:	10 92 f0 02 	sts	0x02F0, r1
    49e2:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    49e6:	10 92 ee 02 	sts	0x02EE, r1
    49ea:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    49ee:	10 92 f2 02 	sts	0x02F2, r1
    49f2:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    49f6:	10 92 f6 02 	sts	0x02F6, r1
    49fa:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    49fe:	10 92 f4 02 	sts	0x02F4, r1
    4a02:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    4a06:	0e 94 a5 24 	call	0x494a	; 0x494a <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4a0a:	84 e6       	ldi	r24, 0x64	; 100
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	90 93 ec 02 	sts	0x02EC, r25
    4a12:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    4a16:	10 92 f0 02 	sts	0x02F0, r1
    4a1a:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    4a1e:	10 92 ee 02 	sts	0x02EE, r1
    4a22:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4a26:	90 93 f2 02 	sts	0x02F2, r25
    4a2a:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    4a2e:	10 92 f6 02 	sts	0x02F6, r1
    4a32:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    4a36:	10 92 f4 02 	sts	0x02F4, r1
    4a3a:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4a3e:	90 91 06 01 	lds	r25, 0x0106
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    4a46:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4a48:	86 b7       	in	r24, 0x36	; 54
    4a4a:	89 23       	and	r24, r25
    4a4c:	e9 f3       	breq	.-6      	; 0x4a48 <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    4a4e:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    4a50:	2f 5f       	subi	r18, 0xFF	; 255
    4a52:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    4a54:	22 33       	cpi	r18, 0x32	; 50
    4a56:	31 05       	cpc	r19, r1
    4a58:	b9 f7       	brne	.-18     	; 0x4a48 <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    4a5a:	0e 94 a5 24 	call	0x494a	; 0x494a <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4a5e:	10 92 ec 02 	sts	0x02EC, r1
    4a62:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    4a66:	10 92 f0 02 	sts	0x02F0, r1
    4a6a:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    4a6e:	10 92 ee 02 	sts	0x02EE, r1
    4a72:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4a76:	10 92 f2 02 	sts	0x02F2, r1
    4a7a:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    4a7e:	10 92 f6 02 	sts	0x02F6, r1
    4a82:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    4a86:	10 92 f4 02 	sts	0x02F4, r1
    4a8a:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4a8e:	90 91 06 01 	lds	r25, 0x0106
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    4a96:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4a98:	86 b7       	in	r24, 0x36	; 54
    4a9a:	89 23       	and	r24, r25
    4a9c:	e9 f3       	breq	.-6      	; 0x4a98 <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    4a9e:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    4aa0:	2f 5f       	subi	r18, 0xFF	; 255
    4aa2:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    4aa4:	22 33       	cpi	r18, 0x32	; 50
    4aa6:	31 05       	cpc	r19, r1
    4aa8:	b9 f7       	brne	.-18     	; 0x4a98 <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    4aaa:	0e 94 a5 24 	call	0x494a	; 0x494a <displayColors>
}
    4aae:	08 95       	ret

00004ab0 <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4ab0:	90 91 06 01 	lds	r25, 0x0106
    4ab4:	86 b7       	in	r24, 0x36	; 54
    4ab6:	89 23       	and	r24, r25
    4ab8:	e9 f3       	breq	.-6      	; 0x4ab4 <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    4aba:	80 e1       	ldi	r24, 0x10	; 16
    4abc:	86 bf       	out	0x36, r24	; 54
}
    4abe:	08 95       	ret

00004ac0 <copy_data>:

void copy_data(char *dest, char *src, short length) {
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    4ac6:	14 16       	cp	r1, r20
    4ac8:	15 06       	cpc	r1, r21
    4aca:	7c f4       	brge	.+30     	; 0x4aea <copy_data+0x2a>
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	e2 0f       	add	r30, r18
    4ad4:	f3 1f       	adc	r31, r19
    4ad6:	db 01       	movw	r26, r22
    4ad8:	a2 0f       	add	r26, r18
    4ada:	b3 1f       	adc	r27, r19
    4adc:	8c 91       	ld	r24, X
    4ade:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    4ae0:	2f 5f       	subi	r18, 0xFF	; 255
    4ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae4:	24 17       	cp	r18, r20
    4ae6:	35 07       	cpc	r19, r21
    4ae8:	9c f3       	brlt	.-26     	; 0x4ad0 <copy_data+0x10>
		dest[i] = src[i];
	}
}
    4aea:	df 91       	pop	r29
    4aec:	cf 91       	pop	r28
    4aee:	08 95       	ret

00004af0 <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    4af0:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    4af2:	14 16       	cp	r1, r20
    4af4:	15 06       	cpc	r1, r21
    4af6:	64 f4       	brge	.+24     	; 0x4b10 <copy_short_data+0x20>
    4af8:	db 01       	movw	r26, r22
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4afe:	8d 91       	ld	r24, X+
    4b00:	9d 91       	ld	r25, X+
    4b02:	81 93       	st	Z+, r24
    4b04:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    4b06:	2f 5f       	subi	r18, 0xFF	; 255
    4b08:	3f 4f       	sbci	r19, 0xFF	; 255
    4b0a:	24 17       	cp	r18, r20
    4b0c:	35 07       	cpc	r19, r21
    4b0e:	bc f3       	brlt	.-18     	; 0x4afe <copy_short_data+0xe>
    4b10:	08 95       	ret

00004b12 <_fpadd_parts>:
    4b12:	a0 e0       	ldi	r26, 0x00	; 0
    4b14:	b0 e0       	ldi	r27, 0x00	; 0
    4b16:	ef e8       	ldi	r30, 0x8F	; 143
    4b18:	f5 e2       	ldi	r31, 0x25	; 37
    4b1a:	0c 94 27 2b 	jmp	0x564e	; 0x564e <__prologue_saves__>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	2b 01       	movw	r4, r22
    4b22:	fa 01       	movw	r30, r20
    4b24:	9c 91       	ld	r25, X
    4b26:	92 30       	cpi	r25, 0x02	; 2
    4b28:	08 f4       	brcc	.+2      	; 0x4b2c <_fpadd_parts+0x1a>
    4b2a:	39 c1       	rjmp	.+626    	; 0x4d9e <_fpadd_parts+0x28c>
    4b2c:	eb 01       	movw	r28, r22
    4b2e:	88 81       	ld	r24, Y
    4b30:	82 30       	cpi	r24, 0x02	; 2
    4b32:	08 f4       	brcc	.+2      	; 0x4b36 <_fpadd_parts+0x24>
    4b34:	33 c1       	rjmp	.+614    	; 0x4d9c <_fpadd_parts+0x28a>
    4b36:	94 30       	cpi	r25, 0x04	; 4
    4b38:	69 f4       	brne	.+26     	; 0x4b54 <_fpadd_parts+0x42>
    4b3a:	84 30       	cpi	r24, 0x04	; 4
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <_fpadd_parts+0x2e>
    4b3e:	2f c1       	rjmp	.+606    	; 0x4d9e <_fpadd_parts+0x28c>
    4b40:	11 96       	adiw	r26, 0x01	; 1
    4b42:	9c 91       	ld	r25, X
    4b44:	11 97       	sbiw	r26, 0x01	; 1
    4b46:	89 81       	ldd	r24, Y+1	; 0x01
    4b48:	98 17       	cp	r25, r24
    4b4a:	09 f4       	brne	.+2      	; 0x4b4e <_fpadd_parts+0x3c>
    4b4c:	28 c1       	rjmp	.+592    	; 0x4d9e <_fpadd_parts+0x28c>
    4b4e:	a7 e0       	ldi	r26, 0x07	; 7
    4b50:	b1 e0       	ldi	r27, 0x01	; 1
    4b52:	25 c1       	rjmp	.+586    	; 0x4d9e <_fpadd_parts+0x28c>
    4b54:	84 30       	cpi	r24, 0x04	; 4
    4b56:	09 f4       	brne	.+2      	; 0x4b5a <_fpadd_parts+0x48>
    4b58:	21 c1       	rjmp	.+578    	; 0x4d9c <_fpadd_parts+0x28a>
    4b5a:	82 30       	cpi	r24, 0x02	; 2
    4b5c:	a9 f4       	brne	.+42     	; 0x4b88 <_fpadd_parts+0x76>
    4b5e:	92 30       	cpi	r25, 0x02	; 2
    4b60:	09 f0       	breq	.+2      	; 0x4b64 <_fpadd_parts+0x52>
    4b62:	1d c1       	rjmp	.+570    	; 0x4d9e <_fpadd_parts+0x28c>
    4b64:	9a 01       	movw	r18, r20
    4b66:	ad 01       	movw	r20, r26
    4b68:	88 e0       	ldi	r24, 0x08	; 8
    4b6a:	ea 01       	movw	r28, r20
    4b6c:	09 90       	ld	r0, Y+
    4b6e:	ae 01       	movw	r20, r28
    4b70:	e9 01       	movw	r28, r18
    4b72:	09 92       	st	Y+, r0
    4b74:	9e 01       	movw	r18, r28
    4b76:	81 50       	subi	r24, 0x01	; 1
    4b78:	c1 f7       	brne	.-16     	; 0x4b6a <_fpadd_parts+0x58>
    4b7a:	e2 01       	movw	r28, r4
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	11 96       	adiw	r26, 0x01	; 1
    4b80:	9c 91       	ld	r25, X
    4b82:	89 23       	and	r24, r25
    4b84:	81 83       	std	Z+1, r24	; 0x01
    4b86:	08 c1       	rjmp	.+528    	; 0x4d98 <_fpadd_parts+0x286>
    4b88:	92 30       	cpi	r25, 0x02	; 2
    4b8a:	09 f4       	brne	.+2      	; 0x4b8e <_fpadd_parts+0x7c>
    4b8c:	07 c1       	rjmp	.+526    	; 0x4d9c <_fpadd_parts+0x28a>
    4b8e:	12 96       	adiw	r26, 0x02	; 2
    4b90:	2d 90       	ld	r2, X+
    4b92:	3c 90       	ld	r3, X
    4b94:	13 97       	sbiw	r26, 0x03	; 3
    4b96:	eb 01       	movw	r28, r22
    4b98:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9c:	14 96       	adiw	r26, 0x04	; 4
    4b9e:	ad 90       	ld	r10, X+
    4ba0:	bd 90       	ld	r11, X+
    4ba2:	cd 90       	ld	r12, X+
    4ba4:	dc 90       	ld	r13, X
    4ba6:	17 97       	sbiw	r26, 0x07	; 7
    4ba8:	ec 80       	ldd	r14, Y+4	; 0x04
    4baa:	fd 80       	ldd	r15, Y+5	; 0x05
    4bac:	0e 81       	ldd	r16, Y+6	; 0x06
    4bae:	1f 81       	ldd	r17, Y+7	; 0x07
    4bb0:	91 01       	movw	r18, r2
    4bb2:	28 1b       	sub	r18, r24
    4bb4:	39 0b       	sbc	r19, r25
    4bb6:	b9 01       	movw	r22, r18
    4bb8:	37 ff       	sbrs	r19, 7
    4bba:	04 c0       	rjmp	.+8      	; 0x4bc4 <_fpadd_parts+0xb2>
    4bbc:	66 27       	eor	r22, r22
    4bbe:	77 27       	eor	r23, r23
    4bc0:	62 1b       	sub	r22, r18
    4bc2:	73 0b       	sbc	r23, r19
    4bc4:	60 32       	cpi	r22, 0x20	; 32
    4bc6:	71 05       	cpc	r23, r1
    4bc8:	0c f0       	brlt	.+2      	; 0x4bcc <_fpadd_parts+0xba>
    4bca:	61 c0       	rjmp	.+194    	; 0x4c8e <_fpadd_parts+0x17c>
    4bcc:	12 16       	cp	r1, r18
    4bce:	13 06       	cpc	r1, r19
    4bd0:	6c f5       	brge	.+90     	; 0x4c2c <_fpadd_parts+0x11a>
    4bd2:	37 01       	movw	r6, r14
    4bd4:	48 01       	movw	r8, r16
    4bd6:	06 2e       	mov	r0, r22
    4bd8:	04 c0       	rjmp	.+8      	; 0x4be2 <_fpadd_parts+0xd0>
    4bda:	96 94       	lsr	r9
    4bdc:	87 94       	ror	r8
    4bde:	77 94       	ror	r7
    4be0:	67 94       	ror	r6
    4be2:	0a 94       	dec	r0
    4be4:	d2 f7       	brpl	.-12     	; 0x4bda <_fpadd_parts+0xc8>
    4be6:	21 e0       	ldi	r18, 0x01	; 1
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	40 e0       	ldi	r20, 0x00	; 0
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	04 c0       	rjmp	.+8      	; 0x4bf8 <_fpadd_parts+0xe6>
    4bf0:	22 0f       	add	r18, r18
    4bf2:	33 1f       	adc	r19, r19
    4bf4:	44 1f       	adc	r20, r20
    4bf6:	55 1f       	adc	r21, r21
    4bf8:	6a 95       	dec	r22
    4bfa:	d2 f7       	brpl	.-12     	; 0x4bf0 <_fpadd_parts+0xde>
    4bfc:	21 50       	subi	r18, 0x01	; 1
    4bfe:	30 40       	sbci	r19, 0x00	; 0
    4c00:	40 40       	sbci	r20, 0x00	; 0
    4c02:	50 40       	sbci	r21, 0x00	; 0
    4c04:	2e 21       	and	r18, r14
    4c06:	3f 21       	and	r19, r15
    4c08:	40 23       	and	r20, r16
    4c0a:	51 23       	and	r21, r17
    4c0c:	21 15       	cp	r18, r1
    4c0e:	31 05       	cpc	r19, r1
    4c10:	41 05       	cpc	r20, r1
    4c12:	51 05       	cpc	r21, r1
    4c14:	21 f0       	breq	.+8      	; 0x4c1e <_fpadd_parts+0x10c>
    4c16:	21 e0       	ldi	r18, 0x01	; 1
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e0       	ldi	r20, 0x00	; 0
    4c1c:	50 e0       	ldi	r21, 0x00	; 0
    4c1e:	79 01       	movw	r14, r18
    4c20:	8a 01       	movw	r16, r20
    4c22:	e6 28       	or	r14, r6
    4c24:	f7 28       	or	r15, r7
    4c26:	08 29       	or	r16, r8
    4c28:	19 29       	or	r17, r9
    4c2a:	3c c0       	rjmp	.+120    	; 0x4ca4 <_fpadd_parts+0x192>
    4c2c:	23 2b       	or	r18, r19
    4c2e:	d1 f1       	breq	.+116    	; 0x4ca4 <_fpadd_parts+0x192>
    4c30:	26 0e       	add	r2, r22
    4c32:	37 1e       	adc	r3, r23
    4c34:	35 01       	movw	r6, r10
    4c36:	46 01       	movw	r8, r12
    4c38:	06 2e       	mov	r0, r22
    4c3a:	04 c0       	rjmp	.+8      	; 0x4c44 <_fpadd_parts+0x132>
    4c3c:	96 94       	lsr	r9
    4c3e:	87 94       	ror	r8
    4c40:	77 94       	ror	r7
    4c42:	67 94       	ror	r6
    4c44:	0a 94       	dec	r0
    4c46:	d2 f7       	brpl	.-12     	; 0x4c3c <_fpadd_parts+0x12a>
    4c48:	21 e0       	ldi	r18, 0x01	; 1
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	40 e0       	ldi	r20, 0x00	; 0
    4c4e:	50 e0       	ldi	r21, 0x00	; 0
    4c50:	04 c0       	rjmp	.+8      	; 0x4c5a <_fpadd_parts+0x148>
    4c52:	22 0f       	add	r18, r18
    4c54:	33 1f       	adc	r19, r19
    4c56:	44 1f       	adc	r20, r20
    4c58:	55 1f       	adc	r21, r21
    4c5a:	6a 95       	dec	r22
    4c5c:	d2 f7       	brpl	.-12     	; 0x4c52 <_fpadd_parts+0x140>
    4c5e:	21 50       	subi	r18, 0x01	; 1
    4c60:	30 40       	sbci	r19, 0x00	; 0
    4c62:	40 40       	sbci	r20, 0x00	; 0
    4c64:	50 40       	sbci	r21, 0x00	; 0
    4c66:	2a 21       	and	r18, r10
    4c68:	3b 21       	and	r19, r11
    4c6a:	4c 21       	and	r20, r12
    4c6c:	5d 21       	and	r21, r13
    4c6e:	21 15       	cp	r18, r1
    4c70:	31 05       	cpc	r19, r1
    4c72:	41 05       	cpc	r20, r1
    4c74:	51 05       	cpc	r21, r1
    4c76:	21 f0       	breq	.+8      	; 0x4c80 <_fpadd_parts+0x16e>
    4c78:	21 e0       	ldi	r18, 0x01	; 1
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	40 e0       	ldi	r20, 0x00	; 0
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	59 01       	movw	r10, r18
    4c82:	6a 01       	movw	r12, r20
    4c84:	a6 28       	or	r10, r6
    4c86:	b7 28       	or	r11, r7
    4c88:	c8 28       	or	r12, r8
    4c8a:	d9 28       	or	r13, r9
    4c8c:	0b c0       	rjmp	.+22     	; 0x4ca4 <_fpadd_parts+0x192>
    4c8e:	82 15       	cp	r24, r2
    4c90:	93 05       	cpc	r25, r3
    4c92:	2c f0       	brlt	.+10     	; 0x4c9e <_fpadd_parts+0x18c>
    4c94:	1c 01       	movw	r2, r24
    4c96:	aa 24       	eor	r10, r10
    4c98:	bb 24       	eor	r11, r11
    4c9a:	65 01       	movw	r12, r10
    4c9c:	03 c0       	rjmp	.+6      	; 0x4ca4 <_fpadd_parts+0x192>
    4c9e:	ee 24       	eor	r14, r14
    4ca0:	ff 24       	eor	r15, r15
    4ca2:	87 01       	movw	r16, r14
    4ca4:	11 96       	adiw	r26, 0x01	; 1
    4ca6:	9c 91       	ld	r25, X
    4ca8:	d2 01       	movw	r26, r4
    4caa:	11 96       	adiw	r26, 0x01	; 1
    4cac:	8c 91       	ld	r24, X
    4cae:	98 17       	cp	r25, r24
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <_fpadd_parts+0x1a2>
    4cb2:	45 c0       	rjmp	.+138    	; 0x4d3e <_fpadd_parts+0x22c>
    4cb4:	99 23       	and	r25, r25
    4cb6:	39 f0       	breq	.+14     	; 0x4cc6 <_fpadd_parts+0x1b4>
    4cb8:	a8 01       	movw	r20, r16
    4cba:	97 01       	movw	r18, r14
    4cbc:	2a 19       	sub	r18, r10
    4cbe:	3b 09       	sbc	r19, r11
    4cc0:	4c 09       	sbc	r20, r12
    4cc2:	5d 09       	sbc	r21, r13
    4cc4:	06 c0       	rjmp	.+12     	; 0x4cd2 <_fpadd_parts+0x1c0>
    4cc6:	a6 01       	movw	r20, r12
    4cc8:	95 01       	movw	r18, r10
    4cca:	2e 19       	sub	r18, r14
    4ccc:	3f 09       	sbc	r19, r15
    4cce:	40 0b       	sbc	r20, r16
    4cd0:	51 0b       	sbc	r21, r17
    4cd2:	57 fd       	sbrc	r21, 7
    4cd4:	08 c0       	rjmp	.+16     	; 0x4ce6 <_fpadd_parts+0x1d4>
    4cd6:	11 82       	std	Z+1, r1	; 0x01
    4cd8:	33 82       	std	Z+3, r3	; 0x03
    4cda:	22 82       	std	Z+2, r2	; 0x02
    4cdc:	24 83       	std	Z+4, r18	; 0x04
    4cde:	35 83       	std	Z+5, r19	; 0x05
    4ce0:	46 83       	std	Z+6, r20	; 0x06
    4ce2:	57 83       	std	Z+7, r21	; 0x07
    4ce4:	1d c0       	rjmp	.+58     	; 0x4d20 <_fpadd_parts+0x20e>
    4ce6:	81 e0       	ldi	r24, 0x01	; 1
    4ce8:	81 83       	std	Z+1, r24	; 0x01
    4cea:	33 82       	std	Z+3, r3	; 0x03
    4cec:	22 82       	std	Z+2, r2	; 0x02
    4cee:	88 27       	eor	r24, r24
    4cf0:	99 27       	eor	r25, r25
    4cf2:	dc 01       	movw	r26, r24
    4cf4:	82 1b       	sub	r24, r18
    4cf6:	93 0b       	sbc	r25, r19
    4cf8:	a4 0b       	sbc	r26, r20
    4cfa:	b5 0b       	sbc	r27, r21
    4cfc:	84 83       	std	Z+4, r24	; 0x04
    4cfe:	95 83       	std	Z+5, r25	; 0x05
    4d00:	a6 83       	std	Z+6, r26	; 0x06
    4d02:	b7 83       	std	Z+7, r27	; 0x07
    4d04:	0d c0       	rjmp	.+26     	; 0x4d20 <_fpadd_parts+0x20e>
    4d06:	22 0f       	add	r18, r18
    4d08:	33 1f       	adc	r19, r19
    4d0a:	44 1f       	adc	r20, r20
    4d0c:	55 1f       	adc	r21, r21
    4d0e:	24 83       	std	Z+4, r18	; 0x04
    4d10:	35 83       	std	Z+5, r19	; 0x05
    4d12:	46 83       	std	Z+6, r20	; 0x06
    4d14:	57 83       	std	Z+7, r21	; 0x07
    4d16:	82 81       	ldd	r24, Z+2	; 0x02
    4d18:	93 81       	ldd	r25, Z+3	; 0x03
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	93 83       	std	Z+3, r25	; 0x03
    4d1e:	82 83       	std	Z+2, r24	; 0x02
    4d20:	24 81       	ldd	r18, Z+4	; 0x04
    4d22:	35 81       	ldd	r19, Z+5	; 0x05
    4d24:	46 81       	ldd	r20, Z+6	; 0x06
    4d26:	57 81       	ldd	r21, Z+7	; 0x07
    4d28:	da 01       	movw	r26, r20
    4d2a:	c9 01       	movw	r24, r18
    4d2c:	01 97       	sbiw	r24, 0x01	; 1
    4d2e:	a1 09       	sbc	r26, r1
    4d30:	b1 09       	sbc	r27, r1
    4d32:	8f 5f       	subi	r24, 0xFF	; 255
    4d34:	9f 4f       	sbci	r25, 0xFF	; 255
    4d36:	af 4f       	sbci	r26, 0xFF	; 255
    4d38:	bf 43       	sbci	r27, 0x3F	; 63
    4d3a:	28 f3       	brcs	.-54     	; 0x4d06 <_fpadd_parts+0x1f4>
    4d3c:	0b c0       	rjmp	.+22     	; 0x4d54 <_fpadd_parts+0x242>
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	33 82       	std	Z+3, r3	; 0x03
    4d42:	22 82       	std	Z+2, r2	; 0x02
    4d44:	ea 0c       	add	r14, r10
    4d46:	fb 1c       	adc	r15, r11
    4d48:	0c 1d       	adc	r16, r12
    4d4a:	1d 1d       	adc	r17, r13
    4d4c:	e4 82       	std	Z+4, r14	; 0x04
    4d4e:	f5 82       	std	Z+5, r15	; 0x05
    4d50:	06 83       	std	Z+6, r16	; 0x06
    4d52:	17 83       	std	Z+7, r17	; 0x07
    4d54:	83 e0       	ldi	r24, 0x03	; 3
    4d56:	80 83       	st	Z, r24
    4d58:	24 81       	ldd	r18, Z+4	; 0x04
    4d5a:	35 81       	ldd	r19, Z+5	; 0x05
    4d5c:	46 81       	ldd	r20, Z+6	; 0x06
    4d5e:	57 81       	ldd	r21, Z+7	; 0x07
    4d60:	57 ff       	sbrs	r21, 7
    4d62:	1a c0       	rjmp	.+52     	; 0x4d98 <_fpadd_parts+0x286>
    4d64:	c9 01       	movw	r24, r18
    4d66:	aa 27       	eor	r26, r26
    4d68:	97 fd       	sbrc	r25, 7
    4d6a:	a0 95       	com	r26
    4d6c:	ba 2f       	mov	r27, r26
    4d6e:	81 70       	andi	r24, 0x01	; 1
    4d70:	90 70       	andi	r25, 0x00	; 0
    4d72:	a0 70       	andi	r26, 0x00	; 0
    4d74:	b0 70       	andi	r27, 0x00	; 0
    4d76:	56 95       	lsr	r21
    4d78:	47 95       	ror	r20
    4d7a:	37 95       	ror	r19
    4d7c:	27 95       	ror	r18
    4d7e:	82 2b       	or	r24, r18
    4d80:	93 2b       	or	r25, r19
    4d82:	a4 2b       	or	r26, r20
    4d84:	b5 2b       	or	r27, r21
    4d86:	84 83       	std	Z+4, r24	; 0x04
    4d88:	95 83       	std	Z+5, r25	; 0x05
    4d8a:	a6 83       	std	Z+6, r26	; 0x06
    4d8c:	b7 83       	std	Z+7, r27	; 0x07
    4d8e:	82 81       	ldd	r24, Z+2	; 0x02
    4d90:	93 81       	ldd	r25, Z+3	; 0x03
    4d92:	01 96       	adiw	r24, 0x01	; 1
    4d94:	93 83       	std	Z+3, r25	; 0x03
    4d96:	82 83       	std	Z+2, r24	; 0x02
    4d98:	df 01       	movw	r26, r30
    4d9a:	01 c0       	rjmp	.+2      	; 0x4d9e <_fpadd_parts+0x28c>
    4d9c:	d2 01       	movw	r26, r4
    4d9e:	cd 01       	movw	r24, r26
    4da0:	cd b7       	in	r28, 0x3d	; 61
    4da2:	de b7       	in	r29, 0x3e	; 62
    4da4:	e2 e1       	ldi	r30, 0x12	; 18
    4da6:	0c 94 43 2b 	jmp	0x5686	; 0x5686 <__epilogue_restores__>

00004daa <__subsf3>:
    4daa:	a0 e2       	ldi	r26, 0x20	; 32
    4dac:	b0 e0       	ldi	r27, 0x00	; 0
    4dae:	eb ed       	ldi	r30, 0xDB	; 219
    4db0:	f6 e2       	ldi	r31, 0x26	; 38
    4db2:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__prologue_saves__+0x18>
    4db6:	69 83       	std	Y+1, r22	; 0x01
    4db8:	7a 83       	std	Y+2, r23	; 0x02
    4dba:	8b 83       	std	Y+3, r24	; 0x03
    4dbc:	9c 83       	std	Y+4, r25	; 0x04
    4dbe:	2d 83       	std	Y+5, r18	; 0x05
    4dc0:	3e 83       	std	Y+6, r19	; 0x06
    4dc2:	4f 83       	std	Y+7, r20	; 0x07
    4dc4:	58 87       	std	Y+8, r21	; 0x08
    4dc6:	e9 e0       	ldi	r30, 0x09	; 9
    4dc8:	ee 2e       	mov	r14, r30
    4dca:	f1 2c       	mov	r15, r1
    4dcc:	ec 0e       	add	r14, r28
    4dce:	fd 1e       	adc	r15, r29
    4dd0:	ce 01       	movw	r24, r28
    4dd2:	01 96       	adiw	r24, 0x01	; 1
    4dd4:	b7 01       	movw	r22, r14
    4dd6:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    4dda:	8e 01       	movw	r16, r28
    4ddc:	0f 5e       	subi	r16, 0xEF	; 239
    4dde:	1f 4f       	sbci	r17, 0xFF	; 255
    4de0:	ce 01       	movw	r24, r28
    4de2:	05 96       	adiw	r24, 0x05	; 5
    4de4:	b8 01       	movw	r22, r16
    4de6:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    4dea:	8a 89       	ldd	r24, Y+18	; 0x12
    4dec:	91 e0       	ldi	r25, 0x01	; 1
    4dee:	89 27       	eor	r24, r25
    4df0:	8a 8b       	std	Y+18, r24	; 0x12
    4df2:	c7 01       	movw	r24, r14
    4df4:	b8 01       	movw	r22, r16
    4df6:	ae 01       	movw	r20, r28
    4df8:	47 5e       	subi	r20, 0xE7	; 231
    4dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfc:	0e 94 89 25 	call	0x4b12	; 0x4b12 <_fpadd_parts>
    4e00:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__pack_f>
    4e04:	a0 96       	adiw	r28, 0x20	; 32
    4e06:	e6 e0       	ldi	r30, 0x06	; 6
    4e08:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <__epilogue_restores__+0x18>

00004e0c <__addsf3>:
    4e0c:	a0 e2       	ldi	r26, 0x20	; 32
    4e0e:	b0 e0       	ldi	r27, 0x00	; 0
    4e10:	ec e0       	ldi	r30, 0x0C	; 12
    4e12:	f7 e2       	ldi	r31, 0x27	; 39
    4e14:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__prologue_saves__+0x18>
    4e18:	69 83       	std	Y+1, r22	; 0x01
    4e1a:	7a 83       	std	Y+2, r23	; 0x02
    4e1c:	8b 83       	std	Y+3, r24	; 0x03
    4e1e:	9c 83       	std	Y+4, r25	; 0x04
    4e20:	2d 83       	std	Y+5, r18	; 0x05
    4e22:	3e 83       	std	Y+6, r19	; 0x06
    4e24:	4f 83       	std	Y+7, r20	; 0x07
    4e26:	58 87       	std	Y+8, r21	; 0x08
    4e28:	f9 e0       	ldi	r31, 0x09	; 9
    4e2a:	ef 2e       	mov	r14, r31
    4e2c:	f1 2c       	mov	r15, r1
    4e2e:	ec 0e       	add	r14, r28
    4e30:	fd 1e       	adc	r15, r29
    4e32:	ce 01       	movw	r24, r28
    4e34:	01 96       	adiw	r24, 0x01	; 1
    4e36:	b7 01       	movw	r22, r14
    4e38:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    4e3c:	8e 01       	movw	r16, r28
    4e3e:	0f 5e       	subi	r16, 0xEF	; 239
    4e40:	1f 4f       	sbci	r17, 0xFF	; 255
    4e42:	ce 01       	movw	r24, r28
    4e44:	05 96       	adiw	r24, 0x05	; 5
    4e46:	b8 01       	movw	r22, r16
    4e48:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    4e4c:	c7 01       	movw	r24, r14
    4e4e:	b8 01       	movw	r22, r16
    4e50:	ae 01       	movw	r20, r28
    4e52:	47 5e       	subi	r20, 0xE7	; 231
    4e54:	5f 4f       	sbci	r21, 0xFF	; 255
    4e56:	0e 94 89 25 	call	0x4b12	; 0x4b12 <_fpadd_parts>
    4e5a:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__pack_f>
    4e5e:	a0 96       	adiw	r28, 0x20	; 32
    4e60:	e6 e0       	ldi	r30, 0x06	; 6
    4e62:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <__epilogue_restores__+0x18>

00004e66 <__mulsf3>:
    4e66:	a0 e2       	ldi	r26, 0x20	; 32
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	e9 e3       	ldi	r30, 0x39	; 57
    4e6c:	f7 e2       	ldi	r31, 0x27	; 39
    4e6e:	0c 94 27 2b 	jmp	0x564e	; 0x564e <__prologue_saves__>
    4e72:	69 83       	std	Y+1, r22	; 0x01
    4e74:	7a 83       	std	Y+2, r23	; 0x02
    4e76:	8b 83       	std	Y+3, r24	; 0x03
    4e78:	9c 83       	std	Y+4, r25	; 0x04
    4e7a:	2d 83       	std	Y+5, r18	; 0x05
    4e7c:	3e 83       	std	Y+6, r19	; 0x06
    4e7e:	4f 83       	std	Y+7, r20	; 0x07
    4e80:	58 87       	std	Y+8, r21	; 0x08
    4e82:	ce 01       	movw	r24, r28
    4e84:	01 96       	adiw	r24, 0x01	; 1
    4e86:	be 01       	movw	r22, r28
    4e88:	67 5f       	subi	r22, 0xF7	; 247
    4e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8c:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    4e90:	ce 01       	movw	r24, r28
    4e92:	05 96       	adiw	r24, 0x05	; 5
    4e94:	be 01       	movw	r22, r28
    4e96:	6f 5e       	subi	r22, 0xEF	; 239
    4e98:	7f 4f       	sbci	r23, 0xFF	; 255
    4e9a:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    4e9e:	99 85       	ldd	r25, Y+9	; 0x09
    4ea0:	92 30       	cpi	r25, 0x02	; 2
    4ea2:	88 f0       	brcs	.+34     	; 0x4ec6 <__mulsf3+0x60>
    4ea4:	89 89       	ldd	r24, Y+17	; 0x11
    4ea6:	82 30       	cpi	r24, 0x02	; 2
    4ea8:	c8 f0       	brcs	.+50     	; 0x4edc <__mulsf3+0x76>
    4eaa:	94 30       	cpi	r25, 0x04	; 4
    4eac:	19 f4       	brne	.+6      	; 0x4eb4 <__mulsf3+0x4e>
    4eae:	82 30       	cpi	r24, 0x02	; 2
    4eb0:	51 f4       	brne	.+20     	; 0x4ec6 <__mulsf3+0x60>
    4eb2:	04 c0       	rjmp	.+8      	; 0x4ebc <__mulsf3+0x56>
    4eb4:	84 30       	cpi	r24, 0x04	; 4
    4eb6:	29 f4       	brne	.+10     	; 0x4ec2 <__mulsf3+0x5c>
    4eb8:	92 30       	cpi	r25, 0x02	; 2
    4eba:	81 f4       	brne	.+32     	; 0x4edc <__mulsf3+0x76>
    4ebc:	87 e0       	ldi	r24, 0x07	; 7
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	c6 c0       	rjmp	.+396    	; 0x504e <__mulsf3+0x1e8>
    4ec2:	92 30       	cpi	r25, 0x02	; 2
    4ec4:	49 f4       	brne	.+18     	; 0x4ed8 <__mulsf3+0x72>
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eca:	8a 89       	ldd	r24, Y+18	; 0x12
    4ecc:	98 13       	cpse	r25, r24
    4ece:	21 e0       	ldi	r18, 0x01	; 1
    4ed0:	2a 87       	std	Y+10, r18	; 0x0a
    4ed2:	ce 01       	movw	r24, r28
    4ed4:	09 96       	adiw	r24, 0x09	; 9
    4ed6:	bb c0       	rjmp	.+374    	; 0x504e <__mulsf3+0x1e8>
    4ed8:	82 30       	cpi	r24, 0x02	; 2
    4eda:	49 f4       	brne	.+18     	; 0x4eee <__mulsf3+0x88>
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ee0:	8a 89       	ldd	r24, Y+18	; 0x12
    4ee2:	98 13       	cpse	r25, r24
    4ee4:	21 e0       	ldi	r18, 0x01	; 1
    4ee6:	2a 8b       	std	Y+18, r18	; 0x12
    4ee8:	ce 01       	movw	r24, r28
    4eea:	41 96       	adiw	r24, 0x11	; 17
    4eec:	b0 c0       	rjmp	.+352    	; 0x504e <__mulsf3+0x1e8>
    4eee:	2d 84       	ldd	r2, Y+13	; 0x0d
    4ef0:	3e 84       	ldd	r3, Y+14	; 0x0e
    4ef2:	4f 84       	ldd	r4, Y+15	; 0x0f
    4ef4:	58 88       	ldd	r5, Y+16	; 0x10
    4ef6:	6d 88       	ldd	r6, Y+21	; 0x15
    4ef8:	7e 88       	ldd	r7, Y+22	; 0x16
    4efa:	8f 88       	ldd	r8, Y+23	; 0x17
    4efc:	98 8c       	ldd	r9, Y+24	; 0x18
    4efe:	ee 24       	eor	r14, r14
    4f00:	ff 24       	eor	r15, r15
    4f02:	87 01       	movw	r16, r14
    4f04:	aa 24       	eor	r10, r10
    4f06:	bb 24       	eor	r11, r11
    4f08:	65 01       	movw	r12, r10
    4f0a:	40 e0       	ldi	r20, 0x00	; 0
    4f0c:	50 e0       	ldi	r21, 0x00	; 0
    4f0e:	60 e0       	ldi	r22, 0x00	; 0
    4f10:	70 e0       	ldi	r23, 0x00	; 0
    4f12:	e0 e0       	ldi	r30, 0x00	; 0
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	c1 01       	movw	r24, r2
    4f18:	81 70       	andi	r24, 0x01	; 1
    4f1a:	90 70       	andi	r25, 0x00	; 0
    4f1c:	89 2b       	or	r24, r25
    4f1e:	e9 f0       	breq	.+58     	; 0x4f5a <__mulsf3+0xf4>
    4f20:	e6 0c       	add	r14, r6
    4f22:	f7 1c       	adc	r15, r7
    4f24:	08 1d       	adc	r16, r8
    4f26:	19 1d       	adc	r17, r9
    4f28:	9a 01       	movw	r18, r20
    4f2a:	ab 01       	movw	r20, r22
    4f2c:	2a 0d       	add	r18, r10
    4f2e:	3b 1d       	adc	r19, r11
    4f30:	4c 1d       	adc	r20, r12
    4f32:	5d 1d       	adc	r21, r13
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	a0 e0       	ldi	r26, 0x00	; 0
    4f3a:	b0 e0       	ldi	r27, 0x00	; 0
    4f3c:	e6 14       	cp	r14, r6
    4f3e:	f7 04       	cpc	r15, r7
    4f40:	08 05       	cpc	r16, r8
    4f42:	19 05       	cpc	r17, r9
    4f44:	20 f4       	brcc	.+8      	; 0x4f4e <__mulsf3+0xe8>
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	a0 e0       	ldi	r26, 0x00	; 0
    4f4c:	b0 e0       	ldi	r27, 0x00	; 0
    4f4e:	ba 01       	movw	r22, r20
    4f50:	a9 01       	movw	r20, r18
    4f52:	48 0f       	add	r20, r24
    4f54:	59 1f       	adc	r21, r25
    4f56:	6a 1f       	adc	r22, r26
    4f58:	7b 1f       	adc	r23, r27
    4f5a:	aa 0c       	add	r10, r10
    4f5c:	bb 1c       	adc	r11, r11
    4f5e:	cc 1c       	adc	r12, r12
    4f60:	dd 1c       	adc	r13, r13
    4f62:	97 fe       	sbrs	r9, 7
    4f64:	08 c0       	rjmp	.+16     	; 0x4f76 <__mulsf3+0x110>
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	a0 e0       	ldi	r26, 0x00	; 0
    4f6c:	b0 e0       	ldi	r27, 0x00	; 0
    4f6e:	a8 2a       	or	r10, r24
    4f70:	b9 2a       	or	r11, r25
    4f72:	ca 2a       	or	r12, r26
    4f74:	db 2a       	or	r13, r27
    4f76:	31 96       	adiw	r30, 0x01	; 1
    4f78:	e0 32       	cpi	r30, 0x20	; 32
    4f7a:	f1 05       	cpc	r31, r1
    4f7c:	49 f0       	breq	.+18     	; 0x4f90 <__mulsf3+0x12a>
    4f7e:	66 0c       	add	r6, r6
    4f80:	77 1c       	adc	r7, r7
    4f82:	88 1c       	adc	r8, r8
    4f84:	99 1c       	adc	r9, r9
    4f86:	56 94       	lsr	r5
    4f88:	47 94       	ror	r4
    4f8a:	37 94       	ror	r3
    4f8c:	27 94       	ror	r2
    4f8e:	c3 cf       	rjmp	.-122    	; 0x4f16 <__mulsf3+0xb0>
    4f90:	fa 85       	ldd	r31, Y+10	; 0x0a
    4f92:	ea 89       	ldd	r30, Y+18	; 0x12
    4f94:	2b 89       	ldd	r18, Y+19	; 0x13
    4f96:	3c 89       	ldd	r19, Y+20	; 0x14
    4f98:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f9c:	28 0f       	add	r18, r24
    4f9e:	39 1f       	adc	r19, r25
    4fa0:	2e 5f       	subi	r18, 0xFE	; 254
    4fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa4:	17 c0       	rjmp	.+46     	; 0x4fd4 <__mulsf3+0x16e>
    4fa6:	ca 01       	movw	r24, r20
    4fa8:	81 70       	andi	r24, 0x01	; 1
    4faa:	90 70       	andi	r25, 0x00	; 0
    4fac:	89 2b       	or	r24, r25
    4fae:	61 f0       	breq	.+24     	; 0x4fc8 <__mulsf3+0x162>
    4fb0:	16 95       	lsr	r17
    4fb2:	07 95       	ror	r16
    4fb4:	f7 94       	ror	r15
    4fb6:	e7 94       	ror	r14
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	a0 e0       	ldi	r26, 0x00	; 0
    4fbe:	b0 e8       	ldi	r27, 0x80	; 128
    4fc0:	e8 2a       	or	r14, r24
    4fc2:	f9 2a       	or	r15, r25
    4fc4:	0a 2b       	or	r16, r26
    4fc6:	1b 2b       	or	r17, r27
    4fc8:	76 95       	lsr	r23
    4fca:	67 95       	ror	r22
    4fcc:	57 95       	ror	r21
    4fce:	47 95       	ror	r20
    4fd0:	2f 5f       	subi	r18, 0xFF	; 255
    4fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fd4:	77 fd       	sbrc	r23, 7
    4fd6:	e7 cf       	rjmp	.-50     	; 0x4fa6 <__mulsf3+0x140>
    4fd8:	0c c0       	rjmp	.+24     	; 0x4ff2 <__mulsf3+0x18c>
    4fda:	44 0f       	add	r20, r20
    4fdc:	55 1f       	adc	r21, r21
    4fde:	66 1f       	adc	r22, r22
    4fe0:	77 1f       	adc	r23, r23
    4fe2:	17 fd       	sbrc	r17, 7
    4fe4:	41 60       	ori	r20, 0x01	; 1
    4fe6:	ee 0c       	add	r14, r14
    4fe8:	ff 1c       	adc	r15, r15
    4fea:	00 1f       	adc	r16, r16
    4fec:	11 1f       	adc	r17, r17
    4fee:	21 50       	subi	r18, 0x01	; 1
    4ff0:	30 40       	sbci	r19, 0x00	; 0
    4ff2:	40 30       	cpi	r20, 0x00	; 0
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	59 07       	cpc	r21, r25
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	69 07       	cpc	r22, r25
    4ffc:	90 e4       	ldi	r25, 0x40	; 64
    4ffe:	79 07       	cpc	r23, r25
    5000:	60 f3       	brcs	.-40     	; 0x4fda <__mulsf3+0x174>
    5002:	2b 8f       	std	Y+27, r18	; 0x1b
    5004:	3c 8f       	std	Y+28, r19	; 0x1c
    5006:	db 01       	movw	r26, r22
    5008:	ca 01       	movw	r24, r20
    500a:	8f 77       	andi	r24, 0x7F	; 127
    500c:	90 70       	andi	r25, 0x00	; 0
    500e:	a0 70       	andi	r26, 0x00	; 0
    5010:	b0 70       	andi	r27, 0x00	; 0
    5012:	80 34       	cpi	r24, 0x40	; 64
    5014:	91 05       	cpc	r25, r1
    5016:	a1 05       	cpc	r26, r1
    5018:	b1 05       	cpc	r27, r1
    501a:	61 f4       	brne	.+24     	; 0x5034 <__mulsf3+0x1ce>
    501c:	47 fd       	sbrc	r20, 7
    501e:	0a c0       	rjmp	.+20     	; 0x5034 <__mulsf3+0x1ce>
    5020:	e1 14       	cp	r14, r1
    5022:	f1 04       	cpc	r15, r1
    5024:	01 05       	cpc	r16, r1
    5026:	11 05       	cpc	r17, r1
    5028:	29 f0       	breq	.+10     	; 0x5034 <__mulsf3+0x1ce>
    502a:	40 5c       	subi	r20, 0xC0	; 192
    502c:	5f 4f       	sbci	r21, 0xFF	; 255
    502e:	6f 4f       	sbci	r22, 0xFF	; 255
    5030:	7f 4f       	sbci	r23, 0xFF	; 255
    5032:	40 78       	andi	r20, 0x80	; 128
    5034:	1a 8e       	std	Y+26, r1	; 0x1a
    5036:	fe 17       	cp	r31, r30
    5038:	11 f0       	breq	.+4      	; 0x503e <__mulsf3+0x1d8>
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	8a 8f       	std	Y+26, r24	; 0x1a
    503e:	4d 8f       	std	Y+29, r20	; 0x1d
    5040:	5e 8f       	std	Y+30, r21	; 0x1e
    5042:	6f 8f       	std	Y+31, r22	; 0x1f
    5044:	78 a3       	std	Y+32, r23	; 0x20
    5046:	83 e0       	ldi	r24, 0x03	; 3
    5048:	89 8f       	std	Y+25, r24	; 0x19
    504a:	ce 01       	movw	r24, r28
    504c:	49 96       	adiw	r24, 0x19	; 25
    504e:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__pack_f>
    5052:	a0 96       	adiw	r28, 0x20	; 32
    5054:	e2 e1       	ldi	r30, 0x12	; 18
    5056:	0c 94 43 2b 	jmp	0x5686	; 0x5686 <__epilogue_restores__>

0000505a <__divsf3>:
    505a:	a8 e1       	ldi	r26, 0x18	; 24
    505c:	b0 e0       	ldi	r27, 0x00	; 0
    505e:	e3 e3       	ldi	r30, 0x33	; 51
    5060:	f8 e2       	ldi	r31, 0x28	; 40
    5062:	0c 94 2f 2b 	jmp	0x565e	; 0x565e <__prologue_saves__+0x10>
    5066:	69 83       	std	Y+1, r22	; 0x01
    5068:	7a 83       	std	Y+2, r23	; 0x02
    506a:	8b 83       	std	Y+3, r24	; 0x03
    506c:	9c 83       	std	Y+4, r25	; 0x04
    506e:	2d 83       	std	Y+5, r18	; 0x05
    5070:	3e 83       	std	Y+6, r19	; 0x06
    5072:	4f 83       	std	Y+7, r20	; 0x07
    5074:	58 87       	std	Y+8, r21	; 0x08
    5076:	b9 e0       	ldi	r27, 0x09	; 9
    5078:	eb 2e       	mov	r14, r27
    507a:	f1 2c       	mov	r15, r1
    507c:	ec 0e       	add	r14, r28
    507e:	fd 1e       	adc	r15, r29
    5080:	ce 01       	movw	r24, r28
    5082:	01 96       	adiw	r24, 0x01	; 1
    5084:	b7 01       	movw	r22, r14
    5086:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    508a:	8e 01       	movw	r16, r28
    508c:	0f 5e       	subi	r16, 0xEF	; 239
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	ce 01       	movw	r24, r28
    5092:	05 96       	adiw	r24, 0x05	; 5
    5094:	b8 01       	movw	r22, r16
    5096:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    509a:	29 85       	ldd	r18, Y+9	; 0x09
    509c:	22 30       	cpi	r18, 0x02	; 2
    509e:	08 f4       	brcc	.+2      	; 0x50a2 <__divsf3+0x48>
    50a0:	7e c0       	rjmp	.+252    	; 0x519e <__divsf3+0x144>
    50a2:	39 89       	ldd	r19, Y+17	; 0x11
    50a4:	32 30       	cpi	r19, 0x02	; 2
    50a6:	10 f4       	brcc	.+4      	; 0x50ac <__divsf3+0x52>
    50a8:	b8 01       	movw	r22, r16
    50aa:	7c c0       	rjmp	.+248    	; 0x51a4 <__divsf3+0x14a>
    50ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    50ae:	9a 89       	ldd	r25, Y+18	; 0x12
    50b0:	89 27       	eor	r24, r25
    50b2:	8a 87       	std	Y+10, r24	; 0x0a
    50b4:	24 30       	cpi	r18, 0x04	; 4
    50b6:	11 f0       	breq	.+4      	; 0x50bc <__divsf3+0x62>
    50b8:	22 30       	cpi	r18, 0x02	; 2
    50ba:	31 f4       	brne	.+12     	; 0x50c8 <__divsf3+0x6e>
    50bc:	23 17       	cp	r18, r19
    50be:	09 f0       	breq	.+2      	; 0x50c2 <__divsf3+0x68>
    50c0:	6e c0       	rjmp	.+220    	; 0x519e <__divsf3+0x144>
    50c2:	67 e0       	ldi	r22, 0x07	; 7
    50c4:	71 e0       	ldi	r23, 0x01	; 1
    50c6:	6e c0       	rjmp	.+220    	; 0x51a4 <__divsf3+0x14a>
    50c8:	34 30       	cpi	r19, 0x04	; 4
    50ca:	39 f4       	brne	.+14     	; 0x50da <__divsf3+0x80>
    50cc:	1d 86       	std	Y+13, r1	; 0x0d
    50ce:	1e 86       	std	Y+14, r1	; 0x0e
    50d0:	1f 86       	std	Y+15, r1	; 0x0f
    50d2:	18 8a       	std	Y+16, r1	; 0x10
    50d4:	1c 86       	std	Y+12, r1	; 0x0c
    50d6:	1b 86       	std	Y+11, r1	; 0x0b
    50d8:	04 c0       	rjmp	.+8      	; 0x50e2 <__divsf3+0x88>
    50da:	32 30       	cpi	r19, 0x02	; 2
    50dc:	21 f4       	brne	.+8      	; 0x50e6 <__divsf3+0x8c>
    50de:	84 e0       	ldi	r24, 0x04	; 4
    50e0:	89 87       	std	Y+9, r24	; 0x09
    50e2:	b7 01       	movw	r22, r14
    50e4:	5f c0       	rjmp	.+190    	; 0x51a4 <__divsf3+0x14a>
    50e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    50e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    50ea:	8b 89       	ldd	r24, Y+19	; 0x13
    50ec:	9c 89       	ldd	r25, Y+20	; 0x14
    50ee:	28 1b       	sub	r18, r24
    50f0:	39 0b       	sbc	r19, r25
    50f2:	3c 87       	std	Y+12, r19	; 0x0c
    50f4:	2b 87       	std	Y+11, r18	; 0x0b
    50f6:	ed 84       	ldd	r14, Y+13	; 0x0d
    50f8:	fe 84       	ldd	r15, Y+14	; 0x0e
    50fa:	0f 85       	ldd	r16, Y+15	; 0x0f
    50fc:	18 89       	ldd	r17, Y+16	; 0x10
    50fe:	ad 88       	ldd	r10, Y+21	; 0x15
    5100:	be 88       	ldd	r11, Y+22	; 0x16
    5102:	cf 88       	ldd	r12, Y+23	; 0x17
    5104:	d8 8c       	ldd	r13, Y+24	; 0x18
    5106:	ea 14       	cp	r14, r10
    5108:	fb 04       	cpc	r15, r11
    510a:	0c 05       	cpc	r16, r12
    510c:	1d 05       	cpc	r17, r13
    510e:	40 f4       	brcc	.+16     	; 0x5120 <__divsf3+0xc6>
    5110:	ee 0c       	add	r14, r14
    5112:	ff 1c       	adc	r15, r15
    5114:	00 1f       	adc	r16, r16
    5116:	11 1f       	adc	r17, r17
    5118:	21 50       	subi	r18, 0x01	; 1
    511a:	30 40       	sbci	r19, 0x00	; 0
    511c:	3c 87       	std	Y+12, r19	; 0x0c
    511e:	2b 87       	std	Y+11, r18	; 0x0b
    5120:	20 e0       	ldi	r18, 0x00	; 0
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	80 e0       	ldi	r24, 0x00	; 0
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	a0 e0       	ldi	r26, 0x00	; 0
    512e:	b0 e4       	ldi	r27, 0x40	; 64
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	70 e0       	ldi	r23, 0x00	; 0
    5134:	ea 14       	cp	r14, r10
    5136:	fb 04       	cpc	r15, r11
    5138:	0c 05       	cpc	r16, r12
    513a:	1d 05       	cpc	r17, r13
    513c:	40 f0       	brcs	.+16     	; 0x514e <__divsf3+0xf4>
    513e:	28 2b       	or	r18, r24
    5140:	39 2b       	or	r19, r25
    5142:	4a 2b       	or	r20, r26
    5144:	5b 2b       	or	r21, r27
    5146:	ea 18       	sub	r14, r10
    5148:	fb 08       	sbc	r15, r11
    514a:	0c 09       	sbc	r16, r12
    514c:	1d 09       	sbc	r17, r13
    514e:	b6 95       	lsr	r27
    5150:	a7 95       	ror	r26
    5152:	97 95       	ror	r25
    5154:	87 95       	ror	r24
    5156:	ee 0c       	add	r14, r14
    5158:	ff 1c       	adc	r15, r15
    515a:	00 1f       	adc	r16, r16
    515c:	11 1f       	adc	r17, r17
    515e:	6f 5f       	subi	r22, 0xFF	; 255
    5160:	7f 4f       	sbci	r23, 0xFF	; 255
    5162:	6f 31       	cpi	r22, 0x1F	; 31
    5164:	71 05       	cpc	r23, r1
    5166:	31 f7       	brne	.-52     	; 0x5134 <__divsf3+0xda>
    5168:	da 01       	movw	r26, r20
    516a:	c9 01       	movw	r24, r18
    516c:	8f 77       	andi	r24, 0x7F	; 127
    516e:	90 70       	andi	r25, 0x00	; 0
    5170:	a0 70       	andi	r26, 0x00	; 0
    5172:	b0 70       	andi	r27, 0x00	; 0
    5174:	80 34       	cpi	r24, 0x40	; 64
    5176:	91 05       	cpc	r25, r1
    5178:	a1 05       	cpc	r26, r1
    517a:	b1 05       	cpc	r27, r1
    517c:	61 f4       	brne	.+24     	; 0x5196 <__divsf3+0x13c>
    517e:	27 fd       	sbrc	r18, 7
    5180:	0a c0       	rjmp	.+20     	; 0x5196 <__divsf3+0x13c>
    5182:	e1 14       	cp	r14, r1
    5184:	f1 04       	cpc	r15, r1
    5186:	01 05       	cpc	r16, r1
    5188:	11 05       	cpc	r17, r1
    518a:	29 f0       	breq	.+10     	; 0x5196 <__divsf3+0x13c>
    518c:	20 5c       	subi	r18, 0xC0	; 192
    518e:	3f 4f       	sbci	r19, 0xFF	; 255
    5190:	4f 4f       	sbci	r20, 0xFF	; 255
    5192:	5f 4f       	sbci	r21, 0xFF	; 255
    5194:	20 78       	andi	r18, 0x80	; 128
    5196:	2d 87       	std	Y+13, r18	; 0x0d
    5198:	3e 87       	std	Y+14, r19	; 0x0e
    519a:	4f 87       	std	Y+15, r20	; 0x0f
    519c:	58 8b       	std	Y+16, r21	; 0x10
    519e:	be 01       	movw	r22, r28
    51a0:	67 5f       	subi	r22, 0xF7	; 247
    51a2:	7f 4f       	sbci	r23, 0xFF	; 255
    51a4:	cb 01       	movw	r24, r22
    51a6:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__pack_f>
    51aa:	68 96       	adiw	r28, 0x18	; 24
    51ac:	ea e0       	ldi	r30, 0x0A	; 10
    51ae:	0c 94 4b 2b 	jmp	0x5696	; 0x5696 <__epilogue_restores__+0x10>

000051b2 <__floatsisf>:
    51b2:	a8 e0       	ldi	r26, 0x08	; 8
    51b4:	b0 e0       	ldi	r27, 0x00	; 0
    51b6:	ef ed       	ldi	r30, 0xDF	; 223
    51b8:	f8 e2       	ldi	r31, 0x28	; 40
    51ba:	0c 94 30 2b 	jmp	0x5660	; 0x5660 <__prologue_saves__+0x12>
    51be:	9b 01       	movw	r18, r22
    51c0:	ac 01       	movw	r20, r24
    51c2:	83 e0       	ldi	r24, 0x03	; 3
    51c4:	89 83       	std	Y+1, r24	; 0x01
    51c6:	da 01       	movw	r26, r20
    51c8:	c9 01       	movw	r24, r18
    51ca:	88 27       	eor	r24, r24
    51cc:	b7 fd       	sbrc	r27, 7
    51ce:	83 95       	inc	r24
    51d0:	99 27       	eor	r25, r25
    51d2:	aa 27       	eor	r26, r26
    51d4:	bb 27       	eor	r27, r27
    51d6:	b8 2e       	mov	r11, r24
    51d8:	21 15       	cp	r18, r1
    51da:	31 05       	cpc	r19, r1
    51dc:	41 05       	cpc	r20, r1
    51de:	51 05       	cpc	r21, r1
    51e0:	19 f4       	brne	.+6      	; 0x51e8 <__floatsisf+0x36>
    51e2:	82 e0       	ldi	r24, 0x02	; 2
    51e4:	89 83       	std	Y+1, r24	; 0x01
    51e6:	3a c0       	rjmp	.+116    	; 0x525c <__floatsisf+0xaa>
    51e8:	88 23       	and	r24, r24
    51ea:	a9 f0       	breq	.+42     	; 0x5216 <__floatsisf+0x64>
    51ec:	20 30       	cpi	r18, 0x00	; 0
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	38 07       	cpc	r19, r24
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	48 07       	cpc	r20, r24
    51f6:	80 e8       	ldi	r24, 0x80	; 128
    51f8:	58 07       	cpc	r21, r24
    51fa:	29 f4       	brne	.+10     	; 0x5206 <__floatsisf+0x54>
    51fc:	60 e0       	ldi	r22, 0x00	; 0
    51fe:	70 e0       	ldi	r23, 0x00	; 0
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	9f ec       	ldi	r25, 0xCF	; 207
    5204:	30 c0       	rjmp	.+96     	; 0x5266 <__floatsisf+0xb4>
    5206:	ee 24       	eor	r14, r14
    5208:	ff 24       	eor	r15, r15
    520a:	87 01       	movw	r16, r14
    520c:	e2 1a       	sub	r14, r18
    520e:	f3 0a       	sbc	r15, r19
    5210:	04 0b       	sbc	r16, r20
    5212:	15 0b       	sbc	r17, r21
    5214:	02 c0       	rjmp	.+4      	; 0x521a <__floatsisf+0x68>
    5216:	79 01       	movw	r14, r18
    5218:	8a 01       	movw	r16, r20
    521a:	8e e1       	ldi	r24, 0x1E	; 30
    521c:	c8 2e       	mov	r12, r24
    521e:	d1 2c       	mov	r13, r1
    5220:	dc 82       	std	Y+4, r13	; 0x04
    5222:	cb 82       	std	Y+3, r12	; 0x03
    5224:	ed 82       	std	Y+5, r14	; 0x05
    5226:	fe 82       	std	Y+6, r15	; 0x06
    5228:	0f 83       	std	Y+7, r16	; 0x07
    522a:	18 87       	std	Y+8, r17	; 0x08
    522c:	c8 01       	movw	r24, r16
    522e:	b7 01       	movw	r22, r14
    5230:	0e 94 8b 29 	call	0x5316	; 0x5316 <__clzsi2>
    5234:	01 97       	sbiw	r24, 0x01	; 1
    5236:	18 16       	cp	r1, r24
    5238:	19 06       	cpc	r1, r25
    523a:	84 f4       	brge	.+32     	; 0x525c <__floatsisf+0xaa>
    523c:	08 2e       	mov	r0, r24
    523e:	04 c0       	rjmp	.+8      	; 0x5248 <__floatsisf+0x96>
    5240:	ee 0c       	add	r14, r14
    5242:	ff 1c       	adc	r15, r15
    5244:	00 1f       	adc	r16, r16
    5246:	11 1f       	adc	r17, r17
    5248:	0a 94       	dec	r0
    524a:	d2 f7       	brpl	.-12     	; 0x5240 <__floatsisf+0x8e>
    524c:	ed 82       	std	Y+5, r14	; 0x05
    524e:	fe 82       	std	Y+6, r15	; 0x06
    5250:	0f 83       	std	Y+7, r16	; 0x07
    5252:	18 87       	std	Y+8, r17	; 0x08
    5254:	c8 1a       	sub	r12, r24
    5256:	d9 0a       	sbc	r13, r25
    5258:	dc 82       	std	Y+4, r13	; 0x04
    525a:	cb 82       	std	Y+3, r12	; 0x03
    525c:	ba 82       	std	Y+2, r11	; 0x02
    525e:	ce 01       	movw	r24, r28
    5260:	01 96       	adiw	r24, 0x01	; 1
    5262:	0e 94 da 29 	call	0x53b4	; 0x53b4 <__pack_f>
    5266:	28 96       	adiw	r28, 0x08	; 8
    5268:	e9 e0       	ldi	r30, 0x09	; 9
    526a:	0c 94 4c 2b 	jmp	0x5698	; 0x5698 <__epilogue_restores__+0x12>

0000526e <__fixsfsi>:
    526e:	ac e0       	ldi	r26, 0x0C	; 12
    5270:	b0 e0       	ldi	r27, 0x00	; 0
    5272:	ed e3       	ldi	r30, 0x3D	; 61
    5274:	f9 e2       	ldi	r31, 0x29	; 41
    5276:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__prologue_saves__+0x20>
    527a:	69 83       	std	Y+1, r22	; 0x01
    527c:	7a 83       	std	Y+2, r23	; 0x02
    527e:	8b 83       	std	Y+3, r24	; 0x03
    5280:	9c 83       	std	Y+4, r25	; 0x04
    5282:	ce 01       	movw	r24, r28
    5284:	01 96       	adiw	r24, 0x01	; 1
    5286:	be 01       	movw	r22, r28
    5288:	6b 5f       	subi	r22, 0xFB	; 251
    528a:	7f 4f       	sbci	r23, 0xFF	; 255
    528c:	0e 94 af 2a 	call	0x555e	; 0x555e <__unpack_f>
    5290:	8d 81       	ldd	r24, Y+5	; 0x05
    5292:	82 30       	cpi	r24, 0x02	; 2
    5294:	61 f1       	breq	.+88     	; 0x52ee <__fixsfsi+0x80>
    5296:	82 30       	cpi	r24, 0x02	; 2
    5298:	50 f1       	brcs	.+84     	; 0x52ee <__fixsfsi+0x80>
    529a:	84 30       	cpi	r24, 0x04	; 4
    529c:	21 f4       	brne	.+8      	; 0x52a6 <__fixsfsi+0x38>
    529e:	8e 81       	ldd	r24, Y+6	; 0x06
    52a0:	88 23       	and	r24, r24
    52a2:	51 f1       	breq	.+84     	; 0x52f8 <__fixsfsi+0x8a>
    52a4:	2e c0       	rjmp	.+92     	; 0x5302 <__fixsfsi+0x94>
    52a6:	2f 81       	ldd	r18, Y+7	; 0x07
    52a8:	38 85       	ldd	r19, Y+8	; 0x08
    52aa:	37 fd       	sbrc	r19, 7
    52ac:	20 c0       	rjmp	.+64     	; 0x52ee <__fixsfsi+0x80>
    52ae:	6e 81       	ldd	r22, Y+6	; 0x06
    52b0:	2f 31       	cpi	r18, 0x1F	; 31
    52b2:	31 05       	cpc	r19, r1
    52b4:	1c f0       	brlt	.+6      	; 0x52bc <__fixsfsi+0x4e>
    52b6:	66 23       	and	r22, r22
    52b8:	f9 f0       	breq	.+62     	; 0x52f8 <__fixsfsi+0x8a>
    52ba:	23 c0       	rjmp	.+70     	; 0x5302 <__fixsfsi+0x94>
    52bc:	8e e1       	ldi	r24, 0x1E	; 30
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	82 1b       	sub	r24, r18
    52c2:	93 0b       	sbc	r25, r19
    52c4:	29 85       	ldd	r18, Y+9	; 0x09
    52c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    52c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    52ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    52cc:	04 c0       	rjmp	.+8      	; 0x52d6 <__fixsfsi+0x68>
    52ce:	56 95       	lsr	r21
    52d0:	47 95       	ror	r20
    52d2:	37 95       	ror	r19
    52d4:	27 95       	ror	r18
    52d6:	8a 95       	dec	r24
    52d8:	d2 f7       	brpl	.-12     	; 0x52ce <__fixsfsi+0x60>
    52da:	66 23       	and	r22, r22
    52dc:	b1 f0       	breq	.+44     	; 0x530a <__fixsfsi+0x9c>
    52de:	50 95       	com	r21
    52e0:	40 95       	com	r20
    52e2:	30 95       	com	r19
    52e4:	21 95       	neg	r18
    52e6:	3f 4f       	sbci	r19, 0xFF	; 255
    52e8:	4f 4f       	sbci	r20, 0xFF	; 255
    52ea:	5f 4f       	sbci	r21, 0xFF	; 255
    52ec:	0e c0       	rjmp	.+28     	; 0x530a <__fixsfsi+0x9c>
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	50 e0       	ldi	r21, 0x00	; 0
    52f6:	09 c0       	rjmp	.+18     	; 0x530a <__fixsfsi+0x9c>
    52f8:	2f ef       	ldi	r18, 0xFF	; 255
    52fa:	3f ef       	ldi	r19, 0xFF	; 255
    52fc:	4f ef       	ldi	r20, 0xFF	; 255
    52fe:	5f e7       	ldi	r21, 0x7F	; 127
    5300:	04 c0       	rjmp	.+8      	; 0x530a <__fixsfsi+0x9c>
    5302:	20 e0       	ldi	r18, 0x00	; 0
    5304:	30 e0       	ldi	r19, 0x00	; 0
    5306:	40 e0       	ldi	r20, 0x00	; 0
    5308:	50 e8       	ldi	r21, 0x80	; 128
    530a:	b9 01       	movw	r22, r18
    530c:	ca 01       	movw	r24, r20
    530e:	2c 96       	adiw	r28, 0x0c	; 12
    5310:	e2 e0       	ldi	r30, 0x02	; 2
    5312:	0c 94 53 2b 	jmp	0x56a6	; 0x56a6 <__epilogue_restores__+0x20>

00005316 <__clzsi2>:
    5316:	ef 92       	push	r14
    5318:	ff 92       	push	r15
    531a:	0f 93       	push	r16
    531c:	1f 93       	push	r17
    531e:	7b 01       	movw	r14, r22
    5320:	8c 01       	movw	r16, r24
    5322:	80 e0       	ldi	r24, 0x00	; 0
    5324:	e8 16       	cp	r14, r24
    5326:	80 e0       	ldi	r24, 0x00	; 0
    5328:	f8 06       	cpc	r15, r24
    532a:	81 e0       	ldi	r24, 0x01	; 1
    532c:	08 07       	cpc	r16, r24
    532e:	80 e0       	ldi	r24, 0x00	; 0
    5330:	18 07       	cpc	r17, r24
    5332:	88 f4       	brcc	.+34     	; 0x5356 <__clzsi2+0x40>
    5334:	8f ef       	ldi	r24, 0xFF	; 255
    5336:	e8 16       	cp	r14, r24
    5338:	f1 04       	cpc	r15, r1
    533a:	01 05       	cpc	r16, r1
    533c:	11 05       	cpc	r17, r1
    533e:	31 f0       	breq	.+12     	; 0x534c <__clzsi2+0x36>
    5340:	28 f0       	brcs	.+10     	; 0x534c <__clzsi2+0x36>
    5342:	88 e0       	ldi	r24, 0x08	; 8
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	a0 e0       	ldi	r26, 0x00	; 0
    5348:	b0 e0       	ldi	r27, 0x00	; 0
    534a:	17 c0       	rjmp	.+46     	; 0x537a <__clzsi2+0x64>
    534c:	80 e0       	ldi	r24, 0x00	; 0
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	a0 e0       	ldi	r26, 0x00	; 0
    5352:	b0 e0       	ldi	r27, 0x00	; 0
    5354:	12 c0       	rjmp	.+36     	; 0x537a <__clzsi2+0x64>
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	e8 16       	cp	r14, r24
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	f8 06       	cpc	r15, r24
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	08 07       	cpc	r16, r24
    5362:	81 e0       	ldi	r24, 0x01	; 1
    5364:	18 07       	cpc	r17, r24
    5366:	28 f0       	brcs	.+10     	; 0x5372 <__clzsi2+0x5c>
    5368:	88 e1       	ldi	r24, 0x18	; 24
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	a0 e0       	ldi	r26, 0x00	; 0
    536e:	b0 e0       	ldi	r27, 0x00	; 0
    5370:	04 c0       	rjmp	.+8      	; 0x537a <__clzsi2+0x64>
    5372:	80 e1       	ldi	r24, 0x10	; 16
    5374:	90 e0       	ldi	r25, 0x00	; 0
    5376:	a0 e0       	ldi	r26, 0x00	; 0
    5378:	b0 e0       	ldi	r27, 0x00	; 0
    537a:	20 e2       	ldi	r18, 0x20	; 32
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	40 e0       	ldi	r20, 0x00	; 0
    5380:	50 e0       	ldi	r21, 0x00	; 0
    5382:	28 1b       	sub	r18, r24
    5384:	39 0b       	sbc	r19, r25
    5386:	4a 0b       	sbc	r20, r26
    5388:	5b 0b       	sbc	r21, r27
    538a:	04 c0       	rjmp	.+8      	; 0x5394 <__clzsi2+0x7e>
    538c:	16 95       	lsr	r17
    538e:	07 95       	ror	r16
    5390:	f7 94       	ror	r15
    5392:	e7 94       	ror	r14
    5394:	8a 95       	dec	r24
    5396:	d2 f7       	brpl	.-12     	; 0x538c <__clzsi2+0x76>
    5398:	f7 01       	movw	r30, r14
    539a:	e1 5f       	subi	r30, 0xF1	; 241
    539c:	fe 4f       	sbci	r31, 0xFE	; 254
    539e:	80 81       	ld	r24, Z
    53a0:	28 1b       	sub	r18, r24
    53a2:	31 09       	sbc	r19, r1
    53a4:	41 09       	sbc	r20, r1
    53a6:	51 09       	sbc	r21, r1
    53a8:	c9 01       	movw	r24, r18
    53aa:	1f 91       	pop	r17
    53ac:	0f 91       	pop	r16
    53ae:	ff 90       	pop	r15
    53b0:	ef 90       	pop	r14
    53b2:	08 95       	ret

000053b4 <__pack_f>:
    53b4:	df 92       	push	r13
    53b6:	ef 92       	push	r14
    53b8:	ff 92       	push	r15
    53ba:	0f 93       	push	r16
    53bc:	1f 93       	push	r17
    53be:	fc 01       	movw	r30, r24
    53c0:	e4 80       	ldd	r14, Z+4	; 0x04
    53c2:	f5 80       	ldd	r15, Z+5	; 0x05
    53c4:	06 81       	ldd	r16, Z+6	; 0x06
    53c6:	17 81       	ldd	r17, Z+7	; 0x07
    53c8:	d1 80       	ldd	r13, Z+1	; 0x01
    53ca:	80 81       	ld	r24, Z
    53cc:	82 30       	cpi	r24, 0x02	; 2
    53ce:	48 f4       	brcc	.+18     	; 0x53e2 <__pack_f+0x2e>
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	a0 e1       	ldi	r26, 0x10	; 16
    53d6:	b0 e0       	ldi	r27, 0x00	; 0
    53d8:	e8 2a       	or	r14, r24
    53da:	f9 2a       	or	r15, r25
    53dc:	0a 2b       	or	r16, r26
    53de:	1b 2b       	or	r17, r27
    53e0:	a5 c0       	rjmp	.+330    	; 0x552c <__pack_f+0x178>
    53e2:	84 30       	cpi	r24, 0x04	; 4
    53e4:	09 f4       	brne	.+2      	; 0x53e8 <__pack_f+0x34>
    53e6:	9f c0       	rjmp	.+318    	; 0x5526 <__pack_f+0x172>
    53e8:	82 30       	cpi	r24, 0x02	; 2
    53ea:	21 f4       	brne	.+8      	; 0x53f4 <__pack_f+0x40>
    53ec:	ee 24       	eor	r14, r14
    53ee:	ff 24       	eor	r15, r15
    53f0:	87 01       	movw	r16, r14
    53f2:	05 c0       	rjmp	.+10     	; 0x53fe <__pack_f+0x4a>
    53f4:	e1 14       	cp	r14, r1
    53f6:	f1 04       	cpc	r15, r1
    53f8:	01 05       	cpc	r16, r1
    53fa:	11 05       	cpc	r17, r1
    53fc:	19 f4       	brne	.+6      	; 0x5404 <__pack_f+0x50>
    53fe:	e0 e0       	ldi	r30, 0x00	; 0
    5400:	f0 e0       	ldi	r31, 0x00	; 0
    5402:	96 c0       	rjmp	.+300    	; 0x5530 <__pack_f+0x17c>
    5404:	62 81       	ldd	r22, Z+2	; 0x02
    5406:	73 81       	ldd	r23, Z+3	; 0x03
    5408:	9f ef       	ldi	r25, 0xFF	; 255
    540a:	62 38       	cpi	r22, 0x82	; 130
    540c:	79 07       	cpc	r23, r25
    540e:	0c f0       	brlt	.+2      	; 0x5412 <__pack_f+0x5e>
    5410:	5b c0       	rjmp	.+182    	; 0x54c8 <__pack_f+0x114>
    5412:	22 e8       	ldi	r18, 0x82	; 130
    5414:	3f ef       	ldi	r19, 0xFF	; 255
    5416:	26 1b       	sub	r18, r22
    5418:	37 0b       	sbc	r19, r23
    541a:	2a 31       	cpi	r18, 0x1A	; 26
    541c:	31 05       	cpc	r19, r1
    541e:	2c f0       	brlt	.+10     	; 0x542a <__pack_f+0x76>
    5420:	20 e0       	ldi	r18, 0x00	; 0
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	40 e0       	ldi	r20, 0x00	; 0
    5426:	50 e0       	ldi	r21, 0x00	; 0
    5428:	2a c0       	rjmp	.+84     	; 0x547e <__pack_f+0xca>
    542a:	b8 01       	movw	r22, r16
    542c:	a7 01       	movw	r20, r14
    542e:	02 2e       	mov	r0, r18
    5430:	04 c0       	rjmp	.+8      	; 0x543a <__pack_f+0x86>
    5432:	76 95       	lsr	r23
    5434:	67 95       	ror	r22
    5436:	57 95       	ror	r21
    5438:	47 95       	ror	r20
    543a:	0a 94       	dec	r0
    543c:	d2 f7       	brpl	.-12     	; 0x5432 <__pack_f+0x7e>
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	a0 e0       	ldi	r26, 0x00	; 0
    5444:	b0 e0       	ldi	r27, 0x00	; 0
    5446:	04 c0       	rjmp	.+8      	; 0x5450 <__pack_f+0x9c>
    5448:	88 0f       	add	r24, r24
    544a:	99 1f       	adc	r25, r25
    544c:	aa 1f       	adc	r26, r26
    544e:	bb 1f       	adc	r27, r27
    5450:	2a 95       	dec	r18
    5452:	d2 f7       	brpl	.-12     	; 0x5448 <__pack_f+0x94>
    5454:	01 97       	sbiw	r24, 0x01	; 1
    5456:	a1 09       	sbc	r26, r1
    5458:	b1 09       	sbc	r27, r1
    545a:	8e 21       	and	r24, r14
    545c:	9f 21       	and	r25, r15
    545e:	a0 23       	and	r26, r16
    5460:	b1 23       	and	r27, r17
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	a1 05       	cpc	r26, r1
    5466:	b1 05       	cpc	r27, r1
    5468:	21 f0       	breq	.+8      	; 0x5472 <__pack_f+0xbe>
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	a0 e0       	ldi	r26, 0x00	; 0
    5470:	b0 e0       	ldi	r27, 0x00	; 0
    5472:	9a 01       	movw	r18, r20
    5474:	ab 01       	movw	r20, r22
    5476:	28 2b       	or	r18, r24
    5478:	39 2b       	or	r19, r25
    547a:	4a 2b       	or	r20, r26
    547c:	5b 2b       	or	r21, r27
    547e:	da 01       	movw	r26, r20
    5480:	c9 01       	movw	r24, r18
    5482:	8f 77       	andi	r24, 0x7F	; 127
    5484:	90 70       	andi	r25, 0x00	; 0
    5486:	a0 70       	andi	r26, 0x00	; 0
    5488:	b0 70       	andi	r27, 0x00	; 0
    548a:	80 34       	cpi	r24, 0x40	; 64
    548c:	91 05       	cpc	r25, r1
    548e:	a1 05       	cpc	r26, r1
    5490:	b1 05       	cpc	r27, r1
    5492:	39 f4       	brne	.+14     	; 0x54a2 <__pack_f+0xee>
    5494:	27 ff       	sbrs	r18, 7
    5496:	09 c0       	rjmp	.+18     	; 0x54aa <__pack_f+0xf6>
    5498:	20 5c       	subi	r18, 0xC0	; 192
    549a:	3f 4f       	sbci	r19, 0xFF	; 255
    549c:	4f 4f       	sbci	r20, 0xFF	; 255
    549e:	5f 4f       	sbci	r21, 0xFF	; 255
    54a0:	04 c0       	rjmp	.+8      	; 0x54aa <__pack_f+0xf6>
    54a2:	21 5c       	subi	r18, 0xC1	; 193
    54a4:	3f 4f       	sbci	r19, 0xFF	; 255
    54a6:	4f 4f       	sbci	r20, 0xFF	; 255
    54a8:	5f 4f       	sbci	r21, 0xFF	; 255
    54aa:	e0 e0       	ldi	r30, 0x00	; 0
    54ac:	f0 e0       	ldi	r31, 0x00	; 0
    54ae:	20 30       	cpi	r18, 0x00	; 0
    54b0:	a0 e0       	ldi	r26, 0x00	; 0
    54b2:	3a 07       	cpc	r19, r26
    54b4:	a0 e0       	ldi	r26, 0x00	; 0
    54b6:	4a 07       	cpc	r20, r26
    54b8:	a0 e4       	ldi	r26, 0x40	; 64
    54ba:	5a 07       	cpc	r21, r26
    54bc:	10 f0       	brcs	.+4      	; 0x54c2 <__pack_f+0x10e>
    54be:	e1 e0       	ldi	r30, 0x01	; 1
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	79 01       	movw	r14, r18
    54c4:	8a 01       	movw	r16, r20
    54c6:	27 c0       	rjmp	.+78     	; 0x5516 <__pack_f+0x162>
    54c8:	60 38       	cpi	r22, 0x80	; 128
    54ca:	71 05       	cpc	r23, r1
    54cc:	64 f5       	brge	.+88     	; 0x5526 <__pack_f+0x172>
    54ce:	fb 01       	movw	r30, r22
    54d0:	e1 58       	subi	r30, 0x81	; 129
    54d2:	ff 4f       	sbci	r31, 0xFF	; 255
    54d4:	d8 01       	movw	r26, r16
    54d6:	c7 01       	movw	r24, r14
    54d8:	8f 77       	andi	r24, 0x7F	; 127
    54da:	90 70       	andi	r25, 0x00	; 0
    54dc:	a0 70       	andi	r26, 0x00	; 0
    54de:	b0 70       	andi	r27, 0x00	; 0
    54e0:	80 34       	cpi	r24, 0x40	; 64
    54e2:	91 05       	cpc	r25, r1
    54e4:	a1 05       	cpc	r26, r1
    54e6:	b1 05       	cpc	r27, r1
    54e8:	39 f4       	brne	.+14     	; 0x54f8 <__pack_f+0x144>
    54ea:	e7 fe       	sbrs	r14, 7
    54ec:	0d c0       	rjmp	.+26     	; 0x5508 <__pack_f+0x154>
    54ee:	80 e4       	ldi	r24, 0x40	; 64
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	a0 e0       	ldi	r26, 0x00	; 0
    54f4:	b0 e0       	ldi	r27, 0x00	; 0
    54f6:	04 c0       	rjmp	.+8      	; 0x5500 <__pack_f+0x14c>
    54f8:	8f e3       	ldi	r24, 0x3F	; 63
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	a0 e0       	ldi	r26, 0x00	; 0
    54fe:	b0 e0       	ldi	r27, 0x00	; 0
    5500:	e8 0e       	add	r14, r24
    5502:	f9 1e       	adc	r15, r25
    5504:	0a 1f       	adc	r16, r26
    5506:	1b 1f       	adc	r17, r27
    5508:	17 ff       	sbrs	r17, 7
    550a:	05 c0       	rjmp	.+10     	; 0x5516 <__pack_f+0x162>
    550c:	16 95       	lsr	r17
    550e:	07 95       	ror	r16
    5510:	f7 94       	ror	r15
    5512:	e7 94       	ror	r14
    5514:	31 96       	adiw	r30, 0x01	; 1
    5516:	87 e0       	ldi	r24, 0x07	; 7
    5518:	16 95       	lsr	r17
    551a:	07 95       	ror	r16
    551c:	f7 94       	ror	r15
    551e:	e7 94       	ror	r14
    5520:	8a 95       	dec	r24
    5522:	d1 f7       	brne	.-12     	; 0x5518 <__pack_f+0x164>
    5524:	05 c0       	rjmp	.+10     	; 0x5530 <__pack_f+0x17c>
    5526:	ee 24       	eor	r14, r14
    5528:	ff 24       	eor	r15, r15
    552a:	87 01       	movw	r16, r14
    552c:	ef ef       	ldi	r30, 0xFF	; 255
    552e:	f0 e0       	ldi	r31, 0x00	; 0
    5530:	6e 2f       	mov	r22, r30
    5532:	67 95       	ror	r22
    5534:	66 27       	eor	r22, r22
    5536:	67 95       	ror	r22
    5538:	90 2f       	mov	r25, r16
    553a:	9f 77       	andi	r25, 0x7F	; 127
    553c:	d7 94       	ror	r13
    553e:	dd 24       	eor	r13, r13
    5540:	d7 94       	ror	r13
    5542:	8e 2f       	mov	r24, r30
    5544:	86 95       	lsr	r24
    5546:	49 2f       	mov	r20, r25
    5548:	46 2b       	or	r20, r22
    554a:	58 2f       	mov	r21, r24
    554c:	5d 29       	or	r21, r13
    554e:	b7 01       	movw	r22, r14
    5550:	ca 01       	movw	r24, r20
    5552:	1f 91       	pop	r17
    5554:	0f 91       	pop	r16
    5556:	ff 90       	pop	r15
    5558:	ef 90       	pop	r14
    555a:	df 90       	pop	r13
    555c:	08 95       	ret

0000555e <__unpack_f>:
    555e:	fc 01       	movw	r30, r24
    5560:	db 01       	movw	r26, r22
    5562:	40 81       	ld	r20, Z
    5564:	51 81       	ldd	r21, Z+1	; 0x01
    5566:	22 81       	ldd	r18, Z+2	; 0x02
    5568:	62 2f       	mov	r22, r18
    556a:	6f 77       	andi	r22, 0x7F	; 127
    556c:	70 e0       	ldi	r23, 0x00	; 0
    556e:	22 1f       	adc	r18, r18
    5570:	22 27       	eor	r18, r18
    5572:	22 1f       	adc	r18, r18
    5574:	93 81       	ldd	r25, Z+3	; 0x03
    5576:	89 2f       	mov	r24, r25
    5578:	88 0f       	add	r24, r24
    557a:	82 2b       	or	r24, r18
    557c:	28 2f       	mov	r18, r24
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	99 1f       	adc	r25, r25
    5582:	99 27       	eor	r25, r25
    5584:	99 1f       	adc	r25, r25
    5586:	11 96       	adiw	r26, 0x01	; 1
    5588:	9c 93       	st	X, r25
    558a:	11 97       	sbiw	r26, 0x01	; 1
    558c:	21 15       	cp	r18, r1
    558e:	31 05       	cpc	r19, r1
    5590:	a9 f5       	brne	.+106    	; 0x55fc <__unpack_f+0x9e>
    5592:	41 15       	cp	r20, r1
    5594:	51 05       	cpc	r21, r1
    5596:	61 05       	cpc	r22, r1
    5598:	71 05       	cpc	r23, r1
    559a:	11 f4       	brne	.+4      	; 0x55a0 <__unpack_f+0x42>
    559c:	82 e0       	ldi	r24, 0x02	; 2
    559e:	37 c0       	rjmp	.+110    	; 0x560e <__unpack_f+0xb0>
    55a0:	82 e8       	ldi	r24, 0x82	; 130
    55a2:	9f ef       	ldi	r25, 0xFF	; 255
    55a4:	13 96       	adiw	r26, 0x03	; 3
    55a6:	9c 93       	st	X, r25
    55a8:	8e 93       	st	-X, r24
    55aa:	12 97       	sbiw	r26, 0x02	; 2
    55ac:	9a 01       	movw	r18, r20
    55ae:	ab 01       	movw	r20, r22
    55b0:	67 e0       	ldi	r22, 0x07	; 7
    55b2:	22 0f       	add	r18, r18
    55b4:	33 1f       	adc	r19, r19
    55b6:	44 1f       	adc	r20, r20
    55b8:	55 1f       	adc	r21, r21
    55ba:	6a 95       	dec	r22
    55bc:	d1 f7       	brne	.-12     	; 0x55b2 <__unpack_f+0x54>
    55be:	83 e0       	ldi	r24, 0x03	; 3
    55c0:	8c 93       	st	X, r24
    55c2:	0d c0       	rjmp	.+26     	; 0x55de <__unpack_f+0x80>
    55c4:	22 0f       	add	r18, r18
    55c6:	33 1f       	adc	r19, r19
    55c8:	44 1f       	adc	r20, r20
    55ca:	55 1f       	adc	r21, r21
    55cc:	12 96       	adiw	r26, 0x02	; 2
    55ce:	8d 91       	ld	r24, X+
    55d0:	9c 91       	ld	r25, X
    55d2:	13 97       	sbiw	r26, 0x03	; 3
    55d4:	01 97       	sbiw	r24, 0x01	; 1
    55d6:	13 96       	adiw	r26, 0x03	; 3
    55d8:	9c 93       	st	X, r25
    55da:	8e 93       	st	-X, r24
    55dc:	12 97       	sbiw	r26, 0x02	; 2
    55de:	20 30       	cpi	r18, 0x00	; 0
    55e0:	80 e0       	ldi	r24, 0x00	; 0
    55e2:	38 07       	cpc	r19, r24
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	48 07       	cpc	r20, r24
    55e8:	80 e4       	ldi	r24, 0x40	; 64
    55ea:	58 07       	cpc	r21, r24
    55ec:	58 f3       	brcs	.-42     	; 0x55c4 <__unpack_f+0x66>
    55ee:	14 96       	adiw	r26, 0x04	; 4
    55f0:	2d 93       	st	X+, r18
    55f2:	3d 93       	st	X+, r19
    55f4:	4d 93       	st	X+, r20
    55f6:	5c 93       	st	X, r21
    55f8:	17 97       	sbiw	r26, 0x07	; 7
    55fa:	08 95       	ret
    55fc:	2f 3f       	cpi	r18, 0xFF	; 255
    55fe:	31 05       	cpc	r19, r1
    5600:	79 f4       	brne	.+30     	; 0x5620 <__unpack_f+0xc2>
    5602:	41 15       	cp	r20, r1
    5604:	51 05       	cpc	r21, r1
    5606:	61 05       	cpc	r22, r1
    5608:	71 05       	cpc	r23, r1
    560a:	19 f4       	brne	.+6      	; 0x5612 <__unpack_f+0xb4>
    560c:	84 e0       	ldi	r24, 0x04	; 4
    560e:	8c 93       	st	X, r24
    5610:	08 95       	ret
    5612:	64 ff       	sbrs	r22, 4
    5614:	03 c0       	rjmp	.+6      	; 0x561c <__unpack_f+0xbe>
    5616:	81 e0       	ldi	r24, 0x01	; 1
    5618:	8c 93       	st	X, r24
    561a:	12 c0       	rjmp	.+36     	; 0x5640 <__unpack_f+0xe2>
    561c:	1c 92       	st	X, r1
    561e:	10 c0       	rjmp	.+32     	; 0x5640 <__unpack_f+0xe2>
    5620:	2f 57       	subi	r18, 0x7F	; 127
    5622:	30 40       	sbci	r19, 0x00	; 0
    5624:	13 96       	adiw	r26, 0x03	; 3
    5626:	3c 93       	st	X, r19
    5628:	2e 93       	st	-X, r18
    562a:	12 97       	sbiw	r26, 0x02	; 2
    562c:	83 e0       	ldi	r24, 0x03	; 3
    562e:	8c 93       	st	X, r24
    5630:	87 e0       	ldi	r24, 0x07	; 7
    5632:	44 0f       	add	r20, r20
    5634:	55 1f       	adc	r21, r21
    5636:	66 1f       	adc	r22, r22
    5638:	77 1f       	adc	r23, r23
    563a:	8a 95       	dec	r24
    563c:	d1 f7       	brne	.-12     	; 0x5632 <__unpack_f+0xd4>
    563e:	70 64       	ori	r23, 0x40	; 64
    5640:	14 96       	adiw	r26, 0x04	; 4
    5642:	4d 93       	st	X+, r20
    5644:	5d 93       	st	X+, r21
    5646:	6d 93       	st	X+, r22
    5648:	7c 93       	st	X, r23
    564a:	17 97       	sbiw	r26, 0x07	; 7
    564c:	08 95       	ret

0000564e <__prologue_saves__>:
    564e:	2f 92       	push	r2
    5650:	3f 92       	push	r3
    5652:	4f 92       	push	r4
    5654:	5f 92       	push	r5
    5656:	6f 92       	push	r6
    5658:	7f 92       	push	r7
    565a:	8f 92       	push	r8
    565c:	9f 92       	push	r9
    565e:	af 92       	push	r10
    5660:	bf 92       	push	r11
    5662:	cf 92       	push	r12
    5664:	df 92       	push	r13
    5666:	ef 92       	push	r14
    5668:	ff 92       	push	r15
    566a:	0f 93       	push	r16
    566c:	1f 93       	push	r17
    566e:	cf 93       	push	r28
    5670:	df 93       	push	r29
    5672:	cd b7       	in	r28, 0x3d	; 61
    5674:	de b7       	in	r29, 0x3e	; 62
    5676:	ca 1b       	sub	r28, r26
    5678:	db 0b       	sbc	r29, r27
    567a:	0f b6       	in	r0, 0x3f	; 63
    567c:	f8 94       	cli
    567e:	de bf       	out	0x3e, r29	; 62
    5680:	0f be       	out	0x3f, r0	; 63
    5682:	cd bf       	out	0x3d, r28	; 61
    5684:	09 94       	ijmp

00005686 <__epilogue_restores__>:
    5686:	2a 88       	ldd	r2, Y+18	; 0x12
    5688:	39 88       	ldd	r3, Y+17	; 0x11
    568a:	48 88       	ldd	r4, Y+16	; 0x10
    568c:	5f 84       	ldd	r5, Y+15	; 0x0f
    568e:	6e 84       	ldd	r6, Y+14	; 0x0e
    5690:	7d 84       	ldd	r7, Y+13	; 0x0d
    5692:	8c 84       	ldd	r8, Y+12	; 0x0c
    5694:	9b 84       	ldd	r9, Y+11	; 0x0b
    5696:	aa 84       	ldd	r10, Y+10	; 0x0a
    5698:	b9 84       	ldd	r11, Y+9	; 0x09
    569a:	c8 84       	ldd	r12, Y+8	; 0x08
    569c:	df 80       	ldd	r13, Y+7	; 0x07
    569e:	ee 80       	ldd	r14, Y+6	; 0x06
    56a0:	fd 80       	ldd	r15, Y+5	; 0x05
    56a2:	0c 81       	ldd	r16, Y+4	; 0x04
    56a4:	1b 81       	ldd	r17, Y+3	; 0x03
    56a6:	aa 81       	ldd	r26, Y+2	; 0x02
    56a8:	b9 81       	ldd	r27, Y+1	; 0x01
    56aa:	ce 0f       	add	r28, r30
    56ac:	d1 1d       	adc	r29, r1
    56ae:	0f b6       	in	r0, 0x3f	; 63
    56b0:	f8 94       	cli
    56b2:	de bf       	out	0x3e, r29	; 62
    56b4:	0f be       	out	0x3f, r0	; 63
    56b6:	cd bf       	out	0x3d, r28	; 61
    56b8:	ed 01       	movw	r28, r26
    56ba:	08 95       	ret

000056bc <_exit>:
    56bc:	f8 94       	cli

000056be <__stop_program>:
    56be:	ff cf       	rjmp	.-2      	; 0x56be <__stop_program>

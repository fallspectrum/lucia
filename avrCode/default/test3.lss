
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00005388  0000541c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  0000552c  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000552c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  000055ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00005b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  0000774a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  00007f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000093c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  00009664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000b48f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__ctors_end>
       4:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
       8:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
       c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      10:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      14:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      18:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      1c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      20:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      24:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      28:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      2c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      30:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      34:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      38:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      3c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      40:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      44:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      48:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      4c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      50:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      54:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      58:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      5c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      60:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      64:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      68:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      6c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      70:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      74:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      78:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      7c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      80:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      84:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>
      88:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 04 09 00 00 00 00 ff 00 05 09 ff 00 00     .p..............
      9c:	00 ff 00 06 09 ff 00 00 00 ff 00 07 09 00 00 00     ................
      ac:	00 ff 00 ff ff 70 17 00 03 ff 00 00 00 00 00 01     .....p..........
      bc:	00 10 00 01 03 ff 00 ff 00 00 00 01 00 10 00 02     ................
      cc:	03 00 00 ff 00 00 00 01 00 10 00 03 03 00 00 ff     ................
      dc:	00 ff 00 01 00 10 00 04 03 00 00 00 00 ff 00 01     ................
      ec:	00 10 00 05 03 ff 00 00 00 ff 00 01 00 10 00 06     ................
      fc:	03 ff 00 00 00 ff 00 01 00 10 00 07 03 00 00 00     ................
     10c:	00 ff 00 01 00 10 00 08 03 00 00 ff 00 ff 00 01     ................
     11c:	00 10 00 09 03 00 00 ff 00 00 00 01 00 10 00 0a     ................
     12c:	03 ff 00 ff 00 00 00 01 00 10 00 0b 03 ff 00 00     ................
     13c:	00 00 00 01 00 10 00 ff ff 70 17 6e 00 04 08 02     .........p.n....
     14c:	00 c8 00 28 00 00 00 01 00 00 00 01 00 01 00 10     ...(............
     15c:	00 07 08 02 00 c8 00 28 00 00 00 01 00 00 00 01     .......(........
     16c:	00 01 00 10 00 ff ff 6e 00 04 08 06 00 00 00 00     .......n........
     17c:	00 ff 00 01 00 00 00 00 00 00 00 08 00 40 00 00     .............@..
     18c:	00 80 00 01 00 00 00 00 00 00 00 08 00 ff 00 ff     ................
     19c:	00 ff 00 01 00 00 00 00 00 00 00 08 00 07 08 06     ................
     1ac:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 08     ................
     1bc:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 08     .@..............
     1cc:	00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00 00 08     ................
     1dc:	00 ff ff 6e 00 04 08 02 00 c8 00 28 00 00 00 01     ...n.......(....
     1ec:	00 01 00 00 00 01 00 10 00 07 08 02 00 c8 00 28     ...............(
     1fc:	00 00 00 01 00 01 00 00 00 01 00 10 00 ff ff 6e     ...............n
     20c:	00 04 08 06 00 ff 00 00 00 00 00 01 00 00 00 00     ................
     21c:	00 ff 00 01 00 00 00 00 00 00 00 08 00 af 00 60     ...............`
     22c:	00 60 00 01 00 00 00 00 00 00 00 08 00 00 00 00     .`..............
     23c:	00 00 00 01 00 07 08 06 00 ff 00 00 00 00 00 01     ................
     24c:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 08     ................
     25c:	00 af 00 60 00 60 00 01 00 00 00 00 00 00 00 08     ...`.`..........
     26c:	00 00 00 00 00 00 00 01 00 ff ff 6e 00 04 08 02     ...........n....
     27c:	00 c8 00 00 00 c8 00 01 00 00 00 01 00 01 00 10     ................
     28c:	00 07 08 02 00 c8 00 00 00 c8 00 01 00 00 00 01     ................
     29c:	00 01 00 10 00 ff ff 6e 00 04 08 02 00 c8 00 00     .......n........
     2ac:	00 c8 00 01 00 00 00 02 00 00 00 10 00 07 08 02     ................
     2bc:	00 c8 00 00 00 c8 00 01 00 00 00 02 00 00 00 10     ................
     2cc:	00 ff ff 6e 00 04 08 02 00 ff 00 00 00 00 00 01     ...n............
     2dc:	00 01 00 01 00 00 00 10 00 07 08 02 00 ff 00 00     ................
     2ec:	00 00 00 01 00 01 00 01 00 00 00 10 00 ff ff 6e     ...............n
     2fc:	00 04 08 02 00 ff 00 00 00 00 00 01 00 00 00 01     ................
     30c:	00 01 00 10 00 07 08 02 00 ff 00 00 00 00 00 01     ................
     31c:	00 00 00 01 00 01 00 10 00 ff ff 6e 00 04 08 02     ...........n....
     32c:	00 ff 00 00 00 00 00 01 00 01 00 00 00 01 00 10     ................
     33c:	00 07 08 02 00 ff 00 00 00 00 00 01 00 01 00 00     ................
     34c:	00 01 00 10 00 ff ff 6e 00 04 08 02 00 ff 00 00     .......n........
     35c:	00 00 00 01 00 01 00 00 00 01 00 08 00 07 08 02     ................
     36c:	00 ff 00 00 00 00 00 01 00 01 00 00 00 01 00 08     ................
     37c:	00 ff ff 6e 00 04 08 03 00 7d 00 00 00 00 00 01     ...n.....}......
     38c:	00 01 00 00 00 01 00 10 00 00 00 01 00 00 00 10     ................
     39c:	00 07 08 03 00 7d 00 00 00 00 00 01 00 01 00 00     .....}..........
     3ac:	00 01 00 10 00 00 00 01 00 00 00 10 00 ff ff 6e     ...............n
     3bc:	00 04 08 03 00 00 00 00 00 7d 00 01 00 01 00 00     .........}......
     3cc:	00 01 00 10 00 00 00 01 00 00 00 10 00 07 08 03     ................
     3dc:	00 00 00 00 00 7d 00 01 00 01 00 00 00 01 00 10     .....}..........
     3ec:	00 00 00 01 00 00 00 10 00 ff ff 09 00 04 05 00     ................
     3fc:	00 00 00 7d 00 00 00 00 00 00 00 50 00 01 00 30     ...}.......P...0
     40c:	00 07 05 00 00 00 00 7d 00 00 00 00 00 00 00 50     .......}.......P
     41c:	00 01 00 30 00 ff ff 70 17 04 08 02 00 00 00 00     ...0...p........
     42c:	00 00 00 20 00 00 00 00 00 32 00 01 00 07 08 02     ... .....2......
     43c:	00 00 00 00 00 00 00 20 00 00 00 00 00 32 00 01     ....... .....2..
     44c:	00 ff ff 09 00 04 05 00 00 00 00 ff 00 ff 00 00     ................
     45c:	00 7d 00 03 00 01 00 30 00 07 05 00 00 00 00 ff     .}.....0........
     46c:	00 00 00 7d 00 7d 00 03 00 01 00 30 00 ff ff 09     ...}.}.....0....
     47c:	00 04 05 00 00 00 00 ff 00 ff 00 00 00 7d 00 09     .............}..
     48c:	00 01 00 20 00 07 05 00 00 00 00 ff 00 00 00 7d     ... ...........}
     49c:	00 7d 00 09 00 01 00 20 00 ff ff 09 00 04 05 00     .}..... ........
     4ac:	00 00 00 ff 00 ff 00 00 00 7d 00 10 00 05 00 10     .........}......
     4bc:	00 07 05 00 00 00 00 ff 00 00 00 7d 00 7d 00 10     ...........}.}..
     4cc:	00 05 00 10 00 ff ff 70 17 04 08 04 00 00 00 00     .......p........
     4dc:	00 00 00 20 00 00 00 00 00 ff 00 01 00 00 00 00     ... ............
     4ec:	00 01 00 20 00 00 00 7d 00 7d 00 01 00 07 08 04     ... ...}.}......
     4fc:	00 00 00 00 00 00 00 20 00 00 00 00 00 ff 00 01     ....... ........
     50c:	00 00 00 00 00 01 00 20 00 ff 00 00 00 7d 00 01     ....... .....}..
     51c:	00 ff ff 09 00 04 08 06 00 00 00 00 00 00 00 05     ................
     52c:	00 00 00 00 00 ff 00 09 00 00 00 00 00 01 00 05     ................
     53c:	00 00 00 7d 00 7d 00 09 00 00 00 00 00 00 00 05     ...}.}..........
     54c:	00 00 00 02 00 00 00 09 00 07 08 06 00 00 00 00     ................
     55c:	00 00 00 05 00 00 00 00 00 ff 00 09 00 00 00 00     ................
     56c:	00 01 00 05 00 ff 00 00 00 7d 00 09 00 00 00 00     .........}......
     57c:	00 00 00 05 00 05 00 00 00 00 00 09 00 ff ff 09     ................
     58c:	00 04 08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff     ................
     59c:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 ff     ................
     5ac:	00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     5bc:	00 ff 00 01 00 00 00 00 00 7d 00 56 00 07 08 07     .........}.V....
     5cc:	00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00 00 01     ................
     5dc:	00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01     ................
     5ec:	00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01     ................
     5fc:	00 00 00 00 00 7d 00 56 00 ff ff 6f 17 00 08 07     .....}.V...o....
     60c:	00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00 00 01     ................
     61c:	00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01     ................
     62c:	00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01     ................
     63c:	00 00 00 00 00 00 00 26 00 01 08 07 00 ff 00 00     .......&........
     64c:	00 00 00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff     ................
     65c:	00 00 00 01 00 00 00 ff 00 ff 00 01 00 00 00 00     ................
     66c:	00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00 00 00     ................
     67c:	00 00 00 26 00 02 08 07 00 ff 00 00 00 00 00 02     ...&............
     68c:	00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00 00 01     ................
     69c:	00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01     ................
     6ac:	00 ff 00 00 00 ff 00 01 00 00 00 00 00 00 00 26     ...............&
     6bc:	00 03 08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff     ................
     6cc:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 ff     ................
     6dc:	00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     6ec:	00 ff 00 01 00 00 00 00 00 00 00 26 00 04 08 07     ...........&....
     6fc:	00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00 00 01     ................
     70c:	00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01     ................
     71c:	00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01     ................
     72c:	00 00 00 00 00 00 00 26 00 05 08 07 00 ff 00 00     .......&........
     73c:	00 00 00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff     ................
     74c:	00 00 00 01 00 00 00 ff 00 ff 00 01 00 00 00 00     ................
     75c:	00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00 00 00     ................
     76c:	00 00 00 26 00 06 08 07 00 ff 00 00 00 00 00 02     ...&............
     77c:	00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00 00 01     ................
     78c:	00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01     ................
     79c:	00 ff 00 00 00 ff 00 01 00 00 00 00 00 00 00 26     ...............&
     7ac:	00 07 08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff     ................
     7bc:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 ff     ................
     7cc:	00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     7dc:	00 ff 00 01 00 00 00 00 00 00 00 26 00 08 08 07     ...........&....
     7ec:	00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00 00 01     ................
     7fc:	00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01     ................
     80c:	00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01     ................
     81c:	00 00 00 00 00 00 00 26 00 09 08 07 00 ff 00 00     .......&........
     82c:	00 00 00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff     ................
     83c:	00 00 00 01 00 00 00 ff 00 ff 00 01 00 00 00 00     ................
     84c:	00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00 00 00     ................
     85c:	00 00 00 26 00 0a 08 07 00 ff 00 00 00 00 00 02     ...&............
     86c:	00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00 00 01     ................
     87c:	00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01     ................
     88c:	00 ff 00 00 00 ff 00 01 00 00 00 00 00 00 00 26     ...............&
     89c:	00 0b 08 07 00 ff 00 00 00 00 00 02 00 ff 00 ff     ................
     8ac:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 ff     ................
     8bc:	00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     8cc:	00 ff 00 01 00 00 00 00 00 00 00 26 00 ff ff 0a     ...........&....
     8dc:	00 04 09 ff 00 00 00 00 00 ff ff 0a 00 07 09 ff     ................
     8ec:	00 00 00 7d 00 ff ff 38 18 04 03 7d 00 00 00 00     ...}...8...}....
     8fc:	00 01 00 1e 00 07 03 7d 00 00 00 00 00 01 00 1e     .......}........
     90c:	00 ff ff 0a 00 04 03 7d 00 00 00 00 00 01 00 0a     .......}........
     91c:	00 07 03 7d 00 00 00 00 00 01 00 0a 00 ff ff 09     ...}............
     92c:	00 04 05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03     ...........}....
     93c:	00 01 00 0a 00 07 05 ff 00 00 00 00 00 ff 00 7d     ...............}
     94c:	00 00 00 03 00 01 00 0a 00 ff ff 09 00 04 05 ff     ................
     95c:	00 00 00 00 00 ff 00 7d 00 00 00 03 00 01 00 05     .......}........
     96c:	00 07 05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03     ...........}....
     97c:	00 01 00 05 00 ff ff 09 00 05 05 ff 00 00 00 00     ................
     98c:	00 ff 00 7d 00 00 00 03 00 01 00 05 00 04 05 ff     ...}............
     99c:	00 00 00 00 00 ff 00 7d 00 00 00 03 00 01 00 05     .......}........
     9ac:	00 07 05 ff 00 00 00 00 00 ff 00 7d 00 00 00 03     ...........}....
     9bc:	00 01 00 05 00 06 05 ff 00 00 00 00 00 ff 00 7d     ...............}
     9cc:	00 00 00 03 00 01 00 05 00 ff ff 02 00 00 08 08     ................
     9dc:	00 ff 00 00 00 00 00 01 00 00 00 00 00 00 00 0c     ................
     9ec:	00 ff 00 1e 00 00 00 01 00 00 00 00 00 00 00 0c     ................
     9fc:	00 ff 00 3c 00 00 00 01 00 00 00 00 00 00 00 0c     ...<............
     a0c:	00 ff 00 00 00 1e 00 01 00 00 00 00 00 00 00 0c     ................
     a1c:	00 01 08 08 00 ff 00 00 00 00 00 01 00 00 00 00     ................
     a2c:	00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00     ................
     a3c:	00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00     .......<........
     a4c:	00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00     ................
     a5c:	00 00 00 0c 00 02 08 08 00 ff 00 00 00 00 00 01     ................
     a6c:	00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01     ................
     a7c:	00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01     ...........<....
     a8c:	00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01     ................
     a9c:	00 00 00 00 00 00 00 0c 00 03 08 08 00 ff 00 00     ................
     aac:	00 00 00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e     ................
     abc:	00 00 00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c     ...............<
     acc:	00 00 00 01 00 00 00 00 00 00 00 0c 00 ff 00 00     ................
     adc:	00 1e 00 01 00 00 00 00 00 00 00 0c 00 05 08 04     ................
     aec:	00 80 00 40 00 00 00 04 00 00 00 00 00 00 00 20     ...@........... 
     afc:	00 ff 00 00 00 00 00 04 00 00 00 00 00 00 00 20     ............... 
     b0c:	00 06 08 04 00 ff 00 00 00 00 00 04 00 00 00 00     ................
     b1c:	00 00 00 20 00 80 00 1e 00 00 00 04 00 00 00 00     ... ............
     b2c:	00 00 00 20 00 08 08 08 00 ff 00 00 00 00 00 01     ... ............
     b3c:	00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01     ................
     b4c:	00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01     ...........<....
     b5c:	00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01     ................
     b6c:	00 00 00 00 00 00 00 0c 00 09 08 08 00 ff 00 00     ................
     b7c:	00 00 00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e     ................
     b8c:	00 00 00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c     ...............<
     b9c:	00 00 00 01 00 00 00 00 00 00 00 0c 00 ff 00 00     ................
     bac:	00 1e 00 01 00 00 00 00 00 00 00 0c 00 0a 08 08     ................
     bbc:	00 ff 00 00 00 00 00 01 00 00 00 00 00 00 00 0c     ................
     bcc:	00 ff 00 1e 00 00 00 01 00 00 00 00 00 00 00 0c     ................
     bdc:	00 ff 00 3c 00 00 00 01 00 00 00 00 00 00 00 0c     ...<............
     bec:	00 ff 00 00 00 1e 00 01 00 00 00 00 00 00 00 0c     ................
     bfc:	00 0b 08 08 00 ff 00 00 00 00 00 01 00 00 00 00     ................
     c0c:	00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00     ................
     c1c:	00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00     .......<........
     c2c:	00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00     ................
     c3c:	00 00 00 0c 00 ff ff 73 00 00 08 04 00 40 00 00     .......s.....@..
     c4c:	00 80 00 01 00 00 00 00 00 00 00 08 00 60 00 60     .............`.`
     c5c:	00 60 00 01 00 00 00 00 00 00 00 08 00 01 08 04     .`..............
     c6c:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 08     .@..............
     c7c:	00 60 00 60 00 60 00 01 00 00 00 00 00 00 00 08     .`.`.`..........
     c8c:	00 02 08 04 00 40 00 00 00 80 00 01 00 00 00 00     .....@..........
     c9c:	00 00 00 08 00 60 00 60 00 60 00 01 00 00 00 00     .....`.`.`......
     cac:	00 00 00 08 00 03 08 04 00 40 00 00 00 80 00 01     .........@......
     cbc:	00 00 00 00 00 00 00 08 00 60 00 60 00 60 00 01     .........`.`.`..
     ccc:	00 00 00 00 00 00 00 08 00 05 08 08 00 40 00 00     .............@..
     cdc:	00 80 00 08 00 00 00 00 00 00 00 20 00 ff 00 1e     ........... ....
     cec:	00 00 00 08 00 00 00 00 00 00 00 20 00 ff 00 00     ........... ....
     cfc:	00 00 00 08 00 00 00 00 00 00 00 20 00 ff 00 00     ........... ....
     d0c:	00 1e 00 08 00 00 00 00 00 00 00 20 00 06 08 08     ........... ....
     d1c:	00 40 00 00 00 80 00 08 00 00 00 00 00 00 00 20     .@............. 
     d2c:	00 ff 00 1e 00 00 00 08 00 00 00 00 00 00 00 20     ............... 
     d3c:	00 ff 00 00 00 00 00 08 00 00 00 00 00 00 00 20     ............... 
     d4c:	00 ff 00 00 00 1e 00 08 00 00 00 00 00 00 00 20     ............... 
     d5c:	00 08 08 04 00 40 00 00 00 80 00 01 00 00 00 00     .....@..........
     d6c:	00 00 00 08 00 60 00 60 00 60 00 01 00 00 00 00     .....`.`.`......
     d7c:	00 00 00 08 00 09 08 04 00 40 00 00 00 80 00 01     .........@......
     d8c:	00 00 00 00 00 00 00 08 00 60 00 60 00 60 00 01     .........`.`.`..
     d9c:	00 00 00 00 00 00 00 08 00 0a 08 04 00 40 00 00     .............@..
     dac:	00 80 00 01 00 00 00 00 00 00 00 08 00 60 00 60     .............`.`
     dbc:	00 60 00 01 00 00 00 00 00 00 00 08 00 0b 08 04     .`..............
     dcc:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 08     .@..............
     ddc:	00 60 00 60 00 60 00 01 00 00 00 00 00 00 00 08     .`.`.`..........
     dec:	00 ff ff 0a 00 04 09 ff 00 00 00 00 00 ff ff 0a     ................
     dfc:	00 07 09 00 00 00 00 7d 00 ff ff 01 00 04 03 ff     .......}........
     e0c:	00 00 00 00 00 01 00 09 00 07 03 00 00 00 00 ff     ................
     e1c:	00 01 00 09 00 ff ff 01 00 04 03 ff 00 00 00 00     ................
     e2c:	00 01 00 03 00 07 03 00 00 00 00 ff 00 01 00 03     ................
     e3c:	00 ff ff 01 00 04 03 ff 00 00 00 00 00 01 00 01     ................
     e4c:	00 07 03 00 00 00 00 ff 00 01 00 01 00 ff ff 01     ................
     e5c:	00 05 08 04 00 ff 00 00 00 00 00 04 00 00 00 00     ................
     e6c:	00 00 00 10 00 00 00 00 00 ff 00 04 00 00 00 00     ................
     e7c:	00 00 00 10 00 06 08 04 00 00 00 00 00 ff 00 04     ................
     e8c:	00 00 00 00 00 00 00 10 00 ff 00 00 00 00 00 04     ................
     e9c:	00 00 00 00 00 00 00 10 00 ff ff 05 00 00 08 06     ................
     eac:	00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00 00 08     ................
     ebc:	00 00 00 00 00 00 00 01 00 ff 00 00 00 00 00 01     ................
     ecc:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 01     ................
     edc:	00 01 08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00     ................
     eec:	00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00     ................
     efc:	00 ff 00 01 00 ff 00 00 00 00 00 01 00 00 00 00     ................
     f0c:	00 00 00 01 00 02 08 06 00 ff 00 ff 00 ff 00 01     ................
     f1c:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01     ................
     f2c:	00 ff 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
     f3c:	00 00 00 00 00 00 00 01 00 03 08 06 00 ff 00 ff     ................
     f4c:	00 ff 00 01 00 00 00 00 00 00 00 08 00 00 00 00     ................
     f5c:	00 00 00 01 00 00 00 00 00 ff 00 01 00 ff 00 00     ................
     f6c:	00 00 00 01 00 00 00 00 00 00 00 01 00 05 08 04     ................
     f7c:	00 00 00 00 00 ff 00 20 00 00 00 00 00 00 00 40     ....... .......@
     f8c:	00 ff 00 00 00 00 00 20 00 00 00 00 00 00 00 40     ....... .......@
     f9c:	00 06 08 04 00 ff 00 00 00 00 00 20 00 00 00 00     ........... ....
     fac:	00 00 00 40 00 00 00 00 00 ff 00 20 00 00 00 00     ...@....... ....
     fbc:	00 00 00 40 00 08 08 06 00 ff 00 ff 00 ff 00 01     ...@............
     fcc:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01     ................
     fdc:	00 00 00 00 00 ff 00 01 00 ff 00 00 00 00 00 01     ................
     fec:	00 00 00 00 00 00 00 01 00 09 08 06 00 ff 00 ff     ................
     ffc:	00 ff 00 01 00 00 00 00 00 00 00 08 00 00 00 00     ................
    100c:	00 00 00 01 00 ff 00 00 00 00 00 01 00 00 00 00     ................
    101c:	00 ff 00 01 00 00 00 00 00 00 00 01 00 0a 08 06     ................
    102c:	00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00 00 08     ................
    103c:	00 00 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    104c:	00 ff 00 00 00 00 00 01 00 00 00 00 00 00 00 01     ................
    105c:	00 0b 08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00     ................
    106c:	00 00 00 08 00 00 00 00 00 00 00 01 00 ff 00 00     ................
    107c:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    108c:	00 00 00 01 00 ff ff 05 00 04 08 02 00 ff 00 00     ................
    109c:	00 00 00 40 00 00 00 00 00 7d 00 40 00 07 08 02     ...@.....}.@....
    10ac:	00 00 00 00 00 7d 00 40 00 ff 00 00 00 00 00 40     .....}.@.......@
    10bc:	00 ff ff 05 00 04 08 04 00 00 00 00 00 00 00 19     ................
    10cc:	00 ff 00 00 00 00 00 19 00 00 00 00 00 00 00 19     ................
    10dc:	00 00 00 00 00 7d 00 19 00 07 08 04 00 00 00 00     .....}..........
    10ec:	00 7d 00 19 00 00 00 00 00 00 00 19 00 ff 00 00     .}..............
    10fc:	00 00 00 19 00 00 00 00 00 00 00 19 00 ff ff 01     ................
    110c:	00 04 08 04 00 ff 00 00 00 00 00 04 00 00 00 00     ................
    111c:	00 00 00 10 00 00 00 00 00 ff 00 04 00 00 00 00     ................
    112c:	00 00 00 10 00 07 08 04 00 00 00 00 00 ff 00 04     ................
    113c:	00 00 00 00 00 00 00 10 00 ff 00 00 00 00 00 04     ................
    114c:	00 00 00 00 00 00 00 10 00 ff ff 38 18 04 03 00     ...........8....
    115c:	00 00 00 7d 00 01 00 1e 00 07 03 00 00 00 00 7d     ...}...........}
    116c:	00 01 00 1e 00 ff ff 0a 00 04 03 00 00 00 00 7d     ...............}
    117c:	00 01 00 0a 00 07 03 00 00 00 00 7d 00 01 00 0a     ...........}....
    118c:	00 ff ff 09 00 04 05 00 00 00 00 ff 00 ff 00 ff     ................
    119c:	00 00 00 03 00 01 00 0a 00 07 05 00 00 00 00 ff     ................
    11ac:	00 ff 00 ff 00 00 00 03 00 01 00 0a 00 ff ff 09     ................
    11bc:	00 04 05 00 00 00 00 ff 00 ff 00 ff 00 00 00 03     ................
    11cc:	00 01 00 05 00 07 05 00 00 00 00 ff 00 ff 00 ff     ................
    11dc:	00 00 00 03 00 01 00 05 00 ff ff 09 00 05 05 00     ................
    11ec:	00 00 00 ff 00 ff 00 ff 00 00 00 03 00 01 00 05     ................
    11fc:	00 04 05 00 00 00 00 ff 00 ff 00 ff 00 00 00 03     ................
    120c:	00 01 00 05 00 07 05 00 00 00 00 ff 00 ff 00 ff     ................
    121c:	00 00 00 03 00 01 00 05 00 06 05 00 00 00 00 ff     ................
    122c:	00 ff 00 ff 00 00 00 03 00 01 00 05 00 ff ff 0a     ................
    123c:	00 00 08 04 00 09 00 09 00 ff 00 01 00 00 00 00     ................
    124c:	00 00 00 05 00 ff 00 c8 00 00 00 01 00 00 00 00     ................
    125c:	00 00 00 01 00 01 08 04 00 ff 00 c8 00 00 00 01     ................
    126c:	00 00 00 00 00 00 00 05 00 09 00 09 00 ff 00 01     ................
    127c:	00 00 00 00 00 00 00 01 00 02 08 04 00 09 00 09     ................
    128c:	00 ff 00 01 00 00 00 00 00 00 00 05 00 ff 00 c8     ................
    129c:	00 00 00 01 00 00 00 00 00 00 00 01 00 03 08 04     ................
    12ac:	00 ff 00 c8 00 00 00 01 00 00 00 00 00 00 00 05     ................
    12bc:	00 09 00 09 00 ff 00 01 00 00 00 00 00 00 00 01     ................
    12cc:	00 05 08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00     ................
    12dc:	00 00 00 20 00 06 08 02 00 ff 00 ff 00 ff 00 10     ... ............
    12ec:	00 00 00 00 00 00 00 20 00 08 08 04 00 ff 00 c8     ....... ........
    12fc:	00 00 00 01 00 00 00 00 00 00 00 05 00 09 00 09     ................
    130c:	00 ff 00 01 00 00 00 00 00 00 00 01 00 09 08 04     ................
    131c:	00 09 00 09 00 ff 00 01 00 00 00 00 00 00 00 05     ................
    132c:	00 ff 00 c8 00 00 00 01 00 00 00 00 00 00 00 01     ................
    133c:	00 0a 08 04 00 ff 00 c8 00 00 00 01 00 00 00 00     ................
    134c:	00 00 00 05 00 09 00 09 00 ff 00 01 00 00 00 00     ................
    135c:	00 00 00 01 00 0b 08 04 00 09 00 09 00 ff 00 01     ................
    136c:	00 00 00 00 00 00 00 05 00 ff 00 c8 00 00 00 01     ................
    137c:	00 00 00 00 00 00 00 01 00 ff ff 38 18 04 03 00     ...........8....
    138c:	00 7d 00 00 00 01 00 1e 00 07 03 00 00 7d 00 00     .}...........}..
    139c:	00 01 00 1e 00 ff ff 0a 00 04 03 00 00 7d 00 00     .............}..
    13ac:	00 01 00 0a 00 07 03 00 00 7d 00 00 00 01 00 0a     .........}......
    13bc:	00 ff ff 09 00 04 05 00 00 ff 00 00 00 00 00 ff     ................
    13cc:	00 7d 00 03 00 01 00 0a 00 07 05 00 00 ff 00 00     .}..............
    13dc:	00 00 00 ff 00 7d 00 03 00 01 00 0a 00 ff ff 09     .....}..........
    13ec:	00 04 05 00 00 ff 00 00 00 00 00 ff 00 7d 00 03     .............}..
    13fc:	00 01 00 05 00 07 05 00 00 ff 00 00 00 00 00 ff     ................
    140c:	00 7d 00 03 00 01 00 05 00 ff ff 09 00 05 05 00     .}..............
    141c:	00 ff 00 00 00 00 00 ff 00 7d 00 03 00 01 00 05     .........}......
    142c:	00 04 05 00 00 ff 00 00 00 00 00 ff 00 7d 00 03     .............}..
    143c:	00 01 00 05 00 07 05 00 00 ff 00 00 00 00 00 ff     ................
    144c:	00 7d 00 03 00 01 00 05 00 06 05 00 00 ff 00 00     .}..............
    145c:	00 00 00 ff 00 7d 00 03 00 01 00 05 00 ff ff 01     .....}..........
    146c:	00 05 08 04 00 00 00 00 00 ff 00 04 00 00 00 00     ................
    147c:	00 00 00 10 00 00 00 ff 00 00 00 04 00 00 00 00     ................
    148c:	00 00 00 10 00 04 03 ff 00 00 00 80 00 01 00 10     ................
    149c:	00 07 03 ff 00 00 00 80 00 01 00 10 00 06 08 04     ................
    14ac:	00 00 00 00 00 ff 00 04 00 00 00 00 00 00 00 10     ................
    14bc:	00 00 00 ff 00 00 00 04 00 00 00 00 00 00 00 10     ................
    14cc:	00 ff ff 0a 00 00 08 06 00 80 00 00 00 ff 00 01     ................
    14dc:	00 00 00 00 00 00 00 04 00 00 00 00 00 ff 00 01     ................
    14ec:	00 00 00 00 00 00 00 04 00 00 00 ff 00 00 00 01     ................
    14fc:	00 00 00 00 00 00 00 04 00 01 08 06 00 80 00 00     ................
    150c:	00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00 00     ................
    151c:	00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00 ff     ................
    152c:	00 00 00 01 00 00 00 00 00 00 00 04 00 02 08 06     ................
    153c:	00 80 00 00 00 ff 00 01 00 00 00 00 00 00 00 04     ................
    154c:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 04     ................
    155c:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 04     ................
    156c:	00 03 08 06 00 80 00 00 00 ff 00 01 00 00 00 00     ................
    157c:	00 01 00 04 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    158c:	00 01 00 04 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    159c:	00 01 00 04 00 04 03 80 00 00 00 ff 00 01 00 40     ...............@
    15ac:	00 07 03 80 00 00 00 ff 00 01 00 40 00 08 08 06     ...........@....
    15bc:	00 80 00 00 00 ff 00 01 00 00 00 00 00 01 00 04     ................
    15cc:	00 00 00 00 00 ff 00 01 00 00 00 00 00 01 00 04     ................
    15dc:	00 00 00 ff 00 00 00 01 00 00 00 00 00 01 00 04     ................
    15ec:	00 09 08 06 00 80 00 00 00 ff 00 01 00 00 00 00     ................
    15fc:	00 00 00 04 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    160c:	00 00 00 04 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    161c:	00 00 00 04 00 0a 08 06 00 80 00 00 00 ff 00 01     ................
    162c:	00 00 00 00 00 00 00 04 00 00 00 00 00 ff 00 01     ................
    163c:	00 00 00 00 00 00 00 04 00 00 00 ff 00 00 00 01     ................
    164c:	00 00 00 00 00 00 00 04 00 0b 08 06 00 80 00 00     ................
    165c:	00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00 00     ................
    166c:	00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00 ff     ................
    167c:	00 00 00 01 00 00 00 00 00 00 00 04 00 ff ff 0a     ................
    168c:	00 00 08 04 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    169c:	00 00 00 05 00 ff 00 00 00 c8 00 01 00 00 00 00     ................
    16ac:	00 00 00 01 00 01 08 04 00 ff 00 00 00 c8 00 01     ................
    16bc:	00 00 00 00 00 00 00 05 00 00 00 ff 00 00 00 01     ................
    16cc:	00 00 00 00 00 00 00 01 00 02 08 04 00 00 00 ff     ................
    16dc:	00 00 00 01 00 00 00 00 00 00 00 05 00 ff 00 00     ................
    16ec:	00 c8 00 01 00 00 00 00 00 00 00 01 00 03 08 04     ................
    16fc:	00 ff 00 00 00 c8 00 01 00 00 00 00 00 00 00 05     ................
    170c:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 01     ................
    171c:	00 05 08 02 00 ff 00 ff 00 ff 00 10 00 00 00 00     ................
    172c:	00 00 00 20 00 06 08 02 00 ff 00 ff 00 ff 00 10     ... ............
    173c:	00 00 00 00 00 00 00 20 00 08 08 04 00 ff 00 00     ....... ........
    174c:	00 c8 00 01 00 00 00 00 00 00 00 05 00 00 00 ff     ................
    175c:	00 00 00 01 00 00 00 00 00 00 00 01 00 09 08 04     ................
    176c:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 05     ................
    177c:	00 ff 00 00 00 c8 00 01 00 00 00 00 00 00 00 01     ................
    178c:	00 0a 08 04 00 ff 00 00 00 c8 00 01 00 00 00 00     ................
    179c:	00 00 00 05 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    17ac:	00 00 00 01 00 0b 08 04 00 00 00 ff 00 00 00 01     ................
    17bc:	00 00 00 00 00 00 00 05 00 ff 00 00 00 c8 00 01     ................
    17cc:	00 00 00 00 00 00 00 01 00 ff ff 38 18 04 03 00     ...........8....
    17dc:	00 7d 00 00 00 01 00 1e 00 07 03 00 00 7d 00 00     .}...........}..
    17ec:	00 01 00 1e 00 ff ff 0a 00 04 03 00 00 7d 00 00     .............}..
    17fc:	00 01 00 0a 00 07 03 00 00 7d 00 00 00 01 00 0a     .........}......
    180c:	00 ff ff 09 00 04 05 00 00 ff 00 00 00 ff 00 ff     ................
    181c:	00 00 00 03 00 01 00 0a 00 07 05 00 00 ff 00 00     ................
    182c:	00 ff 00 ff 00 00 00 03 00 01 00 0a 00 ff ff 09     ................
    183c:	00 04 05 00 00 ff 00 00 00 ff 00 ff 00 00 00 03     ................
    184c:	00 01 00 05 00 07 05 00 00 ff 00 00 00 ff 00 ff     ................
    185c:	00 00 00 03 00 01 00 05 00 ff ff 09 00 04 05 00     ................
    186c:	00 ff 00 00 00 ff 00 ff 00 00 00 03 00 01 00 05     ................
    187c:	00 05 05 00 00 ff 00 00 00 ff 00 ff 00 00 00 03     ................
    188c:	00 01 00 05 00 06 05 00 00 ff 00 00 00 ff 00 ff     ................
    189c:	00 00 00 03 00 01 00 05 00 07 05 00 00 ff 00 00     ................
    18ac:	00 ff 00 ff 00 00 00 03 00 01 00 05 00 ff ff 6e     ...............n
    18bc:	00 04 08 02 00 00 00 ff 00 00 00 01 00 01 00 01     ................
    18cc:	00 00 00 10 00 07 08 02 00 00 00 ff 00 00 00 01     ................
    18dc:	00 01 00 01 00 00 00 10 00 ff ff 6e 00 04 08 02     ...........n....
    18ec:	00 00 00 ff 00 00 00 01 00 00 00 01 00 01 00 09     ................
    18fc:	00 07 08 02 00 00 00 ff 00 00 00 01 00 00 00 01     ................
    190c:	00 01 00 09 00 ff ff d2 00 00 03 00 00 40 00 80     .............@..
    191c:	00 01 00 04 00 01 08 02 00 00 00 40 00 80 00 01     ...........@....
    192c:	00 00 00 00 00 00 00 08 00 02 08 03 00 00 00 40     ...............@
    193c:	00 80 00 04 00 64 00 14 00 00 00 04 00 02 00 00     .....d..........
    194c:	00 01 00 18 00 03 08 02 00 00 00 40 00 80 00 19     ...........@....
    195c:	00 64 00 14 00 00 00 19 00 05 08 03 00 64 00 00     .d...........d..
    196c:	00 00 00 03 00 ff 00 3c 00 00 00 03 00 00 00 00     .......<........
    197c:	00 00 00 23 00 06 08 03 00 64 00 00 00 00 00 03     ...#.....d......
    198c:	00 ff 00 3c 00 00 00 03 00 00 00 00 00 00 00 23     ...<...........#
    199c:	00 08 08 02 00 00 00 40 00 80 00 19 00 64 00 14     .......@.....d..
    19ac:	00 00 00 19 00 09 08 03 00 00 00 40 00 80 00 04     ...........@....
    19bc:	00 64 00 14 00 00 00 04 00 02 00 00 00 01 00 18     .d..............
    19cc:	00 0a 08 02 00 00 00 40 00 80 00 01 00 00 00 00     .......@........
    19dc:	00 00 00 08 00 0b 03 00 00 40 00 80 00 01 00 04     .........@......
    19ec:	00 ff ff d2 00 00 03 40 00 00 00 80 00 01 00 04     .......@........
    19fc:	00 01 08 02 00 40 00 00 00 80 00 01 00 00 00 00     .....@..........
    1a0c:	00 00 00 08 00 02 08 03 00 40 00 00 00 80 00 04     .........@......
    1a1c:	00 64 00 14 00 00 00 04 00 02 00 00 00 01 00 18     .d..............
    1a2c:	00 03 08 02 00 40 00 00 00 80 00 19 00 64 00 14     .....@.......d..
    1a3c:	00 00 00 19 00 05 08 03 00 64 00 00 00 00 00 03     .........d......
    1a4c:	00 ff 00 3c 00 00 00 03 00 00 00 00 00 00 00 23     ...<...........#
    1a5c:	00 06 08 03 00 64 00 00 00 00 00 03 00 ff 00 3c     .....d.........<
    1a6c:	00 00 00 03 00 00 00 00 00 00 00 23 00 08 08 02     ...........#....
    1a7c:	00 40 00 00 00 80 00 19 00 64 00 14 00 00 00 19     .@.......d......
    1a8c:	00 09 08 03 00 40 00 00 00 80 00 04 00 64 00 14     .....@.......d..
    1a9c:	00 00 00 04 00 02 00 00 00 01 00 18 00 0a 08 02     ................
    1aac:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 08     .@..............
    1abc:	00 0b 03 40 00 00 00 80 00 01 00 04 00 ff ff d2     ...@............
    1acc:	00 00 03 00 00 40 00 80 00 01 00 04 00 01 08 02     .....@..........
    1adc:	00 00 00 40 00 80 00 01 00 00 00 00 00 00 00 08     ...@............
    1aec:	00 02 08 03 00 00 00 40 00 80 00 04 00 40 00 00     .......@.....@..
    1afc:	00 80 00 04 00 02 00 00 00 01 00 18 00 03 08 02     ................
    1b0c:	00 00 00 40 00 80 00 19 00 40 00 00 00 80 00 19     ...@.....@......
    1b1c:	00 05 08 03 00 64 00 00 00 00 00 03 00 40 00 00     .....d.......@..
    1b2c:	00 80 00 03 00 00 00 00 00 00 00 23 00 06 08 03     ...........#....
    1b3c:	00 64 00 00 00 00 00 03 00 40 00 00 00 80 00 03     .d.......@......
    1b4c:	00 00 00 00 00 00 00 23 00 08 08 02 00 00 00 40     .......#.......@
    1b5c:	00 80 00 19 00 40 00 00 00 80 00 19 00 09 08 03     .....@..........
    1b6c:	00 00 00 40 00 80 00 04 00 40 00 00 00 80 00 04     ...@.....@......
    1b7c:	00 02 00 00 00 01 00 18 00 0a 08 02 00 00 00 40     ...............@
    1b8c:	00 80 00 01 00 00 00 00 00 00 00 08 00 0b 03 00     ................
    1b9c:	00 40 00 80 00 01 00 04 00 ff ff c8 00 00 08 06     .@..............
    1bac:	00 ff 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    1bbc:	00 00 00 00 00 00 00 08 00 af 00 60 00 60 00 01     ...........`.`..
    1bcc:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01     ................
    1bdc:	00 01 08 06 00 ff 00 00 00 00 00 01 00 00 00 00     ................
    1bec:	00 ff 00 01 00 00 00 00 00 00 00 08 00 af 00 60     ...............`
    1bfc:	00 60 00 01 00 00 00 00 00 00 00 08 00 00 00 00     .`..............
    1c0c:	00 00 00 01 00 02 08 06 00 ff 00 00 00 00 00 01     ................
    1c1c:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 08     ................
    1c2c:	00 af 00 60 00 60 00 01 00 00 00 00 00 00 00 08     ...`.`..........
    1c3c:	00 00 00 00 00 00 00 01 00 03 08 06 00 ff 00 00     ................
    1c4c:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    1c5c:	00 00 00 08 00 af 00 60 00 60 00 01 00 00 00 00     .......`.`......
    1c6c:	00 00 00 08 00 00 00 00 00 00 00 01 00 05 05 ff     ................
	...
    1c84:	00 ff 00 0a 00 14 00 4b 00 06 05 ff 00 00 00 00     .......K........
    1c94:	00 00 00 00 00 ff 00 0a 00 14 00 4b 00 08 08 06     ...........K....
    1ca4:	00 ff 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    1cb4:	00 00 00 00 00 00 00 08 00 af 00 60 00 60 00 01     ...........`.`..
    1cc4:	00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01     ................
    1cd4:	00 09 08 06 00 ff 00 00 00 00 00 01 00 00 00 00     ................
    1ce4:	00 ff 00 01 00 00 00 00 00 00 00 08 00 af 00 60     ...............`
    1cf4:	00 60 00 01 00 00 00 00 00 00 00 08 00 00 00 00     .`..............
    1d04:	00 00 00 01 00 0a 08 06 00 ff 00 00 00 00 00 01     ................
    1d14:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 08     ................
    1d24:	00 af 00 60 00 60 00 01 00 00 00 00 00 00 00 08     ...`.`..........
    1d34:	00 00 00 00 00 00 00 01 00 0b 08 06 00 ff 00 00     ................
    1d44:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    1d54:	00 00 00 08 00 af 00 60 00 60 00 01 00 00 00 00     .......`.`......
    1d64:	00 00 00 08 00 00 00 00 00 00 00 01 00 ff ff 0a     ................
    1d74:	00 00 08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00     ................
    1d84:	00 00 00 01 00 00 00 00 00 00 00 0c 00 01 08 03     ................
    1d94:	00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01     ................
    1da4:	00 00 00 00 00 00 00 0c 00 02 08 03 00 ff 00 ff     ................
    1db4:	00 ff 00 01 00 ff 00 00 00 00 00 01 00 00 00 00     ................
    1dc4:	00 00 00 0c 00 03 08 03 00 ff 00 ff 00 ff 00 01     ................
    1dd4:	00 ff 00 00 00 00 00 01 00 00 00 00 00 00 00 0c     ................
    1de4:	00 04 08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00     ................
    1df4:	00 00 00 01 00 00 00 00 00 00 00 0c 00 05 08 03     ................
    1e04:	00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01     ................
    1e14:	00 00 00 00 00 00 00 0c 00 06 08 03 00 ff 00 ff     ................
    1e24:	00 ff 00 01 00 ff 00 00 00 00 00 01 00 00 00 00     ................
    1e34:	00 00 00 0c 00 07 08 03 00 ff 00 ff 00 ff 00 01     ................
    1e44:	00 ff 00 00 00 00 00 01 00 00 00 00 00 00 00 0c     ................
    1e54:	00 08 08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00     ................
    1e64:	00 00 00 01 00 00 00 00 00 00 00 0c 00 09 08 03     ................
    1e74:	00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01     ................
    1e84:	00 00 00 00 00 00 00 0c 00 0a 08 03 00 ff 00 ff     ................
    1e94:	00 ff 00 01 00 ff 00 00 00 00 00 01 00 00 00 00     ................
    1ea4:	00 00 00 0c 00 0b 08 03 00 ff 00 ff 00 ff 00 01     ................
    1eb4:	00 ff 00 00 00 00 00 01 00 00 00 00 00 00 00 0c     ................
    1ec4:	00 ff ff 32 00 00 08 04 00 00 00 00 00 ff 00 01     ...2............
    1ed4:	00 00 00 00 00 00 00 08 00 40 00 00 00 80 00 01     .........@......
    1ee4:	00 00 00 00 00 00 00 11 00 01 08 02 00 40 00 00     .............@..
    1ef4:	00 80 00 01 00 00 00 00 00 00 00 08 00 02 08 06     ................
    1f04:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 08     ................
    1f14:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 08     .@..............
    1f24:	00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00 00 08     ................
    1f34:	00 03 08 04 00 40 00 00 00 80 00 01 00 00 00 00     .....@..........
    1f44:	00 00 00 08 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    1f54:	00 00 00 11 00 05 03 1e 00 00 00 3c 00 10 00 10     ...........<....
    1f64:	00 06 03 1e 00 00 00 3c 00 10 00 10 00 08 08 04     .......<........
    1f74:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 08     .@..............
    1f84:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 11     ................
    1f94:	00 09 08 06 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    1fa4:	00 00 00 08 00 40 00 00 00 80 00 01 00 00 00 00     .....@..........
    1fb4:	00 00 00 08 00 ff 00 ff 00 ff 00 01 00 00 00 00     ................
    1fc4:	00 00 00 08 00 0a 08 02 00 40 00 00 00 80 00 01     .........@......
    1fd4:	00 00 00 00 00 00 00 08 00 0b 08 04 00 00 00 00     ................
    1fe4:	00 ff 00 01 00 00 00 00 00 00 00 08 00 40 00 00     .............@..
    1ff4:	00 80 00 01 00 00 00 00 00 00 00 11 00 ff ff 64     ...............d
    2004:	00 03 08 04 00 00 00 80 00 80 00 01 00 02 00 00     ................
    2014:	00 01 00 10 00 00 00 00 00 c8 00 01 00 02 00 00     ................
    2024:	00 01 00 18 00 05 03 1e 00 00 00 3c 00 10 00 10     ...........<....
    2034:	00 06 03 1e 00 00 00 3c 00 10 00 10 00 08 08 04     .......<........
    2044:	00 00 00 80 00 80 00 01 00 02 00 00 00 01 00 10     ................
    2054:	00 00 00 00 00 c8 00 01 00 02 00 00 00 01 00 18     ................
    2064:	00 ff ff 64 00 03 08 04 00 00 00 80 00 80 00 01     ...d............
    2074:	00 02 00 00 00 01 00 10 00 00 00 00 00 c8 00 01     ................
    2084:	00 02 00 00 00 01 00 18 00 04 03 40 00 00 00 80     ...........@....
    2094:	00 01 00 04 00 07 03 40 00 00 00 80 00 01 00 04     .......@........
    20a4:	00 08 08 04 00 00 00 80 00 80 00 01 00 02 00 00     ................
    20b4:	00 01 00 10 00 00 00 00 00 c8 00 01 00 02 00 00     ................
    20c4:	00 01 00 18 00 ff ff 64 00 04 03 40 00 00 00 80     .......d...@....
    20d4:	00 01 00 04 00 07 03 40 00 00 00 80 00 01 00 04     .......@........
    20e4:	00 ff ff 64 00 04 03 40 00 00 00 80 00 01 00 09     ...d...@........
    20f4:	00 07 03 40 00 00 00 80 00 01 00 09 00 ff ff 64     ...@...........d
    2104:	00 04 03 40 00 00 00 80 00 09 00 09 00 07 03 40     ...@...........@
    2114:	00 00 00 80 00 09 00 09 00 ff ff 64 00 04 08 03     ...........d....
    2124:	00 64 00 00 00 00 00 03 00 40 00 00 00 80 00 03     .d.......@......
    2134:	00 00 00 00 00 00 00 23 00 07 08 03 00 64 00 00     .......#.....d..
    2144:	00 00 00 03 00 40 00 00 00 80 00 03 00 00 00 00     .....@..........
    2154:	00 00 00 23 00 ff ff 64 00 00 05 00 00 7d 00 7d     ...#...d.....}.}
    2164:	00 00 00 7d 00 00 00 32 00 02 00 09 00 01 05 00     ...}...2........
    2174:	00 7d 00 7d 00 00 00 00 00 7d 00 32 00 02 00 09     .}.}.....}.2....
    2184:	00 02 05 00 00 7d 00 7d 00 00 00 7d 00 00 00 32     .....}.}...}...2
    2194:	00 02 00 09 00 03 05 00 00 7d 00 7d 00 00 00 00     .........}.}....
    21a4:	00 7d 00 32 00 02 00 09 00 04 05 ff 00 00 00 00     .}.2............
    21b4:	00 00 00 00 00 ff 00 09 00 02 00 09 00 07 05 ff     ................
	...
    21cc:	00 ff 00 09 00 02 00 09 00 08 05 00 00 7d 00 7d     .............}.}
    21dc:	00 00 00 00 00 7d 00 32 00 02 00 09 00 09 05 00     .....}.2........
    21ec:	00 7d 00 7d 00 00 00 7d 00 00 00 32 00 02 00 09     .}.}...}...2....
    21fc:	00 0a 05 00 00 7d 00 7d 00 00 00 00 00 7d 00 32     .....}.}.....}.2
    220c:	00 02 00 09 00 0b 05 00 00 7d 00 7d 00 00 00 7d     .........}.}...}
    221c:	00 00 00 32 00 02 00 09 00 ff ff 6e 00 00 08 03     ...2.......n....
    222c:	00 c8 00 14 00 00 00 04 00 00 00 01 00 01 00 20     ............... 
    223c:	00 00 00 00 00 00 00 04 00 01 03 00 00 ff 00 ff     ................
    224c:	00 01 00 0c 00 02 03 00 00 ff 00 ff 00 01 00 0c     ................
    225c:	00 03 08 02 00 c8 00 28 00 00 00 01 00 00 00 01     .......(........
    226c:	00 01 00 10 00 04 03 00 00 ff 00 ff 00 01 00 18     ................
    227c:	00 07 03 00 00 ff 00 ff 00 01 00 18 00 08 08 02     ................
    228c:	00 c8 00 28 00 00 00 01 00 00 00 01 00 01 00 10     ...(............
    229c:	00 09 03 00 00 ff 00 ff 00 01 00 0c 00 0a 03 00     ................
    22ac:	00 ff 00 ff 00 01 00 0c 00 0b 08 03 00 c8 00 28     ...............(
    22bc:	00 00 00 04 00 00 00 01 00 01 00 20 00 00 00 00     ........... ....
    22cc:	00 00 00 04 00 ff ff 14 00 00 08 04 00 00 00 ff     ................
    22dc:	00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00 ff     ................
    22ec:	00 ff 00 01 00 00 00 00 00 00 00 10 00 01 08 02     ................
    22fc:	00 00 00 ff 00 ff 00 04 00 00 00 01 00 01 00 20     ............... 
    230c:	00 02 03 00 00 ff 00 ff 00 01 00 10 00 03 08 04     ................
    231c:	00 00 00 ff 00 ff 00 01 00 00 00 00 00 00 00 04     ................
    232c:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 10     ................
    233c:	00 05 08 02 00 00 00 ff 00 ff 00 10 00 00 00 00     ................
    234c:	00 00 00 10 00 06 08 02 00 00 00 00 00 ff 00 10     ................
    235c:	00 00 00 00 00 00 00 10 00 08 08 04 00 00 00 ff     ................
    236c:	00 ff 00 01 00 00 00 00 00 00 00 04 00 00 00 00     ................
    237c:	00 ff 00 01 00 00 00 00 00 00 00 10 00 09 03 00     ................
    238c:	00 00 00 ff 00 01 00 10 00 0a 08 02 00 00 00 00     ................
    239c:	00 ff 00 04 00 00 00 00 00 01 00 20 00 0b 08 04     ........... ....
    23ac:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 04     ................
    23bc:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 10     ................
    23cc:	00 ff ff 0a 00 00 08 04 00 00 00 ff 00 ff 00 01     ................
    23dc:	00 00 00 00 00 00 00 04 00 00 00 ff 00 ff 00 01     ................
    23ec:	00 00 00 00 00 00 00 10 00 01 08 02 00 00 00 ff     ................
    23fc:	00 ff 00 04 00 00 00 01 00 01 00 20 00 02 03 00     ........... ....
    240c:	00 ff 00 ff 00 01 00 10 00 03 08 04 00 00 00 ff     ................
    241c:	00 ff 00 01 00 00 00 00 00 00 00 04 00 ff 00 ff     ................
    242c:	00 00 00 01 00 00 00 00 00 00 00 10 00 05 08 02     ................
    243c:	00 00 00 ff 00 ff 00 10 00 00 00 00 00 00 00 10     ................
    244c:	00 06 08 02 00 ff 00 ff 00 00 00 10 00 00 00 00     ................
    245c:	00 00 00 10 00 08 08 04 00 00 00 ff 00 ff 00 01     ................
    246c:	00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00 01     ................
    247c:	00 00 00 00 00 00 00 10 00 09 03 ff 00 ff 00 00     ................
    248c:	00 01 00 10 00 0a 08 02 00 ff 00 ff 00 00 00 04     ................
    249c:	00 01 00 01 00 00 00 20 00 0b 08 04 00 ff 00 ff     ....... ........
    24ac:	00 00 00 01 00 00 00 00 00 00 00 04 00 ff 00 ff     ................
    24bc:	00 00 00 01 00 00 00 00 00 00 00 10 00 ff ff 0a     ................
    24cc:	00 00 08 04 00 ff 00 00 00 80 00 01 00 00 00 00     ................
    24dc:	00 00 00 04 00 ff 00 00 00 80 00 01 00 00 00 00     ................
    24ec:	00 00 00 10 00 01 08 02 00 ff 00 00 00 80 00 04     ................
    24fc:	00 02 00 00 00 01 00 20 00 02 03 ff 00 00 00 80     ....... ........
    250c:	00 01 00 10 00 03 08 04 00 ff 00 00 00 80 00 01     ................
    251c:	00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00 01     ................
    252c:	00 00 00 00 00 00 00 10 00 05 08 02 00 ff 00 00     ................
    253c:	00 80 00 10 00 00 00 00 00 00 00 10 00 06 08 02     ................
    254c:	00 ff 00 ff 00 00 00 10 00 00 00 00 00 00 00 10     ................
    255c:	00 08 08 04 00 ff 00 00 00 80 00 01 00 00 00 00     ................
    256c:	00 00 00 04 00 ff 00 ff 00 00 00 01 00 00 00 00     ................
    257c:	00 00 00 10 00 09 03 ff 00 ff 00 00 00 01 00 10     ................
    258c:	00 0a 08 02 00 ff 00 ff 00 00 00 04 00 01 00 01     ................
    259c:	00 00 00 20 00 0b 08 04 00 ff 00 ff 00 00 00 01     ... ............
    25ac:	00 00 00 00 00 00 00 04 00 ff 00 ff 00 00 00 01     ................
    25bc:	00 00 00 00 00 00 00 10 00 ff ff 05 00 00 08 0a     ................
    25cc:	00 40 00 00 00 80 00 01 00 00 00 00 00 00 00 01     .@..............
    25dc:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 01     ................
    25ec:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 01     ................
    25fc:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 01     ................
    260c:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 01     ................
    261c:	00 01 08 0a 00 ff 00 00 00 10 00 01 00 00 00 00     ................
    262c:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    263c:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    264c:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    265c:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    266c:	00 00 00 01 00 02 08 0a 00 ff 00 00 00 10 00 01     ................
    267c:	00 00 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    268c:	00 00 00 00 00 00 00 01 00 00 00 ff 00 00 00 01     ................
    269c:	00 00 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    26ac:	00 00 00 00 00 00 00 01 00 00 00 ff 00 00 00 01     ................
    26bc:	00 00 00 00 00 00 00 01 00 03 08 0a 00 ff 00 00     ................
    26cc:	00 10 00 01 00 00 00 00 00 00 00 01 00 00 00 00     ................
    26dc:	00 ff 00 01 00 00 00 00 00 00 00 01 00 00 00 ff     ................
    26ec:	00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00     ................
    26fc:	00 ff 00 01 00 00 00 00 00 00 00 01 00 00 00 ff     ................
    270c:	00 00 00 01 00 00 00 00 00 00 00 01 00 05 08 0a     ................
    271c:	00 ff 00 00 00 10 00 04 00 00 00 00 00 00 00 20     ............... 
    272c:	00 00 00 00 00 ff 00 04 00 00 00 00 00 00 00 20     ............... 
    273c:	00 00 00 ff 00 00 00 04 00 00 00 00 00 00 00 20     ............... 
    274c:	00 00 00 00 00 ff 00 04 00 00 00 00 00 00 00 20     ............... 
    275c:	00 00 00 ff 00 00 00 04 00 00 00 00 00 00 00 20     ............... 
    276c:	00 06 08 0a 00 ff 00 00 00 10 00 04 00 00 00 00     ................
    277c:	00 00 00 20 00 00 00 00 00 ff 00 04 00 00 00 00     ... ............
    278c:	00 00 00 20 00 00 00 ff 00 00 00 04 00 00 00 00     ... ............
    279c:	00 00 00 20 00 00 00 00 00 ff 00 04 00 00 00 00     ... ............
    27ac:	00 00 00 20 00 00 00 ff 00 00 00 04 00 00 00 00     ... ............
    27bc:	00 00 00 20 00 08 08 0a 00 ff 00 00 00 10 00 01     ... ............
    27cc:	00 00 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    27dc:	00 00 00 00 00 00 00 01 00 00 00 ff 00 00 00 01     ................
    27ec:	00 00 00 00 00 00 00 01 00 00 00 00 00 ff 00 01     ................
    27fc:	00 00 00 00 00 00 00 01 00 00 00 ff 00 00 00 01     ................
    280c:	00 00 00 00 00 00 00 01 00 09 08 0a 00 ff 00 00     ................
    281c:	00 10 00 01 00 00 00 00 00 00 00 01 00 00 00 00     ................
    282c:	00 ff 00 01 00 00 00 00 00 00 00 01 00 00 00 ff     ................
    283c:	00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00     ................
    284c:	00 ff 00 01 00 00 00 00 00 00 00 01 00 00 00 ff     ................
    285c:	00 00 00 01 00 00 00 00 00 00 00 01 00 0a 08 0a     ................
    286c:	00 ff 00 00 00 10 00 01 00 00 00 00 00 00 00 01     ................
    287c:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 01     ................
    288c:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 01     ................
    289c:	00 00 00 00 00 ff 00 01 00 00 00 00 00 00 00 01     ................
    28ac:	00 00 00 ff 00 00 00 01 00 00 00 00 00 00 00 01     ................
    28bc:	00 0b 08 0a 00 ff 00 00 00 10 00 01 00 00 00 00     ................
    28cc:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    28dc:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    28ec:	00 00 00 01 00 00 00 00 00 ff 00 01 00 00 00 00     ................
    28fc:	00 00 00 01 00 00 00 ff 00 00 00 01 00 00 00 00     ................
    290c:	00 00 00 01 00 ff ff 0a 00 ff 00 00                 ............

00002918 <__ctors_end>:
    2918:	11 24       	eor	r1, r1
    291a:	1f be       	out	0x3f, r1	; 63
    291c:	cf ef       	ldi	r28, 0xFF	; 255
    291e:	d0 e1       	ldi	r29, 0x10	; 16
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	cd bf       	out	0x3d, r28	; 61

00002924 <__do_copy_data>:
    2924:	12 e0       	ldi	r17, 0x02	; 2
    2926:	a0 e0       	ldi	r26, 0x00	; 0
    2928:	b1 e0       	ldi	r27, 0x01	; 1
    292a:	e8 e8       	ldi	r30, 0x88	; 136
    292c:	f3 e5       	ldi	r31, 0x53	; 83
    292e:	00 e0       	ldi	r16, 0x00	; 0
    2930:	0b bf       	out	0x3b, r16	; 59
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <__do_copy_data+0x14>
    2934:	07 90       	elpm	r0, Z+
    2936:	0d 92       	st	X+, r0
    2938:	a0 31       	cpi	r26, 0x10	; 16
    293a:	b1 07       	cpc	r27, r17
    293c:	d9 f7       	brne	.-10     	; 0x2934 <__do_copy_data+0x10>

0000293e <__do_clear_bss>:
    293e:	1e e0       	ldi	r17, 0x0E	; 14
    2940:	a0 e1       	ldi	r26, 0x10	; 16
    2942:	b2 e0       	ldi	r27, 0x02	; 2
    2944:	01 c0       	rjmp	.+2      	; 0x2948 <.do_clear_bss_start>

00002946 <.do_clear_bss_loop>:
    2946:	1d 92       	st	X+, r1

00002948 <.do_clear_bss_start>:
    2948:	a5 3f       	cpi	r26, 0xF5	; 245
    294a:	b1 07       	cpc	r27, r17
    294c:	e1 f7       	brne	.-8      	; 0x2946 <.do_clear_bss_loop>
    294e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <main>
    2952:	0c 94 c2 29 	jmp	0x5384	; 0x5384 <_exit>

00002956 <__bad_interrupt>:
    2956:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000295a <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
    2968:	00 e0       	ldi	r16, 0x00	; 0
    296a:	10 e0       	ldi	r17, 0x00	; 0
    296c:	ee 24       	eor	r14, r14
    296e:	ff 24       	eor	r15, r15
    2970:	0c c0       	rjmp	.+24     	; 0x298a <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
    2972:	80 91 10 02 	lds	r24, 0x0210
    2976:	90 91 11 02 	lds	r25, 0x0211
    297a:	0a 97       	sbiw	r24, 0x0a	; 10
    297c:	4c f5       	brge	.+82     	; 0x29d0 <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    297e:	0f 5f       	subi	r16, 0xFF	; 255
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	27 96       	adiw	r28, 0x07	; 7
    2984:	0c 30       	cpi	r16, 0x0C	; 12
    2986:	11 05       	cpc	r17, r1
    2988:	79 f0       	breq	.+30     	; 0x29a8 <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
    298a:	8e 81       	ldd	r24, Y+6	; 0x06
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	89 f3       	breq	.-30     	; 0x2972 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    2990:	6c 81       	ldd	r22, Y+4	; 0x04
    2992:	7d 81       	ldd	r23, Y+5	; 0x05
    2994:	e8 81       	ld	r30, Y
    2996:	f9 81       	ldd	r31, Y+1	; 0x01
    2998:	c8 01       	movw	r24, r16
    299a:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    299c:	0f 5f       	subi	r16, 0xFF	; 255
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	27 96       	adiw	r28, 0x07	; 7
    29a2:	0c 30       	cpi	r16, 0x0C	; 12
    29a4:	11 05       	cpc	r17, r1
    29a6:	89 f7       	brne	.-30     	; 0x298a <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	e8 16       	cp	r14, r24
    29ac:	f1 04       	cpc	r15, r1
    29ae:	d1 f0       	breq	.+52     	; 0x29e4 <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
    29b0:	80 91 10 02 	lds	r24, 0x0210
    29b4:	90 91 11 02 	lds	r25, 0x0211
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	90 93 11 02 	sts	0x0211, r25
    29be:	80 93 10 02 	sts	0x0210, r24
	}
}
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	ff 90       	pop	r15
    29cc:	ef 90       	pop	r14
    29ce:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    29d0:	6c 81       	ldd	r22, Y+4	; 0x04
    29d2:	7d 81       	ldd	r23, Y+5	; 0x05
    29d4:	e8 81       	ld	r30, Y
    29d6:	f9 81       	ldd	r31, Y+1	; 0x01
    29d8:	c8 01       	movw	r24, r16
    29da:	09 95       	icall
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	e8 2e       	mov	r14, r24
    29e0:	f1 2c       	mov	r15, r1
    29e2:	cd cf       	rjmp	.-102    	; 0x297e <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
    29e4:	10 92 11 02 	sts	0x0211, r1
    29e8:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	ef 90       	pop	r14
    29f8:	08 95       	ret

000029fa <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
    29fa:	2f 92       	push	r2
    29fc:	3f 92       	push	r3
    29fe:	4f 92       	push	r4
    2a00:	5f 92       	push	r5
    2a02:	6f 92       	push	r6
    2a04:	7f 92       	push	r7
    2a06:	8f 92       	push	r8
    2a08:	9f 92       	push	r9
    2a0a:	af 92       	push	r10
    2a0c:	bf 92       	push	r11
    2a0e:	cf 92       	push	r12
    2a10:	df 92       	push	r13
    2a12:	ef 92       	push	r14
    2a14:	ff 92       	push	r15
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	c0 56       	subi	r28, 0x60	; 96
    2a24:	d0 40       	sbci	r29, 0x00	; 0
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
    2a30:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
    2a34:	8f ef       	ldi	r24, 0xFF	; 255
    2a36:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
    2a3a:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
    2a3c:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
    2a3e:	8b b3       	in	r24, 0x1b	; 27
    2a40:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
    2a42:	8e b5       	in	r24, 0x2e	; 46
    2a44:	88 60       	ori	r24, 0x08	; 8
    2a46:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
    2a48:	80 e4       	ldi	r24, 0x40	; 64
    2a4a:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
    2a4c:	80 ea       	ldi	r24, 0xA0	; 160
    2a4e:	9f e0       	ldi	r25, 0x0F	; 15
    2a50:	9b bd       	out	0x2b, r25	; 43
    2a52:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
    2a54:	8e b5       	in	r24, 0x2e	; 46
    2a56:	82 60       	ori	r24, 0x02	; 2
    2a58:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
    2a5a:	0e 94 b0 22 	call	0x4560	; 0x4560 <initDecoder>
    2a5e:	4d e0       	ldi	r20, 0x0D	; 13
    2a60:	64 2e       	mov	r6, r20
    2a62:	71 2c       	mov	r7, r1
    2a64:	6c 0e       	add	r6, r28
    2a66:	7d 1e       	adc	r7, r29
    2a68:	f3 01       	movw	r30, r6
    2a6a:	8a e3       	ldi	r24, 0x3A	; 58
    2a6c:	96 e1       	ldi	r25, 0x16	; 22
    2a6e:	9e 01       	movw	r18, r28
    2a70:	2f 59       	subi	r18, 0x9F	; 159
    2a72:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2a74:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
    2a76:	6f e9       	ldi	r22, 0x9F	; 159
    2a78:	76 e1       	ldi	r23, 0x16	; 22
    2a7a:	71 83       	std	Z+1, r23	; 0x01
    2a7c:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
    2a7e:	93 83       	std	Z+3, r25	; 0x03
    2a80:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
    2a82:	15 82       	std	Z+5, r1	; 0x05
    2a84:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    2a86:	4b 8b       	std	Y+19, r20	; 0x13
    2a88:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
    2a8a:	e2 17       	cp	r30, r18
    2a8c:	f3 07       	cpc	r31, r19
    2a8e:	99 f7       	brne	.-26     	; 0x2a76 <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
    2a90:	0e 94 86 22 	call	0x450c	; 0x450c <getNextGroup>
    2a94:	fc 01       	movw	r30, r24
    2a96:	ee 24       	eor	r14, r14
    2a98:	ff 24       	eor	r15, r15
    2a9a:	88 24       	eor	r8, r8
    2a9c:	8a 94       	dec	r8
    2a9e:	98 2c       	mov	r9, r8
    2aa0:	2e 01       	movw	r4, r28
    2aa2:	08 94       	sec
    2aa4:	41 1c       	adc	r4, r1
    2aa6:	51 1c       	adc	r5, r1
    2aa8:	aa 24       	eor	r10, r10
    2aaa:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2aac:	3c e0       	ldi	r19, 0x0C	; 12
    2aae:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
    2ab0:	33 24       	eor	r3, r3
    2ab2:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
    2ab4:	02 81       	ldd	r16, Z+2	; 0x02
    2ab6:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    2ab8:	d2 01       	movw	r26, r4
    2aba:	e2 2d       	mov	r30, r2
    2abc:	1d 92       	st	X+, r1
    2abe:	ea 95       	dec	r30
    2ac0:	e9 f7       	brne	.-6      	; 0x2abc <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
    2ac2:	d8 01       	movw	r26, r16
    2ac4:	8c 91       	ld	r24, X
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
    2ac8:	f2 01       	movw	r30, r4
    2aca:	e8 0f       	add	r30, r24
    2acc:	f9 1f       	adc	r31, r25
    2ace:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	ee 0f       	add	r30, r30
    2adc:	ff 1f       	adc	r31, r31
    2ade:	e8 1b       	sub	r30, r24
    2ae0:	f9 0b       	sbc	r31, r25
    2ae2:	e4 0d       	add	r30, r4
    2ae4:	f5 1d       	adc	r31, r5
    2ae6:	12 96       	adiw	r26, 0x02	; 2
    2ae8:	2d 91       	ld	r18, X+
    2aea:	3c 91       	ld	r19, X
    2aec:	13 97       	sbiw	r26, 0x03	; 3
    2aee:	35 87       	std	Z+13, r19	; 0x0d
    2af0:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
    2af2:	16 96       	adiw	r26, 0x06	; 6
    2af4:	6d 91       	ld	r22, X+
    2af6:	7c 91       	ld	r23, X
    2af8:	17 97       	sbiw	r26, 0x07	; 7
    2afa:	71 8b       	std	Z+17, r23	; 0x11
    2afc:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
    2afe:	18 96       	adiw	r26, 0x08	; 8
    2b00:	2c 91       	ld	r18, X
    2b02:	18 97       	sbiw	r26, 0x08	; 8
    2b04:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
    2b06:	14 96       	adiw	r26, 0x04	; 4
    2b08:	ed 91       	ld	r30, X+
    2b0a:	fc 91       	ld	r31, X
    2b0c:	15 97       	sbiw	r26, 0x05	; 5
    2b0e:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
    2b10:	f8 01       	movw	r30, r16
    2b12:	01 85       	ldd	r16, Z+9	; 0x09
    2b14:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
    2b16:	01 15       	cp	r16, r1
    2b18:	11 05       	cpc	r17, r1
    2b1a:	99 f6       	brne	.-90     	; 0x2ac2 <main+0xc8>
    2b1c:	f2 01       	movw	r30, r4
    2b1e:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	61 f4       	brne	.+24     	; 0x2b3e <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
    2b26:	6f e9       	ldi	r22, 0x9F	; 159
    2b28:	76 e1       	ldi	r23, 0x16	; 22
    2b2a:	11 96       	adiw	r26, 0x01	; 1
    2b2c:	7c 93       	st	X, r23
    2b2e:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
    2b30:	15 96       	adiw	r26, 0x05	; 5
    2b32:	1c 92       	st	X, r1
    2b34:	1e 92       	st	-X, r1
    2b36:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
    2b38:	16 96       	adiw	r26, 0x06	; 6
    2b3a:	3c 92       	st	X, r3
    2b3c:	16 97       	sbiw	r26, 0x06	; 6
    2b3e:	31 96       	adiw	r30, 0x01	; 1
    2b40:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
    2b42:	e6 15       	cp	r30, r6
    2b44:	f7 05       	cpc	r31, r7
    2b46:	61 f7       	brne	.-40     	; 0x2b20 <main+0x126>
    2b48:	00 e0       	ldi	r16, 0x00	; 0
    2b4a:	10 e0       	ldi	r17, 0x00	; 0
    2b4c:	cc 24       	eor	r12, r12
    2b4e:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2b50:	e1 14       	cp	r14, r1
    2b52:	f1 04       	cpc	r15, r1
    2b54:	19 f4       	brne	.+6      	; 0x2b5c <main+0x162>
    2b56:	88 24       	eor	r8, r8
    2b58:	8a 94       	dec	r8
    2b5a:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
    2b5c:	c3 01       	movw	r24, r6
    2b5e:	0e 94 ad 14 	call	0x295a	; 0x295a <doEffects>
			waitForTimer();
    2b62:	0e 94 bc 23 	call	0x4778	; 0x4778 <waitForTimer>
			displayColors();
    2b66:	0e 94 09 23 	call	0x4612	; 0x4612 <displayColors>
			deltaTimer++;
    2b6a:	0f 5f       	subi	r16, 0xFF	; 255
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
    2b6e:	0a 30       	cpi	r16, 0x0A	; 10
    2b70:	11 05       	cpc	r17, r1
    2b72:	74 f3       	brlt	.-36     	; 0x2b50 <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
    2b74:	80 91 63 00 	lds	r24, 0x0063
    2b78:	81 fd       	sbrc	r24, 1
    2b7a:	1a c0       	rjmp	.+52     	; 0x2bb0 <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
    2b7c:	ab 28       	or	r10, r11
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <main+0x188>
    2b80:	4d c0       	rjmp	.+154    	; 0x2c1c <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2b82:	80 91 63 00 	lds	r24, 0x0063
    2b86:	80 fd       	sbrc	r24, 0
    2b88:	21 c0       	rjmp	.+66     	; 0x2bcc <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
    2b8a:	e0 fe       	sbrs	r14, 0
    2b8c:	59 c0       	rjmp	.+178    	; 0x2c40 <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    2b8e:	c1 fe       	sbrs	r12, 1
    2b90:	29 c0       	rjmp	.+82     	; 0x2be4 <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
    2b92:	b1 e0       	ldi	r27, 0x01	; 1
    2b94:	8b 16       	cp	r8, r27
    2b96:	91 04       	cpc	r9, r1
    2b98:	b1 f1       	breq	.+108    	; 0x2c06 <main+0x20c>
    2b9a:	22 e0       	ldi	r18, 0x02	; 2
    2b9c:	a2 2e       	mov	r10, r18
    2b9e:	b1 2c       	mov	r11, r1
    2ba0:	ae 20       	and	r10, r14
    2ba2:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
    2ba4:	00 e0       	ldi	r16, 0x00	; 0
    2ba6:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    2ba8:	e1 14       	cp	r14, r1
    2baa:	f1 04       	cpc	r15, r1
    2bac:	b9 f6       	brne	.-82     	; 0x2b5c <main+0x162>
    2bae:	d3 cf       	rjmp	.-90     	; 0x2b56 <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
    2bb0:	ab 28       	or	r10, r11
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
    2bb4:	a2 e0       	ldi	r26, 0x02	; 2
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	ca 2a       	or	r12, r26
    2bba:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
    2bbc:	ed ef       	ldi	r30, 0xFD	; 253
    2bbe:	ff ef       	ldi	r31, 0xFF	; 255
    2bc0:	ee 22       	and	r14, r30
    2bc2:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    2bc4:	80 91 63 00 	lds	r24, 0x0063
    2bc8:	80 ff       	sbrs	r24, 0
    2bca:	df cf       	rjmp	.-66     	; 0x2b8a <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
    2bcc:	e0 fe       	sbrs	r14, 0
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	c8 2a       	or	r12, r24
    2bd6:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
    2bd8:	ae ef       	ldi	r26, 0xFE	; 254
    2bda:	bf ef       	ldi	r27, 0xFF	; 255
    2bdc:	ea 22       	and	r14, r26
    2bde:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    2be0:	c1 fc       	sbrc	r12, 1
    2be2:	d7 cf       	rjmp	.-82     	; 0x2b92 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
    2be4:	c0 fe       	sbrs	r12, 0
    2be6:	d9 cf       	rjmp	.-78     	; 0x2b9a <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
    2be8:	e2 e0       	ldi	r30, 0x02	; 2
    2bea:	8e 16       	cp	r8, r30
    2bec:	91 04       	cpc	r9, r1
    2bee:	a9 f6       	brne	.-86     	; 0x2b9a <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
    2bf0:	92 e0       	ldi	r25, 0x02	; 2
    2bf2:	a9 2e       	mov	r10, r25
    2bf4:	b1 2c       	mov	r11, r1
    2bf6:	ae 20       	and	r10, r14
    2bf8:	bf 20       	and	r11, r15
    2bfa:	e1 fe       	sbrs	r14, 1
    2bfc:	d3 cf       	rjmp	.-90     	; 0x2ba4 <main+0x1aa>

							groupNew = getNextGroup();
    2bfe:	0e 94 86 22 	call	0x450c	; 0x450c <getNextGroup>
    2c02:	fc 01       	movw	r30, r24
    2c04:	57 cf       	rjmp	.-338    	; 0x2ab4 <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
    2c06:	e0 fe       	sbrs	r14, 0
    2c08:	c8 cf       	rjmp	.-112    	; 0x2b9a <main+0x1a0>
							groupNew = getPreviousGroup();
    2c0a:	0e 94 21 22 	call	0x4442	; 0x4442 <getPreviousGroup>
    2c0e:	fc 01       	movw	r30, r24
    2c10:	32 e0       	ldi	r19, 0x02	; 2
    2c12:	a3 2e       	mov	r10, r19
    2c14:	b1 2c       	mov	r11, r1
    2c16:	ae 20       	and	r10, r14
    2c18:	bf 20       	and	r11, r15
    2c1a:	4c cf       	rjmp	.-360    	; 0x2ab4 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    2c1c:	7f ef       	ldi	r23, 0xFF	; 255
    2c1e:	87 16       	cp	r8, r23
    2c20:	7f ef       	ldi	r23, 0xFF	; 255
    2c22:	97 06       	cpc	r9, r23
    2c24:	11 f1       	breq	.+68     	; 0x2c6a <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	e8 2a       	or	r14, r24
    2c2c:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
    2c2e:	0e 94 86 22 	call	0x450c	; 0x450c <getNextGroup>
    2c32:	fc 01       	movw	r30, r24
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	a6 2e       	mov	r10, r22
    2c38:	b1 2c       	mov	r11, r1
    2c3a:	ae 20       	and	r10, r14
    2c3c:	bf 20       	and	r11, r15
    2c3e:	3a cf       	rjmp	.-396    	; 0x2ab4 <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	e6 2a       	or	r14, r22
    2c46:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
    2c48:	0e 94 21 22 	call	0x4442	; 0x4442 <getPreviousGroup>
    2c4c:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
    2c4e:	7f ef       	ldi	r23, 0xFF	; 255
    2c50:	87 16       	cp	r8, r23
    2c52:	7f ef       	ldi	r23, 0xFF	; 255
    2c54:	97 06       	cpc	r9, r23
    2c56:	e1 f6       	brne	.-72     	; 0x2c10 <main+0x216>
    2c58:	51 e0       	ldi	r21, 0x01	; 1
    2c5a:	85 2e       	mov	r8, r21
    2c5c:	91 2c       	mov	r9, r1
    2c5e:	42 e0       	ldi	r20, 0x02	; 2
    2c60:	a4 2e       	mov	r10, r20
    2c62:	b1 2c       	mov	r11, r1
    2c64:	ae 20       	and	r10, r14
    2c66:	bf 20       	and	r11, r15
    2c68:	25 cf       	rjmp	.-438    	; 0x2ab4 <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    2c6a:	72 e0       	ldi	r23, 0x02	; 2
    2c6c:	87 2e       	mov	r8, r23
    2c6e:	91 2c       	mov	r9, r1
    2c70:	da cf       	rjmp	.-76     	; 0x2c26 <main+0x22c>

00002c72 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
    2c72:	08 95       	ret

00002c74 <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
    2c74:	08 95       	ret

00002c76 <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
    2c76:	08 95       	ret

00002c78 <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
    2c78:	08 95       	ret

00002c7a <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	ee 0f       	add	r30, r30
    2c7e:	ff 1f       	adc	r31, r31
    2c80:	ee 0f       	add	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	ed 51       	subi	r30, 0x1D	; 29
    2c86:	fb 4f       	sbci	r31, 0xFB	; 251
    2c88:	11 82       	std	Z+1, r1	; 0x01
    2c8a:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
    2c8c:	13 82       	std	Z+3, r1	; 0x03
    2c8e:	12 82       	std	Z+2, r1	; 0x02
}	
    2c90:	08 95       	ret

00002c92 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	8c 01       	movw	r16, r24
    2c9c:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	aa 0f       	add	r26, r26
    2ca2:	bb 1f       	adc	r27, r27
    2ca4:	aa 0f       	add	r26, r26
    2ca6:	bb 1f       	adc	r27, r27
    2ca8:	ad 51       	subi	r26, 0x1D	; 29
    2caa:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
    2cac:	6e 5f       	subi	r22, 0xFE	; 254
    2cae:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
    2cb0:	12 96       	adiw	r26, 0x02	; 2
    2cb2:	2d 91       	ld	r18, X+
    2cb4:	3c 91       	ld	r19, X
    2cb6:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
    2cb8:	4d 91       	ld	r20, X+
    2cba:	5c 91       	ld	r21, X
    2cbc:	11 97       	sbiw	r26, 0x01	; 1
    2cbe:	f9 01       	movw	r30, r18
    2cc0:	ee 0f       	add	r30, r30
    2cc2:	ff 1f       	adc	r31, r31
    2cc4:	ee 0f       	add	r30, r30
    2cc6:	ff 1f       	adc	r31, r31
    2cc8:	ee 0f       	add	r30, r30
    2cca:	ff 1f       	adc	r31, r31
    2ccc:	e6 0f       	add	r30, r22
    2cce:	f7 1f       	adc	r31, r23
    2cd0:	86 81       	ldd	r24, Z+6	; 0x06
    2cd2:	97 81       	ldd	r25, Z+7	; 0x07
    2cd4:	84 17       	cp	r24, r20
    2cd6:	95 07       	cpc	r25, r21
    2cd8:	6c f5       	brge	.+90     	; 0x2d34 <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
    2cda:	2f 5f       	subi	r18, 0xFF	; 255
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cde:	13 96       	adiw	r26, 0x03	; 3
    2ce0:	3c 93       	st	X, r19
    2ce2:	2e 93       	st	-X, r18
    2ce4:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
    2ce6:	88 81       	ld	r24, Y
    2ce8:	99 81       	ldd	r25, Y+1	; 0x01
    2cea:	28 17       	cp	r18, r24
    2cec:	39 07       	cpc	r19, r25
    2cee:	24 f0       	brlt	.+8      	; 0x2cf8 <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
    2cf0:	13 96       	adiw	r26, 0x03	; 3
    2cf2:	1c 92       	st	X, r1
    2cf4:	1e 92       	st	-X, r1
    2cf6:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
    2cf8:	11 96       	adiw	r26, 0x01	; 1
    2cfa:	1c 92       	st	X, r1
    2cfc:	1e 92       	st	-X, r1
    2cfe:	12 96       	adiw	r26, 0x02	; 2
    2d00:	2d 91       	ld	r18, X+
    2d02:	3c 91       	ld	r19, X
    2d04:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
    2d06:	f9 01       	movw	r30, r18
    2d08:	ee 0f       	add	r30, r30
    2d0a:	ff 1f       	adc	r31, r31
    2d0c:	ee 0f       	add	r30, r30
    2d0e:	ff 1f       	adc	r31, r31
    2d10:	ee 0f       	add	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	e6 0f       	add	r30, r22
    2d16:	f7 1f       	adc	r31, r23
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	42 81       	ldd	r20, Z+2	; 0x02
    2d1e:	53 81       	ldd	r21, Z+3	; 0x03
    2d20:	24 81       	ldd	r18, Z+4	; 0x04
    2d22:	35 81       	ldd	r19, Z+5	; 0x05
    2d24:	c8 01       	movw	r24, r16
    2d26:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
    2d34:	4f 5f       	subi	r20, 0xFF	; 255
    2d36:	5f 4f       	sbci	r21, 0xFF	; 255
    2d38:	4d 93       	st	X+, r20
    2d3a:	5c 93       	st	X, r21
    2d3c:	e4 cf       	rjmp	.-56     	; 0x2d06 <lightBeamEffect+0x74>

00002d3e <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
}
    2d4e:	08 95       	ret

00002d50 <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
    2d50:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	42 81       	ldd	r20, Z+2	; 0x02
    2d58:	53 81       	ldd	r21, Z+3	; 0x03
    2d5a:	24 81       	ldd	r18, Z+4	; 0x04
    2d5c:	35 81       	ldd	r19, Z+5	; 0x05
    2d5e:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
}
    2d62:	08 95       	ret

00002d64 <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
    2d68:	fc 01       	movw	r30, r24
    2d6a:	ee 0f       	add	r30, r30
    2d6c:	ff 1f       	adc	r31, r31
    2d6e:	df 01       	movw	r26, r30
    2d70:	a5 5b       	subi	r26, 0xB5	; 181
    2d72:	bc 4f       	sbci	r27, 0xFC	; 252
    2d74:	1d 92       	st	X+, r1
    2d76:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
    2d78:	ed 59       	subi	r30, 0x9D	; 157
    2d7a:	fc 4f       	sbci	r31, 0xFC	; 252
    2d7c:	21 e0       	ldi	r18, 0x01	; 1
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	31 83       	std	Z+1, r19	; 0x01
    2d82:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    2d84:	fb 01       	movw	r30, r22
    2d86:	60 81       	ld	r22, Z
    2d88:	71 81       	ldd	r23, Z+1	; 0x01
    2d8a:	42 81       	ldd	r20, Z+2	; 0x02
    2d8c:	53 81       	ldd	r21, Z+3	; 0x03
    2d8e:	24 81       	ldd	r18, Z+4	; 0x04
    2d90:	35 81       	ldd	r19, Z+5	; 0x05
    2d92:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
}
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	08 95       	ret

00002d9c <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
    2d9c:	ef 92       	push	r14
    2d9e:	ff 92       	push	r15
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	9c 01       	movw	r18, r24
    2daa:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	8c 01       	movw	r16, r24
    2db2:	05 5b       	subi	r16, 0xB5	; 181
    2db4:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
    2db6:	ec 01       	movw	r28, r24
    2db8:	cd 59       	subi	r28, 0x9D	; 157
    2dba:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
    2dc0:	42 81       	ldd	r20, Z+2	; 0x02
    2dc2:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
    2dc4:	e4 80       	ldd	r14, Z+4	; 0x04
    2dc6:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
    2dc8:	a6 81       	ldd	r26, Z+6	; 0x06
    2dca:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
    2dcc:	00 84       	ldd	r0, Z+8	; 0x08
    2dce:	f1 85       	ldd	r31, Z+9	; 0x09
    2dd0:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
    2dd2:	88 81       	ld	r24, Y
    2dd4:	99 81       	ldd	r25, Y+1	; 0x01
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	09 f1       	breq	.+66     	; 0x2e1e <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
    2ddc:	89 2b       	or	r24, r25
    2dde:	c1 f4       	brne	.+48     	; 0x2e10 <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
    2de0:	31 97       	sbiw	r30, 0x01	; 1
    2de2:	d8 01       	movw	r26, r16
    2de4:	8d 91       	ld	r24, X+
    2de6:	9c 91       	ld	r25, X
    2de8:	11 97       	sbiw	r26, 0x01	; 1
    2dea:	8e 17       	cp	r24, r30
    2dec:	9f 07       	cpc	r25, r31
    2dee:	0c f0       	brlt	.+2      	; 0x2df2 <pwmEffect+0x56>
    2df0:	43 c0       	rjmp	.+134    	; 0x2e78 <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
    2df2:	c9 01       	movw	r24, r18
    2df4:	60 e0       	ldi	r22, 0x00	; 0
    2df6:	70 e0       	ldi	r23, 0x00	; 0
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	50 e0       	ldi	r21, 0x00	; 0
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
			*curCounter +=1;
    2e04:	f8 01       	movw	r30, r16
    2e06:	80 81       	ld	r24, Z
    2e08:	91 81       	ldd	r25, Z+1	; 0x01
    2e0a:	01 96       	adiw	r24, 0x01	; 1
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
		}

	}
	
}
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	ff 90       	pop	r15
    2e1a:	ef 90       	pop	r14
    2e1c:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
    2e1e:	11 97       	sbiw	r26, 0x01	; 1
    2e20:	f8 01       	movw	r30, r16
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	8a 17       	cp	r24, r26
    2e28:	9b 07       	cpc	r25, r27
    2e2a:	a4 f0       	brlt	.+40     	; 0x2e54 <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
    2e2c:	19 82       	std	Y+1, r1	; 0x01
    2e2e:	18 82       	st	Y, r1
			*curCounter = 0;
    2e30:	11 82       	std	Z+1, r1	; 0x01
    2e32:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
    2e34:	c9 01       	movw	r24, r18
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	70 e0       	ldi	r23, 0x00	; 0
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	50 e0       	ldi	r21, 0x00	; 0
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	ef 90       	pop	r14
    2e52:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    2e54:	c9 01       	movw	r24, r18
    2e56:	97 01       	movw	r18, r14
    2e58:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
			*curCounter += 1;
    2e5c:	d8 01       	movw	r26, r16
    2e5e:	8d 91       	ld	r24, X+
    2e60:	9c 91       	ld	r25, X
    2e62:	11 97       	sbiw	r26, 0x01	; 1
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	8d 93       	st	X+, r24
    2e68:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
    2e6a:	df 91       	pop	r29
    2e6c:	cf 91       	pop	r28
    2e6e:	1f 91       	pop	r17
    2e70:	0f 91       	pop	r16
    2e72:	ff 90       	pop	r15
    2e74:	ef 90       	pop	r14
    2e76:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	99 83       	std	Y+1, r25	; 0x01
    2e7e:	88 83       	st	Y, r24
			*curCounter = 0;
    2e80:	1d 92       	st	X+, r1
    2e82:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    2e84:	c9 01       	movw	r24, r18
    2e86:	97 01       	movw	r18, r14
    2e88:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	08 95       	ret

00002e9a <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
    2e9a:	2f 92       	push	r2
    2e9c:	3f 92       	push	r3
    2e9e:	4f 92       	push	r4
    2ea0:	5f 92       	push	r5
    2ea2:	6f 92       	push	r6
    2ea4:	7f 92       	push	r7
    2ea6:	8f 92       	push	r8
    2ea8:	9f 92       	push	r9
    2eaa:	af 92       	push	r10
    2eac:	bf 92       	push	r11
    2eae:	cf 92       	push	r12
    2eb0:	df 92       	push	r13
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	6e 97       	sbiw	r28, 0x1e	; 30
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ed2:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
    2ed4:	20 81       	ld	r18, Z
    2ed6:	31 81       	ldd	r19, Z+1	; 0x01
    2ed8:	3c 8f       	std	Y+28, r19	; 0x1c
    2eda:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee2:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
    2ee4:	a4 81       	ldd	r26, Z+4	; 0x04
    2ee6:	b5 81       	ldd	r27, Z+5	; 0x05
    2ee8:	b8 8f       	std	Y+24, r27	; 0x18
    2eea:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
    2eec:	26 81       	ldd	r18, Z+6	; 0x06
    2eee:	37 81       	ldd	r19, Z+7	; 0x07
    2ef0:	3e 8b       	std	Y+22, r19	; 0x16
    2ef2:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
    2ef4:	80 85       	ldd	r24, Z+8	; 0x08
    2ef6:	91 85       	ldd	r25, Z+9	; 0x09
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
    2efc:	a2 85       	ldd	r26, Z+10	; 0x0a
    2efe:	b3 85       	ldd	r27, Z+11	; 0x0b
    2f00:	ba 8b       	std	Y+18, r27	; 0x12
    2f02:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
    2f04:	24 85       	ldd	r18, Z+12	; 0x0c
    2f06:	35 85       	ldd	r19, Z+13	; 0x0d
    2f08:	38 8b       	std	Y+16, r19	; 0x10
    2f0a:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
    2f0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	dc 01       	movw	r26, r24
    2f16:	ad 5c       	subi	r26, 0xCD	; 205
    2f18:	bc 4f       	sbci	r27, 0xFC	; 252
    2f1a:	be 87       	std	Y+14, r27	; 0x0e
    2f1c:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
    2f1e:	fc 01       	movw	r30, r24
    2f20:	e5 58       	subi	r30, 0x85	; 133
    2f22:	fc 4f       	sbci	r31, 0xFC	; 252
    2f24:	fc 87       	std	Y+12, r31	; 0x0c
    2f26:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
    2f28:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2f2a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2f2c:	82 0f       	add	r24, r18
    2f2e:	93 1f       	adc	r25, r19
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	dc 01       	movw	r26, r24
    2f3a:	ae 5e       	subi	r26, 0xEE	; 238
    2f3c:	bd 4f       	sbci	r27, 0xFD	; 253
    2f3e:	ba 87       	std	Y+10, r27	; 0x0a
    2f40:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
    2f42:	fc 01       	movw	r30, r24
    2f44:	ea 5e       	subi	r30, 0xEA	; 234
    2f46:	fd 4f       	sbci	r31, 0xFD	; 253
    2f48:	f8 87       	std	Y+8, r31	; 0x08
    2f4a:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
    2f4c:	9c 01       	movw	r18, r24
    2f4e:	26 5e       	subi	r18, 0xE6	; 230
    2f50:	3d 4f       	sbci	r19, 0xFD	; 253
    2f52:	3e 83       	std	Y+6, r19	; 0x06
    2f54:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
    2f56:	80 91 ea 02 	lds	r24, 0x02EA
    2f5a:	81 30       	cpi	r24, 0x01	; 1
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <fadeBetweenColors+0xc6>
    2f5e:	09 c1       	rjmp	.+530    	; 0x3172 <fadeBetweenColors+0x2d8>
    2f60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2f62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2f64:	bd 01       	movw	r22, r26
    2f66:	88 27       	eor	r24, r24
    2f68:	77 fd       	sbrc	r23, 7
    2f6a:	80 95       	com	r24
    2f6c:	98 2f       	mov	r25, r24
    2f6e:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    2f72:	3b 01       	movw	r6, r22
    2f74:	4c 01       	movw	r8, r24
    2f76:	e9 8d       	ldd	r30, Y+25	; 0x19
    2f78:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2f7a:	bf 01       	movw	r22, r30
    2f7c:	88 27       	eor	r24, r24
    2f7e:	77 fd       	sbrc	r23, 7
    2f80:	80 95       	com	r24
    2f82:	98 2f       	mov	r25, r24
    2f84:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    2f88:	1b 01       	movw	r2, r22
    2f8a:	2c 01       	movw	r4, r24
    2f8c:	2f 89       	ldd	r18, Y+23	; 0x17
    2f8e:	38 8d       	ldd	r19, Y+24	; 0x18
    2f90:	b9 01       	movw	r22, r18
    2f92:	88 27       	eor	r24, r24
    2f94:	77 fd       	sbrc	r23, 7
    2f96:	80 95       	com	r24
    2f98:	98 2f       	mov	r25, r24
    2f9a:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    2f9e:	69 83       	std	Y+1, r22	; 0x01
    2fa0:	7a 83       	std	Y+2, r23	; 0x02
    2fa2:	8b 83       	std	Y+3, r24	; 0x03
    2fa4:	9c 83       	std	Y+4, r25	; 0x04
    2fa6:	ad 85       	ldd	r26, Y+13	; 0x0d
    2fa8:	be 85       	ldd	r27, Y+14	; 0x0e
    2faa:	cd 90       	ld	r12, X+
    2fac:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
    2fae:	ef 85       	ldd	r30, Y+15	; 0x0f
    2fb0:	f8 89       	ldd	r31, Y+16	; 0x10
    2fb2:	bf 01       	movw	r22, r30
    2fb4:	88 27       	eor	r24, r24
    2fb6:	77 fd       	sbrc	r23, 7
    2fb8:	80 95       	com	r24
    2fba:	98 2f       	mov	r25, r24
    2fbc:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    2fc0:	7b 01       	movw	r14, r22
    2fc2:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
    2fc4:	b6 01       	movw	r22, r12
    2fc6:	88 27       	eor	r24, r24
    2fc8:	77 fd       	sbrc	r23, 7
    2fca:	80 95       	com	r24
    2fcc:	98 2f       	mov	r25, r24
    2fce:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    2fd2:	5b 01       	movw	r10, r22
    2fd4:	6c 01       	movw	r12, r24
    2fd6:	2d 89       	ldd	r18, Y+21	; 0x15
    2fd8:	3e 89       	ldd	r19, Y+22	; 0x16
    2fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fde:	28 1b       	sub	r18, r24
    2fe0:	39 0b       	sbc	r19, r25
    2fe2:	b9 01       	movw	r22, r18
    2fe4:	88 27       	eor	r24, r24
    2fe6:	77 fd       	sbrc	r23, 7
    2fe8:	80 95       	com	r24
    2fea:	98 2f       	mov	r25, r24
    2fec:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    2ff0:	a8 01       	movw	r20, r16
    2ff2:	97 01       	movw	r18, r14
    2ff4:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
    2ff8:	9b 01       	movw	r18, r22
    2ffa:	ac 01       	movw	r20, r24
    2ffc:	c6 01       	movw	r24, r12
    2ffe:	b5 01       	movw	r22, r10
    3000:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3004:	a4 01       	movw	r20, r8
    3006:	93 01       	movw	r18, r6
    3008:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__addsf3>
    300c:	a9 85       	ldd	r26, Y+9	; 0x09
    300e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3010:	6d 93       	st	X+, r22
    3012:	7d 93       	st	X+, r23
    3014:	8d 93       	st	X+, r24
    3016:	9c 93       	st	X, r25
    3018:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
    301a:	eb 89       	ldd	r30, Y+19	; 0x13
    301c:	fc 89       	ldd	r31, Y+20	; 0x14
    301e:	29 8d       	ldd	r18, Y+25	; 0x19
    3020:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3022:	e2 1b       	sub	r30, r18
    3024:	f3 0b       	sbc	r31, r19
    3026:	bf 01       	movw	r22, r30
    3028:	88 27       	eor	r24, r24
    302a:	77 fd       	sbrc	r23, 7
    302c:	80 95       	com	r24
    302e:	98 2f       	mov	r25, r24
    3030:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    3034:	a8 01       	movw	r20, r16
    3036:	97 01       	movw	r18, r14
    3038:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
    303c:	a6 01       	movw	r20, r12
    303e:	95 01       	movw	r18, r10
    3040:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3044:	a2 01       	movw	r20, r4
    3046:	91 01       	movw	r18, r2
    3048:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__addsf3>
    304c:	af 81       	ldd	r26, Y+7	; 0x07
    304e:	b8 85       	ldd	r27, Y+8	; 0x08
    3050:	6d 93       	st	X+, r22
    3052:	7d 93       	st	X+, r23
    3054:	8d 93       	st	X+, r24
    3056:	9c 93       	st	X, r25
    3058:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
    305a:	e9 89       	ldd	r30, Y+17	; 0x11
    305c:	fa 89       	ldd	r31, Y+18	; 0x12
    305e:	2f 89       	ldd	r18, Y+23	; 0x17
    3060:	38 8d       	ldd	r19, Y+24	; 0x18
    3062:	e2 1b       	sub	r30, r18
    3064:	f3 0b       	sbc	r31, r19
    3066:	bf 01       	movw	r22, r30
    3068:	88 27       	eor	r24, r24
    306a:	77 fd       	sbrc	r23, 7
    306c:	80 95       	com	r24
    306e:	98 2f       	mov	r25, r24
    3070:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    3074:	a8 01       	movw	r20, r16
    3076:	97 01       	movw	r18, r14
    3078:	0e 94 91 26 	call	0x4d22	; 0x4d22 <__divsf3>
    307c:	a6 01       	movw	r20, r12
    307e:	95 01       	movw	r18, r10
    3080:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <__mulsf3>
    3084:	29 81       	ldd	r18, Y+1	; 0x01
    3086:	3a 81       	ldd	r19, Y+2	; 0x02
    3088:	4b 81       	ldd	r20, Y+3	; 0x03
    308a:	5c 81       	ldd	r21, Y+4	; 0x04
    308c:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <__addsf3>
    3090:	7b 01       	movw	r14, r22
    3092:	8c 01       	movw	r16, r24
    3094:	ad 81       	ldd	r26, Y+5	; 0x05
    3096:	be 81       	ldd	r27, Y+6	; 0x06
    3098:	6d 93       	st	X+, r22
    309a:	7d 93       	st	X+, r23
    309c:	8d 93       	st	X+, r24
    309e:	9c 93       	st	X, r25
    30a0:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
    30a2:	e9 85       	ldd	r30, Y+9	; 0x09
    30a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    30a6:	60 81       	ld	r22, Z
    30a8:	71 81       	ldd	r23, Z+1	; 0x01
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__fixsfsi>
    30b2:	3b 01       	movw	r6, r22
    30b4:	4c 01       	movw	r8, r24
    30b6:	af 81       	ldd	r26, Y+7	; 0x07
    30b8:	b8 85       	ldd	r27, Y+8	; 0x08
    30ba:	6d 91       	ld	r22, X+
    30bc:	7d 91       	ld	r23, X+
    30be:	8d 91       	ld	r24, X+
    30c0:	9c 91       	ld	r25, X
    30c2:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__fixsfsi>
    30c6:	5b 01       	movw	r10, r22
    30c8:	6c 01       	movw	r12, r24
    30ca:	c8 01       	movw	r24, r16
    30cc:	b7 01       	movw	r22, r14
    30ce:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__fixsfsi>
    30d2:	8b 01       	movw	r16, r22
    30d4:	9c 01       	movw	r18, r24
    30d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30da:	b3 01       	movw	r22, r6
    30dc:	a5 01       	movw	r20, r10
    30de:	98 01       	movw	r18, r16
    30e0:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
    30e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    30e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	59 f1       	breq	.+86     	; 0x3146 <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
    30f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    30f2:	fe 85       	ldd	r31, Y+14	; 0x0e
    30f4:	80 81       	ld	r24, Z
    30f6:	91 81       	ldd	r25, Z+1	; 0x01
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	91 83       	std	Z+1, r25	; 0x01
    30fc:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
    30fe:	97 fd       	sbrc	r25, 7
    3100:	19 c0       	rjmp	.+50     	; 0x3134 <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
    3102:	6e 96       	adiw	r28, 0x1e	; 30
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	df 90       	pop	r13
    311c:	cf 90       	pop	r12
    311e:	bf 90       	pop	r11
    3120:	af 90       	pop	r10
    3122:	9f 90       	pop	r9
    3124:	8f 90       	pop	r8
    3126:	7f 90       	pop	r7
    3128:	6f 90       	pop	r6
    312a:	5f 90       	pop	r5
    312c:	4f 90       	pop	r4
    312e:	3f 90       	pop	r3
    3130:	2f 90       	pop	r2
    3132:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
    3134:	11 82       	std	Z+1, r1	; 0x01
    3136:	10 82       	st	Z, r1
			*direction = 1;
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	ab 85       	ldd	r26, Y+11	; 0x0b
    313e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3140:	8d 93       	st	X+, r24
    3142:	9c 93       	st	X, r25
    3144:	de cf       	rjmp	.-68     	; 0x3102 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
    3146:	ad 85       	ldd	r26, Y+13	; 0x0d
    3148:	be 85       	ldd	r27, Y+14	; 0x0e
    314a:	8d 91       	ld	r24, X+
    314c:	9c 91       	ld	r25, X
    314e:	11 97       	sbiw	r26, 0x01	; 1
    3150:	01 96       	adiw	r24, 0x01	; 1
    3152:	8d 93       	st	X+, r24
    3154:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
    3156:	ef 85       	ldd	r30, Y+15	; 0x0f
    3158:	f8 89       	ldd	r31, Y+16	; 0x10
    315a:	e8 17       	cp	r30, r24
    315c:	f9 07       	cpc	r31, r25
    315e:	8c f6       	brge	.-94     	; 0x3102 <fadeBetweenColors+0x268>
			*direction = 0;
    3160:	ab 85       	ldd	r26, Y+11	; 0x0b
    3162:	bc 85       	ldd	r27, Y+12	; 0x0c
    3164:	1d 92       	st	X+, r1
    3166:	1c 92       	st	X, r1
			*currentStep = stepCount;
    3168:	ad 85       	ldd	r26, Y+13	; 0x0d
    316a:	be 85       	ldd	r27, Y+14	; 0x0e
    316c:	ed 93       	st	X+, r30
    316e:	fc 93       	st	X, r31
    3170:	c8 cf       	rjmp	.-112    	; 0x3102 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
    3172:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3174:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3176:	bf 01       	movw	r22, r30
    3178:	88 27       	eor	r24, r24
    317a:	77 fd       	sbrc	r23, 7
    317c:	80 95       	com	r24
    317e:	98 2f       	mov	r25, r24
    3180:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    3184:	3b 01       	movw	r6, r22
    3186:	4c 01       	movw	r8, r24
    3188:	a9 85       	ldd	r26, Y+9	; 0x09
    318a:	ba 85       	ldd	r27, Y+10	; 0x0a
    318c:	6d 93       	st	X+, r22
    318e:	7d 93       	st	X+, r23
    3190:	8d 93       	st	X+, r24
    3192:	9c 93       	st	X, r25
    3194:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
    3196:	e9 8d       	ldd	r30, Y+25	; 0x19
    3198:	fa 8d       	ldd	r31, Y+26	; 0x1a
    319a:	bf 01       	movw	r22, r30
    319c:	88 27       	eor	r24, r24
    319e:	77 fd       	sbrc	r23, 7
    31a0:	80 95       	com	r24
    31a2:	98 2f       	mov	r25, r24
    31a4:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    31a8:	1b 01       	movw	r2, r22
    31aa:	2c 01       	movw	r4, r24
    31ac:	af 81       	ldd	r26, Y+7	; 0x07
    31ae:	b8 85       	ldd	r27, Y+8	; 0x08
    31b0:	6d 93       	st	X+, r22
    31b2:	7d 93       	st	X+, r23
    31b4:	8d 93       	st	X+, r24
    31b6:	9c 93       	st	X, r25
    31b8:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
    31ba:	ef 89       	ldd	r30, Y+23	; 0x17
    31bc:	f8 8d       	ldd	r31, Y+24	; 0x18
    31be:	bf 01       	movw	r22, r30
    31c0:	88 27       	eor	r24, r24
    31c2:	77 fd       	sbrc	r23, 7
    31c4:	80 95       	com	r24
    31c6:	98 2f       	mov	r25, r24
    31c8:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <__floatsisf>
    31cc:	69 83       	std	Y+1, r22	; 0x01
    31ce:	7a 83       	std	Y+2, r23	; 0x02
    31d0:	8b 83       	std	Y+3, r24	; 0x03
    31d2:	9c 83       	std	Y+4, r25	; 0x04
    31d4:	ad 81       	ldd	r26, Y+5	; 0x05
    31d6:	be 81       	ldd	r27, Y+6	; 0x06
    31d8:	6d 93       	st	X+, r22
    31da:	7d 93       	st	X+, r23
    31dc:	8d 93       	st	X+, r24
    31de:	9c 93       	st	X, r25
    31e0:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    31e2:	ed 85       	ldd	r30, Y+13	; 0x0d
    31e4:	fe 85       	ldd	r31, Y+14	; 0x0e
    31e6:	11 82       	std	Z+1, r1	; 0x01
    31e8:	10 82       	st	Z, r1
		*direction = 1;	
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    31f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    31f2:	8d 93       	st	X+, r24
    31f4:	9c 93       	st	X, r25
    31f6:	cc 24       	eor	r12, r12
    31f8:	dd 24       	eor	r13, r13
    31fa:	d9 ce       	rjmp	.-590    	; 0x2fae <fadeBetweenColors+0x114>

000031fc <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    31fc:	21 e0       	ldi	r18, 0x01	; 1
    31fe:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    3202:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <fadeBetweenColors>
	resetEffect = FALSE;
    3206:	10 92 ea 02 	sts	0x02EA, r1
}
    320a:	08 95       	ret

0000320c <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	2e 97       	sbiw	r28, 0x0e	; 14
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	9c 01       	movw	r18, r24
    3226:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    3228:	8c 01       	movw	r16, r24
    322a:	00 0f       	add	r16, r16
    322c:	11 1f       	adc	r17, r17
    322e:	0d 56       	subi	r16, 0x6D	; 109
    3230:	1c 4f       	sbci	r17, 0xFC	; 252
    3232:	d8 01       	movw	r26, r16
    3234:	8d 91       	ld	r24, X+
    3236:	9c 91       	ld	r25, X
    3238:	42 97       	sbiw	r24, 0x12	; 18
    323a:	14 f5       	brge	.+68     	; 0x3280 <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	9c 83       	std	Y+4, r25	; 0x04
    324a:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    324c:	84 81       	ldd	r24, Z+4	; 0x04
    324e:	95 81       	ldd	r25, Z+5	; 0x05
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    3254:	18 86       	std	Y+8, r1	; 0x08
    3256:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    3258:	1a 86       	std	Y+10, r1	; 0x0a
    325a:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    325c:	1c 86       	std	Y+12, r1	; 0x0c
    325e:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    3260:	82 e1       	ldi	r24, 0x12	; 18
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	9e 87       	std	Y+14, r25	; 0x0e
    3266:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    3268:	c9 01       	movw	r24, r18
    326a:	be 01       	movw	r22, r28
    326c:	6f 5f       	subi	r22, 0xFF	; 255
    326e:	7f 4f       	sbci	r23, 0xFF	; 255
    3270:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    3274:	f8 01       	movw	r30, r16
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	91 83       	std	Z+1, r25	; 0x01
    327e:	80 83       	st	Z, r24
	
}
    3280:	2e 96       	adiw	r28, 0x0e	; 14
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	08 95       	ret

00003296 <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	2e 97       	sbiw	r28, 0x0e	; 14
    32a0:	0f b6       	in	r0, 0x3f	; 63
    32a2:	f8 94       	cli
    32a4:	de bf       	out	0x3e, r29	; 62
    32a6:	0f be       	out	0x3f, r0	; 63
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    32ac:	fc 01       	movw	r30, r24
    32ae:	ee 0f       	add	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	ed 56       	subi	r30, 0x6D	; 109
    32b4:	fc 4f       	sbci	r31, 0xFC	; 252
    32b6:	11 82       	std	Z+1, r1	; 0x01
    32b8:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    32ba:	2d 91       	ld	r18, X+
    32bc:	3c 91       	ld	r19, X
    32be:	11 97       	sbiw	r26, 0x01	; 1
    32c0:	3a 83       	std	Y+2, r19	; 0x02
    32c2:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    32c4:	12 96       	adiw	r26, 0x02	; 2
    32c6:	2d 91       	ld	r18, X+
    32c8:	3c 91       	ld	r19, X
    32ca:	13 97       	sbiw	r26, 0x03	; 3
    32cc:	3c 83       	std	Y+4, r19	; 0x04
    32ce:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    32d0:	14 96       	adiw	r26, 0x04	; 4
    32d2:	2d 91       	ld	r18, X+
    32d4:	3c 91       	ld	r19, X
    32d6:	15 97       	sbiw	r26, 0x05	; 5
    32d8:	3e 83       	std	Y+6, r19	; 0x06
    32da:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    32dc:	18 86       	std	Y+8, r1	; 0x08
    32de:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    32e0:	1a 86       	std	Y+10, r1	; 0x0a
    32e2:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    32e4:	1c 86       	std	Y+12, r1	; 0x0c
    32e6:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    32e8:	22 e1       	ldi	r18, 0x12	; 18
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	3e 87       	std	Y+14, r19	; 0x0e
    32ee:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    32f0:	21 e0       	ldi	r18, 0x01	; 1
    32f2:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    32f6:	be 01       	movw	r22, r28
    32f8:	6f 5f       	subi	r22, 0xFF	; 255
    32fa:	7f 4f       	sbci	r23, 0xFF	; 255
    32fc:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <fadeBetweenColors>
	resetEffect=FALSE;
    3300:	10 92 ea 02 	sts	0x02EA, r1
}
    3304:	2e 96       	adiw	r28, 0x0e	; 14
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    3316:	cf 92       	push	r12
    3318:	df 92       	push	r13
    331a:	ef 92       	push	r14
    331c:	ff 92       	push	r15
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	7c 01       	movw	r14, r24
    3324:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    3326:	8c 01       	movw	r16, r24
    3328:	00 0f       	add	r16, r16
    332a:	11 1f       	adc	r17, r17
    332c:	f8 01       	movw	r30, r16
    332e:	e5 5b       	subi	r30, 0xB5	; 181
    3330:	fc 4f       	sbci	r31, 0xFC	; 252
    3332:	11 82       	std	Z+1, r1	; 0x01
    3334:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    3336:	f8 01       	movw	r30, r16
    3338:	ed 59       	subi	r30, 0x9D	; 157
    333a:	fc 4f       	sbci	r31, 0xFC	; 252
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    3344:	f8 01       	movw	r30, r16
    3346:	e5 55       	subi	r30, 0x55	; 85
    3348:	fc 4f       	sbci	r31, 0xFC	; 252
    334a:	11 82       	std	Z+1, r1	; 0x01
    334c:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    334e:	c7 01       	movw	r24, r14
    3350:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    3354:	c7 01       	movw	r24, r14
    3356:	b6 01       	movw	r22, r12
    3358:	0e 94 fe 18 	call	0x31fc	; 0x31fc <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    335c:	0e 0d       	add	r16, r14
    335e:	1f 1d       	adc	r17, r15
    3360:	00 0f       	add	r16, r16
    3362:	11 1f       	adc	r17, r17
    3364:	0e 55       	subi	r16, 0x5E	; 94
    3366:	1d 4f       	sbci	r17, 0xFD	; 253
    3368:	c7 01       	movw	r24, r14
    336a:	b8 01       	movw	r22, r16
    336c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <getRGBColor>
}
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	ef 90       	pop	r14
    3378:	df 90       	pop	r13
    337a:	cf 90       	pop	r12
    337c:	08 95       	ret

0000337e <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    337e:	af 92       	push	r10
    3380:	bf 92       	push	r11
    3382:	cf 92       	push	r12
    3384:	df 92       	push	r13
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	2a 97       	sbiw	r28, 0x0a	; 10
    3398:	0f b6       	in	r0, 0x3f	; 63
    339a:	f8 94       	cli
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	cd bf       	out	0x3d, r28	; 61
    33a2:	6c 01       	movw	r12, r24
    33a4:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	8c 01       	movw	r16, r24
    33ac:	0c 0d       	add	r16, r12
    33ae:	1d 1d       	adc	r17, r13
    33b0:	00 0f       	add	r16, r16
    33b2:	11 1f       	adc	r17, r17
    33b4:	0e 55       	subi	r16, 0x5E	; 94
    33b6:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    33b8:	5b ea       	ldi	r21, 0xAB	; 171
    33ba:	e5 2e       	mov	r14, r21
    33bc:	53 e0       	ldi	r21, 0x03	; 3
    33be:	f5 2e       	mov	r15, r21
    33c0:	e8 0e       	add	r14, r24
    33c2:	f9 1e       	adc	r15, r25
    33c4:	d7 01       	movw	r26, r14
    33c6:	8d 91       	ld	r24, X+
    33c8:	9c 91       	ld	r25, X
    33ca:	8a 30       	cpi	r24, 0x0A	; 10
    33cc:	91 05       	cpc	r25, r1
    33ce:	b4 f5       	brge	.+108    	; 0x343c <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    33d0:	01 96       	adiw	r24, 0x01	; 1
    33d2:	d7 01       	movw	r26, r14
    33d4:	8d 93       	st	X+, r24
    33d6:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    33d8:	f8 01       	movw	r30, r16
    33da:	22 81       	ldd	r18, Z+2	; 0x02
    33dc:	33 81       	ldd	r19, Z+3	; 0x03
    33de:	44 81       	ldd	r20, Z+4	; 0x04
    33e0:	55 81       	ldd	r21, Z+5	; 0x05
    33e2:	d5 01       	movw	r26, r10
    33e4:	1e 96       	adiw	r26, 0x0e	; 14
    33e6:	6d 91       	ld	r22, X+
    33e8:	7c 91       	ld	r23, X
    33ea:	1f 97       	sbiw	r26, 0x0f	; 15
    33ec:	50 96       	adiw	r26, 0x10	; 16
    33ee:	ed 91       	ld	r30, X+
    33f0:	fc 91       	ld	r31, X
    33f2:	51 97       	sbiw	r26, 0x11	; 17
    33f4:	d8 01       	movw	r26, r16
    33f6:	8d 91       	ld	r24, X+
    33f8:	9c 91       	ld	r25, X
    33fa:	9a 83       	std	Y+2, r25	; 0x02
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	3c 83       	std	Y+4, r19	; 0x04
    3400:	2b 83       	std	Y+3, r18	; 0x03
    3402:	5e 83       	std	Y+6, r21	; 0x06
    3404:	4d 83       	std	Y+5, r20	; 0x05
    3406:	78 87       	std	Y+8, r23	; 0x08
    3408:	6f 83       	std	Y+7, r22	; 0x07
    340a:	fa 87       	std	Y+10, r31	; 0x0a
    340c:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    340e:	c6 01       	movw	r24, r12
    3410:	be 01       	movw	r22, r28
    3412:	6f 5f       	subi	r22, 0xFF	; 255
    3414:	7f 4f       	sbci	r23, 0xFF	; 255
    3416:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <pwmEffect>

	
	
}
    341a:	2a 96       	adiw	r28, 0x0a	; 10
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	bf 90       	pop	r11
    3438:	af 90       	pop	r10
    343a:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    343c:	c6 01       	movw	r24, r12
    343e:	b5 01       	movw	r22, r10
    3440:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    3444:	c6 01       	movw	r24, r12
    3446:	b8 01       	movw	r22, r16
    3448:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    344c:	f7 01       	movw	r30, r14
    344e:	11 82       	std	Z+1, r1	; 0x01
    3450:	10 82       	st	Z, r1
    3452:	c2 cf       	rjmp	.-124    	; 0x33d8 <fadeBetweenColorsWithPwm+0x5a>

00003454 <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    3454:	ef 92       	push	r14
    3456:	ff 92       	push	r15
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	62 97       	sbiw	r28, 0x12	; 18
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	f8 2e       	mov	r15, r24
    3472:	e9 2e       	mov	r14, r25
    3474:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    3476:	1e 96       	adiw	r26, 0x0e	; 14
    3478:	8d 91       	ld	r24, X+
    347a:	9c 91       	ld	r25, X
    347c:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    347e:	81 30       	cpi	r24, 0x01	; 1
    3480:	91 05       	cpc	r25, r1
    3482:	09 f4       	brne	.+2      	; 0x3486 <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    3484:	a6 c0       	rjmp	.+332    	; 0x35d2 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    3486:	89 2b       	or	r24, r25
    3488:	31 f5       	brne	.+76     	; 0x34d6 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    348a:	8f 2d       	mov	r24, r15
    348c:	9e 2d       	mov	r25, r14
    348e:	fc 01       	movw	r30, r24
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	ee 0f       	add	r30, r30
    3496:	ff 1f       	adc	r31, r31
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	e8 0f       	add	r30, r24
    34a2:	f9 1f       	adc	r31, r25
    34a4:	e5 59       	subi	r30, 0x95	; 149
    34a6:	fb 4f       	sbci	r31, 0xFB	; 251
    34a8:	80 e2       	ldi	r24, 0x20	; 32
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	91 83       	std	Z+1, r25	; 0x01
    34ae:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    34b0:	8f 2d       	mov	r24, r15
    34b2:	9e 2d       	mov	r25, r14
    34b4:	fc 01       	movw	r30, r24
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	e8 0f       	add	r30, r24
    34c8:	f9 1f       	adc	r31, r25
    34ca:	e5 59       	subi	r30, 0x95	; 149
    34cc:	fb 4f       	sbci	r31, 0xFB	; 251
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	93 83       	std	Z+3, r25	; 0x03
    34d4:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    34d6:	8f 2d       	mov	r24, r15
    34d8:	9e 2d       	mov	r25, r14
    34da:	fc 01       	movw	r30, r24
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	ee 0f       	add	r30, r30
    34e2:	ff 1f       	adc	r31, r31
    34e4:	ee 0f       	add	r30, r30
    34e6:	ff 1f       	adc	r31, r31
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	e8 0f       	add	r30, r24
    34ee:	f9 1f       	adc	r31, r25
    34f0:	e5 59       	subi	r30, 0x95	; 149
    34f2:	fb 4f       	sbci	r31, 0xFB	; 251
    34f4:	15 82       	std	Z+5, r1	; 0x05
    34f6:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    34f8:	8f 2d       	mov	r24, r15
    34fa:	9e 2d       	mov	r25, r14
    34fc:	fc 01       	movw	r30, r24
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	ee 0f       	add	r30, r30
    3508:	ff 1f       	adc	r31, r31
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	e8 0f       	add	r30, r24
    3510:	f9 1f       	adc	r31, r25
    3512:	e5 59       	subi	r30, 0x95	; 149
    3514:	fb 4f       	sbci	r31, 0xFB	; 251
    3516:	50 96       	adiw	r26, 0x10	; 16
    3518:	8c 91       	ld	r24, X
    351a:	50 97       	sbiw	r26, 0x10	; 16
    351c:	51 96       	adiw	r26, 0x11	; 17
    351e:	9c 91       	ld	r25, X
    3520:	51 97       	sbiw	r26, 0x11	; 17
    3522:	9c 01       	movw	r18, r24
    3524:	22 0f       	add	r18, r18
    3526:	33 1f       	adc	r19, r19
    3528:	22 0f       	add	r18, r18
    352a:	33 1f       	adc	r19, r19
    352c:	22 0f       	add	r18, r18
    352e:	33 1f       	adc	r19, r19
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	28 0f       	add	r18, r24
    3536:	39 1f       	adc	r19, r25
    3538:	31 87       	std	Z+9, r19	; 0x09
    353a:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    353c:	8e 01       	movw	r16, r28
    353e:	0f 5f       	subi	r16, 0xFF	; 255
    3540:	1f 4f       	sbci	r17, 0xFF	; 255
    3542:	c8 01       	movw	r24, r16
    3544:	bd 01       	movw	r22, r26
    3546:	47 e0       	ldi	r20, 0x07	; 7
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    354e:	8f 2d       	mov	r24, r15
    3550:	9e 2d       	mov	r25, r14
    3552:	fc 01       	movw	r30, r24
    3554:	ee 0f       	add	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	ee 0f       	add	r30, r30
    355a:	ff 1f       	adc	r31, r31
    355c:	ee 0f       	add	r30, r30
    355e:	ff 1f       	adc	r31, r31
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	e8 0f       	add	r30, r24
    3566:	f9 1f       	adc	r31, r25
    3568:	e5 59       	subi	r30, 0x95	; 149
    356a:	fb 4f       	sbci	r31, 0xFB	; 251
    356c:	80 81       	ld	r24, Z
    356e:	91 81       	ldd	r25, Z+1	; 0x01
    3570:	98 8b       	std	Y+16, r25	; 0x10
    3572:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    3574:	8f 2d       	mov	r24, r15
    3576:	9e 2d       	mov	r25, r14
    3578:	fc 01       	movw	r30, r24
    357a:	ee 0f       	add	r30, r30
    357c:	ff 1f       	adc	r31, r31
    357e:	ee 0f       	add	r30, r30
    3580:	ff 1f       	adc	r31, r31
    3582:	ee 0f       	add	r30, r30
    3584:	ff 1f       	adc	r31, r31
    3586:	88 0f       	add	r24, r24
    3588:	99 1f       	adc	r25, r25
    358a:	e8 0f       	add	r30, r24
    358c:	f9 1f       	adc	r31, r25
    358e:	e5 59       	subi	r30, 0x95	; 149
    3590:	fb 4f       	sbci	r31, 0xFB	; 251
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	9a 8b       	std	Y+18, r25	; 0x12
    3598:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    359a:	8f 2d       	mov	r24, r15
    359c:	9e 2d       	mov	r25, r14
    359e:	b8 01       	movw	r22, r16
    35a0:	0e 94 8b 19 	call	0x3316	; 0x3316 <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    35a4:	8f 2d       	mov	r24, r15
    35a6:	9e 2d       	mov	r25, r14
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>

}
    35b8:	62 96       	adiw	r28, 0x12	; 18
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	1f 91       	pop	r17
    35ca:	0f 91       	pop	r16
    35cc:	ff 90       	pop	r15
    35ce:	ef 90       	pop	r14
    35d0:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    35d2:	8f 2d       	mov	r24, r15
    35d4:	9e 2d       	mov	r25, r14
    35d6:	fc 01       	movw	r30, r24
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	ee 0f       	add	r30, r30
    35de:	ff 1f       	adc	r31, r31
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	88 0f       	add	r24, r24
    35e6:	99 1f       	adc	r25, r25
    35e8:	e8 0f       	add	r30, r24
    35ea:	f9 1f       	adc	r31, r25
    35ec:	e5 59       	subi	r30, 0x95	; 149
    35ee:	fb 4f       	sbci	r31, 0xFB	; 251
    35f0:	11 82       	std	Z+1, r1	; 0x01
    35f2:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    35f4:	8f 2d       	mov	r24, r15
    35f6:	9e 2d       	mov	r25, r14
    35f8:	fc 01       	movw	r30, r24
    35fa:	ee 0f       	add	r30, r30
    35fc:	ff 1f       	adc	r31, r31
    35fe:	ee 0f       	add	r30, r30
    3600:	ff 1f       	adc	r31, r31
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	88 0f       	add	r24, r24
    3608:	99 1f       	adc	r25, r25
    360a:	e8 0f       	add	r30, r24
    360c:	f9 1f       	adc	r31, r25
    360e:	e5 59       	subi	r30, 0x95	; 149
    3610:	fb 4f       	sbci	r31, 0xFB	; 251
    3612:	80 e2       	ldi	r24, 0x20	; 32
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	93 83       	std	Z+3, r25	; 0x03
    3618:	82 83       	std	Z+2, r24	; 0x02
    361a:	5d cf       	rjmp	.-326    	; 0x34d6 <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

0000361c <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    361c:	ef 92       	push	r14
    361e:	ff 92       	push	r15
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	62 97       	sbiw	r28, 0x12	; 18
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	de bf       	out	0x3e, r29	; 62
    3634:	0f be       	out	0x3f, r0	; 63
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	f8 2e       	mov	r15, r24
    363a:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    363c:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    363e:	fb 01       	movw	r30, r22
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	9a 83       	std	Y+2, r25	; 0x02
    3646:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	9c 83       	std	Y+4, r25	; 0x04
    364e:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    3650:	84 81       	ldd	r24, Z+4	; 0x04
    3652:	95 81       	ldd	r25, Z+5	; 0x05
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    3658:	86 81       	ldd	r24, Z+6	; 0x06
    365a:	97 81       	ldd	r25, Z+7	; 0x07
    365c:	98 87       	std	Y+8, r25	; 0x08
    365e:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    3660:	80 85       	ldd	r24, Z+8	; 0x08
    3662:	91 85       	ldd	r25, Z+9	; 0x09
    3664:	9a 87       	std	Y+10, r25	; 0x0a
    3666:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    3668:	82 85       	ldd	r24, Z+10	; 0x0a
    366a:	93 85       	ldd	r25, Z+11	; 0x0b
    366c:	9c 87       	std	Y+12, r25	; 0x0c
    366e:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    3670:	82 89       	ldd	r24, Z+18	; 0x12
    3672:	93 89       	ldd	r25, Z+19	; 0x13
    3674:	9e 87       	std	Y+14, r25	; 0x0e
    3676:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    3678:	84 89       	ldd	r24, Z+20	; 0x14
    367a:	95 89       	ldd	r25, Z+21	; 0x15
    367c:	98 8b       	std	Y+16, r25	; 0x10
    367e:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    3680:	86 89       	ldd	r24, Z+22	; 0x16
    3682:	97 89       	ldd	r25, Z+23	; 0x17
    3684:	9a 8b       	std	Y+18, r25	; 0x12
    3686:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    3688:	8f 2d       	mov	r24, r15
    368a:	9e 2d       	mov	r25, r14
    368c:	be 01       	movw	r22, r28
    368e:	6f 5f       	subi	r22, 0xFF	; 255
    3690:	7f 4f       	sbci	r23, 0xFF	; 255
    3692:	0e 94 2a 1a 	call	0x3454	; 0x3454 <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    3696:	a3 ec       	ldi	r26, 0xC3	; 195
    3698:	b3 e0       	ldi	r27, 0x03	; 3
    369a:	8f 2d       	mov	r24, r15
    369c:	9e 2d       	mov	r25, r14
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	fc 01       	movw	r30, r24
    36a4:	ee 0f       	add	r30, r30
    36a6:	ff 1f       	adc	r31, r31
    36a8:	ee 0f       	add	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	ee 0f       	add	r30, r30
    36ae:	ff 1f       	adc	r31, r31
    36b0:	e8 1b       	sub	r30, r24
    36b2:	f9 0b       	sbc	r31, r25
    36b4:	ea 0f       	add	r30, r26
    36b6:	fb 1f       	adc	r31, r27
    36b8:	11 82       	std	Z+1, r1	; 0x01
    36ba:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    36bc:	8f 2d       	mov	r24, r15
    36be:	9e 2d       	mov	r25, r14
    36c0:	88 0f       	add	r24, r24
    36c2:	99 1f       	adc	r25, r25
    36c4:	fc 01       	movw	r30, r24
    36c6:	ee 0f       	add	r30, r30
    36c8:	ff 1f       	adc	r31, r31
    36ca:	ee 0f       	add	r30, r30
    36cc:	ff 1f       	adc	r31, r31
    36ce:	ee 0f       	add	r30, r30
    36d0:	ff 1f       	adc	r31, r31
    36d2:	e8 1b       	sub	r30, r24
    36d4:	f9 0b       	sbc	r31, r25
    36d6:	ea 0f       	add	r30, r26
    36d8:	fb 1f       	adc	r31, r27
    36da:	8d 85       	ldd	r24, Y+13	; 0x0d
    36dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    36de:	95 83       	std	Z+5, r25	; 0x05
    36e0:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    36e2:	8f 2d       	mov	r24, r15
    36e4:	9e 2d       	mov	r25, r14
    36e6:	88 0f       	add	r24, r24
    36e8:	99 1f       	adc	r25, r25
    36ea:	fc 01       	movw	r30, r24
    36ec:	ee 0f       	add	r30, r30
    36ee:	ff 1f       	adc	r31, r31
    36f0:	ee 0f       	add	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	ee 0f       	add	r30, r30
    36f6:	ff 1f       	adc	r31, r31
    36f8:	e8 1b       	sub	r30, r24
    36fa:	f9 0b       	sbc	r31, r25
    36fc:	ea 0f       	add	r30, r26
    36fe:	fb 1f       	adc	r31, r27
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	93 83       	std	Z+3, r25	; 0x03
    3706:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    3708:	8f 2d       	mov	r24, r15
    370a:	9e 2d       	mov	r25, r14
    370c:	88 0f       	add	r24, r24
    370e:	99 1f       	adc	r25, r25
    3710:	fc 01       	movw	r30, r24
    3712:	ee 0f       	add	r30, r30
    3714:	ff 1f       	adc	r31, r31
    3716:	ee 0f       	add	r30, r30
    3718:	ff 1f       	adc	r31, r31
    371a:	ee 0f       	add	r30, r30
    371c:	ff 1f       	adc	r31, r31
    371e:	e8 1b       	sub	r30, r24
    3720:	f9 0b       	sbc	r31, r25
    3722:	ea 0f       	add	r30, r26
    3724:	fb 1f       	adc	r31, r27
    3726:	17 82       	std	Z+7, r1	; 0x07
    3728:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    372a:	8f 2d       	mov	r24, r15
    372c:	9e 2d       	mov	r25, r14
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	fc 01       	movw	r30, r24
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	ee 0f       	add	r30, r30
    373a:	ff 1f       	adc	r31, r31
    373c:	ee 0f       	add	r30, r30
    373e:	ff 1f       	adc	r31, r31
    3740:	e8 1b       	sub	r30, r24
    3742:	f9 0b       	sbc	r31, r25
    3744:	ea 0f       	add	r30, r26
    3746:	fb 1f       	adc	r31, r27
    3748:	13 87       	std	Z+11, r17	; 0x0b
    374a:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    374c:	8f 2d       	mov	r24, r15
    374e:	9e 2d       	mov	r25, r14
    3750:	88 0f       	add	r24, r24
    3752:	99 1f       	adc	r25, r25
    3754:	9c 01       	movw	r18, r24
    3756:	22 0f       	add	r18, r18
    3758:	33 1f       	adc	r19, r19
    375a:	22 0f       	add	r18, r18
    375c:	33 1f       	adc	r19, r19
    375e:	22 0f       	add	r18, r18
    3760:	33 1f       	adc	r19, r19
    3762:	28 1b       	sub	r18, r24
    3764:	39 0b       	sbc	r19, r25
    3766:	a2 0f       	add	r26, r18
    3768:	b3 1f       	adc	r27, r19
    376a:	0a 5f       	subi	r16, 0xFA	; 250
    376c:	1f 4f       	sbci	r17, 0xFF	; 255
    376e:	1d 96       	adiw	r26, 0x0d	; 13
    3770:	1c 93       	st	X, r17
    3772:	0e 93       	st	-X, r16
    3774:	1c 97       	sbiw	r26, 0x0c	; 12


}
    3776:	62 96       	adiw	r28, 0x12	; 18
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	08 95       	ret

00003790 <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3790:	ef 92       	push	r14
    3792:	ff 92       	push	r15
    3794:	0f 93       	push	r16
    3796:	1f 93       	push	r17
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	62 97       	sbiw	r28, 0x12	; 18
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	f8 2e       	mov	r15, r24
    37ae:	e9 2e       	mov	r14, r25
    37b0:	db 01       	movw	r26, r22
	short direction = data[7];
    37b2:	1e 96       	adiw	r26, 0x0e	; 14
    37b4:	6d 91       	ld	r22, X+
    37b6:	7c 91       	ld	r23, X
    37b8:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    37ba:	fc 01       	movw	r30, r24
    37bc:	ee 0f       	add	r30, r30
    37be:	ff 1f       	adc	r31, r31
    37c0:	ee 0f       	add	r30, r30
    37c2:	ff 1f       	adc	r31, r31
    37c4:	ee 0f       	add	r30, r30
    37c6:	ff 1f       	adc	r31, r31
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	e8 0f       	add	r30, r24
    37ce:	f9 1f       	adc	r31, r25
    37d0:	e5 59       	subi	r30, 0x95	; 149
    37d2:	fb 4f       	sbci	r31, 0xFB	; 251
    37d4:	40 85       	ldd	r20, Z+8	; 0x08
    37d6:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    37d8:	8f 2d       	mov	r24, r15
    37da:	9e 2d       	mov	r25, r14
    37dc:	fc 01       	movw	r30, r24
    37de:	ee 0f       	add	r30, r30
    37e0:	ff 1f       	adc	r31, r31
    37e2:	ee 0f       	add	r30, r30
    37e4:	ff 1f       	adc	r31, r31
    37e6:	ee 0f       	add	r30, r30
    37e8:	ff 1f       	adc	r31, r31
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	e8 0f       	add	r30, r24
    37f0:	f9 1f       	adc	r31, r25
    37f2:	e5 59       	subi	r30, 0x95	; 149
    37f4:	fb 4f       	sbci	r31, 0xFB	; 251
    37f6:	86 81       	ldd	r24, Z+6	; 0x06
    37f8:	97 81       	ldd	r25, Z+7	; 0x07
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	09 f4       	brne	.+2      	; 0x3800 <fadeBetweenColorsWithScalingPwmEffect+0x70>
    37fe:	aa c0       	rjmp	.+340    	; 0x3954 <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    3800:	8f 2d       	mov	r24, r15
    3802:	9e 2d       	mov	r25, r14
    3804:	fc 01       	movw	r30, r24
    3806:	ee 0f       	add	r30, r30
    3808:	ff 1f       	adc	r31, r31
    380a:	ee 0f       	add	r30, r30
    380c:	ff 1f       	adc	r31, r31
    380e:	ee 0f       	add	r30, r30
    3810:	ff 1f       	adc	r31, r31
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	e8 0f       	add	r30, r24
    3818:	f9 1f       	adc	r31, r25
    381a:	e5 59       	subi	r30, 0x95	; 149
    381c:	fb 4f       	sbci	r31, 0xFB	; 251
    381e:	24 81       	ldd	r18, Z+4	; 0x04
    3820:	35 81       	ldd	r19, Z+5	; 0x05
    3822:	24 17       	cp	r18, r20
    3824:	35 07       	cpc	r19, r21
    3826:	0c f0       	brlt	.+2      	; 0x382a <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    3828:	54 c0       	rjmp	.+168    	; 0x38d2 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    382a:	8f 2d       	mov	r24, r15
    382c:	9e 2d       	mov	r25, r14
    382e:	fc 01       	movw	r30, r24
    3830:	ee 0f       	add	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	ee 0f       	add	r30, r30
    3836:	ff 1f       	adc	r31, r31
    3838:	ee 0f       	add	r30, r30
    383a:	ff 1f       	adc	r31, r31
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	e8 0f       	add	r30, r24
    3842:	f9 1f       	adc	r31, r25
    3844:	e5 59       	subi	r30, 0x95	; 149
    3846:	fb 4f       	sbci	r31, 0xFB	; 251
    3848:	2f 5f       	subi	r18, 0xFF	; 255
    384a:	3f 4f       	sbci	r19, 0xFF	; 255
    384c:	35 83       	std	Z+5, r19	; 0x05
    384e:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    3850:	8e 01       	movw	r16, r28
    3852:	0f 5f       	subi	r16, 0xFF	; 255
    3854:	1f 4f       	sbci	r17, 0xFF	; 255
    3856:	c8 01       	movw	r24, r16
    3858:	bd 01       	movw	r22, r26
    385a:	47 e0       	ldi	r20, 0x07	; 7
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    3862:	8f 2d       	mov	r24, r15
    3864:	9e 2d       	mov	r25, r14
    3866:	fc 01       	movw	r30, r24
    3868:	ee 0f       	add	r30, r30
    386a:	ff 1f       	adc	r31, r31
    386c:	ee 0f       	add	r30, r30
    386e:	ff 1f       	adc	r31, r31
    3870:	ee 0f       	add	r30, r30
    3872:	ff 1f       	adc	r31, r31
    3874:	88 0f       	add	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	e8 0f       	add	r30, r24
    387a:	f9 1f       	adc	r31, r25
    387c:	e5 59       	subi	r30, 0x95	; 149
    387e:	fb 4f       	sbci	r31, 0xFB	; 251
    3880:	80 81       	ld	r24, Z
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	98 8b       	std	Y+16, r25	; 0x10
    3886:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    3888:	8f 2d       	mov	r24, r15
    388a:	9e 2d       	mov	r25, r14
    388c:	fc 01       	movw	r30, r24
    388e:	ee 0f       	add	r30, r30
    3890:	ff 1f       	adc	r31, r31
    3892:	ee 0f       	add	r30, r30
    3894:	ff 1f       	adc	r31, r31
    3896:	ee 0f       	add	r30, r30
    3898:	ff 1f       	adc	r31, r31
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	e8 0f       	add	r30, r24
    38a0:	f9 1f       	adc	r31, r25
    38a2:	e5 59       	subi	r30, 0x95	; 149
    38a4:	fb 4f       	sbci	r31, 0xFB	; 251
    38a6:	82 81       	ldd	r24, Z+2	; 0x02
    38a8:	93 81       	ldd	r25, Z+3	; 0x03
    38aa:	9a 8b       	std	Y+18, r25	; 0x12
    38ac:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    38ae:	8f 2d       	mov	r24, r15
    38b0:	9e 2d       	mov	r25, r14
    38b2:	b8 01       	movw	r22, r16
    38b4:	0e 94 bf 19 	call	0x337e	; 0x337e <fadeBetweenColorsWithPwm>
	

}
    38b8:	62 96       	adiw	r28, 0x12	; 18
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	ff 90       	pop	r15
    38ce:	ef 90       	pop	r14
    38d0:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    38d2:	8f 2d       	mov	r24, r15
    38d4:	9e 2d       	mov	r25, r14
    38d6:	fc 01       	movw	r30, r24
    38d8:	ee 0f       	add	r30, r30
    38da:	ff 1f       	adc	r31, r31
    38dc:	ee 0f       	add	r30, r30
    38de:	ff 1f       	adc	r31, r31
    38e0:	ee 0f       	add	r30, r30
    38e2:	ff 1f       	adc	r31, r31
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	e8 0f       	add	r30, r24
    38ea:	f9 1f       	adc	r31, r25
    38ec:	e5 59       	subi	r30, 0x95	; 149
    38ee:	fb 4f       	sbci	r31, 0xFB	; 251
    38f0:	15 82       	std	Z+5, r1	; 0x05
    38f2:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    38f4:	61 30       	cpi	r22, 0x01	; 1
    38f6:	71 05       	cpc	r23, r1
    38f8:	09 f4       	brne	.+2      	; 0x38fc <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    38fa:	86 c0       	rjmp	.+268    	; 0x3a08 <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    38fc:	67 2b       	or	r22, r23
    38fe:	09 f0       	breq	.+2      	; 0x3902 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    3900:	a7 cf       	rjmp	.-178    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    3902:	8f 2d       	mov	r24, r15
    3904:	9e 2d       	mov	r25, r14
    3906:	fc 01       	movw	r30, r24
    3908:	ee 0f       	add	r30, r30
    390a:	ff 1f       	adc	r31, r31
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	ee 0f       	add	r30, r30
    3912:	ff 1f       	adc	r31, r31
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	e8 0f       	add	r30, r24
    391a:	f9 1f       	adc	r31, r25
    391c:	e5 59       	subi	r30, 0x95	; 149
    391e:	fb 4f       	sbci	r31, 0xFB	; 251
    3920:	20 81       	ld	r18, Z
    3922:	31 81       	ldd	r19, Z+1	; 0x01
    3924:	23 30       	cpi	r18, 0x03	; 3
    3926:	31 05       	cpc	r19, r1
    3928:	0c f4       	brge	.+2      	; 0x392c <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    392a:	97 c0       	rjmp	.+302    	; 0x3a5a <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    392c:	8f 2d       	mov	r24, r15
    392e:	9e 2d       	mov	r25, r14
    3930:	fc 01       	movw	r30, r24
    3932:	ee 0f       	add	r30, r30
    3934:	ff 1f       	adc	r31, r31
    3936:	ee 0f       	add	r30, r30
    3938:	ff 1f       	adc	r31, r31
    393a:	ee 0f       	add	r30, r30
    393c:	ff 1f       	adc	r31, r31
    393e:	88 0f       	add	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	e8 0f       	add	r30, r24
    3944:	f9 1f       	adc	r31, r25
    3946:	e5 59       	subi	r30, 0x95	; 149
    3948:	fb 4f       	sbci	r31, 0xFB	; 251
    394a:	22 50       	subi	r18, 0x02	; 2
    394c:	30 40       	sbci	r19, 0x00	; 0
    394e:	31 83       	std	Z+1, r19	; 0x01
    3950:	20 83       	st	Z, r18
    3952:	7e cf       	rjmp	.-260    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    3954:	8f 2d       	mov	r24, r15
    3956:	9e 2d       	mov	r25, r14
    3958:	fc 01       	movw	r30, r24
    395a:	ee 0f       	add	r30, r30
    395c:	ff 1f       	adc	r31, r31
    395e:	ee 0f       	add	r30, r30
    3960:	ff 1f       	adc	r31, r31
    3962:	ee 0f       	add	r30, r30
    3964:	ff 1f       	adc	r31, r31
    3966:	88 0f       	add	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	e8 0f       	add	r30, r24
    396c:	f9 1f       	adc	r31, r25
    396e:	e5 59       	subi	r30, 0x95	; 149
    3970:	fb 4f       	sbci	r31, 0xFB	; 251
    3972:	84 81       	ldd	r24, Z+4	; 0x04
    3974:	95 81       	ldd	r25, Z+5	; 0x05
    3976:	0a 97       	sbiw	r24, 0x0a	; 10
    3978:	0c f1       	brlt	.+66     	; 0x39bc <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    397a:	61 30       	cpi	r22, 0x01	; 1
    397c:	71 05       	cpc	r23, r1
    397e:	09 f4       	brne	.+2      	; 0x3982 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    3980:	e6 c0       	rjmp	.+460    	; 0x3b4e <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    3982:	67 2b       	or	r22, r23
    3984:	51 f4       	brne	.+20     	; 0x399a <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    3986:	8f 2d       	mov	r24, r15
    3988:	9e 2d       	mov	r25, r14
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	40 e0       	ldi	r20, 0x00	; 0
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	0e 94 c9 22 	call	0x4592	; 0x4592 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    399a:	8f 2d       	mov	r24, r15
    399c:	9e 2d       	mov	r25, r14
    399e:	fc 01       	movw	r30, r24
    39a0:	ee 0f       	add	r30, r30
    39a2:	ff 1f       	adc	r31, r31
    39a4:	ee 0f       	add	r30, r30
    39a6:	ff 1f       	adc	r31, r31
    39a8:	ee 0f       	add	r30, r30
    39aa:	ff 1f       	adc	r31, r31
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	e8 0f       	add	r30, r24
    39b2:	f9 1f       	adc	r31, r25
    39b4:	e5 59       	subi	r30, 0x95	; 149
    39b6:	fb 4f       	sbci	r31, 0xFB	; 251
    39b8:	15 82       	std	Z+5, r1	; 0x05
    39ba:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    39bc:	8f 2d       	mov	r24, r15
    39be:	9e 2d       	mov	r25, r14
    39c0:	dc 01       	movw	r26, r24
    39c2:	aa 0f       	add	r26, r26
    39c4:	bb 1f       	adc	r27, r27
    39c6:	aa 0f       	add	r26, r26
    39c8:	bb 1f       	adc	r27, r27
    39ca:	aa 0f       	add	r26, r26
    39cc:	bb 1f       	adc	r27, r27
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	a8 0f       	add	r26, r24
    39d4:	b9 1f       	adc	r27, r25
    39d6:	a5 59       	subi	r26, 0x95	; 149
    39d8:	bb 4f       	sbci	r27, 0xFB	; 251
    39da:	8f 2d       	mov	r24, r15
    39dc:	9e 2d       	mov	r25, r14
    39de:	fc 01       	movw	r30, r24
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	ee 0f       	add	r30, r30
    39e6:	ff 1f       	adc	r31, r31
    39e8:	ee 0f       	add	r30, r30
    39ea:	ff 1f       	adc	r31, r31
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	e8 0f       	add	r30, r24
    39f2:	f9 1f       	adc	r31, r25
    39f4:	e5 59       	subi	r30, 0x95	; 149
    39f6:	fb 4f       	sbci	r31, 0xFB	; 251
    39f8:	84 81       	ldd	r24, Z+4	; 0x04
    39fa:	95 81       	ldd	r25, Z+5	; 0x05
    39fc:	01 96       	adiw	r24, 0x01	; 1
    39fe:	15 96       	adiw	r26, 0x05	; 5
    3a00:	9c 93       	st	X, r25
    3a02:	8e 93       	st	-X, r24
    3a04:	14 97       	sbiw	r26, 0x04	; 4
    3a06:	58 cf       	rjmp	.-336    	; 0x38b8 <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    3a08:	8f 2d       	mov	r24, r15
    3a0a:	9e 2d       	mov	r25, r14
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	ee 0f       	add	r30, r30
    3a10:	ff 1f       	adc	r31, r31
    3a12:	ee 0f       	add	r30, r30
    3a14:	ff 1f       	adc	r31, r31
    3a16:	ee 0f       	add	r30, r30
    3a18:	ff 1f       	adc	r31, r31
    3a1a:	88 0f       	add	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	e8 0f       	add	r30, r24
    3a20:	f9 1f       	adc	r31, r25
    3a22:	e5 59       	subi	r30, 0x95	; 149
    3a24:	fb 4f       	sbci	r31, 0xFB	; 251
    3a26:	22 81       	ldd	r18, Z+2	; 0x02
    3a28:	33 81       	ldd	r19, Z+3	; 0x03
    3a2a:	23 30       	cpi	r18, 0x03	; 3
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	0c f4       	brge	.+2      	; 0x3a32 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    3a30:	52 c0       	rjmp	.+164    	; 0x3ad6 <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    3a32:	8f 2d       	mov	r24, r15
    3a34:	9e 2d       	mov	r25, r14
    3a36:	fc 01       	movw	r30, r24
    3a38:	ee 0f       	add	r30, r30
    3a3a:	ff 1f       	adc	r31, r31
    3a3c:	ee 0f       	add	r30, r30
    3a3e:	ff 1f       	adc	r31, r31
    3a40:	ee 0f       	add	r30, r30
    3a42:	ff 1f       	adc	r31, r31
    3a44:	88 0f       	add	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	e8 0f       	add	r30, r24
    3a4a:	f9 1f       	adc	r31, r25
    3a4c:	e5 59       	subi	r30, 0x95	; 149
    3a4e:	fb 4f       	sbci	r31, 0xFB	; 251
    3a50:	22 50       	subi	r18, 0x02	; 2
    3a52:	30 40       	sbci	r19, 0x00	; 0
    3a54:	33 83       	std	Z+3, r19	; 0x03
    3a56:	22 83       	std	Z+2, r18	; 0x02
    3a58:	fb ce       	rjmp	.-522    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    3a5a:	8f 2d       	mov	r24, r15
    3a5c:	9e 2d       	mov	r25, r14
    3a5e:	fc 01       	movw	r30, r24
    3a60:	ee 0f       	add	r30, r30
    3a62:	ff 1f       	adc	r31, r31
    3a64:	ee 0f       	add	r30, r30
    3a66:	ff 1f       	adc	r31, r31
    3a68:	ee 0f       	add	r30, r30
    3a6a:	ff 1f       	adc	r31, r31
    3a6c:	88 0f       	add	r24, r24
    3a6e:	99 1f       	adc	r25, r25
    3a70:	e8 0f       	add	r30, r24
    3a72:	f9 1f       	adc	r31, r25
    3a74:	e5 59       	subi	r30, 0x95	; 149
    3a76:	fb 4f       	sbci	r31, 0xFB	; 251
    3a78:	82 81       	ldd	r24, Z+2	; 0x02
    3a7a:	93 81       	ldd	r25, Z+3	; 0x03
    3a7c:	80 32       	cpi	r24, 0x20	; 32
    3a7e:	91 05       	cpc	r25, r1
    3a80:	0c f0       	brlt	.+2      	; 0x3a84 <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    3a82:	e6 ce       	rjmp	.-564    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    3a84:	02 96       	adiw	r24, 0x02	; 2
    3a86:	2f 2d       	mov	r18, r15
    3a88:	3e 2d       	mov	r19, r14
    3a8a:	f9 01       	movw	r30, r18
    3a8c:	ee 0f       	add	r30, r30
    3a8e:	ff 1f       	adc	r31, r31
    3a90:	ee 0f       	add	r30, r30
    3a92:	ff 1f       	adc	r31, r31
    3a94:	ee 0f       	add	r30, r30
    3a96:	ff 1f       	adc	r31, r31
    3a98:	22 0f       	add	r18, r18
    3a9a:	33 1f       	adc	r19, r19
    3a9c:	e2 0f       	add	r30, r18
    3a9e:	f3 1f       	adc	r31, r19
    3aa0:	e5 59       	subi	r30, 0x95	; 149
    3aa2:	fb 4f       	sbci	r31, 0xFB	; 251
    3aa4:	93 83       	std	Z+3, r25	; 0x03
    3aa6:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    3aa8:	80 97       	sbiw	r24, 0x20	; 32
    3aaa:	09 f0       	breq	.+2      	; 0x3aae <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    3aac:	d1 ce       	rjmp	.-606    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    3aae:	8f 2d       	mov	r24, r15
    3ab0:	9e 2d       	mov	r25, r14
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	ee 0f       	add	r30, r30
    3ab6:	ff 1f       	adc	r31, r31
    3ab8:	ee 0f       	add	r30, r30
    3aba:	ff 1f       	adc	r31, r31
    3abc:	ee 0f       	add	r30, r30
    3abe:	ff 1f       	adc	r31, r31
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	e8 0f       	add	r30, r24
    3ac6:	f9 1f       	adc	r31, r25
    3ac8:	e5 59       	subi	r30, 0x95	; 149
    3aca:	fb 4f       	sbci	r31, 0xFB	; 251
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	97 83       	std	Z+7, r25	; 0x07
    3ad2:	86 83       	std	Z+6, r24	; 0x06
    3ad4:	bd ce       	rjmp	.-646    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    3ad6:	8f 2d       	mov	r24, r15
    3ad8:	9e 2d       	mov	r25, r14
    3ada:	fc 01       	movw	r30, r24
    3adc:	ee 0f       	add	r30, r30
    3ade:	ff 1f       	adc	r31, r31
    3ae0:	ee 0f       	add	r30, r30
    3ae2:	ff 1f       	adc	r31, r31
    3ae4:	ee 0f       	add	r30, r30
    3ae6:	ff 1f       	adc	r31, r31
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	e8 0f       	add	r30, r24
    3aee:	f9 1f       	adc	r31, r25
    3af0:	e5 59       	subi	r30, 0x95	; 149
    3af2:	fb 4f       	sbci	r31, 0xFB	; 251
    3af4:	80 81       	ld	r24, Z
    3af6:	91 81       	ldd	r25, Z+1	; 0x01
    3af8:	80 32       	cpi	r24, 0x20	; 32
    3afa:	91 05       	cpc	r25, r1
    3afc:	0c f0       	brlt	.+2      	; 0x3b00 <fadeBetweenColorsWithScalingPwmEffect+0x370>
    3afe:	a8 ce       	rjmp	.-688    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    3b00:	02 96       	adiw	r24, 0x02	; 2
    3b02:	2f 2d       	mov	r18, r15
    3b04:	3e 2d       	mov	r19, r14
    3b06:	f9 01       	movw	r30, r18
    3b08:	ee 0f       	add	r30, r30
    3b0a:	ff 1f       	adc	r31, r31
    3b0c:	ee 0f       	add	r30, r30
    3b0e:	ff 1f       	adc	r31, r31
    3b10:	ee 0f       	add	r30, r30
    3b12:	ff 1f       	adc	r31, r31
    3b14:	22 0f       	add	r18, r18
    3b16:	33 1f       	adc	r19, r19
    3b18:	e2 0f       	add	r30, r18
    3b1a:	f3 1f       	adc	r31, r19
    3b1c:	e5 59       	subi	r30, 0x95	; 149
    3b1e:	fb 4f       	sbci	r31, 0xFB	; 251
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    3b24:	80 97       	sbiw	r24, 0x20	; 32
    3b26:	09 f0       	breq	.+2      	; 0x3b2a <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    3b28:	93 ce       	rjmp	.-730    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    3b2a:	8f 2d       	mov	r24, r15
    3b2c:	9e 2d       	mov	r25, r14
    3b2e:	fc 01       	movw	r30, r24
    3b30:	ee 0f       	add	r30, r30
    3b32:	ff 1f       	adc	r31, r31
    3b34:	ee 0f       	add	r30, r30
    3b36:	ff 1f       	adc	r31, r31
    3b38:	ee 0f       	add	r30, r30
    3b3a:	ff 1f       	adc	r31, r31
    3b3c:	88 0f       	add	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	e8 0f       	add	r30, r24
    3b42:	f9 1f       	adc	r31, r25
    3b44:	e5 59       	subi	r30, 0x95	; 149
    3b46:	fb 4f       	sbci	r31, 0xFB	; 251
    3b48:	77 83       	std	Z+7, r23	; 0x07
    3b4a:	66 83       	std	Z+6, r22	; 0x06
    3b4c:	81 ce       	rjmp	.-766    	; 0x3850 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    3b4e:	8f 2d       	mov	r24, r15
    3b50:	9e 2d       	mov	r25, r14
    3b52:	bd 01       	movw	r22, r26
    3b54:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <fadeBetweenColors>
    3b58:	20 cf       	rjmp	.-448    	; 0x399a <fadeBetweenColorsWithScalingPwmEffect+0x20a>

00003b5a <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    3b5a:	ef 92       	push	r14
    3b5c:	ff 92       	push	r15
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	df 93       	push	r29
    3b64:	cf 93       	push	r28
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	a6 97       	sbiw	r28, 0x26	; 38
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	f8 2e       	mov	r15, r24
    3b78:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    3b7a:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    3b7c:	88 0f       	add	r24, r24
    3b7e:	99 1f       	adc	r25, r25
    3b80:	fc 01       	movw	r30, r24
    3b82:	ee 0f       	add	r30, r30
    3b84:	ff 1f       	adc	r31, r31
    3b86:	ee 0f       	add	r30, r30
    3b88:	ff 1f       	adc	r31, r31
    3b8a:	ee 0f       	add	r30, r30
    3b8c:	ff 1f       	adc	r31, r31
    3b8e:	e8 1b       	sub	r30, r24
    3b90:	f9 0b       	sbc	r31, r25
    3b92:	ed 53       	subi	r30, 0x3D	; 61
    3b94:	fc 4f       	sbci	r31, 0xFC	; 252
    3b96:	20 85       	ldd	r18, Z+8	; 0x08
    3b98:	31 85       	ldd	r19, Z+9	; 0x09
    3b9a:	2a 30       	cpi	r18, 0x0A	; 10
    3b9c:	31 05       	cpc	r19, r1
    3b9e:	0c f4       	brge	.+2      	; 0x3ba2 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    3ba0:	4b c0       	rjmp	.+150    	; 0x3c38 <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    3ba2:	8f 2d       	mov	r24, r15
    3ba4:	9e 2d       	mov	r25, r14
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	fc 01       	movw	r30, r24
    3bac:	ee 0f       	add	r30, r30
    3bae:	ff 1f       	adc	r31, r31
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	ee 0f       	add	r30, r30
    3bb6:	ff 1f       	adc	r31, r31
    3bb8:	e8 1b       	sub	r30, r24
    3bba:	f9 0b       	sbc	r31, r25
    3bbc:	ed 53       	subi	r30, 0x3D	; 61
    3bbe:	fc 4f       	sbci	r31, 0xFC	; 252
    3bc0:	26 81       	ldd	r18, Z+6	; 0x06
    3bc2:	37 81       	ldd	r19, Z+7	; 0x07
    3bc4:	8f 2d       	mov	r24, r15
    3bc6:	9e 2d       	mov	r25, r14
    3bc8:	88 0f       	add	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	fc 01       	movw	r30, r24
    3bce:	ee 0f       	add	r30, r30
    3bd0:	ff 1f       	adc	r31, r31
    3bd2:	ee 0f       	add	r30, r30
    3bd4:	ff 1f       	adc	r31, r31
    3bd6:	ee 0f       	add	r30, r30
    3bd8:	ff 1f       	adc	r31, r31
    3bda:	e8 1b       	sub	r30, r24
    3bdc:	f9 0b       	sbc	r31, r25
    3bde:	ed 53       	subi	r30, 0x3D	; 61
    3be0:	fc 4f       	sbci	r31, 0xFC	; 252
    3be2:	84 81       	ldd	r24, Z+4	; 0x04
    3be4:	95 81       	ldd	r25, Z+5	; 0x05
    3be6:	28 17       	cp	r18, r24
    3be8:	39 07       	cpc	r19, r25
    3bea:	0c f0       	brlt	.+2      	; 0x3bee <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    3bec:	95 c0       	rjmp	.+298    	; 0x3d18 <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    3bee:	8f 2d       	mov	r24, r15
    3bf0:	9e 2d       	mov	r25, r14
    3bf2:	88 0f       	add	r24, r24
    3bf4:	99 1f       	adc	r25, r25
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	ee 0f       	add	r30, r30
    3bfa:	ff 1f       	adc	r31, r31
    3bfc:	ee 0f       	add	r30, r30
    3bfe:	ff 1f       	adc	r31, r31
    3c00:	ee 0f       	add	r30, r30
    3c02:	ff 1f       	adc	r31, r31
    3c04:	e8 1b       	sub	r30, r24
    3c06:	f9 0b       	sbc	r31, r25
    3c08:	ed 53       	subi	r30, 0x3D	; 61
    3c0a:	fc 4f       	sbci	r31, 0xFC	; 252
    3c0c:	2f 5f       	subi	r18, 0xFF	; 255
    3c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c10:	37 83       	std	Z+7, r19	; 0x07
    3c12:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    3c14:	8f 2d       	mov	r24, r15
    3c16:	9e 2d       	mov	r25, r14
    3c18:	88 0f       	add	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	ee 0f       	add	r30, r30
    3c20:	ff 1f       	adc	r31, r31
    3c22:	ee 0f       	add	r30, r30
    3c24:	ff 1f       	adc	r31, r31
    3c26:	ee 0f       	add	r30, r30
    3c28:	ff 1f       	adc	r31, r31
    3c2a:	e8 1b       	sub	r30, r24
    3c2c:	f9 0b       	sbc	r31, r25
    3c2e:	ed 53       	subi	r30, 0x3D	; 61
    3c30:	fc 4f       	sbci	r31, 0xFC	; 252
    3c32:	11 86       	std	Z+9, r1	; 0x09
    3c34:	10 86       	std	Z+8, r1	; 0x08
    3c36:	13 c0       	rjmp	.+38     	; 0x3c5e <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    3c38:	8f 2d       	mov	r24, r15
    3c3a:	9e 2d       	mov	r25, r14
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	fc 01       	movw	r30, r24
    3c42:	ee 0f       	add	r30, r30
    3c44:	ff 1f       	adc	r31, r31
    3c46:	ee 0f       	add	r30, r30
    3c48:	ff 1f       	adc	r31, r31
    3c4a:	ee 0f       	add	r30, r30
    3c4c:	ff 1f       	adc	r31, r31
    3c4e:	e8 1b       	sub	r30, r24
    3c50:	f9 0b       	sbc	r31, r25
    3c52:	ed 53       	subi	r30, 0x3D	; 61
    3c54:	fc 4f       	sbci	r31, 0xFC	; 252
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	31 87       	std	Z+9, r19	; 0x09
    3c5c:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    3c5e:	8f 2d       	mov	r24, r15
    3c60:	9e 2d       	mov	r25, r14
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	fc 01       	movw	r30, r24
    3c68:	ee 0f       	add	r30, r30
    3c6a:	ff 1f       	adc	r31, r31
    3c6c:	ee 0f       	add	r30, r30
    3c6e:	ff 1f       	adc	r31, r31
    3c70:	ee 0f       	add	r30, r30
    3c72:	ff 1f       	adc	r31, r31
    3c74:	e8 1b       	sub	r30, r24
    3c76:	f9 0b       	sbc	r31, r25
    3c78:	ed 53       	subi	r30, 0x3D	; 61
    3c7a:	fc 4f       	sbci	r31, 0xFC	; 252
    3c7c:	02 84       	ldd	r0, Z+10	; 0x0a
    3c7e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c80:	e0 2d       	mov	r30, r0
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	9e 8b       	std	Y+22, r25	; 0x16
    3c88:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	98 8f       	std	Y+24, r25	; 0x18
    3c90:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    3c92:	84 81       	ldd	r24, Z+4	; 0x04
    3c94:	95 81       	ldd	r25, Z+5	; 0x05
    3c96:	9a 8f       	std	Y+26, r25	; 0x1a
    3c98:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    3c9a:	8f 2d       	mov	r24, r15
    3c9c:	9e 2d       	mov	r25, r14
    3c9e:	88 0f       	add	r24, r24
    3ca0:	99 1f       	adc	r25, r25
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	ee 0f       	add	r30, r30
    3ca6:	ff 1f       	adc	r31, r31
    3ca8:	ee 0f       	add	r30, r30
    3caa:	ff 1f       	adc	r31, r31
    3cac:	ee 0f       	add	r30, r30
    3cae:	ff 1f       	adc	r31, r31
    3cb0:	e8 1b       	sub	r30, r24
    3cb2:	f9 0b       	sbc	r31, r25
    3cb4:	ed 53       	subi	r30, 0x3D	; 61
    3cb6:	fc 4f       	sbci	r31, 0xFC	; 252
    3cb8:	04 84       	ldd	r0, Z+12	; 0x0c
    3cba:	f5 85       	ldd	r31, Z+13	; 0x0d
    3cbc:	e0 2d       	mov	r30, r0
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	9c 8f       	std	Y+28, r25	; 0x1c
    3cc4:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	9e 8f       	std	Y+30, r25	; 0x1e
    3ccc:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    3cce:	84 81       	ldd	r24, Z+4	; 0x04
    3cd0:	95 81       	ldd	r25, Z+5	; 0x05
    3cd2:	98 a3       	std	Y+32, r25	; 0x20
    3cd4:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    3cd6:	f8 01       	movw	r30, r16
    3cd8:	82 89       	ldd	r24, Z+18	; 0x12
    3cda:	93 89       	ldd	r25, Z+19	; 0x13
    3cdc:	9a a3       	std	Y+34, r25	; 0x22
    3cde:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    3ce0:	84 89       	ldd	r24, Z+20	; 0x14
    3ce2:	95 89       	ldd	r25, Z+21	; 0x15
    3ce4:	9c a3       	std	Y+36, r25	; 0x24
    3ce6:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    3ce8:	86 89       	ldd	r24, Z+22	; 0x16
    3cea:	97 89       	ldd	r25, Z+23	; 0x17
    3cec:	9e a3       	std	Y+38, r25	; 0x26
    3cee:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    3cf0:	8f 2d       	mov	r24, r15
    3cf2:	9e 2d       	mov	r25, r14
    3cf4:	be 01       	movw	r22, r28
    3cf6:	6b 5e       	subi	r22, 0xEB	; 235
    3cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfa:	0e 94 c8 1b 	call	0x3790	; 0x3790 <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    3cfe:	a6 96       	adiw	r28, 0x26	; 38
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	1f 91       	pop	r17
    3d10:	0f 91       	pop	r16
    3d12:	ff 90       	pop	r15
    3d14:	ef 90       	pop	r14
    3d16:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    3d18:	8f 2d       	mov	r24, r15
    3d1a:	9e 2d       	mov	r25, r14
    3d1c:	88 0f       	add	r24, r24
    3d1e:	99 1f       	adc	r25, r25
    3d20:	fc 01       	movw	r30, r24
    3d22:	ee 0f       	add	r30, r30
    3d24:	ff 1f       	adc	r31, r31
    3d26:	ee 0f       	add	r30, r30
    3d28:	ff 1f       	adc	r31, r31
    3d2a:	ee 0f       	add	r30, r30
    3d2c:	ff 1f       	adc	r31, r31
    3d2e:	e8 1b       	sub	r30, r24
    3d30:	f9 0b       	sbc	r31, r25
    3d32:	ed 53       	subi	r30, 0x3D	; 61
    3d34:	fc 4f       	sbci	r31, 0xFC	; 252
    3d36:	42 81       	ldd	r20, Z+2	; 0x02
    3d38:	53 81       	ldd	r21, Z+3	; 0x03
    3d3a:	41 30       	cpi	r20, 0x01	; 1
    3d3c:	51 05       	cpc	r21, r1
    3d3e:	09 f4       	brne	.+2      	; 0x3d42 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    3d40:	6a c0       	rjmp	.+212    	; 0x3e16 <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    3d42:	45 2b       	or	r20, r21
    3d44:	09 f0       	breq	.+2      	; 0x3d48 <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    3d46:	f2 c0       	rjmp	.+484    	; 0x3f2c <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    3d48:	8f 2d       	mov	r24, r15
    3d4a:	9e 2d       	mov	r25, r14
    3d4c:	88 0f       	add	r24, r24
    3d4e:	99 1f       	adc	r25, r25
    3d50:	fc 01       	movw	r30, r24
    3d52:	ee 0f       	add	r30, r30
    3d54:	ff 1f       	adc	r31, r31
    3d56:	ee 0f       	add	r30, r30
    3d58:	ff 1f       	adc	r31, r31
    3d5a:	ee 0f       	add	r30, r30
    3d5c:	ff 1f       	adc	r31, r31
    3d5e:	e8 1b       	sub	r30, r24
    3d60:	f9 0b       	sbc	r31, r25
    3d62:	ed 53       	subi	r30, 0x3D	; 61
    3d64:	fc 4f       	sbci	r31, 0xFC	; 252
    3d66:	20 81       	ld	r18, Z
    3d68:	31 81       	ldd	r19, Z+1	; 0x01
    3d6a:	21 50       	subi	r18, 0x01	; 1
    3d6c:	30 40       	sbci	r19, 0x00	; 0
    3d6e:	8f 2d       	mov	r24, r15
    3d70:	9e 2d       	mov	r25, r14
    3d72:	88 0f       	add	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	fc 01       	movw	r30, r24
    3d78:	ee 0f       	add	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	ee 0f       	add	r30, r30
    3d7e:	ff 1f       	adc	r31, r31
    3d80:	ee 0f       	add	r30, r30
    3d82:	ff 1f       	adc	r31, r31
    3d84:	e8 1b       	sub	r30, r24
    3d86:	f9 0b       	sbc	r31, r25
    3d88:	ed 53       	subi	r30, 0x3D	; 61
    3d8a:	fc 4f       	sbci	r31, 0xFC	; 252
    3d8c:	31 83       	std	Z+1, r19	; 0x01
    3d8e:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    3d90:	23 2b       	or	r18, r19
    3d92:	09 f0       	breq	.+2      	; 0x3d96 <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    3d94:	f7 c0       	rjmp	.+494    	; 0x3f84 <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    3d96:	8f 2d       	mov	r24, r15
    3d98:	9e 2d       	mov	r25, r14
    3d9a:	88 0f       	add	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	fc 01       	movw	r30, r24
    3da0:	ee 0f       	add	r30, r30
    3da2:	ff 1f       	adc	r31, r31
    3da4:	ee 0f       	add	r30, r30
    3da6:	ff 1f       	adc	r31, r31
    3da8:	ee 0f       	add	r30, r30
    3daa:	ff 1f       	adc	r31, r31
    3dac:	e8 1b       	sub	r30, r24
    3dae:	f9 0b       	sbc	r31, r25
    3db0:	ed 53       	subi	r30, 0x3D	; 61
    3db2:	fc 4f       	sbci	r31, 0xFC	; 252
    3db4:	0a 5f       	subi	r16, 0xFA	; 250
    3db6:	1f 4f       	sbci	r17, 0xFF	; 255
    3db8:	13 87       	std	Z+11, r17	; 0x0b
    3dba:	02 87       	std	Z+10, r16	; 0x0a
    3dbc:	06 50       	subi	r16, 0x06	; 6
    3dbe:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    3dc0:	8f 2d       	mov	r24, r15
    3dc2:	9e 2d       	mov	r25, r14
    3dc4:	88 0f       	add	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	fc 01       	movw	r30, r24
    3dca:	ee 0f       	add	r30, r30
    3dcc:	ff 1f       	adc	r31, r31
    3dce:	ee 0f       	add	r30, r30
    3dd0:	ff 1f       	adc	r31, r31
    3dd2:	ee 0f       	add	r30, r30
    3dd4:	ff 1f       	adc	r31, r31
    3dd6:	e8 1b       	sub	r30, r24
    3dd8:	f9 0b       	sbc	r31, r25
    3dda:	ed 53       	subi	r30, 0x3D	; 61
    3ddc:	fc 4f       	sbci	r31, 0xFC	; 252
    3dde:	15 87       	std	Z+13, r17	; 0x0d
    3de0:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    3de2:	f8 01       	movw	r30, r16
    3de4:	86 81       	ldd	r24, Z+6	; 0x06
    3de6:	97 81       	ldd	r25, Z+7	; 0x07
    3de8:	98 87       	std	Y+8, r25	; 0x08
    3dea:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    3dec:	80 85       	ldd	r24, Z+8	; 0x08
    3dee:	91 85       	ldd	r25, Z+9	; 0x09
    3df0:	9a 87       	std	Y+10, r25	; 0x0a
    3df2:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    3df4:	82 85       	ldd	r24, Z+10	; 0x0a
    3df6:	93 85       	ldd	r25, Z+11	; 0x0b
    3df8:	9c 87       	std	Y+12, r25	; 0x0c
    3dfa:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    3dfc:	80 81       	ld	r24, Z
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	9e 87       	std	Y+14, r25	; 0x0e
    3e02:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	98 8b       	std	Y+16, r25	; 0x10
    3e0a:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    3e0c:	84 81       	ldd	r24, Z+4	; 0x04
    3e0e:	95 81       	ldd	r25, Z+5	; 0x05
    3e10:	9a 8b       	std	Y+18, r25	; 0x12
    3e12:	89 8b       	std	Y+17, r24	; 0x11
    3e14:	8b c0       	rjmp	.+278    	; 0x3f2c <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    3e16:	8f 2d       	mov	r24, r15
    3e18:	9e 2d       	mov	r25, r14
    3e1a:	88 0f       	add	r24, r24
    3e1c:	99 1f       	adc	r25, r25
    3e1e:	fc 01       	movw	r30, r24
    3e20:	ee 0f       	add	r30, r30
    3e22:	ff 1f       	adc	r31, r31
    3e24:	ee 0f       	add	r30, r30
    3e26:	ff 1f       	adc	r31, r31
    3e28:	ee 0f       	add	r30, r30
    3e2a:	ff 1f       	adc	r31, r31
    3e2c:	e8 1b       	sub	r30, r24
    3e2e:	f9 0b       	sbc	r31, r25
    3e30:	ed 53       	subi	r30, 0x3D	; 61
    3e32:	fc 4f       	sbci	r31, 0xFC	; 252
    3e34:	20 81       	ld	r18, Z
    3e36:	31 81       	ldd	r19, Z+1	; 0x01
    3e38:	2f 5f       	subi	r18, 0xFF	; 255
    3e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3c:	8f 2d       	mov	r24, r15
    3e3e:	9e 2d       	mov	r25, r14
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	fc 01       	movw	r30, r24
    3e46:	ee 0f       	add	r30, r30
    3e48:	ff 1f       	adc	r31, r31
    3e4a:	ee 0f       	add	r30, r30
    3e4c:	ff 1f       	adc	r31, r31
    3e4e:	ee 0f       	add	r30, r30
    3e50:	ff 1f       	adc	r31, r31
    3e52:	e8 1b       	sub	r30, r24
    3e54:	f9 0b       	sbc	r31, r25
    3e56:	ed 53       	subi	r30, 0x3D	; 61
    3e58:	fc 4f       	sbci	r31, 0xFC	; 252
    3e5a:	31 83       	std	Z+1, r19	; 0x01
    3e5c:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    3e5e:	21 30       	cpi	r18, 0x01	; 1
    3e60:	31 05       	cpc	r19, r1
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    3e64:	e5 c0       	rjmp	.+458    	; 0x4030 <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    3e66:	8f 2d       	mov	r24, r15
    3e68:	9e 2d       	mov	r25, r14
    3e6a:	88 0f       	add	r24, r24
    3e6c:	99 1f       	adc	r25, r25
    3e6e:	fc 01       	movw	r30, r24
    3e70:	ee 0f       	add	r30, r30
    3e72:	ff 1f       	adc	r31, r31
    3e74:	ee 0f       	add	r30, r30
    3e76:	ff 1f       	adc	r31, r31
    3e78:	ee 0f       	add	r30, r30
    3e7a:	ff 1f       	adc	r31, r31
    3e7c:	e8 1b       	sub	r30, r24
    3e7e:	f9 0b       	sbc	r31, r25
    3e80:	ed 53       	subi	r30, 0x3D	; 61
    3e82:	fc 4f       	sbci	r31, 0xFC	; 252
    3e84:	13 82       	std	Z+3, r1	; 0x03
    3e86:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    3e88:	8f 2d       	mov	r24, r15
    3e8a:	9e 2d       	mov	r25, r14
    3e8c:	88 0f       	add	r24, r24
    3e8e:	99 1f       	adc	r25, r25
    3e90:	fc 01       	movw	r30, r24
    3e92:	ee 0f       	add	r30, r30
    3e94:	ff 1f       	adc	r31, r31
    3e96:	ee 0f       	add	r30, r30
    3e98:	ff 1f       	adc	r31, r31
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	e8 1b       	sub	r30, r24
    3ea0:	f9 0b       	sbc	r31, r25
    3ea2:	ed 53       	subi	r30, 0x3D	; 61
    3ea4:	fc 4f       	sbci	r31, 0xFC	; 252
    3ea6:	51 83       	std	Z+1, r21	; 0x01
    3ea8:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    3eaa:	8f 2d       	mov	r24, r15
    3eac:	9e 2d       	mov	r25, r14
    3eae:	88 0f       	add	r24, r24
    3eb0:	99 1f       	adc	r25, r25
    3eb2:	fc 01       	movw	r30, r24
    3eb4:	ee 0f       	add	r30, r30
    3eb6:	ff 1f       	adc	r31, r31
    3eb8:	ee 0f       	add	r30, r30
    3eba:	ff 1f       	adc	r31, r31
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	e8 1b       	sub	r30, r24
    3ec2:	f9 0b       	sbc	r31, r25
    3ec4:	ed 53       	subi	r30, 0x3D	; 61
    3ec6:	fc 4f       	sbci	r31, 0xFC	; 252
    3ec8:	04 5f       	subi	r16, 0xF4	; 244
    3eca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ecc:	13 87       	std	Z+11, r17	; 0x0b
    3ece:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    3ed0:	8f 2d       	mov	r24, r15
    3ed2:	9e 2d       	mov	r25, r14
    3ed4:	88 0f       	add	r24, r24
    3ed6:	99 1f       	adc	r25, r25
    3ed8:	fc 01       	movw	r30, r24
    3eda:	ee 0f       	add	r30, r30
    3edc:	ff 1f       	adc	r31, r31
    3ede:	ee 0f       	add	r30, r30
    3ee0:	ff 1f       	adc	r31, r31
    3ee2:	ee 0f       	add	r30, r30
    3ee4:	ff 1f       	adc	r31, r31
    3ee6:	e8 1b       	sub	r30, r24
    3ee8:	f9 0b       	sbc	r31, r25
    3eea:	ed 53       	subi	r30, 0x3D	; 61
    3eec:	fc 4f       	sbci	r31, 0xFC	; 252
    3eee:	06 50       	subi	r16, 0x06	; 6
    3ef0:	10 40       	sbci	r17, 0x00	; 0
    3ef2:	15 87       	std	Z+13, r17	; 0x0d
    3ef4:	04 87       	std	Z+12, r16	; 0x0c
    3ef6:	06 50       	subi	r16, 0x06	; 6
    3ef8:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    3efa:	f8 01       	movw	r30, r16
    3efc:	84 85       	ldd	r24, Z+12	; 0x0c
    3efe:	95 85       	ldd	r25, Z+13	; 0x0d
    3f00:	98 87       	std	Y+8, r25	; 0x08
    3f02:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    3f04:	86 85       	ldd	r24, Z+14	; 0x0e
    3f06:	97 85       	ldd	r25, Z+15	; 0x0f
    3f08:	9a 87       	std	Y+10, r25	; 0x0a
    3f0a:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    3f0c:	80 89       	ldd	r24, Z+16	; 0x10
    3f0e:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    3f10:	9c 87       	std	Y+12, r25	; 0x0c
    3f12:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    3f14:	86 81       	ldd	r24, Z+6	; 0x06
    3f16:	97 81       	ldd	r25, Z+7	; 0x07
    3f18:	9e 87       	std	Y+14, r25	; 0x0e
    3f1a:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    3f1c:	80 85       	ldd	r24, Z+8	; 0x08
    3f1e:	91 85       	ldd	r25, Z+9	; 0x09
    3f20:	98 8b       	std	Y+16, r25	; 0x10
    3f22:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    3f24:	82 85       	ldd	r24, Z+10	; 0x0a
    3f26:	93 85       	ldd	r25, Z+11	; 0x0b
    3f28:	9a 8b       	std	Y+18, r25	; 0x12
    3f2a:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    3f2c:	8f 2d       	mov	r24, r15
    3f2e:	9e 2d       	mov	r25, r14
    3f30:	be 01       	movw	r22, r28
    3f32:	6f 5f       	subi	r22, 0xFF	; 255
    3f34:	7f 4f       	sbci	r23, 0xFF	; 255
    3f36:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <getRGBColor>
			resetData.beginRed = curColors.red;
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3e:	98 87       	std	Y+8, r25	; 0x08
    3f40:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    3f42:	8b 81       	ldd	r24, Y+3	; 0x03
    3f44:	9c 81       	ldd	r25, Y+4	; 0x04
    3f46:	9a 87       	std	Y+10, r25	; 0x0a
    3f48:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    3f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f4e:	9c 87       	std	Y+12, r25	; 0x0c
    3f50:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    3f52:	8f 2d       	mov	r24, r15
    3f54:	9e 2d       	mov	r25, r14
    3f56:	be 01       	movw	r22, r28
    3f58:	69 5f       	subi	r22, 0xF9	; 249
    3f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    3f60:	8f 2d       	mov	r24, r15
    3f62:	9e 2d       	mov	r25, r14
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	fc 01       	movw	r30, r24
    3f6a:	ee 0f       	add	r30, r30
    3f6c:	ff 1f       	adc	r31, r31
    3f6e:	ee 0f       	add	r30, r30
    3f70:	ff 1f       	adc	r31, r31
    3f72:	ee 0f       	add	r30, r30
    3f74:	ff 1f       	adc	r31, r31
    3f76:	e8 1b       	sub	r30, r24
    3f78:	f9 0b       	sbc	r31, r25
    3f7a:	ed 53       	subi	r30, 0x3D	; 61
    3f7c:	fc 4f       	sbci	r31, 0xFC	; 252
    3f7e:	17 82       	std	Z+7, r1	; 0x07
    3f80:	16 82       	std	Z+6, r1	; 0x06
    3f82:	48 ce       	rjmp	.-880    	; 0x3c14 <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    3f84:	8f 2d       	mov	r24, r15
    3f86:	9e 2d       	mov	r25, r14
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	ee 0f       	add	r30, r30
    3f90:	ff 1f       	adc	r31, r31
    3f92:	ee 0f       	add	r30, r30
    3f94:	ff 1f       	adc	r31, r31
    3f96:	ee 0f       	add	r30, r30
    3f98:	ff 1f       	adc	r31, r31
    3f9a:	e8 1b       	sub	r30, r24
    3f9c:	f9 0b       	sbc	r31, r25
    3f9e:	ed 53       	subi	r30, 0x3D	; 61
    3fa0:	fc 4f       	sbci	r31, 0xFC	; 252
    3fa2:	11 82       	std	Z+1, r1	; 0x01
    3fa4:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    3fa6:	8f 2d       	mov	r24, r15
    3fa8:	9e 2d       	mov	r25, r14
    3faa:	88 0f       	add	r24, r24
    3fac:	99 1f       	adc	r25, r25
    3fae:	fc 01       	movw	r30, r24
    3fb0:	ee 0f       	add	r30, r30
    3fb2:	ff 1f       	adc	r31, r31
    3fb4:	ee 0f       	add	r30, r30
    3fb6:	ff 1f       	adc	r31, r31
    3fb8:	ee 0f       	add	r30, r30
    3fba:	ff 1f       	adc	r31, r31
    3fbc:	e8 1b       	sub	r30, r24
    3fbe:	f9 0b       	sbc	r31, r25
    3fc0:	ed 53       	subi	r30, 0x3D	; 61
    3fc2:	fc 4f       	sbci	r31, 0xFC	; 252
    3fc4:	81 e0       	ldi	r24, 0x01	; 1
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	93 83       	std	Z+3, r25	; 0x03
    3fca:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    3fcc:	8f 2d       	mov	r24, r15
    3fce:	9e 2d       	mov	r25, r14
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	ee 0f       	add	r30, r30
    3fd8:	ff 1f       	adc	r31, r31
    3fda:	ee 0f       	add	r30, r30
    3fdc:	ff 1f       	adc	r31, r31
    3fde:	ee 0f       	add	r30, r30
    3fe0:	ff 1f       	adc	r31, r31
    3fe2:	e8 1b       	sub	r30, r24
    3fe4:	f9 0b       	sbc	r31, r25
    3fe6:	ed 53       	subi	r30, 0x3D	; 61
    3fe8:	fc 4f       	sbci	r31, 0xFC	; 252
    3fea:	13 87       	std	Z+11, r17	; 0x0b
    3fec:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    3fee:	8f 2d       	mov	r24, r15
    3ff0:	9e 2d       	mov	r25, r14
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	ee 0f       	add	r30, r30
    3ffa:	ff 1f       	adc	r31, r31
    3ffc:	ee 0f       	add	r30, r30
    3ffe:	ff 1f       	adc	r31, r31
    4000:	ee 0f       	add	r30, r30
    4002:	ff 1f       	adc	r31, r31
    4004:	e8 1b       	sub	r30, r24
    4006:	f9 0b       	sbc	r31, r25
    4008:	ed 53       	subi	r30, 0x3D	; 61
    400a:	fc 4f       	sbci	r31, 0xFC	; 252
    400c:	0a 5f       	subi	r16, 0xFA	; 250
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	15 87       	std	Z+13, r17	; 0x0d
    4012:	04 87       	std	Z+12, r16	; 0x0c
    4014:	06 50       	subi	r16, 0x06	; 6
    4016:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    4018:	f8 01       	movw	r30, r16
    401a:	80 81       	ld	r24, Z
    401c:	91 81       	ldd	r25, Z+1	; 0x01
    401e:	98 87       	std	Y+8, r25	; 0x08
    4020:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    4022:	82 81       	ldd	r24, Z+2	; 0x02
    4024:	93 81       	ldd	r25, Z+3	; 0x03
    4026:	9a 87       	std	Y+10, r25	; 0x0a
    4028:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    402a:	84 81       	ldd	r24, Z+4	; 0x04
    402c:	95 81       	ldd	r25, Z+5	; 0x05
    402e:	70 cf       	rjmp	.-288    	; 0x3f10 <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    4030:	8f 2d       	mov	r24, r15
    4032:	9e 2d       	mov	r25, r14
    4034:	88 0f       	add	r24, r24
    4036:	99 1f       	adc	r25, r25
    4038:	fc 01       	movw	r30, r24
    403a:	ee 0f       	add	r30, r30
    403c:	ff 1f       	adc	r31, r31
    403e:	ee 0f       	add	r30, r30
    4040:	ff 1f       	adc	r31, r31
    4042:	ee 0f       	add	r30, r30
    4044:	ff 1f       	adc	r31, r31
    4046:	e8 1b       	sub	r30, r24
    4048:	f9 0b       	sbc	r31, r25
    404a:	ed 53       	subi	r30, 0x3D	; 61
    404c:	fc 4f       	sbci	r31, 0xFC	; 252
    404e:	0a 5f       	subi	r16, 0xFA	; 250
    4050:	1f 4f       	sbci	r17, 0xFF	; 255
    4052:	13 87       	std	Z+11, r17	; 0x0b
    4054:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    4056:	8f 2d       	mov	r24, r15
    4058:	9e 2d       	mov	r25, r14
    405a:	88 0f       	add	r24, r24
    405c:	99 1f       	adc	r25, r25
    405e:	fc 01       	movw	r30, r24
    4060:	ee 0f       	add	r30, r30
    4062:	ff 1f       	adc	r31, r31
    4064:	ee 0f       	add	r30, r30
    4066:	ff 1f       	adc	r31, r31
    4068:	ee 0f       	add	r30, r30
    406a:	ff 1f       	adc	r31, r31
    406c:	e8 1b       	sub	r30, r24
    406e:	f9 0b       	sbc	r31, r25
    4070:	ed 53       	subi	r30, 0x3D	; 61
    4072:	fc 4f       	sbci	r31, 0xFC	; 252
    4074:	0a 5f       	subi	r16, 0xFA	; 250
    4076:	1f 4f       	sbci	r17, 0xFF	; 255
    4078:	15 87       	std	Z+13, r17	; 0x0d
    407a:	04 87       	std	Z+12, r16	; 0x0c
    407c:	0c 50       	subi	r16, 0x0C	; 12
    407e:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    4080:	f8 01       	movw	r30, r16
    4082:	86 81       	ldd	r24, Z+6	; 0x06
    4084:	97 81       	ldd	r25, Z+7	; 0x07
    4086:	98 87       	std	Y+8, r25	; 0x08
    4088:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    408a:	80 85       	ldd	r24, Z+8	; 0x08
    408c:	91 85       	ldd	r25, Z+9	; 0x09
    408e:	9a 87       	std	Y+10, r25	; 0x0a
    4090:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    4092:	82 85       	ldd	r24, Z+10	; 0x0a
    4094:	93 85       	ldd	r25, Z+11	; 0x0b
    4096:	9c 87       	std	Y+12, r25	; 0x0c
    4098:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    409a:	84 85       	ldd	r24, Z+12	; 0x0c
    409c:	95 85       	ldd	r25, Z+13	; 0x0d
    409e:	9e 87       	std	Y+14, r25	; 0x0e
    40a0:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    40a2:	86 85       	ldd	r24, Z+14	; 0x0e
    40a4:	97 85       	ldd	r25, Z+15	; 0x0f
    40a6:	98 8b       	std	Y+16, r25	; 0x10
    40a8:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    40aa:	80 89       	ldd	r24, Z+16	; 0x10
    40ac:	91 89       	ldd	r25, Z+17	; 0x11
    40ae:	9a 8b       	std	Y+18, r25	; 0x12
    40b0:	89 8b       	std	Y+17, r24	; 0x11
    40b2:	3c cf       	rjmp	.-392    	; 0x3f2c <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

000040b4 <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    40b4:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    40b6:	2d 91       	ld	r18, X+
    40b8:	3c 91       	ld	r19, X
    40ba:	11 97       	sbiw	r26, 0x01	; 1
    40bc:	f9 01       	movw	r30, r18
    40be:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    40c0:	2f 5f       	subi	r18, 0xFF	; 255
    40c2:	3f 4f       	sbci	r19, 0xFF	; 255
    40c4:	2d 93       	st	X+, r18
    40c6:	3c 93       	st	X, r19
    return returnVal;
}
    40c8:	08 95       	ret

000040ca <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    40ca:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    40cc:	8d 91       	ld	r24, X+
    40ce:	9c 91       	ld	r25, X
    40d0:	11 97       	sbiw	r26, 0x01	; 1
    40d2:	fc 01       	movw	r30, r24
    40d4:	25 91       	lpm	r18, Z+
    40d6:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    40d8:	02 96       	adiw	r24, 0x02	; 2
    40da:	8d 93       	st	X+, r24
    40dc:	9c 93       	st	X, r25
    return returnVal;
}
    40de:	c9 01       	movw	r24, r18
    40e0:	08 95       	ret

000040e2 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    40e8:	14 16       	cp	r1, r20
    40ea:	15 06       	cpc	r1, r21
    40ec:	64 f4       	brge	.+24     	; 0x4106 <copyFromFlash+0x24>
    40ee:	db 01       	movw	r26, r22
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    40f4:	fe 01       	movw	r30, r28
    40f6:	e8 0f       	add	r30, r24
    40f8:	f9 1f       	adc	r31, r25
    40fa:	e4 91       	lpm	r30, Z+
    40fc:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    40fe:	01 96       	adiw	r24, 0x01	; 1
    4100:	84 17       	cp	r24, r20
    4102:	95 07       	cpc	r25, r21
    4104:	bc f3       	brlt	.-18     	; 0x40f4 <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	08 95       	ret

0000410c <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    410c:	2f 92       	push	r2
    410e:	3f 92       	push	r3
    4110:	4f 92       	push	r4
    4112:	5f 92       	push	r5
    4114:	6f 92       	push	r6
    4116:	7f 92       	push	r7
    4118:	8f 92       	push	r8
    411a:	9f 92       	push	r9
    411c:	af 92       	push	r10
    411e:	bf 92       	push	r11
    4120:	cf 92       	push	r12
    4122:	df 92       	push	r13
    4124:	ef 92       	push	r14
    4126:	ff 92       	push	r15
    4128:	1f 93       	push	r17
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	00 d0       	rcall	.+0      	; 0x4130 <getInstructionGroup+0x24>
    4130:	00 d0       	rcall	.+0      	; 0x4132 <getInstructionGroup+0x26>
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    4136:	83 ef       	ldi	r24, 0xF3	; 243
    4138:	98 e0       	ldi	r25, 0x08	; 8
    413a:	90 93 f4 0e 	sts	0x0EF4, r25
    413e:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4142:	40 91 04 01 	lds	r20, 0x0104
    4146:	50 91 05 01 	lds	r21, 0x0105
    414a:	fa 01       	movw	r30, r20
    414c:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    414e:	31 96       	adiw	r30, 0x01	; 1
    4150:	f0 93 05 01 	sts	0x0105, r31
    4154:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    4158:	8f 3f       	cpi	r24, 0xFF	; 255
    415a:	c9 f0       	breq	.+50     	; 0x418e <getInstructionGroup+0x82>
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    4160:	cb 01       	movw	r24, r22
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	cf 91       	pop	r28
    416c:	df 91       	pop	r29
    416e:	1f 91       	pop	r17
    4170:	ff 90       	pop	r15
    4172:	ef 90       	pop	r14
    4174:	df 90       	pop	r13
    4176:	cf 90       	pop	r12
    4178:	bf 90       	pop	r11
    417a:	af 90       	pop	r10
    417c:	9f 90       	pop	r9
    417e:	8f 90       	pop	r8
    4180:	7f 90       	pop	r7
    4182:	6f 90       	pop	r6
    4184:	5f 90       	pop	r5
    4186:	4f 90       	pop	r4
    4188:	3f 90       	pop	r3
    418a:	2f 90       	pop	r2
    418c:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    418e:	80 91 00 01 	lds	r24, 0x0100
    4192:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    4196:	20 91 02 01 	lds	r18, 0x0102
    419a:	30 91 03 01 	lds	r19, 0x0103
    419e:	20 93 00 01 	sts	0x0100, r18
    41a2:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    41a6:	90 93 03 01 	sts	0x0103, r25
    41aa:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    41ae:	c9 01       	movw	r24, r18
    41b0:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    41b2:	85 91       	lpm	r24, Z+
    41b4:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    41b6:	9c 01       	movw	r18, r24
    41b8:	22 0f       	add	r18, r18
    41ba:	33 1f       	adc	r19, r19
    41bc:	22 0f       	add	r18, r18
    41be:	33 1f       	adc	r19, r19
    41c0:	22 0f       	add	r18, r18
    41c2:	33 1f       	adc	r19, r19
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	28 0f       	add	r18, r24
    41ca:	39 1f       	adc	r19, r25
    41cc:	fb 01       	movw	r30, r22
    41ce:	31 83       	std	Z+1, r19	; 0x01
    41d0:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    41d2:	db 01       	movw	r26, r22
    41d4:	14 96       	adiw	r26, 0x04	; 4
    41d6:	b3 83       	std	Z+3, r27	; 0x03
    41d8:	a2 83       	std	Z+2, r26	; 0x02
    41da:	4d 5f       	subi	r20, 0xFD	; 253
    41dc:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    41de:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    41e0:	9d e4       	ldi	r25, 0x4D	; 77
    41e2:	c9 2e       	mov	r12, r25
    41e4:	97 e1       	ldi	r25, 0x17	; 23
    41e6:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    41e8:	8e ef       	ldi	r24, 0xFE	; 254
    41ea:	a8 2e       	mov	r10, r24
    41ec:	88 e1       	ldi	r24, 0x18	; 24
    41ee:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    41f0:	fe ec       	ldi	r31, 0xCE	; 206
    41f2:	8f 2e       	mov	r8, r31
    41f4:	f6 e1       	ldi	r31, 0x16	; 22
    41f6:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    41f8:	e2 eb       	ldi	r30, 0xB2	; 178
    41fa:	6e 2e       	mov	r6, r30
    41fc:	e6 e1       	ldi	r30, 0x16	; 22
    41fe:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4200:	36 e0       	ldi	r19, 0x06	; 6
    4202:	43 2e       	mov	r4, r19
    4204:	39 e1       	ldi	r19, 0x19	; 25
    4206:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4208:	2b e4       	ldi	r18, 0x4B	; 75
    420a:	22 2e       	mov	r2, r18
    420c:	29 e1       	ldi	r18, 0x19	; 25
    420e:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    4210:	9c e3       	ldi	r25, 0x3C	; 60
    4212:	e9 2e       	mov	r14, r25
    4214:	96 e1       	ldi	r25, 0x16	; 22
    4216:	f9 2e       	mov	r15, r25
    4218:	23 c0       	rjmp	.+70     	; 0x4260 <getInstructionGroup+0x154>
    421a:	13 96       	adiw	r26, 0x03	; 3
    421c:	fc 92       	st	X, r15
    421e:	ee 92       	st	-X, r14
    4220:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4222:	18 96       	adiw	r26, 0x08	; 8
    4224:	1c 93       	st	X, r17
    4226:	18 97       	sbiw	r26, 0x08	; 8
    4228:	80 91 f3 0e 	lds	r24, 0x0EF3
    422c:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    4234:	82 0f       	add	r24, r18
    4236:	93 1f       	adc	r25, r19
    4238:	90 93 f4 0e 	sts	0x0EF4, r25
    423c:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    4240:	40 91 04 01 	lds	r20, 0x0104
    4244:	50 91 05 01 	lds	r21, 0x0105
    4248:	42 0f       	add	r20, r18
    424a:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    424c:	fa 01       	movw	r30, r20
    424e:	84 91       	lpm	r24, Z+
    4250:	8f 3f       	cpi	r24, 0xFF	; 255
    4252:	09 f4       	brne	.+2      	; 0x4256 <getInstructionGroup+0x14a>
    4254:	b4 c0       	rjmp	.+360    	; 0x43be <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    4256:	1b 96       	adiw	r26, 0x0b	; 11
    4258:	fd 01       	movw	r30, r26
    425a:	32 97       	sbiw	r30, 0x02	; 2
    425c:	b1 83       	std	Z+1, r27	; 0x01
    425e:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4260:	fa 01       	movw	r30, r20
    4262:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4264:	4f 5f       	subi	r20, 0xFF	; 255
    4266:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    4268:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    426a:	fa 01       	movw	r30, r20
    426c:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    426e:	ca 01       	movw	r24, r20
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	9a 83       	std	Y+2, r25	; 0x02
    4274:	89 83       	std	Y+1, r24	; 0x01
    4276:	90 93 05 01 	sts	0x0105, r25
    427a:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    427e:	11 96       	adiw	r26, 0x01	; 1
    4280:	2c 93       	st	X, r18
    4282:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    4284:	80 91 f3 0e 	lds	r24, 0x0EF3
    4288:	90 91 f4 0e 	lds	r25, 0x0EF4
    428c:	9c 83       	std	Y+4, r25	; 0x04
    428e:	8b 83       	std	Y+3, r24	; 0x03
    4290:	17 96       	adiw	r26, 0x07	; 7
    4292:	9c 93       	st	X, r25
    4294:	8e 93       	st	-X, r24
    4296:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    4298:	22 23       	and	r18, r18
    429a:	09 f4       	brne	.+2      	; 0x429e <getInstructionGroup+0x192>
    429c:	be cf       	rjmp	.-132    	; 0x421a <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    429e:	22 30       	cpi	r18, 0x02	; 2
    42a0:	39 f1       	breq	.+78     	; 0x42f0 <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    42a2:	23 30       	cpi	r18, 0x03	; 3
    42a4:	09 f4       	brne	.+2      	; 0x42a8 <getInstructionGroup+0x19c>
    42a6:	4b c0       	rjmp	.+150    	; 0x433e <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    42a8:	24 30       	cpi	r18, 0x04	; 4
    42aa:	09 f4       	brne	.+2      	; 0x42ae <getInstructionGroup+0x1a2>
    42ac:	68 c0       	rjmp	.+208    	; 0x437e <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    42ae:	25 30       	cpi	r18, 0x05	; 5
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <getInstructionGroup+0x1a8>
    42b2:	73 c0       	rjmp	.+230    	; 0x439a <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    42b4:	26 30       	cpi	r18, 0x06	; 6
    42b6:	09 f4       	brne	.+2      	; 0x42ba <getInstructionGroup+0x1ae>
    42b8:	50 c0       	rjmp	.+160    	; 0x435a <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    42ba:	27 30       	cpi	r18, 0x07	; 7
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <getInstructionGroup+0x1b4>
    42be:	8a c0       	rjmp	.+276    	; 0x43d4 <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    42c0:	28 30       	cpi	r18, 0x08	; 8
    42c2:	09 f4       	brne	.+2      	; 0x42c6 <getInstructionGroup+0x1ba>
    42c4:	99 c0       	rjmp	.+306    	; 0x43f8 <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    42c6:	29 30       	cpi	r18, 0x09	; 9
    42c8:	09 f0       	breq	.+2      	; 0x42cc <getInstructionGroup+0x1c0>
    42ca:	b2 cf       	rjmp	.-156    	; 0x4230 <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    42cc:	88 ea       	ldi	r24, 0xA8	; 168
    42ce:	96 e1       	ldi	r25, 0x16	; 22
    42d0:	13 96       	adiw	r26, 0x03	; 3
    42d2:	9c 93       	st	X, r25
    42d4:	8e 93       	st	-X, r24
    42d6:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    42d8:	e9 e3       	ldi	r30, 0x39	; 57
    42da:	f6 e1       	ldi	r31, 0x16	; 22
    42dc:	15 96       	adiw	r26, 0x05	; 5
    42de:	fc 93       	st	X, r31
    42e0:	ee 93       	st	-X, r30
    42e2:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    42e4:	18 96       	adiw	r26, 0x08	; 8
    42e6:	1c 93       	st	X, r17
    42e8:	18 97       	sbiw	r26, 0x08	; 8
    42ea:	46 e0       	ldi	r20, 0x06	; 6
    42ec:	50 e0       	ldi	r21, 0x00	; 0
    42ee:	0d c0       	rjmp	.+26     	; 0x430a <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    42f0:	13 96       	adiw	r26, 0x03	; 3
    42f2:	5c 92       	st	X, r5
    42f4:	4e 92       	st	-X, r4
    42f6:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    42f8:	15 96       	adiw	r26, 0x05	; 5
    42fa:	3c 92       	st	X, r3
    42fc:	2e 92       	st	-X, r2
    42fe:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4300:	18 96       	adiw	r26, 0x08	; 8
    4302:	1c 93       	st	X, r17
    4304:	18 97       	sbiw	r26, 0x08	; 8
    4306:	46 e0       	ldi	r20, 0x06	; 6
    4308:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    430e:	e9 81       	ldd	r30, Y+1	; 0x01
    4310:	fa 81       	ldd	r31, Y+2	; 0x02
    4312:	84 91       	lpm	r24, Z+
    4314:	eb 81       	ldd	r30, Y+3	; 0x03
    4316:	fc 81       	ldd	r31, Y+4	; 0x04
    4318:	81 93       	st	Z+, r24
    431a:	fc 83       	std	Y+4, r31	; 0x04
    431c:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	01 96       	adiw	r24, 0x01	; 1
    4324:	9a 83       	std	Y+2, r25	; 0x02
    4326:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4328:	2f 5f       	subi	r18, 0xFF	; 255
    432a:	3f 4f       	sbci	r19, 0xFF	; 255
    432c:	24 17       	cp	r18, r20
    432e:	35 07       	cpc	r19, r21
    4330:	74 f3       	brlt	.-36     	; 0x430e <getInstructionGroup+0x202>
    4332:	9a 01       	movw	r18, r20
    4334:	80 91 f3 0e 	lds	r24, 0x0EF3
    4338:	90 91 f4 0e 	lds	r25, 0x0EF4
    433c:	7b cf       	rjmp	.-266    	; 0x4234 <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    433e:	13 96       	adiw	r26, 0x03	; 3
    4340:	9c 92       	st	X, r9
    4342:	8e 92       	st	-X, r8
    4344:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    4346:	15 96       	adiw	r26, 0x05	; 5
    4348:	7c 92       	st	X, r7
    434a:	6e 92       	st	-X, r6
    434c:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    434e:	18 96       	adiw	r26, 0x08	; 8
    4350:	1c 92       	st	X, r1
    4352:	18 97       	sbiw	r26, 0x08	; 8
    4354:	4a e0       	ldi	r20, 0x0A	; 10
    4356:	50 e0       	ldi	r21, 0x00	; 0
    4358:	d8 cf       	rjmp	.-80     	; 0x430a <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    435a:	e8 ec       	ldi	r30, 0xC8	; 200
    435c:	fb e1       	ldi	r31, 0x1B	; 27
    435e:	13 96       	adiw	r26, 0x03	; 3
    4360:	fc 93       	st	X, r31
    4362:	ee 93       	st	-X, r30
    4364:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    4366:	8a e2       	ldi	r24, 0x2A	; 42
    4368:	9a e1       	ldi	r25, 0x1A	; 26
    436a:	15 96       	adiw	r26, 0x05	; 5
    436c:	9c 93       	st	X, r25
    436e:	8e 93       	st	-X, r24
    4370:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4372:	18 96       	adiw	r26, 0x08	; 8
    4374:	1c 92       	st	X, r1
    4376:	18 97       	sbiw	r26, 0x08	; 8
    4378:	42 e1       	ldi	r20, 0x12	; 18
    437a:	50 e0       	ldi	r21, 0x00	; 0
    437c:	c6 cf       	rjmp	.-116    	; 0x430a <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    437e:	18 96       	adiw	r26, 0x08	; 8
    4380:	1c 93       	st	X, r17
    4382:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4384:	13 96       	adiw	r26, 0x03	; 3
    4386:	dc 92       	st	X, r13
    4388:	ce 92       	st	-X, r12
    438a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    438c:	15 96       	adiw	r26, 0x05	; 5
    438e:	bc 92       	st	X, r11
    4390:	ae 92       	st	-X, r10
    4392:	14 97       	sbiw	r26, 0x04	; 4
    4394:	4e e0       	ldi	r20, 0x0E	; 14
    4396:	50 e0       	ldi	r21, 0x00	; 0
    4398:	b8 cf       	rjmp	.-144    	; 0x430a <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    439a:	ef eb       	ldi	r30, 0xBF	; 191
    439c:	f9 e1       	ldi	r31, 0x19	; 25
    439e:	13 96       	adiw	r26, 0x03	; 3
    43a0:	fc 93       	st	X, r31
    43a2:	ee 93       	st	-X, r30
    43a4:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    43a6:	8b e8       	ldi	r24, 0x8B	; 139
    43a8:	99 e1       	ldi	r25, 0x19	; 25
    43aa:	15 96       	adiw	r26, 0x05	; 5
    43ac:	9c 93       	st	X, r25
    43ae:	8e 93       	st	-X, r24
    43b0:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    43b2:	18 96       	adiw	r26, 0x08	; 8
    43b4:	1c 92       	st	X, r1
    43b6:	18 97       	sbiw	r26, 0x08	; 8
    43b8:	42 e1       	ldi	r20, 0x12	; 18
    43ba:	50 e0       	ldi	r21, 0x00	; 0
    43bc:	a6 cf       	rjmp	.-180    	; 0x430a <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    43be:	1a 96       	adiw	r26, 0x0a	; 10
    43c0:	1c 92       	st	X, r1
    43c2:	1e 92       	st	-X, r1
    43c4:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    43c6:	4f 5f       	subi	r20, 0xFF	; 255
    43c8:	5f 4f       	sbci	r21, 0xFF	; 255
    43ca:	50 93 05 01 	sts	0x0105, r21
    43ce:	40 93 04 01 	sts	0x0104, r20
    43d2:	c6 ce       	rjmp	.-628    	; 0x4160 <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    43d4:	ed ea       	ldi	r30, 0xAD	; 173
    43d6:	fd e1       	ldi	r31, 0x1D	; 29
    43d8:	13 96       	adiw	r26, 0x03	; 3
    43da:	fc 93       	st	X, r31
    43dc:	ee 93       	st	-X, r30
    43de:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    43e0:	8e e0       	ldi	r24, 0x0E	; 14
    43e2:	9b e1       	ldi	r25, 0x1B	; 27
    43e4:	15 96       	adiw	r26, 0x05	; 5
    43e6:	9c 93       	st	X, r25
    43e8:	8e 93       	st	-X, r24
    43ea:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    43ec:	18 96       	adiw	r26, 0x08	; 8
    43ee:	1c 92       	st	X, r1
    43f0:	18 97       	sbiw	r26, 0x08	; 8
    43f2:	48 e1       	ldi	r20, 0x18	; 24
    43f4:	50 e0       	ldi	r21, 0x00	; 0
    43f6:	89 cf       	rjmp	.-238    	; 0x430a <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    43f8:	e9 e4       	ldi	r30, 0x49	; 73
    43fa:	f6 e1       	ldi	r31, 0x16	; 22
    43fc:	13 96       	adiw	r26, 0x03	; 3
    43fe:	fc 93       	st	X, r31
    4400:	ee 93       	st	-X, r30
    4402:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    4404:	8d e3       	ldi	r24, 0x3D	; 61
    4406:	96 e1       	ldi	r25, 0x16	; 22
    4408:	15 96       	adiw	r26, 0x05	; 5
    440a:	9c 93       	st	X, r25
    440c:	8e 93       	st	-X, r24
    440e:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	9a 81       	ldd	r25, Y+2	; 0x02
    4414:	fc 01       	movw	r30, r24
    4416:	45 91       	lpm	r20, Z+
    4418:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    441a:	90 93 05 01 	sts	0x0105, r25
    441e:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    4422:	44 0f       	add	r20, r20
    4424:	55 1f       	adc	r21, r21
    4426:	44 0f       	add	r20, r20
    4428:	55 1f       	adc	r21, r21
    442a:	44 0f       	add	r20, r20
    442c:	55 1f       	adc	r21, r21
    442e:	4e 5f       	subi	r20, 0xFE	; 254
    4430:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4432:	18 96       	adiw	r26, 0x08	; 8
    4434:	1c 92       	st	X, r1
    4436:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4438:	14 16       	cp	r1, r20
    443a:	15 06       	cpc	r1, r21
    443c:	0c f4       	brge	.+2      	; 0x4440 <getInstructionGroup+0x334>
    443e:	65 cf       	rjmp	.-310    	; 0x430a <getInstructionGroup+0x1fe>
    4440:	78 cf       	rjmp	.-272    	; 0x4332 <getInstructionGroup+0x226>

00004442 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    4446:	a0 91 f3 0c 	lds	r26, 0x0CF3
    444a:	b0 91 f4 0c 	lds	r27, 0x0CF4
    444e:	a2 30       	cpi	r26, 0x02	; 2
    4450:	b1 05       	cpc	r27, r1
    4452:	78 f4       	brcc	.+30     	; 0x4472 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    4454:	11 97       	sbiw	r26, 0x01	; 1
    4456:	81 f1       	breq	.+96     	; 0x44b8 <getPreviousGroup+0x76>
    4458:	c0 91 04 01 	lds	r28, 0x0104
    445c:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    4460:	0e 94 86 20 	call	0x410c	; 0x410c <getInstructionGroup>
			dataPtr = tmpPtr;
    4464:	d0 93 05 01 	sts	0x0105, r29
    4468:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    446c:	df 91       	pop	r29
    446e:	cf 91       	pop	r28
    4470:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    4472:	fd 01       	movw	r30, r26
    4474:	31 97       	sbiw	r30, 0x01	; 1
    4476:	f0 93 f4 0c 	sts	0x0CF4, r31
    447a:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    447e:	aa 0f       	add	r26, r26
    4480:	bb 1f       	adc	r27, r27
    4482:	af 50       	subi	r26, 0x0F	; 15
    4484:	b3 4f       	sbci	r27, 0xF3	; 243
    4486:	ee 0f       	add	r30, r30
    4488:	ff 1f       	adc	r31, r31
    448a:	eb 50       	subi	r30, 0x0B	; 11
    448c:	f3 4f       	sbci	r31, 0xF3	; 243
    448e:	2d 91       	ld	r18, X+
    4490:	3c 91       	ld	r19, X
    4492:	80 81       	ld	r24, Z
    4494:	91 81       	ldd	r25, Z+1	; 0x01
    4496:	28 0f       	add	r18, r24
    4498:	39 1f       	adc	r19, r25
    449a:	80 91 04 01 	lds	r24, 0x0104
    449e:	90 91 05 01 	lds	r25, 0x0105
    44a2:	82 1b       	sub	r24, r18
    44a4:	93 0b       	sbc	r25, r19
    44a6:	90 93 05 01 	sts	0x0105, r25
    44aa:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    44ae:	0e 94 86 20 	call	0x410c	; 0x410c <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    44b2:	df 91       	pop	r29
    44b4:	cf 91       	pop	r28
    44b6:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    44b8:	80 91 f5 0c 	lds	r24, 0x0CF5
    44bc:	90 91 f6 0c 	lds	r25, 0x0CF6
    44c0:	c0 91 04 01 	lds	r28, 0x0104
    44c4:	d0 91 05 01 	lds	r29, 0x0105
    44c8:	c8 1b       	sub	r28, r24
    44ca:	d9 0b       	sbc	r29, r25
    44cc:	d0 93 05 01 	sts	0x0105, r29
    44d0:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    44d4:	10 92 f4 0c 	sts	0x0CF4, r1
    44d8:	10 92 f3 0c 	sts	0x0CF3, r1
    44dc:	c1 cf       	rjmp	.-126    	; 0x4460 <getPreviousGroup+0x1e>

000044de <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    44de:	e0 91 f3 0c 	lds	r30, 0x0CF3
    44e2:	f0 91 f4 0c 	lds	r31, 0x0CF4
    44e6:	ee 0f       	add	r30, r30
    44e8:	ff 1f       	adc	r31, r31
    44ea:	ed 50       	subi	r30, 0x0D	; 13
    44ec:	f3 4f       	sbci	r31, 0xF3	; 243
    44ee:	20 81       	ld	r18, Z
    44f0:	31 81       	ldd	r19, Z+1	; 0x01
    44f2:	80 91 04 01 	lds	r24, 0x0104
    44f6:	90 91 05 01 	lds	r25, 0x0105
    44fa:	82 1b       	sub	r24, r18
    44fc:	93 0b       	sbc	r25, r19
    44fe:	90 93 05 01 	sts	0x0105, r25
    4502:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    4506:	0e 94 86 20 	call	0x410c	; 0x410c <getInstructionGroup>
}
    450a:	08 95       	ret

0000450c <getNextGroup>:

struct instruction_group *getNextGroup() {
    450c:	cf 93       	push	r28
    450e:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    4510:	c0 91 04 01 	lds	r28, 0x0104
    4514:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    4518:	0e 94 86 20 	call	0x410c	; 0x410c <getInstructionGroup>
    451c:	ac 01       	movw	r20, r24

	if(ig != 0) {
    451e:	00 97       	sbiw	r24, 0x00	; 0
    4520:	d9 f0       	breq	.+54     	; 0x4558 <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    4522:	20 91 f3 0c 	lds	r18, 0x0CF3
    4526:	30 91 f4 0c 	lds	r19, 0x0CF4
    452a:	f9 01       	movw	r30, r18
    452c:	ee 0f       	add	r30, r30
    452e:	ff 1f       	adc	r31, r31
    4530:	eb 50       	subi	r30, 0x0B	; 11
    4532:	f3 4f       	sbci	r31, 0xF3	; 243
    4534:	80 91 04 01 	lds	r24, 0x0104
    4538:	90 91 05 01 	lds	r25, 0x0105
    453c:	8c 1b       	sub	r24, r28
    453e:	9d 0b       	sbc	r25, r29
    4540:	91 83       	std	Z+1, r25	; 0x01
    4542:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    4544:	2f 5f       	subi	r18, 0xFF	; 255
    4546:	3f 4f       	sbci	r19, 0xFF	; 255
    4548:	30 93 f4 0c 	sts	0x0CF4, r19
    454c:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    4550:	ca 01       	movw	r24, r20
    4552:	df 91       	pop	r29
    4554:	cf 91       	pop	r28
    4556:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    4558:	0e 94 6f 22 	call	0x44de	; 0x44de <getLastGroup>
    455c:	ac 01       	movw	r20, r24
    455e:	f8 cf       	rjmp	.-16     	; 0x4550 <getNextGroup+0x44>

00004560 <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    4560:	10 92 f4 0c 	sts	0x0CF4, r1
    4564:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    4568:	8e ef       	ldi	r24, 0xFE	; 254
    456a:	91 e0       	ldi	r25, 0x01	; 1
    456c:	e5 ef       	ldi	r30, 0xF5	; 245
    456e:	fc e0       	ldi	r31, 0x0C	; 12
    4570:	df 01       	movw	r26, r30
    4572:	9c 01       	movw	r18, r24
    4574:	1d 92       	st	X+, r1
    4576:	21 50       	subi	r18, 0x01	; 1
    4578:	30 40       	sbci	r19, 0x00	; 0
    457a:	e1 f7       	brne	.-8      	; 0x4574 <initDecoder+0x14>
}
    457c:	08 95       	ret

0000457e <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    457e:	9c 01       	movw	r18, r24
    4580:	97 fd       	sbrc	r25, 7
    4582:	02 c0       	rjmp	.+4      	; 0x4588 <abs+0xa>
    4584:	c9 01       	movw	r24, r18
    4586:	08 95       	ret
    4588:	30 95       	com	r19
    458a:	21 95       	neg	r18
    458c:	3f 4f       	sbci	r19, 0xFF	; 255
    458e:	c9 01       	movw	r24, r18
    4590:	08 95       	ret

00004592 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    4592:	86 30       	cpi	r24, 0x06	; 6
    4594:	91 05       	cpc	r25, r1
    4596:	24 f0       	brlt	.+8      	; 0x45a0 <setRGBColor+0xe>
		if(led == 6) {
    4598:	86 30       	cpi	r24, 0x06	; 6
    459a:	91 05       	cpc	r25, r1
    459c:	89 f0       	breq	.+34     	; 0x45c0 <setRGBColor+0x2e>
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	fc 01       	movw	r30, r24
    45a2:	ee 0f       	add	r30, r30
    45a4:	ff 1f       	adc	r31, r31
    45a6:	e8 0f       	add	r30, r24
    45a8:	f9 1f       	adc	r31, r25
    45aa:	ee 0f       	add	r30, r30
    45ac:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    45ae:	e5 51       	subi	r30, 0x15	; 21
    45b0:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    45b2:	71 83       	std	Z+1, r23	; 0x01
    45b4:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    45b6:	55 83       	std	Z+5, r21	; 0x05
    45b8:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    45ba:	33 83       	std	Z+3, r19	; 0x03
    45bc:	22 83       	std	Z+2, r18	; 0x02



}
    45be:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    45c0:	e2 e4       	ldi	r30, 0x42	; 66
    45c2:	f0 e0       	ldi	r31, 0x00	; 0
    45c4:	f4 cf       	rjmp	.-24     	; 0x45ae <setRGBColor+0x1c>

000045c6 <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    45c6:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    45c8:	86 30       	cpi	r24, 0x06	; 6
    45ca:	91 05       	cpc	r25, r1
    45cc:	24 f0       	brlt	.+8      	; 0x45d6 <getRGBColor+0x10>
		if(led == 6) {
    45ce:	86 30       	cpi	r24, 0x06	; 6
    45d0:	91 05       	cpc	r25, r1
    45d2:	e1 f0       	breq	.+56     	; 0x460c <getRGBColor+0x46>
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	fc 01       	movw	r30, r24
    45d8:	ee 0f       	add	r30, r30
    45da:	ff 1f       	adc	r31, r31
    45dc:	e8 0f       	add	r30, r24
    45de:	f9 1f       	adc	r31, r25
    45e0:	ee 0f       	add	r30, r30
    45e2:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    45e4:	e5 51       	subi	r30, 0x15	; 21
    45e6:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    45e8:	80 81       	ld	r24, Z
    45ea:	91 81       	ldd	r25, Z+1	; 0x01
    45ec:	11 96       	adiw	r26, 0x01	; 1
    45ee:	9c 93       	st	X, r25
    45f0:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    45f2:	84 81       	ldd	r24, Z+4	; 0x04
    45f4:	95 81       	ldd	r25, Z+5	; 0x05
    45f6:	13 96       	adiw	r26, 0x03	; 3
    45f8:	9c 93       	st	X, r25
    45fa:	8e 93       	st	-X, r24
    45fc:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    45fe:	82 81       	ldd	r24, Z+2	; 0x02
    4600:	93 81       	ldd	r25, Z+3	; 0x03
    4602:	15 96       	adiw	r26, 0x05	; 5
    4604:	9c 93       	st	X, r25
    4606:	8e 93       	st	-X, r24
    4608:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    460a:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    460c:	e2 e4       	ldi	r30, 0x42	; 66
    460e:	f0 e0       	ldi	r31, 0x00	; 0
    4610:	e9 cf       	rjmp	.-46     	; 0x45e4 <getRGBColor+0x1e>

00004612 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    4612:	43 e2       	ldi	r20, 0x23	; 35
    4614:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    4616:	fa 01       	movw	r30, r20
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31
    461c:	e5 51       	subi	r30, 0x15	; 21
    461e:	fd 4f       	sbci	r31, 0xFD	; 253
    4620:	01 90       	ld	r0, Z+
    4622:	f0 81       	ld	r31, Z
    4624:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    4626:	e2 95       	swap	r30
    4628:	f2 95       	swap	r31
    462a:	f0 7f       	andi	r31, 0xF0	; 240
    462c:	fe 27       	eor	r31, r30
    462e:	e0 7f       	andi	r30, 0xF0	; 240
    4630:	fe 27       	eor	r31, r30
    4632:	2c e0       	ldi	r18, 0x0C	; 12
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	08 c0       	rjmp	.+16     	; 0x4648 <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    4638:	8b b3       	in	r24, 0x1b	; 27
    463a:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    463c:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    463e:	8b b3       	in	r24, 0x1b	; 27
    4640:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    4642:	21 15       	cp	r18, r1
    4644:	31 05       	cpc	r19, r1
    4646:	91 f0       	breq	.+36     	; 0x466c <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    4648:	21 50       	subi	r18, 0x01	; 1
    464a:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    464c:	cf 01       	movw	r24, r30
    464e:	02 2e       	mov	r0, r18
    4650:	02 c0       	rjmp	.+4      	; 0x4656 <displayColors+0x44>
    4652:	95 95       	asr	r25
    4654:	87 95       	ror	r24
    4656:	0a 94       	dec	r0
    4658:	e2 f7       	brpl	.-8      	; 0x4652 <displayColors+0x40>
    465a:	80 ff       	sbrs	r24, 0
    465c:	ed cf       	rjmp	.-38     	; 0x4638 <displayColors+0x26>
				PINHIGH(BDI);
    465e:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    4660:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    4662:	8b b3       	in	r24, 0x1b	; 27
    4664:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    4666:	21 15       	cp	r18, r1
    4668:	31 05       	cpc	r19, r1
    466a:	71 f7       	brne	.-36     	; 0x4648 <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    466c:	42 31       	cpi	r20, 0x12	; 18
    466e:	51 05       	cpc	r21, r1
    4670:	41 f0       	breq	.+16     	; 0x4682 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    4672:	41 50       	subi	r20, 0x01	; 1
    4674:	50 40       	sbci	r21, 0x00	; 0
    4676:	57 ff       	sbrs	r21, 7
    4678:	ce cf       	rjmp	.-100    	; 0x4616 <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    467a:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    467c:	8b b3       	in	r24, 0x1b	; 27
    467e:	1b ba       	out	0x1b, r1	; 27
}
    4680:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    4682:	8b b3       	in	r24, 0x1b	; 27
    4684:	1b ba       	out	0x1b, r1	; 27
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    468a:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    468c:	2b b3       	in	r18, 0x1b	; 27
    468e:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    4690:	01 96       	adiw	r24, 0x01	; 1
    4692:	88 34       	cpi	r24, 0x48	; 72
    4694:	91 05       	cpc	r25, r1
    4696:	c9 f7       	brne	.-14     	; 0x468a <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    4698:	41 e1       	ldi	r20, 0x11	; 17
    469a:	50 e0       	ldi	r21, 0x00	; 0
    469c:	bc cf       	rjmp	.-136    	; 0x4616 <displayColors+0x4>

0000469e <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    469e:	10 92 ec 02 	sts	0x02EC, r1
    46a2:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    46a6:	10 92 f0 02 	sts	0x02F0, r1
    46aa:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    46ae:	10 92 ee 02 	sts	0x02EE, r1
    46b2:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    46b6:	10 92 f2 02 	sts	0x02F2, r1
    46ba:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    46be:	10 92 f6 02 	sts	0x02F6, r1
    46c2:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    46c6:	10 92 f4 02 	sts	0x02F4, r1
    46ca:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    46ce:	0e 94 09 23 	call	0x4612	; 0x4612 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    46d2:	84 e6       	ldi	r24, 0x64	; 100
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	90 93 ec 02 	sts	0x02EC, r25
    46da:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    46de:	10 92 f0 02 	sts	0x02F0, r1
    46e2:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    46e6:	10 92 ee 02 	sts	0x02EE, r1
    46ea:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    46ee:	90 93 f2 02 	sts	0x02F2, r25
    46f2:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    46f6:	10 92 f6 02 	sts	0x02F6, r1
    46fa:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    46fe:	10 92 f4 02 	sts	0x02F4, r1
    4702:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4706:	90 91 06 01 	lds	r25, 0x0106
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    470e:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4710:	86 b7       	in	r24, 0x36	; 54
    4712:	89 23       	and	r24, r25
    4714:	e9 f3       	breq	.-6      	; 0x4710 <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    4716:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    4718:	2f 5f       	subi	r18, 0xFF	; 255
    471a:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    471c:	22 33       	cpi	r18, 0x32	; 50
    471e:	31 05       	cpc	r19, r1
    4720:	b9 f7       	brne	.-18     	; 0x4710 <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    4722:	0e 94 09 23 	call	0x4612	; 0x4612 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    4726:	10 92 ec 02 	sts	0x02EC, r1
    472a:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    472e:	10 92 f0 02 	sts	0x02F0, r1
    4732:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    4736:	10 92 ee 02 	sts	0x02EE, r1
    473a:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    473e:	10 92 f2 02 	sts	0x02F2, r1
    4742:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    4746:	10 92 f6 02 	sts	0x02F6, r1
    474a:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    474e:	10 92 f4 02 	sts	0x02F4, r1
    4752:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4756:	90 91 06 01 	lds	r25, 0x0106
    475a:	20 e0       	ldi	r18, 0x00	; 0
    475c:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    475e:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4760:	86 b7       	in	r24, 0x36	; 54
    4762:	89 23       	and	r24, r25
    4764:	e9 f3       	breq	.-6      	; 0x4760 <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    4766:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    4768:	2f 5f       	subi	r18, 0xFF	; 255
    476a:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    476c:	22 33       	cpi	r18, 0x32	; 50
    476e:	31 05       	cpc	r19, r1
    4770:	b9 f7       	brne	.-18     	; 0x4760 <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    4772:	0e 94 09 23 	call	0x4612	; 0x4612 <displayColors>
}
    4776:	08 95       	ret

00004778 <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    4778:	90 91 06 01 	lds	r25, 0x0106
    477c:	86 b7       	in	r24, 0x36	; 54
    477e:	89 23       	and	r24, r25
    4780:	e9 f3       	breq	.-6      	; 0x477c <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    4782:	80 e1       	ldi	r24, 0x10	; 16
    4784:	86 bf       	out	0x36, r24	; 54
}
    4786:	08 95       	ret

00004788 <copy_data>:

void copy_data(char *dest, char *src, short length) {
    4788:	cf 93       	push	r28
    478a:	df 93       	push	r29
    478c:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    478e:	14 16       	cp	r1, r20
    4790:	15 06       	cpc	r1, r21
    4792:	7c f4       	brge	.+30     	; 0x47b2 <copy_data+0x2a>
    4794:	20 e0       	ldi	r18, 0x00	; 0
    4796:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    4798:	fe 01       	movw	r30, r28
    479a:	e2 0f       	add	r30, r18
    479c:	f3 1f       	adc	r31, r19
    479e:	db 01       	movw	r26, r22
    47a0:	a2 0f       	add	r26, r18
    47a2:	b3 1f       	adc	r27, r19
    47a4:	8c 91       	ld	r24, X
    47a6:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    47a8:	2f 5f       	subi	r18, 0xFF	; 255
    47aa:	3f 4f       	sbci	r19, 0xFF	; 255
    47ac:	24 17       	cp	r18, r20
    47ae:	35 07       	cpc	r19, r21
    47b0:	9c f3       	brlt	.-26     	; 0x4798 <copy_data+0x10>
		dest[i] = src[i];
	}
}
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	08 95       	ret

000047b8 <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    47b8:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    47ba:	14 16       	cp	r1, r20
    47bc:	15 06       	cpc	r1, r21
    47be:	64 f4       	brge	.+24     	; 0x47d8 <copy_short_data+0x20>
    47c0:	db 01       	movw	r26, r22
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    47c6:	8d 91       	ld	r24, X+
    47c8:	9d 91       	ld	r25, X+
    47ca:	81 93       	st	Z+, r24
    47cc:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    47ce:	2f 5f       	subi	r18, 0xFF	; 255
    47d0:	3f 4f       	sbci	r19, 0xFF	; 255
    47d2:	24 17       	cp	r18, r20
    47d4:	35 07       	cpc	r19, r21
    47d6:	bc f3       	brlt	.-18     	; 0x47c6 <copy_short_data+0xe>
    47d8:	08 95       	ret

000047da <_fpadd_parts>:
    47da:	a0 e0       	ldi	r26, 0x00	; 0
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	e3 ef       	ldi	r30, 0xF3	; 243
    47e0:	f3 e2       	ldi	r31, 0x23	; 35
    47e2:	0c 94 8b 29 	jmp	0x5316	; 0x5316 <__prologue_saves__>
    47e6:	dc 01       	movw	r26, r24
    47e8:	2b 01       	movw	r4, r22
    47ea:	fa 01       	movw	r30, r20
    47ec:	9c 91       	ld	r25, X
    47ee:	92 30       	cpi	r25, 0x02	; 2
    47f0:	08 f4       	brcc	.+2      	; 0x47f4 <_fpadd_parts+0x1a>
    47f2:	39 c1       	rjmp	.+626    	; 0x4a66 <_fpadd_parts+0x28c>
    47f4:	eb 01       	movw	r28, r22
    47f6:	88 81       	ld	r24, Y
    47f8:	82 30       	cpi	r24, 0x02	; 2
    47fa:	08 f4       	brcc	.+2      	; 0x47fe <_fpadd_parts+0x24>
    47fc:	33 c1       	rjmp	.+614    	; 0x4a64 <_fpadd_parts+0x28a>
    47fe:	94 30       	cpi	r25, 0x04	; 4
    4800:	69 f4       	brne	.+26     	; 0x481c <_fpadd_parts+0x42>
    4802:	84 30       	cpi	r24, 0x04	; 4
    4804:	09 f0       	breq	.+2      	; 0x4808 <_fpadd_parts+0x2e>
    4806:	2f c1       	rjmp	.+606    	; 0x4a66 <_fpadd_parts+0x28c>
    4808:	11 96       	adiw	r26, 0x01	; 1
    480a:	9c 91       	ld	r25, X
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	98 17       	cp	r25, r24
    4812:	09 f4       	brne	.+2      	; 0x4816 <_fpadd_parts+0x3c>
    4814:	28 c1       	rjmp	.+592    	; 0x4a66 <_fpadd_parts+0x28c>
    4816:	a7 e0       	ldi	r26, 0x07	; 7
    4818:	b1 e0       	ldi	r27, 0x01	; 1
    481a:	25 c1       	rjmp	.+586    	; 0x4a66 <_fpadd_parts+0x28c>
    481c:	84 30       	cpi	r24, 0x04	; 4
    481e:	09 f4       	brne	.+2      	; 0x4822 <_fpadd_parts+0x48>
    4820:	21 c1       	rjmp	.+578    	; 0x4a64 <_fpadd_parts+0x28a>
    4822:	82 30       	cpi	r24, 0x02	; 2
    4824:	a9 f4       	brne	.+42     	; 0x4850 <_fpadd_parts+0x76>
    4826:	92 30       	cpi	r25, 0x02	; 2
    4828:	09 f0       	breq	.+2      	; 0x482c <_fpadd_parts+0x52>
    482a:	1d c1       	rjmp	.+570    	; 0x4a66 <_fpadd_parts+0x28c>
    482c:	9a 01       	movw	r18, r20
    482e:	ad 01       	movw	r20, r26
    4830:	88 e0       	ldi	r24, 0x08	; 8
    4832:	ea 01       	movw	r28, r20
    4834:	09 90       	ld	r0, Y+
    4836:	ae 01       	movw	r20, r28
    4838:	e9 01       	movw	r28, r18
    483a:	09 92       	st	Y+, r0
    483c:	9e 01       	movw	r18, r28
    483e:	81 50       	subi	r24, 0x01	; 1
    4840:	c1 f7       	brne	.-16     	; 0x4832 <_fpadd_parts+0x58>
    4842:	e2 01       	movw	r28, r4
    4844:	89 81       	ldd	r24, Y+1	; 0x01
    4846:	11 96       	adiw	r26, 0x01	; 1
    4848:	9c 91       	ld	r25, X
    484a:	89 23       	and	r24, r25
    484c:	81 83       	std	Z+1, r24	; 0x01
    484e:	08 c1       	rjmp	.+528    	; 0x4a60 <_fpadd_parts+0x286>
    4850:	92 30       	cpi	r25, 0x02	; 2
    4852:	09 f4       	brne	.+2      	; 0x4856 <_fpadd_parts+0x7c>
    4854:	07 c1       	rjmp	.+526    	; 0x4a64 <_fpadd_parts+0x28a>
    4856:	12 96       	adiw	r26, 0x02	; 2
    4858:	2d 90       	ld	r2, X+
    485a:	3c 90       	ld	r3, X
    485c:	13 97       	sbiw	r26, 0x03	; 3
    485e:	eb 01       	movw	r28, r22
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	9b 81       	ldd	r25, Y+3	; 0x03
    4864:	14 96       	adiw	r26, 0x04	; 4
    4866:	ad 90       	ld	r10, X+
    4868:	bd 90       	ld	r11, X+
    486a:	cd 90       	ld	r12, X+
    486c:	dc 90       	ld	r13, X
    486e:	17 97       	sbiw	r26, 0x07	; 7
    4870:	ec 80       	ldd	r14, Y+4	; 0x04
    4872:	fd 80       	ldd	r15, Y+5	; 0x05
    4874:	0e 81       	ldd	r16, Y+6	; 0x06
    4876:	1f 81       	ldd	r17, Y+7	; 0x07
    4878:	91 01       	movw	r18, r2
    487a:	28 1b       	sub	r18, r24
    487c:	39 0b       	sbc	r19, r25
    487e:	b9 01       	movw	r22, r18
    4880:	37 ff       	sbrs	r19, 7
    4882:	04 c0       	rjmp	.+8      	; 0x488c <_fpadd_parts+0xb2>
    4884:	66 27       	eor	r22, r22
    4886:	77 27       	eor	r23, r23
    4888:	62 1b       	sub	r22, r18
    488a:	73 0b       	sbc	r23, r19
    488c:	60 32       	cpi	r22, 0x20	; 32
    488e:	71 05       	cpc	r23, r1
    4890:	0c f0       	brlt	.+2      	; 0x4894 <_fpadd_parts+0xba>
    4892:	61 c0       	rjmp	.+194    	; 0x4956 <_fpadd_parts+0x17c>
    4894:	12 16       	cp	r1, r18
    4896:	13 06       	cpc	r1, r19
    4898:	6c f5       	brge	.+90     	; 0x48f4 <_fpadd_parts+0x11a>
    489a:	37 01       	movw	r6, r14
    489c:	48 01       	movw	r8, r16
    489e:	06 2e       	mov	r0, r22
    48a0:	04 c0       	rjmp	.+8      	; 0x48aa <_fpadd_parts+0xd0>
    48a2:	96 94       	lsr	r9
    48a4:	87 94       	ror	r8
    48a6:	77 94       	ror	r7
    48a8:	67 94       	ror	r6
    48aa:	0a 94       	dec	r0
    48ac:	d2 f7       	brpl	.-12     	; 0x48a2 <_fpadd_parts+0xc8>
    48ae:	21 e0       	ldi	r18, 0x01	; 1
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	40 e0       	ldi	r20, 0x00	; 0
    48b4:	50 e0       	ldi	r21, 0x00	; 0
    48b6:	04 c0       	rjmp	.+8      	; 0x48c0 <_fpadd_parts+0xe6>
    48b8:	22 0f       	add	r18, r18
    48ba:	33 1f       	adc	r19, r19
    48bc:	44 1f       	adc	r20, r20
    48be:	55 1f       	adc	r21, r21
    48c0:	6a 95       	dec	r22
    48c2:	d2 f7       	brpl	.-12     	; 0x48b8 <_fpadd_parts+0xde>
    48c4:	21 50       	subi	r18, 0x01	; 1
    48c6:	30 40       	sbci	r19, 0x00	; 0
    48c8:	40 40       	sbci	r20, 0x00	; 0
    48ca:	50 40       	sbci	r21, 0x00	; 0
    48cc:	2e 21       	and	r18, r14
    48ce:	3f 21       	and	r19, r15
    48d0:	40 23       	and	r20, r16
    48d2:	51 23       	and	r21, r17
    48d4:	21 15       	cp	r18, r1
    48d6:	31 05       	cpc	r19, r1
    48d8:	41 05       	cpc	r20, r1
    48da:	51 05       	cpc	r21, r1
    48dc:	21 f0       	breq	.+8      	; 0x48e6 <_fpadd_parts+0x10c>
    48de:	21 e0       	ldi	r18, 0x01	; 1
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e0       	ldi	r20, 0x00	; 0
    48e4:	50 e0       	ldi	r21, 0x00	; 0
    48e6:	79 01       	movw	r14, r18
    48e8:	8a 01       	movw	r16, r20
    48ea:	e6 28       	or	r14, r6
    48ec:	f7 28       	or	r15, r7
    48ee:	08 29       	or	r16, r8
    48f0:	19 29       	or	r17, r9
    48f2:	3c c0       	rjmp	.+120    	; 0x496c <_fpadd_parts+0x192>
    48f4:	23 2b       	or	r18, r19
    48f6:	d1 f1       	breq	.+116    	; 0x496c <_fpadd_parts+0x192>
    48f8:	26 0e       	add	r2, r22
    48fa:	37 1e       	adc	r3, r23
    48fc:	35 01       	movw	r6, r10
    48fe:	46 01       	movw	r8, r12
    4900:	06 2e       	mov	r0, r22
    4902:	04 c0       	rjmp	.+8      	; 0x490c <_fpadd_parts+0x132>
    4904:	96 94       	lsr	r9
    4906:	87 94       	ror	r8
    4908:	77 94       	ror	r7
    490a:	67 94       	ror	r6
    490c:	0a 94       	dec	r0
    490e:	d2 f7       	brpl	.-12     	; 0x4904 <_fpadd_parts+0x12a>
    4910:	21 e0       	ldi	r18, 0x01	; 1
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	40 e0       	ldi	r20, 0x00	; 0
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	04 c0       	rjmp	.+8      	; 0x4922 <_fpadd_parts+0x148>
    491a:	22 0f       	add	r18, r18
    491c:	33 1f       	adc	r19, r19
    491e:	44 1f       	adc	r20, r20
    4920:	55 1f       	adc	r21, r21
    4922:	6a 95       	dec	r22
    4924:	d2 f7       	brpl	.-12     	; 0x491a <_fpadd_parts+0x140>
    4926:	21 50       	subi	r18, 0x01	; 1
    4928:	30 40       	sbci	r19, 0x00	; 0
    492a:	40 40       	sbci	r20, 0x00	; 0
    492c:	50 40       	sbci	r21, 0x00	; 0
    492e:	2a 21       	and	r18, r10
    4930:	3b 21       	and	r19, r11
    4932:	4c 21       	and	r20, r12
    4934:	5d 21       	and	r21, r13
    4936:	21 15       	cp	r18, r1
    4938:	31 05       	cpc	r19, r1
    493a:	41 05       	cpc	r20, r1
    493c:	51 05       	cpc	r21, r1
    493e:	21 f0       	breq	.+8      	; 0x4948 <_fpadd_parts+0x16e>
    4940:	21 e0       	ldi	r18, 0x01	; 1
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e0       	ldi	r20, 0x00	; 0
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	59 01       	movw	r10, r18
    494a:	6a 01       	movw	r12, r20
    494c:	a6 28       	or	r10, r6
    494e:	b7 28       	or	r11, r7
    4950:	c8 28       	or	r12, r8
    4952:	d9 28       	or	r13, r9
    4954:	0b c0       	rjmp	.+22     	; 0x496c <_fpadd_parts+0x192>
    4956:	82 15       	cp	r24, r2
    4958:	93 05       	cpc	r25, r3
    495a:	2c f0       	brlt	.+10     	; 0x4966 <_fpadd_parts+0x18c>
    495c:	1c 01       	movw	r2, r24
    495e:	aa 24       	eor	r10, r10
    4960:	bb 24       	eor	r11, r11
    4962:	65 01       	movw	r12, r10
    4964:	03 c0       	rjmp	.+6      	; 0x496c <_fpadd_parts+0x192>
    4966:	ee 24       	eor	r14, r14
    4968:	ff 24       	eor	r15, r15
    496a:	87 01       	movw	r16, r14
    496c:	11 96       	adiw	r26, 0x01	; 1
    496e:	9c 91       	ld	r25, X
    4970:	d2 01       	movw	r26, r4
    4972:	11 96       	adiw	r26, 0x01	; 1
    4974:	8c 91       	ld	r24, X
    4976:	98 17       	cp	r25, r24
    4978:	09 f4       	brne	.+2      	; 0x497c <_fpadd_parts+0x1a2>
    497a:	45 c0       	rjmp	.+138    	; 0x4a06 <_fpadd_parts+0x22c>
    497c:	99 23       	and	r25, r25
    497e:	39 f0       	breq	.+14     	; 0x498e <_fpadd_parts+0x1b4>
    4980:	a8 01       	movw	r20, r16
    4982:	97 01       	movw	r18, r14
    4984:	2a 19       	sub	r18, r10
    4986:	3b 09       	sbc	r19, r11
    4988:	4c 09       	sbc	r20, r12
    498a:	5d 09       	sbc	r21, r13
    498c:	06 c0       	rjmp	.+12     	; 0x499a <_fpadd_parts+0x1c0>
    498e:	a6 01       	movw	r20, r12
    4990:	95 01       	movw	r18, r10
    4992:	2e 19       	sub	r18, r14
    4994:	3f 09       	sbc	r19, r15
    4996:	40 0b       	sbc	r20, r16
    4998:	51 0b       	sbc	r21, r17
    499a:	57 fd       	sbrc	r21, 7
    499c:	08 c0       	rjmp	.+16     	; 0x49ae <_fpadd_parts+0x1d4>
    499e:	11 82       	std	Z+1, r1	; 0x01
    49a0:	33 82       	std	Z+3, r3	; 0x03
    49a2:	22 82       	std	Z+2, r2	; 0x02
    49a4:	24 83       	std	Z+4, r18	; 0x04
    49a6:	35 83       	std	Z+5, r19	; 0x05
    49a8:	46 83       	std	Z+6, r20	; 0x06
    49aa:	57 83       	std	Z+7, r21	; 0x07
    49ac:	1d c0       	rjmp	.+58     	; 0x49e8 <_fpadd_parts+0x20e>
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	81 83       	std	Z+1, r24	; 0x01
    49b2:	33 82       	std	Z+3, r3	; 0x03
    49b4:	22 82       	std	Z+2, r2	; 0x02
    49b6:	88 27       	eor	r24, r24
    49b8:	99 27       	eor	r25, r25
    49ba:	dc 01       	movw	r26, r24
    49bc:	82 1b       	sub	r24, r18
    49be:	93 0b       	sbc	r25, r19
    49c0:	a4 0b       	sbc	r26, r20
    49c2:	b5 0b       	sbc	r27, r21
    49c4:	84 83       	std	Z+4, r24	; 0x04
    49c6:	95 83       	std	Z+5, r25	; 0x05
    49c8:	a6 83       	std	Z+6, r26	; 0x06
    49ca:	b7 83       	std	Z+7, r27	; 0x07
    49cc:	0d c0       	rjmp	.+26     	; 0x49e8 <_fpadd_parts+0x20e>
    49ce:	22 0f       	add	r18, r18
    49d0:	33 1f       	adc	r19, r19
    49d2:	44 1f       	adc	r20, r20
    49d4:	55 1f       	adc	r21, r21
    49d6:	24 83       	std	Z+4, r18	; 0x04
    49d8:	35 83       	std	Z+5, r19	; 0x05
    49da:	46 83       	std	Z+6, r20	; 0x06
    49dc:	57 83       	std	Z+7, r21	; 0x07
    49de:	82 81       	ldd	r24, Z+2	; 0x02
    49e0:	93 81       	ldd	r25, Z+3	; 0x03
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	93 83       	std	Z+3, r25	; 0x03
    49e6:	82 83       	std	Z+2, r24	; 0x02
    49e8:	24 81       	ldd	r18, Z+4	; 0x04
    49ea:	35 81       	ldd	r19, Z+5	; 0x05
    49ec:	46 81       	ldd	r20, Z+6	; 0x06
    49ee:	57 81       	ldd	r21, Z+7	; 0x07
    49f0:	da 01       	movw	r26, r20
    49f2:	c9 01       	movw	r24, r18
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	a1 09       	sbc	r26, r1
    49f8:	b1 09       	sbc	r27, r1
    49fa:	8f 5f       	subi	r24, 0xFF	; 255
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	af 4f       	sbci	r26, 0xFF	; 255
    4a00:	bf 43       	sbci	r27, 0x3F	; 63
    4a02:	28 f3       	brcs	.-54     	; 0x49ce <_fpadd_parts+0x1f4>
    4a04:	0b c0       	rjmp	.+22     	; 0x4a1c <_fpadd_parts+0x242>
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	33 82       	std	Z+3, r3	; 0x03
    4a0a:	22 82       	std	Z+2, r2	; 0x02
    4a0c:	ea 0c       	add	r14, r10
    4a0e:	fb 1c       	adc	r15, r11
    4a10:	0c 1d       	adc	r16, r12
    4a12:	1d 1d       	adc	r17, r13
    4a14:	e4 82       	std	Z+4, r14	; 0x04
    4a16:	f5 82       	std	Z+5, r15	; 0x05
    4a18:	06 83       	std	Z+6, r16	; 0x06
    4a1a:	17 83       	std	Z+7, r17	; 0x07
    4a1c:	83 e0       	ldi	r24, 0x03	; 3
    4a1e:	80 83       	st	Z, r24
    4a20:	24 81       	ldd	r18, Z+4	; 0x04
    4a22:	35 81       	ldd	r19, Z+5	; 0x05
    4a24:	46 81       	ldd	r20, Z+6	; 0x06
    4a26:	57 81       	ldd	r21, Z+7	; 0x07
    4a28:	57 ff       	sbrs	r21, 7
    4a2a:	1a c0       	rjmp	.+52     	; 0x4a60 <_fpadd_parts+0x286>
    4a2c:	c9 01       	movw	r24, r18
    4a2e:	aa 27       	eor	r26, r26
    4a30:	97 fd       	sbrc	r25, 7
    4a32:	a0 95       	com	r26
    4a34:	ba 2f       	mov	r27, r26
    4a36:	81 70       	andi	r24, 0x01	; 1
    4a38:	90 70       	andi	r25, 0x00	; 0
    4a3a:	a0 70       	andi	r26, 0x00	; 0
    4a3c:	b0 70       	andi	r27, 0x00	; 0
    4a3e:	56 95       	lsr	r21
    4a40:	47 95       	ror	r20
    4a42:	37 95       	ror	r19
    4a44:	27 95       	ror	r18
    4a46:	82 2b       	or	r24, r18
    4a48:	93 2b       	or	r25, r19
    4a4a:	a4 2b       	or	r26, r20
    4a4c:	b5 2b       	or	r27, r21
    4a4e:	84 83       	std	Z+4, r24	; 0x04
    4a50:	95 83       	std	Z+5, r25	; 0x05
    4a52:	a6 83       	std	Z+6, r26	; 0x06
    4a54:	b7 83       	std	Z+7, r27	; 0x07
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	01 96       	adiw	r24, 0x01	; 1
    4a5c:	93 83       	std	Z+3, r25	; 0x03
    4a5e:	82 83       	std	Z+2, r24	; 0x02
    4a60:	df 01       	movw	r26, r30
    4a62:	01 c0       	rjmp	.+2      	; 0x4a66 <_fpadd_parts+0x28c>
    4a64:	d2 01       	movw	r26, r4
    4a66:	cd 01       	movw	r24, r26
    4a68:	cd b7       	in	r28, 0x3d	; 61
    4a6a:	de b7       	in	r29, 0x3e	; 62
    4a6c:	e2 e1       	ldi	r30, 0x12	; 18
    4a6e:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__epilogue_restores__>

00004a72 <__subsf3>:
    4a72:	a0 e2       	ldi	r26, 0x20	; 32
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	ef e3       	ldi	r30, 0x3F	; 63
    4a78:	f5 e2       	ldi	r31, 0x25	; 37
    4a7a:	0c 94 97 29 	jmp	0x532e	; 0x532e <__prologue_saves__+0x18>
    4a7e:	69 83       	std	Y+1, r22	; 0x01
    4a80:	7a 83       	std	Y+2, r23	; 0x02
    4a82:	8b 83       	std	Y+3, r24	; 0x03
    4a84:	9c 83       	std	Y+4, r25	; 0x04
    4a86:	2d 83       	std	Y+5, r18	; 0x05
    4a88:	3e 83       	std	Y+6, r19	; 0x06
    4a8a:	4f 83       	std	Y+7, r20	; 0x07
    4a8c:	58 87       	std	Y+8, r21	; 0x08
    4a8e:	e9 e0       	ldi	r30, 0x09	; 9
    4a90:	ee 2e       	mov	r14, r30
    4a92:	f1 2c       	mov	r15, r1
    4a94:	ec 0e       	add	r14, r28
    4a96:	fd 1e       	adc	r15, r29
    4a98:	ce 01       	movw	r24, r28
    4a9a:	01 96       	adiw	r24, 0x01	; 1
    4a9c:	b7 01       	movw	r22, r14
    4a9e:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4aa2:	8e 01       	movw	r16, r28
    4aa4:	0f 5e       	subi	r16, 0xEF	; 239
    4aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa8:	ce 01       	movw	r24, r28
    4aaa:	05 96       	adiw	r24, 0x05	; 5
    4aac:	b8 01       	movw	r22, r16
    4aae:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4ab2:	8a 89       	ldd	r24, Y+18	; 0x12
    4ab4:	91 e0       	ldi	r25, 0x01	; 1
    4ab6:	89 27       	eor	r24, r25
    4ab8:	8a 8b       	std	Y+18, r24	; 0x12
    4aba:	c7 01       	movw	r24, r14
    4abc:	b8 01       	movw	r22, r16
    4abe:	ae 01       	movw	r20, r28
    4ac0:	47 5e       	subi	r20, 0xE7	; 231
    4ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ac4:	0e 94 ed 23 	call	0x47da	; 0x47da <_fpadd_parts>
    4ac8:	0e 94 3e 28 	call	0x507c	; 0x507c <__pack_f>
    4acc:	a0 96       	adiw	r28, 0x20	; 32
    4ace:	e6 e0       	ldi	r30, 0x06	; 6
    4ad0:	0c 94 b3 29 	jmp	0x5366	; 0x5366 <__epilogue_restores__+0x18>

00004ad4 <__addsf3>:
    4ad4:	a0 e2       	ldi	r26, 0x20	; 32
    4ad6:	b0 e0       	ldi	r27, 0x00	; 0
    4ad8:	e0 e7       	ldi	r30, 0x70	; 112
    4ada:	f5 e2       	ldi	r31, 0x25	; 37
    4adc:	0c 94 97 29 	jmp	0x532e	; 0x532e <__prologue_saves__+0x18>
    4ae0:	69 83       	std	Y+1, r22	; 0x01
    4ae2:	7a 83       	std	Y+2, r23	; 0x02
    4ae4:	8b 83       	std	Y+3, r24	; 0x03
    4ae6:	9c 83       	std	Y+4, r25	; 0x04
    4ae8:	2d 83       	std	Y+5, r18	; 0x05
    4aea:	3e 83       	std	Y+6, r19	; 0x06
    4aec:	4f 83       	std	Y+7, r20	; 0x07
    4aee:	58 87       	std	Y+8, r21	; 0x08
    4af0:	f9 e0       	ldi	r31, 0x09	; 9
    4af2:	ef 2e       	mov	r14, r31
    4af4:	f1 2c       	mov	r15, r1
    4af6:	ec 0e       	add	r14, r28
    4af8:	fd 1e       	adc	r15, r29
    4afa:	ce 01       	movw	r24, r28
    4afc:	01 96       	adiw	r24, 0x01	; 1
    4afe:	b7 01       	movw	r22, r14
    4b00:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4b04:	8e 01       	movw	r16, r28
    4b06:	0f 5e       	subi	r16, 0xEF	; 239
    4b08:	1f 4f       	sbci	r17, 0xFF	; 255
    4b0a:	ce 01       	movw	r24, r28
    4b0c:	05 96       	adiw	r24, 0x05	; 5
    4b0e:	b8 01       	movw	r22, r16
    4b10:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4b14:	c7 01       	movw	r24, r14
    4b16:	b8 01       	movw	r22, r16
    4b18:	ae 01       	movw	r20, r28
    4b1a:	47 5e       	subi	r20, 0xE7	; 231
    4b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1e:	0e 94 ed 23 	call	0x47da	; 0x47da <_fpadd_parts>
    4b22:	0e 94 3e 28 	call	0x507c	; 0x507c <__pack_f>
    4b26:	a0 96       	adiw	r28, 0x20	; 32
    4b28:	e6 e0       	ldi	r30, 0x06	; 6
    4b2a:	0c 94 b3 29 	jmp	0x5366	; 0x5366 <__epilogue_restores__+0x18>

00004b2e <__mulsf3>:
    4b2e:	a0 e2       	ldi	r26, 0x20	; 32
    4b30:	b0 e0       	ldi	r27, 0x00	; 0
    4b32:	ed e9       	ldi	r30, 0x9D	; 157
    4b34:	f5 e2       	ldi	r31, 0x25	; 37
    4b36:	0c 94 8b 29 	jmp	0x5316	; 0x5316 <__prologue_saves__>
    4b3a:	69 83       	std	Y+1, r22	; 0x01
    4b3c:	7a 83       	std	Y+2, r23	; 0x02
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
    4b40:	9c 83       	std	Y+4, r25	; 0x04
    4b42:	2d 83       	std	Y+5, r18	; 0x05
    4b44:	3e 83       	std	Y+6, r19	; 0x06
    4b46:	4f 83       	std	Y+7, r20	; 0x07
    4b48:	58 87       	std	Y+8, r21	; 0x08
    4b4a:	ce 01       	movw	r24, r28
    4b4c:	01 96       	adiw	r24, 0x01	; 1
    4b4e:	be 01       	movw	r22, r28
    4b50:	67 5f       	subi	r22, 0xF7	; 247
    4b52:	7f 4f       	sbci	r23, 0xFF	; 255
    4b54:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4b58:	ce 01       	movw	r24, r28
    4b5a:	05 96       	adiw	r24, 0x05	; 5
    4b5c:	be 01       	movw	r22, r28
    4b5e:	6f 5e       	subi	r22, 0xEF	; 239
    4b60:	7f 4f       	sbci	r23, 0xFF	; 255
    4b62:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4b66:	99 85       	ldd	r25, Y+9	; 0x09
    4b68:	92 30       	cpi	r25, 0x02	; 2
    4b6a:	88 f0       	brcs	.+34     	; 0x4b8e <__mulsf3+0x60>
    4b6c:	89 89       	ldd	r24, Y+17	; 0x11
    4b6e:	82 30       	cpi	r24, 0x02	; 2
    4b70:	c8 f0       	brcs	.+50     	; 0x4ba4 <__mulsf3+0x76>
    4b72:	94 30       	cpi	r25, 0x04	; 4
    4b74:	19 f4       	brne	.+6      	; 0x4b7c <__mulsf3+0x4e>
    4b76:	82 30       	cpi	r24, 0x02	; 2
    4b78:	51 f4       	brne	.+20     	; 0x4b8e <__mulsf3+0x60>
    4b7a:	04 c0       	rjmp	.+8      	; 0x4b84 <__mulsf3+0x56>
    4b7c:	84 30       	cpi	r24, 0x04	; 4
    4b7e:	29 f4       	brne	.+10     	; 0x4b8a <__mulsf3+0x5c>
    4b80:	92 30       	cpi	r25, 0x02	; 2
    4b82:	81 f4       	brne	.+32     	; 0x4ba4 <__mulsf3+0x76>
    4b84:	87 e0       	ldi	r24, 0x07	; 7
    4b86:	91 e0       	ldi	r25, 0x01	; 1
    4b88:	c6 c0       	rjmp	.+396    	; 0x4d16 <__mulsf3+0x1e8>
    4b8a:	92 30       	cpi	r25, 0x02	; 2
    4b8c:	49 f4       	brne	.+18     	; 0x4ba0 <__mulsf3+0x72>
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b92:	8a 89       	ldd	r24, Y+18	; 0x12
    4b94:	98 13       	cpse	r25, r24
    4b96:	21 e0       	ldi	r18, 0x01	; 1
    4b98:	2a 87       	std	Y+10, r18	; 0x0a
    4b9a:	ce 01       	movw	r24, r28
    4b9c:	09 96       	adiw	r24, 0x09	; 9
    4b9e:	bb c0       	rjmp	.+374    	; 0x4d16 <__mulsf3+0x1e8>
    4ba0:	82 30       	cpi	r24, 0x02	; 2
    4ba2:	49 f4       	brne	.+18     	; 0x4bb6 <__mulsf3+0x88>
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ba8:	8a 89       	ldd	r24, Y+18	; 0x12
    4baa:	98 13       	cpse	r25, r24
    4bac:	21 e0       	ldi	r18, 0x01	; 1
    4bae:	2a 8b       	std	Y+18, r18	; 0x12
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	41 96       	adiw	r24, 0x11	; 17
    4bb4:	b0 c0       	rjmp	.+352    	; 0x4d16 <__mulsf3+0x1e8>
    4bb6:	2d 84       	ldd	r2, Y+13	; 0x0d
    4bb8:	3e 84       	ldd	r3, Y+14	; 0x0e
    4bba:	4f 84       	ldd	r4, Y+15	; 0x0f
    4bbc:	58 88       	ldd	r5, Y+16	; 0x10
    4bbe:	6d 88       	ldd	r6, Y+21	; 0x15
    4bc0:	7e 88       	ldd	r7, Y+22	; 0x16
    4bc2:	8f 88       	ldd	r8, Y+23	; 0x17
    4bc4:	98 8c       	ldd	r9, Y+24	; 0x18
    4bc6:	ee 24       	eor	r14, r14
    4bc8:	ff 24       	eor	r15, r15
    4bca:	87 01       	movw	r16, r14
    4bcc:	aa 24       	eor	r10, r10
    4bce:	bb 24       	eor	r11, r11
    4bd0:	65 01       	movw	r12, r10
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	60 e0       	ldi	r22, 0x00	; 0
    4bd8:	70 e0       	ldi	r23, 0x00	; 0
    4bda:	e0 e0       	ldi	r30, 0x00	; 0
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	c1 01       	movw	r24, r2
    4be0:	81 70       	andi	r24, 0x01	; 1
    4be2:	90 70       	andi	r25, 0x00	; 0
    4be4:	89 2b       	or	r24, r25
    4be6:	e9 f0       	breq	.+58     	; 0x4c22 <__mulsf3+0xf4>
    4be8:	e6 0c       	add	r14, r6
    4bea:	f7 1c       	adc	r15, r7
    4bec:	08 1d       	adc	r16, r8
    4bee:	19 1d       	adc	r17, r9
    4bf0:	9a 01       	movw	r18, r20
    4bf2:	ab 01       	movw	r20, r22
    4bf4:	2a 0d       	add	r18, r10
    4bf6:	3b 1d       	adc	r19, r11
    4bf8:	4c 1d       	adc	r20, r12
    4bfa:	5d 1d       	adc	r21, r13
    4bfc:	80 e0       	ldi	r24, 0x00	; 0
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	a0 e0       	ldi	r26, 0x00	; 0
    4c02:	b0 e0       	ldi	r27, 0x00	; 0
    4c04:	e6 14       	cp	r14, r6
    4c06:	f7 04       	cpc	r15, r7
    4c08:	08 05       	cpc	r16, r8
    4c0a:	19 05       	cpc	r17, r9
    4c0c:	20 f4       	brcc	.+8      	; 0x4c16 <__mulsf3+0xe8>
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	a0 e0       	ldi	r26, 0x00	; 0
    4c14:	b0 e0       	ldi	r27, 0x00	; 0
    4c16:	ba 01       	movw	r22, r20
    4c18:	a9 01       	movw	r20, r18
    4c1a:	48 0f       	add	r20, r24
    4c1c:	59 1f       	adc	r21, r25
    4c1e:	6a 1f       	adc	r22, r26
    4c20:	7b 1f       	adc	r23, r27
    4c22:	aa 0c       	add	r10, r10
    4c24:	bb 1c       	adc	r11, r11
    4c26:	cc 1c       	adc	r12, r12
    4c28:	dd 1c       	adc	r13, r13
    4c2a:	97 fe       	sbrs	r9, 7
    4c2c:	08 c0       	rjmp	.+16     	; 0x4c3e <__mulsf3+0x110>
    4c2e:	81 e0       	ldi	r24, 0x01	; 1
    4c30:	90 e0       	ldi	r25, 0x00	; 0
    4c32:	a0 e0       	ldi	r26, 0x00	; 0
    4c34:	b0 e0       	ldi	r27, 0x00	; 0
    4c36:	a8 2a       	or	r10, r24
    4c38:	b9 2a       	or	r11, r25
    4c3a:	ca 2a       	or	r12, r26
    4c3c:	db 2a       	or	r13, r27
    4c3e:	31 96       	adiw	r30, 0x01	; 1
    4c40:	e0 32       	cpi	r30, 0x20	; 32
    4c42:	f1 05       	cpc	r31, r1
    4c44:	49 f0       	breq	.+18     	; 0x4c58 <__mulsf3+0x12a>
    4c46:	66 0c       	add	r6, r6
    4c48:	77 1c       	adc	r7, r7
    4c4a:	88 1c       	adc	r8, r8
    4c4c:	99 1c       	adc	r9, r9
    4c4e:	56 94       	lsr	r5
    4c50:	47 94       	ror	r4
    4c52:	37 94       	ror	r3
    4c54:	27 94       	ror	r2
    4c56:	c3 cf       	rjmp	.-122    	; 0x4bde <__mulsf3+0xb0>
    4c58:	fa 85       	ldd	r31, Y+10	; 0x0a
    4c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    4c5c:	2b 89       	ldd	r18, Y+19	; 0x13
    4c5e:	3c 89       	ldd	r19, Y+20	; 0x14
    4c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c64:	28 0f       	add	r18, r24
    4c66:	39 1f       	adc	r19, r25
    4c68:	2e 5f       	subi	r18, 0xFE	; 254
    4c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6c:	17 c0       	rjmp	.+46     	; 0x4c9c <__mulsf3+0x16e>
    4c6e:	ca 01       	movw	r24, r20
    4c70:	81 70       	andi	r24, 0x01	; 1
    4c72:	90 70       	andi	r25, 0x00	; 0
    4c74:	89 2b       	or	r24, r25
    4c76:	61 f0       	breq	.+24     	; 0x4c90 <__mulsf3+0x162>
    4c78:	16 95       	lsr	r17
    4c7a:	07 95       	ror	r16
    4c7c:	f7 94       	ror	r15
    4c7e:	e7 94       	ror	r14
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	a0 e0       	ldi	r26, 0x00	; 0
    4c86:	b0 e8       	ldi	r27, 0x80	; 128
    4c88:	e8 2a       	or	r14, r24
    4c8a:	f9 2a       	or	r15, r25
    4c8c:	0a 2b       	or	r16, r26
    4c8e:	1b 2b       	or	r17, r27
    4c90:	76 95       	lsr	r23
    4c92:	67 95       	ror	r22
    4c94:	57 95       	ror	r21
    4c96:	47 95       	ror	r20
    4c98:	2f 5f       	subi	r18, 0xFF	; 255
    4c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9c:	77 fd       	sbrc	r23, 7
    4c9e:	e7 cf       	rjmp	.-50     	; 0x4c6e <__mulsf3+0x140>
    4ca0:	0c c0       	rjmp	.+24     	; 0x4cba <__mulsf3+0x18c>
    4ca2:	44 0f       	add	r20, r20
    4ca4:	55 1f       	adc	r21, r21
    4ca6:	66 1f       	adc	r22, r22
    4ca8:	77 1f       	adc	r23, r23
    4caa:	17 fd       	sbrc	r17, 7
    4cac:	41 60       	ori	r20, 0x01	; 1
    4cae:	ee 0c       	add	r14, r14
    4cb0:	ff 1c       	adc	r15, r15
    4cb2:	00 1f       	adc	r16, r16
    4cb4:	11 1f       	adc	r17, r17
    4cb6:	21 50       	subi	r18, 0x01	; 1
    4cb8:	30 40       	sbci	r19, 0x00	; 0
    4cba:	40 30       	cpi	r20, 0x00	; 0
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	59 07       	cpc	r21, r25
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	69 07       	cpc	r22, r25
    4cc4:	90 e4       	ldi	r25, 0x40	; 64
    4cc6:	79 07       	cpc	r23, r25
    4cc8:	60 f3       	brcs	.-40     	; 0x4ca2 <__mulsf3+0x174>
    4cca:	2b 8f       	std	Y+27, r18	; 0x1b
    4ccc:	3c 8f       	std	Y+28, r19	; 0x1c
    4cce:	db 01       	movw	r26, r22
    4cd0:	ca 01       	movw	r24, r20
    4cd2:	8f 77       	andi	r24, 0x7F	; 127
    4cd4:	90 70       	andi	r25, 0x00	; 0
    4cd6:	a0 70       	andi	r26, 0x00	; 0
    4cd8:	b0 70       	andi	r27, 0x00	; 0
    4cda:	80 34       	cpi	r24, 0x40	; 64
    4cdc:	91 05       	cpc	r25, r1
    4cde:	a1 05       	cpc	r26, r1
    4ce0:	b1 05       	cpc	r27, r1
    4ce2:	61 f4       	brne	.+24     	; 0x4cfc <__mulsf3+0x1ce>
    4ce4:	47 fd       	sbrc	r20, 7
    4ce6:	0a c0       	rjmp	.+20     	; 0x4cfc <__mulsf3+0x1ce>
    4ce8:	e1 14       	cp	r14, r1
    4cea:	f1 04       	cpc	r15, r1
    4cec:	01 05       	cpc	r16, r1
    4cee:	11 05       	cpc	r17, r1
    4cf0:	29 f0       	breq	.+10     	; 0x4cfc <__mulsf3+0x1ce>
    4cf2:	40 5c       	subi	r20, 0xC0	; 192
    4cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf6:	6f 4f       	sbci	r22, 0xFF	; 255
    4cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfa:	40 78       	andi	r20, 0x80	; 128
    4cfc:	1a 8e       	std	Y+26, r1	; 0x1a
    4cfe:	fe 17       	cp	r31, r30
    4d00:	11 f0       	breq	.+4      	; 0x4d06 <__mulsf3+0x1d8>
    4d02:	81 e0       	ldi	r24, 0x01	; 1
    4d04:	8a 8f       	std	Y+26, r24	; 0x1a
    4d06:	4d 8f       	std	Y+29, r20	; 0x1d
    4d08:	5e 8f       	std	Y+30, r21	; 0x1e
    4d0a:	6f 8f       	std	Y+31, r22	; 0x1f
    4d0c:	78 a3       	std	Y+32, r23	; 0x20
    4d0e:	83 e0       	ldi	r24, 0x03	; 3
    4d10:	89 8f       	std	Y+25, r24	; 0x19
    4d12:	ce 01       	movw	r24, r28
    4d14:	49 96       	adiw	r24, 0x19	; 25
    4d16:	0e 94 3e 28 	call	0x507c	; 0x507c <__pack_f>
    4d1a:	a0 96       	adiw	r28, 0x20	; 32
    4d1c:	e2 e1       	ldi	r30, 0x12	; 18
    4d1e:	0c 94 a7 29 	jmp	0x534e	; 0x534e <__epilogue_restores__>

00004d22 <__divsf3>:
    4d22:	a8 e1       	ldi	r26, 0x18	; 24
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	e7 e9       	ldi	r30, 0x97	; 151
    4d28:	f6 e2       	ldi	r31, 0x26	; 38
    4d2a:	0c 94 93 29 	jmp	0x5326	; 0x5326 <__prologue_saves__+0x10>
    4d2e:	69 83       	std	Y+1, r22	; 0x01
    4d30:	7a 83       	std	Y+2, r23	; 0x02
    4d32:	8b 83       	std	Y+3, r24	; 0x03
    4d34:	9c 83       	std	Y+4, r25	; 0x04
    4d36:	2d 83       	std	Y+5, r18	; 0x05
    4d38:	3e 83       	std	Y+6, r19	; 0x06
    4d3a:	4f 83       	std	Y+7, r20	; 0x07
    4d3c:	58 87       	std	Y+8, r21	; 0x08
    4d3e:	b9 e0       	ldi	r27, 0x09	; 9
    4d40:	eb 2e       	mov	r14, r27
    4d42:	f1 2c       	mov	r15, r1
    4d44:	ec 0e       	add	r14, r28
    4d46:	fd 1e       	adc	r15, r29
    4d48:	ce 01       	movw	r24, r28
    4d4a:	01 96       	adiw	r24, 0x01	; 1
    4d4c:	b7 01       	movw	r22, r14
    4d4e:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4d52:	8e 01       	movw	r16, r28
    4d54:	0f 5e       	subi	r16, 0xEF	; 239
    4d56:	1f 4f       	sbci	r17, 0xFF	; 255
    4d58:	ce 01       	movw	r24, r28
    4d5a:	05 96       	adiw	r24, 0x05	; 5
    4d5c:	b8 01       	movw	r22, r16
    4d5e:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4d62:	29 85       	ldd	r18, Y+9	; 0x09
    4d64:	22 30       	cpi	r18, 0x02	; 2
    4d66:	08 f4       	brcc	.+2      	; 0x4d6a <__divsf3+0x48>
    4d68:	7e c0       	rjmp	.+252    	; 0x4e66 <__divsf3+0x144>
    4d6a:	39 89       	ldd	r19, Y+17	; 0x11
    4d6c:	32 30       	cpi	r19, 0x02	; 2
    4d6e:	10 f4       	brcc	.+4      	; 0x4d74 <__divsf3+0x52>
    4d70:	b8 01       	movw	r22, r16
    4d72:	7c c0       	rjmp	.+248    	; 0x4e6c <__divsf3+0x14a>
    4d74:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d76:	9a 89       	ldd	r25, Y+18	; 0x12
    4d78:	89 27       	eor	r24, r25
    4d7a:	8a 87       	std	Y+10, r24	; 0x0a
    4d7c:	24 30       	cpi	r18, 0x04	; 4
    4d7e:	11 f0       	breq	.+4      	; 0x4d84 <__divsf3+0x62>
    4d80:	22 30       	cpi	r18, 0x02	; 2
    4d82:	31 f4       	brne	.+12     	; 0x4d90 <__divsf3+0x6e>
    4d84:	23 17       	cp	r18, r19
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <__divsf3+0x68>
    4d88:	6e c0       	rjmp	.+220    	; 0x4e66 <__divsf3+0x144>
    4d8a:	67 e0       	ldi	r22, 0x07	; 7
    4d8c:	71 e0       	ldi	r23, 0x01	; 1
    4d8e:	6e c0       	rjmp	.+220    	; 0x4e6c <__divsf3+0x14a>
    4d90:	34 30       	cpi	r19, 0x04	; 4
    4d92:	39 f4       	brne	.+14     	; 0x4da2 <__divsf3+0x80>
    4d94:	1d 86       	std	Y+13, r1	; 0x0d
    4d96:	1e 86       	std	Y+14, r1	; 0x0e
    4d98:	1f 86       	std	Y+15, r1	; 0x0f
    4d9a:	18 8a       	std	Y+16, r1	; 0x10
    4d9c:	1c 86       	std	Y+12, r1	; 0x0c
    4d9e:	1b 86       	std	Y+11, r1	; 0x0b
    4da0:	04 c0       	rjmp	.+8      	; 0x4daa <__divsf3+0x88>
    4da2:	32 30       	cpi	r19, 0x02	; 2
    4da4:	21 f4       	brne	.+8      	; 0x4dae <__divsf3+0x8c>
    4da6:	84 e0       	ldi	r24, 0x04	; 4
    4da8:	89 87       	std	Y+9, r24	; 0x09
    4daa:	b7 01       	movw	r22, r14
    4dac:	5f c0       	rjmp	.+190    	; 0x4e6c <__divsf3+0x14a>
    4dae:	2b 85       	ldd	r18, Y+11	; 0x0b
    4db0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4db2:	8b 89       	ldd	r24, Y+19	; 0x13
    4db4:	9c 89       	ldd	r25, Y+20	; 0x14
    4db6:	28 1b       	sub	r18, r24
    4db8:	39 0b       	sbc	r19, r25
    4dba:	3c 87       	std	Y+12, r19	; 0x0c
    4dbc:	2b 87       	std	Y+11, r18	; 0x0b
    4dbe:	ed 84       	ldd	r14, Y+13	; 0x0d
    4dc0:	fe 84       	ldd	r15, Y+14	; 0x0e
    4dc2:	0f 85       	ldd	r16, Y+15	; 0x0f
    4dc4:	18 89       	ldd	r17, Y+16	; 0x10
    4dc6:	ad 88       	ldd	r10, Y+21	; 0x15
    4dc8:	be 88       	ldd	r11, Y+22	; 0x16
    4dca:	cf 88       	ldd	r12, Y+23	; 0x17
    4dcc:	d8 8c       	ldd	r13, Y+24	; 0x18
    4dce:	ea 14       	cp	r14, r10
    4dd0:	fb 04       	cpc	r15, r11
    4dd2:	0c 05       	cpc	r16, r12
    4dd4:	1d 05       	cpc	r17, r13
    4dd6:	40 f4       	brcc	.+16     	; 0x4de8 <__divsf3+0xc6>
    4dd8:	ee 0c       	add	r14, r14
    4dda:	ff 1c       	adc	r15, r15
    4ddc:	00 1f       	adc	r16, r16
    4dde:	11 1f       	adc	r17, r17
    4de0:	21 50       	subi	r18, 0x01	; 1
    4de2:	30 40       	sbci	r19, 0x00	; 0
    4de4:	3c 87       	std	Y+12, r19	; 0x0c
    4de6:	2b 87       	std	Y+11, r18	; 0x0b
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	40 e0       	ldi	r20, 0x00	; 0
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	a0 e0       	ldi	r26, 0x00	; 0
    4df6:	b0 e4       	ldi	r27, 0x40	; 64
    4df8:	60 e0       	ldi	r22, 0x00	; 0
    4dfa:	70 e0       	ldi	r23, 0x00	; 0
    4dfc:	ea 14       	cp	r14, r10
    4dfe:	fb 04       	cpc	r15, r11
    4e00:	0c 05       	cpc	r16, r12
    4e02:	1d 05       	cpc	r17, r13
    4e04:	40 f0       	brcs	.+16     	; 0x4e16 <__divsf3+0xf4>
    4e06:	28 2b       	or	r18, r24
    4e08:	39 2b       	or	r19, r25
    4e0a:	4a 2b       	or	r20, r26
    4e0c:	5b 2b       	or	r21, r27
    4e0e:	ea 18       	sub	r14, r10
    4e10:	fb 08       	sbc	r15, r11
    4e12:	0c 09       	sbc	r16, r12
    4e14:	1d 09       	sbc	r17, r13
    4e16:	b6 95       	lsr	r27
    4e18:	a7 95       	ror	r26
    4e1a:	97 95       	ror	r25
    4e1c:	87 95       	ror	r24
    4e1e:	ee 0c       	add	r14, r14
    4e20:	ff 1c       	adc	r15, r15
    4e22:	00 1f       	adc	r16, r16
    4e24:	11 1f       	adc	r17, r17
    4e26:	6f 5f       	subi	r22, 0xFF	; 255
    4e28:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2a:	6f 31       	cpi	r22, 0x1F	; 31
    4e2c:	71 05       	cpc	r23, r1
    4e2e:	31 f7       	brne	.-52     	; 0x4dfc <__divsf3+0xda>
    4e30:	da 01       	movw	r26, r20
    4e32:	c9 01       	movw	r24, r18
    4e34:	8f 77       	andi	r24, 0x7F	; 127
    4e36:	90 70       	andi	r25, 0x00	; 0
    4e38:	a0 70       	andi	r26, 0x00	; 0
    4e3a:	b0 70       	andi	r27, 0x00	; 0
    4e3c:	80 34       	cpi	r24, 0x40	; 64
    4e3e:	91 05       	cpc	r25, r1
    4e40:	a1 05       	cpc	r26, r1
    4e42:	b1 05       	cpc	r27, r1
    4e44:	61 f4       	brne	.+24     	; 0x4e5e <__divsf3+0x13c>
    4e46:	27 fd       	sbrc	r18, 7
    4e48:	0a c0       	rjmp	.+20     	; 0x4e5e <__divsf3+0x13c>
    4e4a:	e1 14       	cp	r14, r1
    4e4c:	f1 04       	cpc	r15, r1
    4e4e:	01 05       	cpc	r16, r1
    4e50:	11 05       	cpc	r17, r1
    4e52:	29 f0       	breq	.+10     	; 0x4e5e <__divsf3+0x13c>
    4e54:	20 5c       	subi	r18, 0xC0	; 192
    4e56:	3f 4f       	sbci	r19, 0xFF	; 255
    4e58:	4f 4f       	sbci	r20, 0xFF	; 255
    4e5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e5c:	20 78       	andi	r18, 0x80	; 128
    4e5e:	2d 87       	std	Y+13, r18	; 0x0d
    4e60:	3e 87       	std	Y+14, r19	; 0x0e
    4e62:	4f 87       	std	Y+15, r20	; 0x0f
    4e64:	58 8b       	std	Y+16, r21	; 0x10
    4e66:	be 01       	movw	r22, r28
    4e68:	67 5f       	subi	r22, 0xF7	; 247
    4e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	0e 94 3e 28 	call	0x507c	; 0x507c <__pack_f>
    4e72:	68 96       	adiw	r28, 0x18	; 24
    4e74:	ea e0       	ldi	r30, 0x0A	; 10
    4e76:	0c 94 af 29 	jmp	0x535e	; 0x535e <__epilogue_restores__+0x10>

00004e7a <__floatsisf>:
    4e7a:	a8 e0       	ldi	r26, 0x08	; 8
    4e7c:	b0 e0       	ldi	r27, 0x00	; 0
    4e7e:	e3 e4       	ldi	r30, 0x43	; 67
    4e80:	f7 e2       	ldi	r31, 0x27	; 39
    4e82:	0c 94 94 29 	jmp	0x5328	; 0x5328 <__prologue_saves__+0x12>
    4e86:	9b 01       	movw	r18, r22
    4e88:	ac 01       	movw	r20, r24
    4e8a:	83 e0       	ldi	r24, 0x03	; 3
    4e8c:	89 83       	std	Y+1, r24	; 0x01
    4e8e:	da 01       	movw	r26, r20
    4e90:	c9 01       	movw	r24, r18
    4e92:	88 27       	eor	r24, r24
    4e94:	b7 fd       	sbrc	r27, 7
    4e96:	83 95       	inc	r24
    4e98:	99 27       	eor	r25, r25
    4e9a:	aa 27       	eor	r26, r26
    4e9c:	bb 27       	eor	r27, r27
    4e9e:	b8 2e       	mov	r11, r24
    4ea0:	21 15       	cp	r18, r1
    4ea2:	31 05       	cpc	r19, r1
    4ea4:	41 05       	cpc	r20, r1
    4ea6:	51 05       	cpc	r21, r1
    4ea8:	19 f4       	brne	.+6      	; 0x4eb0 <__floatsisf+0x36>
    4eaa:	82 e0       	ldi	r24, 0x02	; 2
    4eac:	89 83       	std	Y+1, r24	; 0x01
    4eae:	3a c0       	rjmp	.+116    	; 0x4f24 <__floatsisf+0xaa>
    4eb0:	88 23       	and	r24, r24
    4eb2:	a9 f0       	breq	.+42     	; 0x4ede <__floatsisf+0x64>
    4eb4:	20 30       	cpi	r18, 0x00	; 0
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	38 07       	cpc	r19, r24
    4eba:	80 e0       	ldi	r24, 0x00	; 0
    4ebc:	48 07       	cpc	r20, r24
    4ebe:	80 e8       	ldi	r24, 0x80	; 128
    4ec0:	58 07       	cpc	r21, r24
    4ec2:	29 f4       	brne	.+10     	; 0x4ece <__floatsisf+0x54>
    4ec4:	60 e0       	ldi	r22, 0x00	; 0
    4ec6:	70 e0       	ldi	r23, 0x00	; 0
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	9f ec       	ldi	r25, 0xCF	; 207
    4ecc:	30 c0       	rjmp	.+96     	; 0x4f2e <__floatsisf+0xb4>
    4ece:	ee 24       	eor	r14, r14
    4ed0:	ff 24       	eor	r15, r15
    4ed2:	87 01       	movw	r16, r14
    4ed4:	e2 1a       	sub	r14, r18
    4ed6:	f3 0a       	sbc	r15, r19
    4ed8:	04 0b       	sbc	r16, r20
    4eda:	15 0b       	sbc	r17, r21
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <__floatsisf+0x68>
    4ede:	79 01       	movw	r14, r18
    4ee0:	8a 01       	movw	r16, r20
    4ee2:	8e e1       	ldi	r24, 0x1E	; 30
    4ee4:	c8 2e       	mov	r12, r24
    4ee6:	d1 2c       	mov	r13, r1
    4ee8:	dc 82       	std	Y+4, r13	; 0x04
    4eea:	cb 82       	std	Y+3, r12	; 0x03
    4eec:	ed 82       	std	Y+5, r14	; 0x05
    4eee:	fe 82       	std	Y+6, r15	; 0x06
    4ef0:	0f 83       	std	Y+7, r16	; 0x07
    4ef2:	18 87       	std	Y+8, r17	; 0x08
    4ef4:	c8 01       	movw	r24, r16
    4ef6:	b7 01       	movw	r22, r14
    4ef8:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__clzsi2>
    4efc:	01 97       	sbiw	r24, 0x01	; 1
    4efe:	18 16       	cp	r1, r24
    4f00:	19 06       	cpc	r1, r25
    4f02:	84 f4       	brge	.+32     	; 0x4f24 <__floatsisf+0xaa>
    4f04:	08 2e       	mov	r0, r24
    4f06:	04 c0       	rjmp	.+8      	; 0x4f10 <__floatsisf+0x96>
    4f08:	ee 0c       	add	r14, r14
    4f0a:	ff 1c       	adc	r15, r15
    4f0c:	00 1f       	adc	r16, r16
    4f0e:	11 1f       	adc	r17, r17
    4f10:	0a 94       	dec	r0
    4f12:	d2 f7       	brpl	.-12     	; 0x4f08 <__floatsisf+0x8e>
    4f14:	ed 82       	std	Y+5, r14	; 0x05
    4f16:	fe 82       	std	Y+6, r15	; 0x06
    4f18:	0f 83       	std	Y+7, r16	; 0x07
    4f1a:	18 87       	std	Y+8, r17	; 0x08
    4f1c:	c8 1a       	sub	r12, r24
    4f1e:	d9 0a       	sbc	r13, r25
    4f20:	dc 82       	std	Y+4, r13	; 0x04
    4f22:	cb 82       	std	Y+3, r12	; 0x03
    4f24:	ba 82       	std	Y+2, r11	; 0x02
    4f26:	ce 01       	movw	r24, r28
    4f28:	01 96       	adiw	r24, 0x01	; 1
    4f2a:	0e 94 3e 28 	call	0x507c	; 0x507c <__pack_f>
    4f2e:	28 96       	adiw	r28, 0x08	; 8
    4f30:	e9 e0       	ldi	r30, 0x09	; 9
    4f32:	0c 94 b0 29 	jmp	0x5360	; 0x5360 <__epilogue_restores__+0x12>

00004f36 <__fixsfsi>:
    4f36:	ac e0       	ldi	r26, 0x0C	; 12
    4f38:	b0 e0       	ldi	r27, 0x00	; 0
    4f3a:	e1 ea       	ldi	r30, 0xA1	; 161
    4f3c:	f7 e2       	ldi	r31, 0x27	; 39
    4f3e:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__prologue_saves__+0x20>
    4f42:	69 83       	std	Y+1, r22	; 0x01
    4f44:	7a 83       	std	Y+2, r23	; 0x02
    4f46:	8b 83       	std	Y+3, r24	; 0x03
    4f48:	9c 83       	std	Y+4, r25	; 0x04
    4f4a:	ce 01       	movw	r24, r28
    4f4c:	01 96       	adiw	r24, 0x01	; 1
    4f4e:	be 01       	movw	r22, r28
    4f50:	6b 5f       	subi	r22, 0xFB	; 251
    4f52:	7f 4f       	sbci	r23, 0xFF	; 255
    4f54:	0e 94 13 29 	call	0x5226	; 0x5226 <__unpack_f>
    4f58:	8d 81       	ldd	r24, Y+5	; 0x05
    4f5a:	82 30       	cpi	r24, 0x02	; 2
    4f5c:	61 f1       	breq	.+88     	; 0x4fb6 <__fixsfsi+0x80>
    4f5e:	82 30       	cpi	r24, 0x02	; 2
    4f60:	50 f1       	brcs	.+84     	; 0x4fb6 <__fixsfsi+0x80>
    4f62:	84 30       	cpi	r24, 0x04	; 4
    4f64:	21 f4       	brne	.+8      	; 0x4f6e <__fixsfsi+0x38>
    4f66:	8e 81       	ldd	r24, Y+6	; 0x06
    4f68:	88 23       	and	r24, r24
    4f6a:	51 f1       	breq	.+84     	; 0x4fc0 <__fixsfsi+0x8a>
    4f6c:	2e c0       	rjmp	.+92     	; 0x4fca <__fixsfsi+0x94>
    4f6e:	2f 81       	ldd	r18, Y+7	; 0x07
    4f70:	38 85       	ldd	r19, Y+8	; 0x08
    4f72:	37 fd       	sbrc	r19, 7
    4f74:	20 c0       	rjmp	.+64     	; 0x4fb6 <__fixsfsi+0x80>
    4f76:	6e 81       	ldd	r22, Y+6	; 0x06
    4f78:	2f 31       	cpi	r18, 0x1F	; 31
    4f7a:	31 05       	cpc	r19, r1
    4f7c:	1c f0       	brlt	.+6      	; 0x4f84 <__fixsfsi+0x4e>
    4f7e:	66 23       	and	r22, r22
    4f80:	f9 f0       	breq	.+62     	; 0x4fc0 <__fixsfsi+0x8a>
    4f82:	23 c0       	rjmp	.+70     	; 0x4fca <__fixsfsi+0x94>
    4f84:	8e e1       	ldi	r24, 0x1E	; 30
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	82 1b       	sub	r24, r18
    4f8a:	93 0b       	sbc	r25, r19
    4f8c:	29 85       	ldd	r18, Y+9	; 0x09
    4f8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f90:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f92:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f94:	04 c0       	rjmp	.+8      	; 0x4f9e <__fixsfsi+0x68>
    4f96:	56 95       	lsr	r21
    4f98:	47 95       	ror	r20
    4f9a:	37 95       	ror	r19
    4f9c:	27 95       	ror	r18
    4f9e:	8a 95       	dec	r24
    4fa0:	d2 f7       	brpl	.-12     	; 0x4f96 <__fixsfsi+0x60>
    4fa2:	66 23       	and	r22, r22
    4fa4:	b1 f0       	breq	.+44     	; 0x4fd2 <__fixsfsi+0x9c>
    4fa6:	50 95       	com	r21
    4fa8:	40 95       	com	r20
    4faa:	30 95       	com	r19
    4fac:	21 95       	neg	r18
    4fae:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb0:	4f 4f       	sbci	r20, 0xFF	; 255
    4fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    4fb4:	0e c0       	rjmp	.+28     	; 0x4fd2 <__fixsfsi+0x9c>
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	40 e0       	ldi	r20, 0x00	; 0
    4fbc:	50 e0       	ldi	r21, 0x00	; 0
    4fbe:	09 c0       	rjmp	.+18     	; 0x4fd2 <__fixsfsi+0x9c>
    4fc0:	2f ef       	ldi	r18, 0xFF	; 255
    4fc2:	3f ef       	ldi	r19, 0xFF	; 255
    4fc4:	4f ef       	ldi	r20, 0xFF	; 255
    4fc6:	5f e7       	ldi	r21, 0x7F	; 127
    4fc8:	04 c0       	rjmp	.+8      	; 0x4fd2 <__fixsfsi+0x9c>
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e0       	ldi	r20, 0x00	; 0
    4fd0:	50 e8       	ldi	r21, 0x80	; 128
    4fd2:	b9 01       	movw	r22, r18
    4fd4:	ca 01       	movw	r24, r20
    4fd6:	2c 96       	adiw	r28, 0x0c	; 12
    4fd8:	e2 e0       	ldi	r30, 0x02	; 2
    4fda:	0c 94 b7 29 	jmp	0x536e	; 0x536e <__epilogue_restores__+0x20>

00004fde <__clzsi2>:
    4fde:	ef 92       	push	r14
    4fe0:	ff 92       	push	r15
    4fe2:	0f 93       	push	r16
    4fe4:	1f 93       	push	r17
    4fe6:	7b 01       	movw	r14, r22
    4fe8:	8c 01       	movw	r16, r24
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	e8 16       	cp	r14, r24
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	f8 06       	cpc	r15, r24
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	08 07       	cpc	r16, r24
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	18 07       	cpc	r17, r24
    4ffa:	88 f4       	brcc	.+34     	; 0x501e <__clzsi2+0x40>
    4ffc:	8f ef       	ldi	r24, 0xFF	; 255
    4ffe:	e8 16       	cp	r14, r24
    5000:	f1 04       	cpc	r15, r1
    5002:	01 05       	cpc	r16, r1
    5004:	11 05       	cpc	r17, r1
    5006:	31 f0       	breq	.+12     	; 0x5014 <__clzsi2+0x36>
    5008:	28 f0       	brcs	.+10     	; 0x5014 <__clzsi2+0x36>
    500a:	88 e0       	ldi	r24, 0x08	; 8
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	a0 e0       	ldi	r26, 0x00	; 0
    5010:	b0 e0       	ldi	r27, 0x00	; 0
    5012:	17 c0       	rjmp	.+46     	; 0x5042 <__clzsi2+0x64>
    5014:	80 e0       	ldi	r24, 0x00	; 0
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	a0 e0       	ldi	r26, 0x00	; 0
    501a:	b0 e0       	ldi	r27, 0x00	; 0
    501c:	12 c0       	rjmp	.+36     	; 0x5042 <__clzsi2+0x64>
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	e8 16       	cp	r14, r24
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	f8 06       	cpc	r15, r24
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	08 07       	cpc	r16, r24
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	18 07       	cpc	r17, r24
    502e:	28 f0       	brcs	.+10     	; 0x503a <__clzsi2+0x5c>
    5030:	88 e1       	ldi	r24, 0x18	; 24
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	a0 e0       	ldi	r26, 0x00	; 0
    5036:	b0 e0       	ldi	r27, 0x00	; 0
    5038:	04 c0       	rjmp	.+8      	; 0x5042 <__clzsi2+0x64>
    503a:	80 e1       	ldi	r24, 0x10	; 16
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	a0 e0       	ldi	r26, 0x00	; 0
    5040:	b0 e0       	ldi	r27, 0x00	; 0
    5042:	20 e2       	ldi	r18, 0x20	; 32
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	40 e0       	ldi	r20, 0x00	; 0
    5048:	50 e0       	ldi	r21, 0x00	; 0
    504a:	28 1b       	sub	r18, r24
    504c:	39 0b       	sbc	r19, r25
    504e:	4a 0b       	sbc	r20, r26
    5050:	5b 0b       	sbc	r21, r27
    5052:	04 c0       	rjmp	.+8      	; 0x505c <__clzsi2+0x7e>
    5054:	16 95       	lsr	r17
    5056:	07 95       	ror	r16
    5058:	f7 94       	ror	r15
    505a:	e7 94       	ror	r14
    505c:	8a 95       	dec	r24
    505e:	d2 f7       	brpl	.-12     	; 0x5054 <__clzsi2+0x76>
    5060:	f7 01       	movw	r30, r14
    5062:	e1 5f       	subi	r30, 0xF1	; 241
    5064:	fe 4f       	sbci	r31, 0xFE	; 254
    5066:	80 81       	ld	r24, Z
    5068:	28 1b       	sub	r18, r24
    506a:	31 09       	sbc	r19, r1
    506c:	41 09       	sbc	r20, r1
    506e:	51 09       	sbc	r21, r1
    5070:	c9 01       	movw	r24, r18
    5072:	1f 91       	pop	r17
    5074:	0f 91       	pop	r16
    5076:	ff 90       	pop	r15
    5078:	ef 90       	pop	r14
    507a:	08 95       	ret

0000507c <__pack_f>:
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	fc 01       	movw	r30, r24
    5088:	e4 80       	ldd	r14, Z+4	; 0x04
    508a:	f5 80       	ldd	r15, Z+5	; 0x05
    508c:	06 81       	ldd	r16, Z+6	; 0x06
    508e:	17 81       	ldd	r17, Z+7	; 0x07
    5090:	d1 80       	ldd	r13, Z+1	; 0x01
    5092:	80 81       	ld	r24, Z
    5094:	82 30       	cpi	r24, 0x02	; 2
    5096:	48 f4       	brcc	.+18     	; 0x50aa <__pack_f+0x2e>
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	a0 e1       	ldi	r26, 0x10	; 16
    509e:	b0 e0       	ldi	r27, 0x00	; 0
    50a0:	e8 2a       	or	r14, r24
    50a2:	f9 2a       	or	r15, r25
    50a4:	0a 2b       	or	r16, r26
    50a6:	1b 2b       	or	r17, r27
    50a8:	a5 c0       	rjmp	.+330    	; 0x51f4 <__pack_f+0x178>
    50aa:	84 30       	cpi	r24, 0x04	; 4
    50ac:	09 f4       	brne	.+2      	; 0x50b0 <__pack_f+0x34>
    50ae:	9f c0       	rjmp	.+318    	; 0x51ee <__pack_f+0x172>
    50b0:	82 30       	cpi	r24, 0x02	; 2
    50b2:	21 f4       	brne	.+8      	; 0x50bc <__pack_f+0x40>
    50b4:	ee 24       	eor	r14, r14
    50b6:	ff 24       	eor	r15, r15
    50b8:	87 01       	movw	r16, r14
    50ba:	05 c0       	rjmp	.+10     	; 0x50c6 <__pack_f+0x4a>
    50bc:	e1 14       	cp	r14, r1
    50be:	f1 04       	cpc	r15, r1
    50c0:	01 05       	cpc	r16, r1
    50c2:	11 05       	cpc	r17, r1
    50c4:	19 f4       	brne	.+6      	; 0x50cc <__pack_f+0x50>
    50c6:	e0 e0       	ldi	r30, 0x00	; 0
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	96 c0       	rjmp	.+300    	; 0x51f8 <__pack_f+0x17c>
    50cc:	62 81       	ldd	r22, Z+2	; 0x02
    50ce:	73 81       	ldd	r23, Z+3	; 0x03
    50d0:	9f ef       	ldi	r25, 0xFF	; 255
    50d2:	62 38       	cpi	r22, 0x82	; 130
    50d4:	79 07       	cpc	r23, r25
    50d6:	0c f0       	brlt	.+2      	; 0x50da <__pack_f+0x5e>
    50d8:	5b c0       	rjmp	.+182    	; 0x5190 <__pack_f+0x114>
    50da:	22 e8       	ldi	r18, 0x82	; 130
    50dc:	3f ef       	ldi	r19, 0xFF	; 255
    50de:	26 1b       	sub	r18, r22
    50e0:	37 0b       	sbc	r19, r23
    50e2:	2a 31       	cpi	r18, 0x1A	; 26
    50e4:	31 05       	cpc	r19, r1
    50e6:	2c f0       	brlt	.+10     	; 0x50f2 <__pack_f+0x76>
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	50 e0       	ldi	r21, 0x00	; 0
    50f0:	2a c0       	rjmp	.+84     	; 0x5146 <__pack_f+0xca>
    50f2:	b8 01       	movw	r22, r16
    50f4:	a7 01       	movw	r20, r14
    50f6:	02 2e       	mov	r0, r18
    50f8:	04 c0       	rjmp	.+8      	; 0x5102 <__pack_f+0x86>
    50fa:	76 95       	lsr	r23
    50fc:	67 95       	ror	r22
    50fe:	57 95       	ror	r21
    5100:	47 95       	ror	r20
    5102:	0a 94       	dec	r0
    5104:	d2 f7       	brpl	.-12     	; 0x50fa <__pack_f+0x7e>
    5106:	81 e0       	ldi	r24, 0x01	; 1
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	a0 e0       	ldi	r26, 0x00	; 0
    510c:	b0 e0       	ldi	r27, 0x00	; 0
    510e:	04 c0       	rjmp	.+8      	; 0x5118 <__pack_f+0x9c>
    5110:	88 0f       	add	r24, r24
    5112:	99 1f       	adc	r25, r25
    5114:	aa 1f       	adc	r26, r26
    5116:	bb 1f       	adc	r27, r27
    5118:	2a 95       	dec	r18
    511a:	d2 f7       	brpl	.-12     	; 0x5110 <__pack_f+0x94>
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	a1 09       	sbc	r26, r1
    5120:	b1 09       	sbc	r27, r1
    5122:	8e 21       	and	r24, r14
    5124:	9f 21       	and	r25, r15
    5126:	a0 23       	and	r26, r16
    5128:	b1 23       	and	r27, r17
    512a:	00 97       	sbiw	r24, 0x00	; 0
    512c:	a1 05       	cpc	r26, r1
    512e:	b1 05       	cpc	r27, r1
    5130:	21 f0       	breq	.+8      	; 0x513a <__pack_f+0xbe>
    5132:	81 e0       	ldi	r24, 0x01	; 1
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	a0 e0       	ldi	r26, 0x00	; 0
    5138:	b0 e0       	ldi	r27, 0x00	; 0
    513a:	9a 01       	movw	r18, r20
    513c:	ab 01       	movw	r20, r22
    513e:	28 2b       	or	r18, r24
    5140:	39 2b       	or	r19, r25
    5142:	4a 2b       	or	r20, r26
    5144:	5b 2b       	or	r21, r27
    5146:	da 01       	movw	r26, r20
    5148:	c9 01       	movw	r24, r18
    514a:	8f 77       	andi	r24, 0x7F	; 127
    514c:	90 70       	andi	r25, 0x00	; 0
    514e:	a0 70       	andi	r26, 0x00	; 0
    5150:	b0 70       	andi	r27, 0x00	; 0
    5152:	80 34       	cpi	r24, 0x40	; 64
    5154:	91 05       	cpc	r25, r1
    5156:	a1 05       	cpc	r26, r1
    5158:	b1 05       	cpc	r27, r1
    515a:	39 f4       	brne	.+14     	; 0x516a <__pack_f+0xee>
    515c:	27 ff       	sbrs	r18, 7
    515e:	09 c0       	rjmp	.+18     	; 0x5172 <__pack_f+0xf6>
    5160:	20 5c       	subi	r18, 0xC0	; 192
    5162:	3f 4f       	sbci	r19, 0xFF	; 255
    5164:	4f 4f       	sbci	r20, 0xFF	; 255
    5166:	5f 4f       	sbci	r21, 0xFF	; 255
    5168:	04 c0       	rjmp	.+8      	; 0x5172 <__pack_f+0xf6>
    516a:	21 5c       	subi	r18, 0xC1	; 193
    516c:	3f 4f       	sbci	r19, 0xFF	; 255
    516e:	4f 4f       	sbci	r20, 0xFF	; 255
    5170:	5f 4f       	sbci	r21, 0xFF	; 255
    5172:	e0 e0       	ldi	r30, 0x00	; 0
    5174:	f0 e0       	ldi	r31, 0x00	; 0
    5176:	20 30       	cpi	r18, 0x00	; 0
    5178:	a0 e0       	ldi	r26, 0x00	; 0
    517a:	3a 07       	cpc	r19, r26
    517c:	a0 e0       	ldi	r26, 0x00	; 0
    517e:	4a 07       	cpc	r20, r26
    5180:	a0 e4       	ldi	r26, 0x40	; 64
    5182:	5a 07       	cpc	r21, r26
    5184:	10 f0       	brcs	.+4      	; 0x518a <__pack_f+0x10e>
    5186:	e1 e0       	ldi	r30, 0x01	; 1
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	79 01       	movw	r14, r18
    518c:	8a 01       	movw	r16, r20
    518e:	27 c0       	rjmp	.+78     	; 0x51de <__pack_f+0x162>
    5190:	60 38       	cpi	r22, 0x80	; 128
    5192:	71 05       	cpc	r23, r1
    5194:	64 f5       	brge	.+88     	; 0x51ee <__pack_f+0x172>
    5196:	fb 01       	movw	r30, r22
    5198:	e1 58       	subi	r30, 0x81	; 129
    519a:	ff 4f       	sbci	r31, 0xFF	; 255
    519c:	d8 01       	movw	r26, r16
    519e:	c7 01       	movw	r24, r14
    51a0:	8f 77       	andi	r24, 0x7F	; 127
    51a2:	90 70       	andi	r25, 0x00	; 0
    51a4:	a0 70       	andi	r26, 0x00	; 0
    51a6:	b0 70       	andi	r27, 0x00	; 0
    51a8:	80 34       	cpi	r24, 0x40	; 64
    51aa:	91 05       	cpc	r25, r1
    51ac:	a1 05       	cpc	r26, r1
    51ae:	b1 05       	cpc	r27, r1
    51b0:	39 f4       	brne	.+14     	; 0x51c0 <__pack_f+0x144>
    51b2:	e7 fe       	sbrs	r14, 7
    51b4:	0d c0       	rjmp	.+26     	; 0x51d0 <__pack_f+0x154>
    51b6:	80 e4       	ldi	r24, 0x40	; 64
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	a0 e0       	ldi	r26, 0x00	; 0
    51bc:	b0 e0       	ldi	r27, 0x00	; 0
    51be:	04 c0       	rjmp	.+8      	; 0x51c8 <__pack_f+0x14c>
    51c0:	8f e3       	ldi	r24, 0x3F	; 63
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	a0 e0       	ldi	r26, 0x00	; 0
    51c6:	b0 e0       	ldi	r27, 0x00	; 0
    51c8:	e8 0e       	add	r14, r24
    51ca:	f9 1e       	adc	r15, r25
    51cc:	0a 1f       	adc	r16, r26
    51ce:	1b 1f       	adc	r17, r27
    51d0:	17 ff       	sbrs	r17, 7
    51d2:	05 c0       	rjmp	.+10     	; 0x51de <__pack_f+0x162>
    51d4:	16 95       	lsr	r17
    51d6:	07 95       	ror	r16
    51d8:	f7 94       	ror	r15
    51da:	e7 94       	ror	r14
    51dc:	31 96       	adiw	r30, 0x01	; 1
    51de:	87 e0       	ldi	r24, 0x07	; 7
    51e0:	16 95       	lsr	r17
    51e2:	07 95       	ror	r16
    51e4:	f7 94       	ror	r15
    51e6:	e7 94       	ror	r14
    51e8:	8a 95       	dec	r24
    51ea:	d1 f7       	brne	.-12     	; 0x51e0 <__pack_f+0x164>
    51ec:	05 c0       	rjmp	.+10     	; 0x51f8 <__pack_f+0x17c>
    51ee:	ee 24       	eor	r14, r14
    51f0:	ff 24       	eor	r15, r15
    51f2:	87 01       	movw	r16, r14
    51f4:	ef ef       	ldi	r30, 0xFF	; 255
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	6e 2f       	mov	r22, r30
    51fa:	67 95       	ror	r22
    51fc:	66 27       	eor	r22, r22
    51fe:	67 95       	ror	r22
    5200:	90 2f       	mov	r25, r16
    5202:	9f 77       	andi	r25, 0x7F	; 127
    5204:	d7 94       	ror	r13
    5206:	dd 24       	eor	r13, r13
    5208:	d7 94       	ror	r13
    520a:	8e 2f       	mov	r24, r30
    520c:	86 95       	lsr	r24
    520e:	49 2f       	mov	r20, r25
    5210:	46 2b       	or	r20, r22
    5212:	58 2f       	mov	r21, r24
    5214:	5d 29       	or	r21, r13
    5216:	b7 01       	movw	r22, r14
    5218:	ca 01       	movw	r24, r20
    521a:	1f 91       	pop	r17
    521c:	0f 91       	pop	r16
    521e:	ff 90       	pop	r15
    5220:	ef 90       	pop	r14
    5222:	df 90       	pop	r13
    5224:	08 95       	ret

00005226 <__unpack_f>:
    5226:	fc 01       	movw	r30, r24
    5228:	db 01       	movw	r26, r22
    522a:	40 81       	ld	r20, Z
    522c:	51 81       	ldd	r21, Z+1	; 0x01
    522e:	22 81       	ldd	r18, Z+2	; 0x02
    5230:	62 2f       	mov	r22, r18
    5232:	6f 77       	andi	r22, 0x7F	; 127
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	22 1f       	adc	r18, r18
    5238:	22 27       	eor	r18, r18
    523a:	22 1f       	adc	r18, r18
    523c:	93 81       	ldd	r25, Z+3	; 0x03
    523e:	89 2f       	mov	r24, r25
    5240:	88 0f       	add	r24, r24
    5242:	82 2b       	or	r24, r18
    5244:	28 2f       	mov	r18, r24
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	99 1f       	adc	r25, r25
    524a:	99 27       	eor	r25, r25
    524c:	99 1f       	adc	r25, r25
    524e:	11 96       	adiw	r26, 0x01	; 1
    5250:	9c 93       	st	X, r25
    5252:	11 97       	sbiw	r26, 0x01	; 1
    5254:	21 15       	cp	r18, r1
    5256:	31 05       	cpc	r19, r1
    5258:	a9 f5       	brne	.+106    	; 0x52c4 <__unpack_f+0x9e>
    525a:	41 15       	cp	r20, r1
    525c:	51 05       	cpc	r21, r1
    525e:	61 05       	cpc	r22, r1
    5260:	71 05       	cpc	r23, r1
    5262:	11 f4       	brne	.+4      	; 0x5268 <__unpack_f+0x42>
    5264:	82 e0       	ldi	r24, 0x02	; 2
    5266:	37 c0       	rjmp	.+110    	; 0x52d6 <__unpack_f+0xb0>
    5268:	82 e8       	ldi	r24, 0x82	; 130
    526a:	9f ef       	ldi	r25, 0xFF	; 255
    526c:	13 96       	adiw	r26, 0x03	; 3
    526e:	9c 93       	st	X, r25
    5270:	8e 93       	st	-X, r24
    5272:	12 97       	sbiw	r26, 0x02	; 2
    5274:	9a 01       	movw	r18, r20
    5276:	ab 01       	movw	r20, r22
    5278:	67 e0       	ldi	r22, 0x07	; 7
    527a:	22 0f       	add	r18, r18
    527c:	33 1f       	adc	r19, r19
    527e:	44 1f       	adc	r20, r20
    5280:	55 1f       	adc	r21, r21
    5282:	6a 95       	dec	r22
    5284:	d1 f7       	brne	.-12     	; 0x527a <__unpack_f+0x54>
    5286:	83 e0       	ldi	r24, 0x03	; 3
    5288:	8c 93       	st	X, r24
    528a:	0d c0       	rjmp	.+26     	; 0x52a6 <__unpack_f+0x80>
    528c:	22 0f       	add	r18, r18
    528e:	33 1f       	adc	r19, r19
    5290:	44 1f       	adc	r20, r20
    5292:	55 1f       	adc	r21, r21
    5294:	12 96       	adiw	r26, 0x02	; 2
    5296:	8d 91       	ld	r24, X+
    5298:	9c 91       	ld	r25, X
    529a:	13 97       	sbiw	r26, 0x03	; 3
    529c:	01 97       	sbiw	r24, 0x01	; 1
    529e:	13 96       	adiw	r26, 0x03	; 3
    52a0:	9c 93       	st	X, r25
    52a2:	8e 93       	st	-X, r24
    52a4:	12 97       	sbiw	r26, 0x02	; 2
    52a6:	20 30       	cpi	r18, 0x00	; 0
    52a8:	80 e0       	ldi	r24, 0x00	; 0
    52aa:	38 07       	cpc	r19, r24
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	48 07       	cpc	r20, r24
    52b0:	80 e4       	ldi	r24, 0x40	; 64
    52b2:	58 07       	cpc	r21, r24
    52b4:	58 f3       	brcs	.-42     	; 0x528c <__unpack_f+0x66>
    52b6:	14 96       	adiw	r26, 0x04	; 4
    52b8:	2d 93       	st	X+, r18
    52ba:	3d 93       	st	X+, r19
    52bc:	4d 93       	st	X+, r20
    52be:	5c 93       	st	X, r21
    52c0:	17 97       	sbiw	r26, 0x07	; 7
    52c2:	08 95       	ret
    52c4:	2f 3f       	cpi	r18, 0xFF	; 255
    52c6:	31 05       	cpc	r19, r1
    52c8:	79 f4       	brne	.+30     	; 0x52e8 <__unpack_f+0xc2>
    52ca:	41 15       	cp	r20, r1
    52cc:	51 05       	cpc	r21, r1
    52ce:	61 05       	cpc	r22, r1
    52d0:	71 05       	cpc	r23, r1
    52d2:	19 f4       	brne	.+6      	; 0x52da <__unpack_f+0xb4>
    52d4:	84 e0       	ldi	r24, 0x04	; 4
    52d6:	8c 93       	st	X, r24
    52d8:	08 95       	ret
    52da:	64 ff       	sbrs	r22, 4
    52dc:	03 c0       	rjmp	.+6      	; 0x52e4 <__unpack_f+0xbe>
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	8c 93       	st	X, r24
    52e2:	12 c0       	rjmp	.+36     	; 0x5308 <__unpack_f+0xe2>
    52e4:	1c 92       	st	X, r1
    52e6:	10 c0       	rjmp	.+32     	; 0x5308 <__unpack_f+0xe2>
    52e8:	2f 57       	subi	r18, 0x7F	; 127
    52ea:	30 40       	sbci	r19, 0x00	; 0
    52ec:	13 96       	adiw	r26, 0x03	; 3
    52ee:	3c 93       	st	X, r19
    52f0:	2e 93       	st	-X, r18
    52f2:	12 97       	sbiw	r26, 0x02	; 2
    52f4:	83 e0       	ldi	r24, 0x03	; 3
    52f6:	8c 93       	st	X, r24
    52f8:	87 e0       	ldi	r24, 0x07	; 7
    52fa:	44 0f       	add	r20, r20
    52fc:	55 1f       	adc	r21, r21
    52fe:	66 1f       	adc	r22, r22
    5300:	77 1f       	adc	r23, r23
    5302:	8a 95       	dec	r24
    5304:	d1 f7       	brne	.-12     	; 0x52fa <__unpack_f+0xd4>
    5306:	70 64       	ori	r23, 0x40	; 64
    5308:	14 96       	adiw	r26, 0x04	; 4
    530a:	4d 93       	st	X+, r20
    530c:	5d 93       	st	X+, r21
    530e:	6d 93       	st	X+, r22
    5310:	7c 93       	st	X, r23
    5312:	17 97       	sbiw	r26, 0x07	; 7
    5314:	08 95       	ret

00005316 <__prologue_saves__>:
    5316:	2f 92       	push	r2
    5318:	3f 92       	push	r3
    531a:	4f 92       	push	r4
    531c:	5f 92       	push	r5
    531e:	6f 92       	push	r6
    5320:	7f 92       	push	r7
    5322:	8f 92       	push	r8
    5324:	9f 92       	push	r9
    5326:	af 92       	push	r10
    5328:	bf 92       	push	r11
    532a:	cf 92       	push	r12
    532c:	df 92       	push	r13
    532e:	ef 92       	push	r14
    5330:	ff 92       	push	r15
    5332:	0f 93       	push	r16
    5334:	1f 93       	push	r17
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	cd b7       	in	r28, 0x3d	; 61
    533c:	de b7       	in	r29, 0x3e	; 62
    533e:	ca 1b       	sub	r28, r26
    5340:	db 0b       	sbc	r29, r27
    5342:	0f b6       	in	r0, 0x3f	; 63
    5344:	f8 94       	cli
    5346:	de bf       	out	0x3e, r29	; 62
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	cd bf       	out	0x3d, r28	; 61
    534c:	09 94       	ijmp

0000534e <__epilogue_restores__>:
    534e:	2a 88       	ldd	r2, Y+18	; 0x12
    5350:	39 88       	ldd	r3, Y+17	; 0x11
    5352:	48 88       	ldd	r4, Y+16	; 0x10
    5354:	5f 84       	ldd	r5, Y+15	; 0x0f
    5356:	6e 84       	ldd	r6, Y+14	; 0x0e
    5358:	7d 84       	ldd	r7, Y+13	; 0x0d
    535a:	8c 84       	ldd	r8, Y+12	; 0x0c
    535c:	9b 84       	ldd	r9, Y+11	; 0x0b
    535e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5360:	b9 84       	ldd	r11, Y+9	; 0x09
    5362:	c8 84       	ldd	r12, Y+8	; 0x08
    5364:	df 80       	ldd	r13, Y+7	; 0x07
    5366:	ee 80       	ldd	r14, Y+6	; 0x06
    5368:	fd 80       	ldd	r15, Y+5	; 0x05
    536a:	0c 81       	ldd	r16, Y+4	; 0x04
    536c:	1b 81       	ldd	r17, Y+3	; 0x03
    536e:	aa 81       	ldd	r26, Y+2	; 0x02
    5370:	b9 81       	ldd	r27, Y+1	; 0x01
    5372:	ce 0f       	add	r28, r30
    5374:	d1 1d       	adc	r29, r1
    5376:	0f b6       	in	r0, 0x3f	; 63
    5378:	f8 94       	cli
    537a:	de bf       	out	0x3e, r29	; 62
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	cd bf       	out	0x3d, r28	; 61
    5380:	ed 01       	movw	r28, r26
    5382:	08 95       	ret

00005384 <_exit>:
    5384:	f8 94       	cli

00005386 <__stop_program>:
    5386:	ff cf       	rjmp	.-2      	; 0x5386 <__stop_program>

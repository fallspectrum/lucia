
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00002d8e  00002e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  00002f32  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00006dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  00007b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00008e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__ctors_end>
       4:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
       8:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
       c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      10:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      14:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      18:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      1c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      20:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      24:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      28:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      2c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      30:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      34:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      38:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      3c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      40:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      44:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      48:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      4c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      50:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      54:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      58:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      5c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      60:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      64:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      68:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      6c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      70:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      74:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      78:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      7c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      80:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      84:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>
      88:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 70 17 05 09 ff 00 00 00 00 00 06 09 00 00 ff     .p..............
      9c:	00 00 00 ff ff 70 17 00 08 08 00 ff 00 00 00 00     .....p..........
      ac:	00 02 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
      bc:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
      cc:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
      dc:	00 26 00 00 00 00 00 00 00 01 00 01 08 08 00 ff     .&..............
      ec:	00 00 00 00 00 01 00 ff 00 ff 00 00 00 01 00 00     ................
      fc:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     10c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     11c:	00 00 00 00 00 26 00 00 00 00 00 00 00 01 00 02     .....&..........
     12c:	08 08 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     13c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     14c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     15c:	00 01 00 00 00 00 00 00 00 26 00 00 00 00 00 00     .........&......
     16c:	00 01 00 03 08 08 00 ff 00 00 00 00 00 02 00 ff     ................
     17c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     18c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     19c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 00     .............&..
     1ac:	00 00 00 00 00 01 00 08 08 08 00 ff 00 00 00 00     ................
     1bc:	00 01 00 ff 00 ff 00 00 00 01 00 00 00 ff 00 00     ................
     1cc:	00 01 00 00 00 ff 00 ff 00 01 00 00 00 00 00 ff     ................
     1dc:	00 01 00 ff 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     1ec:	00 26 00 00 00 00 00 00 00 01 00 09 08 08 00 ff     .&..............
     1fc:	00 00 00 00 00 02 00 ff 00 ff 00 00 00 01 00 00     ................
     20c:	00 ff 00 00 00 01 00 00 00 ff 00 ff 00 01 00 00     ................
     21c:	00 00 00 ff 00 01 00 ff 00 00 00 ff 00 01 00 00     ................
     22c:	00 00 00 00 00 26 00 00 00 00 00 00 00 01 00 0a     .....&..........
     23c:	08 08 00 ff 00 00 00 00 00 02 00 ff 00 ff 00 00     ................
     24c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 ff 00 ff     ................
     25c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 ff     ................
     26c:	00 01 00 00 00 00 00 00 00 26 00 00 00 00 00 00     .........&......
     27c:	00 01 00 0b 08 08 00 ff 00 00 00 00 00 02 00 ff     ................
     28c:	00 ff 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     29c:	00 ff 00 ff 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     2ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 26 00 00     .............&..
     2bc:	00 00 00 00 00 01 00 ff ff 70 17 00 08 03 00 00     .........p......
     2cc:	00 00 00 ff 00 15 00 ff 00 00 00 ff 00 01 00 00     ................
     2dc:	00 00 00 00 00 28 00 01 08 03 00 ff 00 00 00 ff     .....(..........
     2ec:	00 15 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     2fc:	00 2c 00 02 08 03 00 05 00 00 00 00 00 15 00 ff     .,..............
     30c:	00 00 00 00 00 01 00 00 00 00 00 00 00 16 00 ff     ................
	...

0000031e <__ctors_end>:
     31e:	11 24       	eor	r1, r1
     320:	1f be       	out	0x3f, r1	; 63
     322:	cf ef       	ldi	r28, 0xFF	; 255
     324:	d0 e1       	ldi	r29, 0x10	; 16
     326:	de bf       	out	0x3e, r29	; 62
     328:	cd bf       	out	0x3d, r28	; 61

0000032a <__do_copy_data>:
     32a:	12 e0       	ldi	r17, 0x02	; 2
     32c:	a0 e0       	ldi	r26, 0x00	; 0
     32e:	b1 e0       	ldi	r27, 0x01	; 1
     330:	ee e8       	ldi	r30, 0x8E	; 142
     332:	fd e2       	ldi	r31, 0x2D	; 45
     334:	00 e0       	ldi	r16, 0x00	; 0
     336:	0b bf       	out	0x3b, r16	; 59
     338:	02 c0       	rjmp	.+4      	; 0x33e <__do_copy_data+0x14>
     33a:	07 90       	elpm	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	a0 31       	cpi	r26, 0x10	; 16
     340:	b1 07       	cpc	r27, r17
     342:	d9 f7       	brne	.-10     	; 0x33a <__do_copy_data+0x10>

00000344 <__do_clear_bss>:
     344:	1e e0       	ldi	r17, 0x0E	; 14
     346:	a0 e1       	ldi	r26, 0x10	; 16
     348:	b2 e0       	ldi	r27, 0x02	; 2
     34a:	01 c0       	rjmp	.+2      	; 0x34e <.do_clear_bss_start>

0000034c <.do_clear_bss_loop>:
     34c:	1d 92       	st	X+, r1

0000034e <.do_clear_bss_start>:
     34e:	a5 3f       	cpi	r26, 0xF5	; 245
     350:	b1 07       	cpc	r27, r17
     352:	e1 f7       	brne	.-8      	; 0x34c <.do_clear_bss_loop>
     354:	0e 94 00 02 	call	0x400	; 0x400 <main>
     358:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_exit>

0000035c <__bad_interrupt>:
     35c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000360 <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	ee 24       	eor	r14, r14
     374:	ff 24       	eor	r15, r15
     376:	0c c0       	rjmp	.+24     	; 0x390 <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
     378:	80 91 10 02 	lds	r24, 0x0210
     37c:	90 91 11 02 	lds	r25, 0x0211
     380:	0a 97       	sbiw	r24, 0x0a	; 10
     382:	4c f5       	brge	.+82     	; 0x3d6 <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
     384:	0f 5f       	subi	r16, 0xFF	; 255
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	27 96       	adiw	r28, 0x07	; 7
     38a:	0c 30       	cpi	r16, 0x0C	; 12
     38c:	11 05       	cpc	r17, r1
     38e:	79 f0       	breq	.+30     	; 0x3ae <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
     390:	8e 81       	ldd	r24, Y+6	; 0x06
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	89 f3       	breq	.-30     	; 0x378 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
     396:	6c 81       	ldd	r22, Y+4	; 0x04
     398:	7d 81       	ldd	r23, Y+5	; 0x05
     39a:	e8 81       	ld	r30, Y
     39c:	f9 81       	ldd	r31, Y+1	; 0x01
     39e:	c8 01       	movw	r24, r16
     3a0:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
     3a2:	0f 5f       	subi	r16, 0xFF	; 255
     3a4:	1f 4f       	sbci	r17, 0xFF	; 255
     3a6:	27 96       	adiw	r28, 0x07	; 7
     3a8:	0c 30       	cpi	r16, 0x0C	; 12
     3aa:	11 05       	cpc	r17, r1
     3ac:	89 f7       	brne	.-30     	; 0x390 <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	e8 16       	cp	r14, r24
     3b2:	f1 04       	cpc	r15, r1
     3b4:	d1 f0       	breq	.+52     	; 0x3ea <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
     3b6:	80 91 10 02 	lds	r24, 0x0210
     3ba:	90 91 11 02 	lds	r25, 0x0211
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	90 93 11 02 	sts	0x0211, r25
     3c4:	80 93 10 02 	sts	0x0210, r24
	}
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	1f 91       	pop	r17
     3ce:	0f 91       	pop	r16
     3d0:	ff 90       	pop	r15
     3d2:	ef 90       	pop	r14
     3d4:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
     3d6:	6c 81       	ldd	r22, Y+4	; 0x04
     3d8:	7d 81       	ldd	r23, Y+5	; 0x05
     3da:	e8 81       	ld	r30, Y
     3dc:	f9 81       	ldd	r31, Y+1	; 0x01
     3de:	c8 01       	movw	r24, r16
     3e0:	09 95       	icall
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	e8 2e       	mov	r14, r24
     3e6:	f1 2c       	mov	r15, r1
     3e8:	cd cf       	rjmp	.-102    	; 0x384 <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
     3ea:	10 92 11 02 	sts	0x0211, r1
     3ee:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	08 95       	ret

00000400 <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
     400:	2f 92       	push	r2
     402:	3f 92       	push	r3
     404:	4f 92       	push	r4
     406:	5f 92       	push	r5
     408:	6f 92       	push	r6
     40a:	7f 92       	push	r7
     40c:	8f 92       	push	r8
     40e:	9f 92       	push	r9
     410:	af 92       	push	r10
     412:	bf 92       	push	r11
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	df 93       	push	r29
     422:	cf 93       	push	r28
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	c0 56       	subi	r28, 0x60	; 96
     42a:	d0 40       	sbci	r29, 0x00	; 0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
     436:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
     440:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
     442:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
     444:	8b b3       	in	r24, 0x1b	; 27
     446:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
     448:	8e b5       	in	r24, 0x2e	; 46
     44a:	88 60       	ori	r24, 0x08	; 8
     44c:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
     44e:	80 e4       	ldi	r24, 0x40	; 64
     450:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
     452:	80 ea       	ldi	r24, 0xA0	; 160
     454:	9f e0       	ldi	r25, 0x0F	; 15
     456:	9b bd       	out	0x2b, r25	; 43
     458:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
     45a:	8e b5       	in	r24, 0x2e	; 46
     45c:	82 60       	ori	r24, 0x02	; 2
     45e:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
     460:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <initDecoder>
     464:	4d e0       	ldi	r20, 0x0D	; 13
     466:	64 2e       	mov	r6, r20
     468:	71 2c       	mov	r7, r1
     46a:	6c 0e       	add	r6, r28
     46c:	7d 1e       	adc	r7, r29
     46e:	f3 01       	movw	r30, r6
     470:	8d e3       	ldi	r24, 0x3D	; 61
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	9e 01       	movw	r18, r28
     476:	2f 59       	subi	r18, 0x9F	; 159
     478:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
     47a:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
     47c:	62 ea       	ldi	r22, 0xA2	; 162
     47e:	73 e0       	ldi	r23, 0x03	; 3
     480:	71 83       	std	Z+1, r23	; 0x01
     482:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
     484:	93 83       	std	Z+3, r25	; 0x03
     486:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
     488:	15 82       	std	Z+5, r1	; 0x05
     48a:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
     48c:	4b 8b       	std	Y+19, r20	; 0x13
     48e:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
     490:	e2 17       	cp	r30, r18
     492:	f3 07       	cpc	r31, r19
     494:	99 f7       	brne	.-26     	; 0x47c <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
     496:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <getNextGroup>
     49a:	fc 01       	movw	r30, r24
     49c:	ee 24       	eor	r14, r14
     49e:	ff 24       	eor	r15, r15
     4a0:	88 24       	eor	r8, r8
     4a2:	8a 94       	dec	r8
     4a4:	98 2c       	mov	r9, r8
     4a6:	2e 01       	movw	r4, r28
     4a8:	08 94       	sec
     4aa:	41 1c       	adc	r4, r1
     4ac:	51 1c       	adc	r5, r1
     4ae:	aa 24       	eor	r10, r10
     4b0:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
     4b2:	3c e0       	ldi	r19, 0x0C	; 12
     4b4:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
     4b6:	33 24       	eor	r3, r3
     4b8:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
     4ba:	02 81       	ldd	r16, Z+2	; 0x02
     4bc:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
     4be:	d2 01       	movw	r26, r4
     4c0:	e2 2d       	mov	r30, r2
     4c2:	1d 92       	st	X+, r1
     4c4:	ea 95       	dec	r30
     4c6:	e9 f7       	brne	.-6      	; 0x4c2 <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
     4c8:	d8 01       	movw	r26, r16
     4ca:	8c 91       	ld	r24, X
     4cc:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
     4ce:	f2 01       	movw	r30, r4
     4d0:	e8 0f       	add	r30, r24
     4d2:	f9 1f       	adc	r31, r25
     4d4:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
     4d6:	fc 01       	movw	r30, r24
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	e8 1b       	sub	r30, r24
     4e6:	f9 0b       	sbc	r31, r25
     4e8:	e4 0d       	add	r30, r4
     4ea:	f5 1d       	adc	r31, r5
     4ec:	12 96       	adiw	r26, 0x02	; 2
     4ee:	2d 91       	ld	r18, X+
     4f0:	3c 91       	ld	r19, X
     4f2:	13 97       	sbiw	r26, 0x03	; 3
     4f4:	35 87       	std	Z+13, r19	; 0x0d
     4f6:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
     4f8:	16 96       	adiw	r26, 0x06	; 6
     4fa:	6d 91       	ld	r22, X+
     4fc:	7c 91       	ld	r23, X
     4fe:	17 97       	sbiw	r26, 0x07	; 7
     500:	71 8b       	std	Z+17, r23	; 0x11
     502:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
     504:	18 96       	adiw	r26, 0x08	; 8
     506:	2c 91       	ld	r18, X
     508:	18 97       	sbiw	r26, 0x08	; 8
     50a:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
     50c:	14 96       	adiw	r26, 0x04	; 4
     50e:	ed 91       	ld	r30, X+
     510:	fc 91       	ld	r31, X
     512:	15 97       	sbiw	r26, 0x05	; 5
     514:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
     516:	f8 01       	movw	r30, r16
     518:	01 85       	ldd	r16, Z+9	; 0x09
     51a:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
     51c:	01 15       	cp	r16, r1
     51e:	11 05       	cpc	r17, r1
     520:	99 f6       	brne	.-90     	; 0x4c8 <main+0xc8>
     522:	f2 01       	movw	r30, r4
     524:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
     526:	80 81       	ld	r24, Z
     528:	88 23       	and	r24, r24
     52a:	61 f4       	brne	.+24     	; 0x544 <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
     52c:	62 ea       	ldi	r22, 0xA2	; 162
     52e:	73 e0       	ldi	r23, 0x03	; 3
     530:	11 96       	adiw	r26, 0x01	; 1
     532:	7c 93       	st	X, r23
     534:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
     536:	15 96       	adiw	r26, 0x05	; 5
     538:	1c 92       	st	X, r1
     53a:	1e 92       	st	-X, r1
     53c:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
     53e:	16 96       	adiw	r26, 0x06	; 6
     540:	3c 92       	st	X, r3
     542:	16 97       	sbiw	r26, 0x06	; 6
     544:	31 96       	adiw	r30, 0x01	; 1
     546:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
     548:	e6 15       	cp	r30, r6
     54a:	f7 05       	cpc	r31, r7
     54c:	61 f7       	brne	.-40     	; 0x526 <main+0x126>
     54e:	00 e0       	ldi	r16, 0x00	; 0
     550:	10 e0       	ldi	r17, 0x00	; 0
     552:	cc 24       	eor	r12, r12
     554:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
     556:	e1 14       	cp	r14, r1
     558:	f1 04       	cpc	r15, r1
     55a:	19 f4       	brne	.+6      	; 0x562 <main+0x162>
     55c:	88 24       	eor	r8, r8
     55e:	8a 94       	dec	r8
     560:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
     562:	c3 01       	movw	r24, r6
     564:	0e 94 b0 01 	call	0x360	; 0x360 <doEffects>
			waitForTimer();
     568:	0e 94 bf 10 	call	0x217e	; 0x217e <waitForTimer>
			displayColors();
     56c:	0e 94 0c 10 	call	0x2018	; 0x2018 <displayColors>
			deltaTimer++;
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
     574:	0a 30       	cpi	r16, 0x0A	; 10
     576:	11 05       	cpc	r17, r1
     578:	74 f3       	brlt	.-36     	; 0x556 <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
     57a:	80 91 63 00 	lds	r24, 0x0063
     57e:	81 fd       	sbrc	r24, 1
     580:	1a c0       	rjmp	.+52     	; 0x5b6 <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
     582:	ab 28       	or	r10, r11
     584:	09 f4       	brne	.+2      	; 0x588 <main+0x188>
     586:	4d c0       	rjmp	.+154    	; 0x622 <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
     588:	80 91 63 00 	lds	r24, 0x0063
     58c:	80 fd       	sbrc	r24, 0
     58e:	21 c0       	rjmp	.+66     	; 0x5d2 <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
     590:	e0 fe       	sbrs	r14, 0
     592:	59 c0       	rjmp	.+178    	; 0x646 <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
     594:	c1 fe       	sbrs	r12, 1
     596:	29 c0       	rjmp	.+82     	; 0x5ea <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	8b 16       	cp	r8, r27
     59c:	91 04       	cpc	r9, r1
     59e:	b1 f1       	breq	.+108    	; 0x60c <main+0x20c>
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	a2 2e       	mov	r10, r18
     5a4:	b1 2c       	mov	r11, r1
     5a6:	ae 20       	and	r10, r14
     5a8:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
     5ae:	e1 14       	cp	r14, r1
     5b0:	f1 04       	cpc	r15, r1
     5b2:	b9 f6       	brne	.-82     	; 0x562 <main+0x162>
     5b4:	d3 cf       	rjmp	.-90     	; 0x55c <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
     5b6:	ab 28       	or	r10, r11
     5b8:	21 f0       	breq	.+8      	; 0x5c2 <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
     5ba:	a2 e0       	ldi	r26, 0x02	; 2
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	ca 2a       	or	r12, r26
     5c0:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
     5c2:	ed ef       	ldi	r30, 0xFD	; 253
     5c4:	ff ef       	ldi	r31, 0xFF	; 255
     5c6:	ee 22       	and	r14, r30
     5c8:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
     5ca:	80 91 63 00 	lds	r24, 0x0063
     5ce:	80 ff       	sbrs	r24, 0
     5d0:	df cf       	rjmp	.-66     	; 0x590 <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
     5d2:	e0 fe       	sbrs	r14, 0
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	c8 2a       	or	r12, r24
     5dc:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
     5de:	ae ef       	ldi	r26, 0xFE	; 254
     5e0:	bf ef       	ldi	r27, 0xFF	; 255
     5e2:	ea 22       	and	r14, r26
     5e4:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
     5e6:	c1 fc       	sbrc	r12, 1
     5e8:	d7 cf       	rjmp	.-82     	; 0x598 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
     5ea:	c0 fe       	sbrs	r12, 0
     5ec:	d9 cf       	rjmp	.-78     	; 0x5a0 <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
     5ee:	e2 e0       	ldi	r30, 0x02	; 2
     5f0:	8e 16       	cp	r8, r30
     5f2:	91 04       	cpc	r9, r1
     5f4:	a9 f6       	brne	.-86     	; 0x5a0 <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	a9 2e       	mov	r10, r25
     5fa:	b1 2c       	mov	r11, r1
     5fc:	ae 20       	and	r10, r14
     5fe:	bf 20       	and	r11, r15
     600:	e1 fe       	sbrs	r14, 1
     602:	d3 cf       	rjmp	.-90     	; 0x5aa <main+0x1aa>

							groupNew = getNextGroup();
     604:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <getNextGroup>
     608:	fc 01       	movw	r30, r24
     60a:	57 cf       	rjmp	.-338    	; 0x4ba <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
     60c:	e0 fe       	sbrs	r14, 0
     60e:	c8 cf       	rjmp	.-112    	; 0x5a0 <main+0x1a0>
							groupNew = getPreviousGroup();
     610:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <getPreviousGroup>
     614:	fc 01       	movw	r30, r24
     616:	32 e0       	ldi	r19, 0x02	; 2
     618:	a3 2e       	mov	r10, r19
     61a:	b1 2c       	mov	r11, r1
     61c:	ae 20       	and	r10, r14
     61e:	bf 20       	and	r11, r15
     620:	4c cf       	rjmp	.-360    	; 0x4ba <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
     622:	7f ef       	ldi	r23, 0xFF	; 255
     624:	87 16       	cp	r8, r23
     626:	7f ef       	ldi	r23, 0xFF	; 255
     628:	97 06       	cpc	r9, r23
     62a:	11 f1       	breq	.+68     	; 0x670 <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	e8 2a       	or	r14, r24
     632:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
     634:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <getNextGroup>
     638:	fc 01       	movw	r30, r24
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	a6 2e       	mov	r10, r22
     63e:	b1 2c       	mov	r11, r1
     640:	ae 20       	and	r10, r14
     642:	bf 20       	and	r11, r15
     644:	3a cf       	rjmp	.-396    	; 0x4ba <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	e6 2a       	or	r14, r22
     64c:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
     64e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <getPreviousGroup>
     652:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
     654:	7f ef       	ldi	r23, 0xFF	; 255
     656:	87 16       	cp	r8, r23
     658:	7f ef       	ldi	r23, 0xFF	; 255
     65a:	97 06       	cpc	r9, r23
     65c:	e1 f6       	brne	.-72     	; 0x616 <main+0x216>
     65e:	51 e0       	ldi	r21, 0x01	; 1
     660:	85 2e       	mov	r8, r21
     662:	91 2c       	mov	r9, r1
     664:	42 e0       	ldi	r20, 0x02	; 2
     666:	a4 2e       	mov	r10, r20
     668:	b1 2c       	mov	r11, r1
     66a:	ae 20       	and	r10, r14
     66c:	bf 20       	and	r11, r15
     66e:	25 cf       	rjmp	.-438    	; 0x4ba <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
     670:	72 e0       	ldi	r23, 0x02	; 2
     672:	87 2e       	mov	r8, r23
     674:	91 2c       	mov	r9, r1
     676:	da cf       	rjmp	.-76     	; 0x62c <main+0x22c>

00000678 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
     678:	08 95       	ret

0000067a <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
     67a:	08 95       	ret

0000067c <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
     67c:	08 95       	ret

0000067e <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
     67e:	08 95       	ret

00000680 <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
     680:	fc 01       	movw	r30, r24
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	ed 51       	subi	r30, 0x1D	; 29
     68c:	fb 4f       	sbci	r31, 0xFB	; 251
     68e:	11 82       	std	Z+1, r1	; 0x01
     690:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
     692:	13 82       	std	Z+3, r1	; 0x03
     694:	12 82       	std	Z+2, r1	; 0x02
}	
     696:	08 95       	ret

00000698 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	8c 01       	movw	r16, r24
     6a2:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
     6a4:	dc 01       	movw	r26, r24
     6a6:	aa 0f       	add	r26, r26
     6a8:	bb 1f       	adc	r27, r27
     6aa:	aa 0f       	add	r26, r26
     6ac:	bb 1f       	adc	r27, r27
     6ae:	ad 51       	subi	r26, 0x1D	; 29
     6b0:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
     6b2:	6e 5f       	subi	r22, 0xFE	; 254
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	2d 91       	ld	r18, X+
     6ba:	3c 91       	ld	r19, X
     6bc:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
     6be:	4d 91       	ld	r20, X+
     6c0:	5c 91       	ld	r21, X
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	f9 01       	movw	r30, r18
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	e6 0f       	add	r30, r22
     6d4:	f7 1f       	adc	r31, r23
     6d6:	86 81       	ldd	r24, Z+6	; 0x06
     6d8:	97 81       	ldd	r25, Z+7	; 0x07
     6da:	84 17       	cp	r24, r20
     6dc:	95 07       	cpc	r25, r21
     6de:	6c f5       	brge	.+90     	; 0x73a <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
     6e0:	2f 5f       	subi	r18, 0xFF	; 255
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
     6e4:	13 96       	adiw	r26, 0x03	; 3
     6e6:	3c 93       	st	X, r19
     6e8:	2e 93       	st	-X, r18
     6ea:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
     6ec:	88 81       	ld	r24, Y
     6ee:	99 81       	ldd	r25, Y+1	; 0x01
     6f0:	28 17       	cp	r18, r24
     6f2:	39 07       	cpc	r19, r25
     6f4:	24 f0       	brlt	.+8      	; 0x6fe <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
     6f6:	13 96       	adiw	r26, 0x03	; 3
     6f8:	1c 92       	st	X, r1
     6fa:	1e 92       	st	-X, r1
     6fc:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	1c 92       	st	X, r1
     702:	1e 92       	st	-X, r1
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	2d 91       	ld	r18, X+
     708:	3c 91       	ld	r19, X
     70a:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
     70c:	f9 01       	movw	r30, r18
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e6 0f       	add	r30, r22
     71c:	f7 1f       	adc	r31, r23
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	42 81       	ldd	r20, Z+2	; 0x02
     724:	53 81       	ldd	r21, Z+3	; 0x03
     726:	24 81       	ldd	r18, Z+4	; 0x04
     728:	35 81       	ldd	r19, Z+5	; 0x05
     72a:	c8 01       	movw	r24, r16
     72c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
     73a:	4f 5f       	subi	r20, 0xFF	; 255
     73c:	5f 4f       	sbci	r21, 0xFF	; 255
     73e:	4d 93       	st	X+, r20
     740:	5c 93       	st	X, r21
     742:	e4 cf       	rjmp	.-56     	; 0x70c <lightBeamEffect+0x74>

00000744 <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
}
     754:	08 95       	ret

00000756 <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
     756:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
     758:	60 81       	ld	r22, Z
     75a:	71 81       	ldd	r23, Z+1	; 0x01
     75c:	42 81       	ldd	r20, Z+2	; 0x02
     75e:	53 81       	ldd	r21, Z+3	; 0x03
     760:	24 81       	ldd	r18, Z+4	; 0x04
     762:	35 81       	ldd	r19, Z+5	; 0x05
     764:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
}
     768:	08 95       	ret

0000076a <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
     76e:	fc 01       	movw	r30, r24
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	df 01       	movw	r26, r30
     776:	a5 5b       	subi	r26, 0xB5	; 181
     778:	bc 4f       	sbci	r27, 0xFC	; 252
     77a:	1d 92       	st	X+, r1
     77c:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
     77e:	ed 59       	subi	r30, 0x9D	; 157
     780:	fc 4f       	sbci	r31, 0xFC	; 252
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	31 83       	std	Z+1, r19	; 0x01
     788:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
     78a:	fb 01       	movw	r30, r22
     78c:	60 81       	ld	r22, Z
     78e:	71 81       	ldd	r23, Z+1	; 0x01
     790:	42 81       	ldd	r20, Z+2	; 0x02
     792:	53 81       	ldd	r21, Z+3	; 0x03
     794:	24 81       	ldd	r18, Z+4	; 0x04
     796:	35 81       	ldd	r19, Z+5	; 0x05
     798:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
}
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	9c 01       	movw	r18, r24
     7b0:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	8c 01       	movw	r16, r24
     7b8:	05 5b       	subi	r16, 0xB5	; 181
     7ba:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
     7bc:	ec 01       	movw	r28, r24
     7be:	cd 59       	subi	r28, 0x9D	; 157
     7c0:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
     7c2:	60 81       	ld	r22, Z
     7c4:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
     7c6:	42 81       	ldd	r20, Z+2	; 0x02
     7c8:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
     7ca:	e4 80       	ldd	r14, Z+4	; 0x04
     7cc:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
     7ce:	a6 81       	ldd	r26, Z+6	; 0x06
     7d0:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
     7d2:	00 84       	ldd	r0, Z+8	; 0x08
     7d4:	f1 85       	ldd	r31, Z+9	; 0x09
     7d6:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
     7d8:	88 81       	ld	r24, Y
     7da:	99 81       	ldd	r25, Y+1	; 0x01
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	91 05       	cpc	r25, r1
     7e0:	09 f1       	breq	.+66     	; 0x824 <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
     7e2:	89 2b       	or	r24, r25
     7e4:	c1 f4       	brne	.+48     	; 0x816 <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	d8 01       	movw	r26, r16
     7ea:	8d 91       	ld	r24, X+
     7ec:	9c 91       	ld	r25, X
     7ee:	11 97       	sbiw	r26, 0x01	; 1
     7f0:	8e 17       	cp	r24, r30
     7f2:	9f 07       	cpc	r25, r31
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <pwmEffect+0x56>
     7f6:	43 c0       	rjmp	.+134    	; 0x87e <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
     7f8:	c9 01       	movw	r24, r18
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
			*curCounter +=1;
     80a:	f8 01       	movw	r30, r16
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
		}

	}
	
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
     824:	11 97       	sbiw	r26, 0x01	; 1
     826:	f8 01       	movw	r30, r16
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	8a 17       	cp	r24, r26
     82e:	9b 07       	cpc	r25, r27
     830:	a4 f0       	brlt	.+40     	; 0x85a <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
     832:	19 82       	std	Y+1, r1	; 0x01
     834:	18 82       	st	Y, r1
			*curCounter = 0;
     836:	11 82       	std	Z+1, r1	; 0x01
     838:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
     83a:	c9 01       	movw	r24, r18
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
     85a:	c9 01       	movw	r24, r18
     85c:	97 01       	movw	r18, r14
     85e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
			*curCounter += 1;
     862:	d8 01       	movw	r26, r16
     864:	8d 91       	ld	r24, X+
     866:	9c 91       	ld	r25, X
     868:	11 97       	sbiw	r26, 0x01	; 1
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	8d 93       	st	X+, r24
     86e:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	99 83       	std	Y+1, r25	; 0x01
     884:	88 83       	st	Y, r24
			*curCounter = 0;
     886:	1d 92       	st	X+, r1
     888:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
     88a:	c9 01       	movw	r24, r18
     88c:	97 01       	movw	r18, r14
     88e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
     8a0:	2f 92       	push	r2
     8a2:	3f 92       	push	r3
     8a4:	4f 92       	push	r4
     8a6:	5f 92       	push	r5
     8a8:	6f 92       	push	r6
     8aa:	7f 92       	push	r7
     8ac:	8f 92       	push	r8
     8ae:	9f 92       	push	r9
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	6e 97       	sbiw	r28, 0x1e	; 30
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	9e 8f       	std	Y+30, r25	; 0x1e
     8d6:	8d 8f       	std	Y+29, r24	; 0x1d
     8d8:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
     8da:	20 81       	ld	r18, Z
     8dc:	31 81       	ldd	r19, Z+1	; 0x01
     8de:	3c 8f       	std	Y+28, r19	; 0x1c
     8e0:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
     8e2:	82 81       	ldd	r24, Z+2	; 0x02
     8e4:	93 81       	ldd	r25, Z+3	; 0x03
     8e6:	9a 8f       	std	Y+26, r25	; 0x1a
     8e8:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
     8ea:	a4 81       	ldd	r26, Z+4	; 0x04
     8ec:	b5 81       	ldd	r27, Z+5	; 0x05
     8ee:	b8 8f       	std	Y+24, r27	; 0x18
     8f0:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
     8f2:	26 81       	ldd	r18, Z+6	; 0x06
     8f4:	37 81       	ldd	r19, Z+7	; 0x07
     8f6:	3e 8b       	std	Y+22, r19	; 0x16
     8f8:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
     8fa:	80 85       	ldd	r24, Z+8	; 0x08
     8fc:	91 85       	ldd	r25, Z+9	; 0x09
     8fe:	9c 8b       	std	Y+20, r25	; 0x14
     900:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
     902:	a2 85       	ldd	r26, Z+10	; 0x0a
     904:	b3 85       	ldd	r27, Z+11	; 0x0b
     906:	ba 8b       	std	Y+18, r27	; 0x12
     908:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
     90a:	24 85       	ldd	r18, Z+12	; 0x0c
     90c:	35 85       	ldd	r19, Z+13	; 0x0d
     90e:	38 8b       	std	Y+16, r19	; 0x10
     910:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
     912:	8d 8d       	ldd	r24, Y+29	; 0x1d
     914:	9e 8d       	ldd	r25, Y+30	; 0x1e
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	dc 01       	movw	r26, r24
     91c:	ad 5c       	subi	r26, 0xCD	; 205
     91e:	bc 4f       	sbci	r27, 0xFC	; 252
     920:	be 87       	std	Y+14, r27	; 0x0e
     922:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
     924:	fc 01       	movw	r30, r24
     926:	e5 58       	subi	r30, 0x85	; 133
     928:	fc 4f       	sbci	r31, 0xFC	; 252
     92a:	fc 87       	std	Y+12, r31	; 0x0c
     92c:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
     92e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     930:	3e 8d       	ldd	r19, Y+30	; 0x1e
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	dc 01       	movw	r26, r24
     940:	ae 5e       	subi	r26, 0xEE	; 238
     942:	bd 4f       	sbci	r27, 0xFD	; 253
     944:	ba 87       	std	Y+10, r27	; 0x0a
     946:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
     948:	fc 01       	movw	r30, r24
     94a:	ea 5e       	subi	r30, 0xEA	; 234
     94c:	fd 4f       	sbci	r31, 0xFD	; 253
     94e:	f8 87       	std	Y+8, r31	; 0x08
     950:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
     952:	9c 01       	movw	r18, r24
     954:	26 5e       	subi	r18, 0xE6	; 230
     956:	3d 4f       	sbci	r19, 0xFD	; 253
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
     95c:	80 91 ea 02 	lds	r24, 0x02EA
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	09 f4       	brne	.+2      	; 0x966 <fadeBetweenColors+0xc6>
     964:	09 c1       	rjmp	.+530    	; 0xb78 <fadeBetweenColors+0x2d8>
     966:	ab 8d       	ldd	r26, Y+27	; 0x1b
     968:	bc 8d       	ldd	r27, Y+28	; 0x1c
     96a:	bd 01       	movw	r22, r26
     96c:	88 27       	eor	r24, r24
     96e:	77 fd       	sbrc	r23, 7
     970:	80 95       	com	r24
     972:	98 2f       	mov	r25, r24
     974:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     978:	3b 01       	movw	r6, r22
     97a:	4c 01       	movw	r8, r24
     97c:	e9 8d       	ldd	r30, Y+25	; 0x19
     97e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     980:	bf 01       	movw	r22, r30
     982:	88 27       	eor	r24, r24
     984:	77 fd       	sbrc	r23, 7
     986:	80 95       	com	r24
     988:	98 2f       	mov	r25, r24
     98a:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     98e:	1b 01       	movw	r2, r22
     990:	2c 01       	movw	r4, r24
     992:	2f 89       	ldd	r18, Y+23	; 0x17
     994:	38 8d       	ldd	r19, Y+24	; 0x18
     996:	b9 01       	movw	r22, r18
     998:	88 27       	eor	r24, r24
     99a:	77 fd       	sbrc	r23, 7
     99c:	80 95       	com	r24
     99e:	98 2f       	mov	r25, r24
     9a0:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     9a4:	69 83       	std	Y+1, r22	; 0x01
     9a6:	7a 83       	std	Y+2, r23	; 0x02
     9a8:	8b 83       	std	Y+3, r24	; 0x03
     9aa:	9c 83       	std	Y+4, r25	; 0x04
     9ac:	ad 85       	ldd	r26, Y+13	; 0x0d
     9ae:	be 85       	ldd	r27, Y+14	; 0x0e
     9b0:	cd 90       	ld	r12, X+
     9b2:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
     9b4:	ef 85       	ldd	r30, Y+15	; 0x0f
     9b6:	f8 89       	ldd	r31, Y+16	; 0x10
     9b8:	bf 01       	movw	r22, r30
     9ba:	88 27       	eor	r24, r24
     9bc:	77 fd       	sbrc	r23, 7
     9be:	80 95       	com	r24
     9c0:	98 2f       	mov	r25, r24
     9c2:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     9c6:	7b 01       	movw	r14, r22
     9c8:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
     9ca:	b6 01       	movw	r22, r12
     9cc:	88 27       	eor	r24, r24
     9ce:	77 fd       	sbrc	r23, 7
     9d0:	80 95       	com	r24
     9d2:	98 2f       	mov	r25, r24
     9d4:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     9d8:	5b 01       	movw	r10, r22
     9da:	6c 01       	movw	r12, r24
     9dc:	2d 89       	ldd	r18, Y+21	; 0x15
     9de:	3e 89       	ldd	r19, Y+22	; 0x16
     9e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e4:	28 1b       	sub	r18, r24
     9e6:	39 0b       	sbc	r19, r25
     9e8:	b9 01       	movw	r22, r18
     9ea:	88 27       	eor	r24, r24
     9ec:	77 fd       	sbrc	r23, 7
     9ee:	80 95       	com	r24
     9f0:	98 2f       	mov	r25, r24
     9f2:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     9f6:	a8 01       	movw	r20, r16
     9f8:	97 01       	movw	r18, r14
     9fa:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	c6 01       	movw	r24, r12
     a04:	b5 01       	movw	r22, r10
     a06:	0e 94 9a 12 	call	0x2534	; 0x2534 <__mulsf3>
     a0a:	a4 01       	movw	r20, r8
     a0c:	93 01       	movw	r18, r6
     a0e:	0e 94 6d 12 	call	0x24da	; 0x24da <__addsf3>
     a12:	a9 85       	ldd	r26, Y+9	; 0x09
     a14:	ba 85       	ldd	r27, Y+10	; 0x0a
     a16:	6d 93       	st	X+, r22
     a18:	7d 93       	st	X+, r23
     a1a:	8d 93       	st	X+, r24
     a1c:	9c 93       	st	X, r25
     a1e:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
     a20:	eb 89       	ldd	r30, Y+19	; 0x13
     a22:	fc 89       	ldd	r31, Y+20	; 0x14
     a24:	29 8d       	ldd	r18, Y+25	; 0x19
     a26:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a28:	e2 1b       	sub	r30, r18
     a2a:	f3 0b       	sbc	r31, r19
     a2c:	bf 01       	movw	r22, r30
     a2e:	88 27       	eor	r24, r24
     a30:	77 fd       	sbrc	r23, 7
     a32:	80 95       	com	r24
     a34:	98 2f       	mov	r25, r24
     a36:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     a3a:	a8 01       	movw	r20, r16
     a3c:	97 01       	movw	r18, r14
     a3e:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
     a42:	a6 01       	movw	r20, r12
     a44:	95 01       	movw	r18, r10
     a46:	0e 94 9a 12 	call	0x2534	; 0x2534 <__mulsf3>
     a4a:	a2 01       	movw	r20, r4
     a4c:	91 01       	movw	r18, r2
     a4e:	0e 94 6d 12 	call	0x24da	; 0x24da <__addsf3>
     a52:	af 81       	ldd	r26, Y+7	; 0x07
     a54:	b8 85       	ldd	r27, Y+8	; 0x08
     a56:	6d 93       	st	X+, r22
     a58:	7d 93       	st	X+, r23
     a5a:	8d 93       	st	X+, r24
     a5c:	9c 93       	st	X, r25
     a5e:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
     a60:	e9 89       	ldd	r30, Y+17	; 0x11
     a62:	fa 89       	ldd	r31, Y+18	; 0x12
     a64:	2f 89       	ldd	r18, Y+23	; 0x17
     a66:	38 8d       	ldd	r19, Y+24	; 0x18
     a68:	e2 1b       	sub	r30, r18
     a6a:	f3 0b       	sbc	r31, r19
     a6c:	bf 01       	movw	r22, r30
     a6e:	88 27       	eor	r24, r24
     a70:	77 fd       	sbrc	r23, 7
     a72:	80 95       	com	r24
     a74:	98 2f       	mov	r25, r24
     a76:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     a7a:	a8 01       	movw	r20, r16
     a7c:	97 01       	movw	r18, r14
     a7e:	0e 94 94 13 	call	0x2728	; 0x2728 <__divsf3>
     a82:	a6 01       	movw	r20, r12
     a84:	95 01       	movw	r18, r10
     a86:	0e 94 9a 12 	call	0x2534	; 0x2534 <__mulsf3>
     a8a:	29 81       	ldd	r18, Y+1	; 0x01
     a8c:	3a 81       	ldd	r19, Y+2	; 0x02
     a8e:	4b 81       	ldd	r20, Y+3	; 0x03
     a90:	5c 81       	ldd	r21, Y+4	; 0x04
     a92:	0e 94 6d 12 	call	0x24da	; 0x24da <__addsf3>
     a96:	7b 01       	movw	r14, r22
     a98:	8c 01       	movw	r16, r24
     a9a:	ad 81       	ldd	r26, Y+5	; 0x05
     a9c:	be 81       	ldd	r27, Y+6	; 0x06
     a9e:	6d 93       	st	X+, r22
     aa0:	7d 93       	st	X+, r23
     aa2:	8d 93       	st	X+, r24
     aa4:	9c 93       	st	X, r25
     aa6:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
     aa8:	e9 85       	ldd	r30, Y+9	; 0x09
     aaa:	fa 85       	ldd	r31, Y+10	; 0x0a
     aac:	60 81       	ld	r22, Z
     aae:	71 81       	ldd	r23, Z+1	; 0x01
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	0e 94 9e 14 	call	0x293c	; 0x293c <__fixsfsi>
     ab8:	3b 01       	movw	r6, r22
     aba:	4c 01       	movw	r8, r24
     abc:	af 81       	ldd	r26, Y+7	; 0x07
     abe:	b8 85       	ldd	r27, Y+8	; 0x08
     ac0:	6d 91       	ld	r22, X+
     ac2:	7d 91       	ld	r23, X+
     ac4:	8d 91       	ld	r24, X+
     ac6:	9c 91       	ld	r25, X
     ac8:	0e 94 9e 14 	call	0x293c	; 0x293c <__fixsfsi>
     acc:	5b 01       	movw	r10, r22
     ace:	6c 01       	movw	r12, r24
     ad0:	c8 01       	movw	r24, r16
     ad2:	b7 01       	movw	r22, r14
     ad4:	0e 94 9e 14 	call	0x293c	; 0x293c <__fixsfsi>
     ad8:	8b 01       	movw	r16, r22
     ada:	9c 01       	movw	r18, r24
     adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ae0:	b3 01       	movw	r22, r6
     ae2:	a5 01       	movw	r20, r10
     ae4:	98 01       	movw	r18, r16
     ae6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
     aea:	eb 85       	ldd	r30, Y+11	; 0x0b
     aec:	fc 85       	ldd	r31, Y+12	; 0x0c
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	59 f1       	breq	.+86     	; 0xb4c <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
     af6:	ed 85       	ldd	r30, Y+13	; 0x0d
     af8:	fe 85       	ldd	r31, Y+14	; 0x0e
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
     b04:	97 fd       	sbrc	r25, 7
     b06:	19 c0       	rjmp	.+50     	; 0xb3a <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
     b08:	6e 96       	adiw	r28, 0x1e	; 30
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	bf 90       	pop	r11
     b26:	af 90       	pop	r10
     b28:	9f 90       	pop	r9
     b2a:	8f 90       	pop	r8
     b2c:	7f 90       	pop	r7
     b2e:	6f 90       	pop	r6
     b30:	5f 90       	pop	r5
     b32:	4f 90       	pop	r4
     b34:	3f 90       	pop	r3
     b36:	2f 90       	pop	r2
     b38:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
     b3a:	11 82       	std	Z+1, r1	; 0x01
     b3c:	10 82       	st	Z, r1
			*direction = 1;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	ab 85       	ldd	r26, Y+11	; 0x0b
     b44:	bc 85       	ldd	r27, Y+12	; 0x0c
     b46:	8d 93       	st	X+, r24
     b48:	9c 93       	st	X, r25
     b4a:	de cf       	rjmp	.-68     	; 0xb08 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
     b4c:	ad 85       	ldd	r26, Y+13	; 0x0d
     b4e:	be 85       	ldd	r27, Y+14	; 0x0e
     b50:	8d 91       	ld	r24, X+
     b52:	9c 91       	ld	r25, X
     b54:	11 97       	sbiw	r26, 0x01	; 1
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	8d 93       	st	X+, r24
     b5a:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
     b5c:	ef 85       	ldd	r30, Y+15	; 0x0f
     b5e:	f8 89       	ldd	r31, Y+16	; 0x10
     b60:	e8 17       	cp	r30, r24
     b62:	f9 07       	cpc	r31, r25
     b64:	8c f6       	brge	.-94     	; 0xb08 <fadeBetweenColors+0x268>
			*direction = 0;
     b66:	ab 85       	ldd	r26, Y+11	; 0x0b
     b68:	bc 85       	ldd	r27, Y+12	; 0x0c
     b6a:	1d 92       	st	X+, r1
     b6c:	1c 92       	st	X, r1
			*currentStep = stepCount;
     b6e:	ad 85       	ldd	r26, Y+13	; 0x0d
     b70:	be 85       	ldd	r27, Y+14	; 0x0e
     b72:	ed 93       	st	X+, r30
     b74:	fc 93       	st	X, r31
     b76:	c8 cf       	rjmp	.-112    	; 0xb08 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
     b78:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b7a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b7c:	bf 01       	movw	r22, r30
     b7e:	88 27       	eor	r24, r24
     b80:	77 fd       	sbrc	r23, 7
     b82:	80 95       	com	r24
     b84:	98 2f       	mov	r25, r24
     b86:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     b8a:	3b 01       	movw	r6, r22
     b8c:	4c 01       	movw	r8, r24
     b8e:	a9 85       	ldd	r26, Y+9	; 0x09
     b90:	ba 85       	ldd	r27, Y+10	; 0x0a
     b92:	6d 93       	st	X+, r22
     b94:	7d 93       	st	X+, r23
     b96:	8d 93       	st	X+, r24
     b98:	9c 93       	st	X, r25
     b9a:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
     b9c:	e9 8d       	ldd	r30, Y+25	; 0x19
     b9e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ba0:	bf 01       	movw	r22, r30
     ba2:	88 27       	eor	r24, r24
     ba4:	77 fd       	sbrc	r23, 7
     ba6:	80 95       	com	r24
     ba8:	98 2f       	mov	r25, r24
     baa:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     bae:	1b 01       	movw	r2, r22
     bb0:	2c 01       	movw	r4, r24
     bb2:	af 81       	ldd	r26, Y+7	; 0x07
     bb4:	b8 85       	ldd	r27, Y+8	; 0x08
     bb6:	6d 93       	st	X+, r22
     bb8:	7d 93       	st	X+, r23
     bba:	8d 93       	st	X+, r24
     bbc:	9c 93       	st	X, r25
     bbe:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
     bc0:	ef 89       	ldd	r30, Y+23	; 0x17
     bc2:	f8 8d       	ldd	r31, Y+24	; 0x18
     bc4:	bf 01       	movw	r22, r30
     bc6:	88 27       	eor	r24, r24
     bc8:	77 fd       	sbrc	r23, 7
     bca:	80 95       	com	r24
     bcc:	98 2f       	mov	r25, r24
     bce:	0e 94 40 14 	call	0x2880	; 0x2880 <__floatsisf>
     bd2:	69 83       	std	Y+1, r22	; 0x01
     bd4:	7a 83       	std	Y+2, r23	; 0x02
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	9c 83       	std	Y+4, r25	; 0x04
     bda:	ad 81       	ldd	r26, Y+5	; 0x05
     bdc:	be 81       	ldd	r27, Y+6	; 0x06
     bde:	6d 93       	st	X+, r22
     be0:	7d 93       	st	X+, r23
     be2:	8d 93       	st	X+, r24
     be4:	9c 93       	st	X, r25
     be6:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
     be8:	ed 85       	ldd	r30, Y+13	; 0x0d
     bea:	fe 85       	ldd	r31, Y+14	; 0x0e
     bec:	11 82       	std	Z+1, r1	; 0x01
     bee:	10 82       	st	Z, r1
		*direction = 1;	
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	ab 85       	ldd	r26, Y+11	; 0x0b
     bf6:	bc 85       	ldd	r27, Y+12	; 0x0c
     bf8:	8d 93       	st	X+, r24
     bfa:	9c 93       	st	X, r25
     bfc:	cc 24       	eor	r12, r12
     bfe:	dd 24       	eor	r13, r13
     c00:	d9 ce       	rjmp	.-590    	; 0x9b4 <fadeBetweenColors+0x114>

00000c02 <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
     c08:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fadeBetweenColors>
	resetEffect = FALSE;
     c0c:	10 92 ea 02 	sts	0x02EA, r1
}
     c10:	08 95       	ret

00000c12 <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	2e 97       	sbiw	r28, 0x0e	; 14
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	9c 01       	movw	r18, r24
     c2c:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
     c2e:	8c 01       	movw	r16, r24
     c30:	00 0f       	add	r16, r16
     c32:	11 1f       	adc	r17, r17
     c34:	0d 56       	subi	r16, 0x6D	; 109
     c36:	1c 4f       	sbci	r17, 0xFC	; 252
     c38:	d8 01       	movw	r26, r16
     c3a:	8d 91       	ld	r24, X+
     c3c:	9c 91       	ld	r25, X
     c3e:	42 97       	sbiw	r24, 0x12	; 18
     c40:	14 f5       	brge	.+68     	; 0xc86 <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	9c 83       	std	Y+4, r25	; 0x04
     c50:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
     c52:	84 81       	ldd	r24, Z+4	; 0x04
     c54:	95 81       	ldd	r25, Z+5	; 0x05
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
     c5a:	18 86       	std	Y+8, r1	; 0x08
     c5c:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
     c5e:	1a 86       	std	Y+10, r1	; 0x0a
     c60:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
     c62:	1c 86       	std	Y+12, r1	; 0x0c
     c64:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
     c66:	82 e1       	ldi	r24, 0x12	; 18
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9e 87       	std	Y+14, r25	; 0x0e
     c6c:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
     c6e:	c9 01       	movw	r24, r18
     c70:	be 01       	movw	r22, r28
     c72:	6f 5f       	subi	r22, 0xFF	; 255
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	91 83       	std	Z+1, r25	; 0x01
     c84:	80 83       	st	Z, r24
	
}
     c86:	2e 96       	adiw	r28, 0x0e	; 14
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	2e 97       	sbiw	r28, 0x0e	; 14
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
     cb2:	fc 01       	movw	r30, r24
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	ed 56       	subi	r30, 0x6D	; 109
     cba:	fc 4f       	sbci	r31, 0xFC	; 252
     cbc:	11 82       	std	Z+1, r1	; 0x01
     cbe:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
     cc0:	2d 91       	ld	r18, X+
     cc2:	3c 91       	ld	r19, X
     cc4:	11 97       	sbiw	r26, 0x01	; 1
     cc6:	3a 83       	std	Y+2, r19	; 0x02
     cc8:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	2d 91       	ld	r18, X+
     cce:	3c 91       	ld	r19, X
     cd0:	13 97       	sbiw	r26, 0x03	; 3
     cd2:	3c 83       	std	Y+4, r19	; 0x04
     cd4:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	15 97       	sbiw	r26, 0x05	; 5
     cde:	3e 83       	std	Y+6, r19	; 0x06
     ce0:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
     ce2:	18 86       	std	Y+8, r1	; 0x08
     ce4:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
     ce6:	1a 86       	std	Y+10, r1	; 0x0a
     ce8:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
     cea:	1c 86       	std	Y+12, r1	; 0x0c
     cec:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
     cee:	22 e1       	ldi	r18, 0x12	; 18
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3e 87       	std	Y+14, r19	; 0x0e
     cf4:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
     cf6:	21 e0       	ldi	r18, 0x01	; 1
     cf8:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
     cfc:	be 01       	movw	r22, r28
     cfe:	6f 5f       	subi	r22, 0xFF	; 255
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fadeBetweenColors>
	resetEffect=FALSE;
     d06:	10 92 ea 02 	sts	0x02EA, r1
}
     d0a:	2e 96       	adiw	r28, 0x0e	; 14
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	7c 01       	movw	r14, r24
     d2a:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
     d2c:	8c 01       	movw	r16, r24
     d2e:	00 0f       	add	r16, r16
     d30:	11 1f       	adc	r17, r17
     d32:	f8 01       	movw	r30, r16
     d34:	e5 5b       	subi	r30, 0xB5	; 181
     d36:	fc 4f       	sbci	r31, 0xFC	; 252
     d38:	11 82       	std	Z+1, r1	; 0x01
     d3a:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
     d3c:	f8 01       	movw	r30, r16
     d3e:	ed 59       	subi	r30, 0x9D	; 157
     d40:	fc 4f       	sbci	r31, 0xFC	; 252
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
     d4a:	f8 01       	movw	r30, r16
     d4c:	e5 55       	subi	r30, 0x55	; 85
     d4e:	fc 4f       	sbci	r31, 0xFC	; 252
     d50:	11 82       	std	Z+1, r1	; 0x01
     d52:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
     d54:	c7 01       	movw	r24, r14
     d56:	0e 94 b5 03 	call	0x76a	; 0x76a <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
     d5a:	c7 01       	movw	r24, r14
     d5c:	b6 01       	movw	r22, r12
     d5e:	0e 94 01 06 	call	0xc02	; 0xc02 <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
     d62:	0e 0d       	add	r16, r14
     d64:	1f 1d       	adc	r17, r15
     d66:	00 0f       	add	r16, r16
     d68:	11 1f       	adc	r17, r17
     d6a:	0e 55       	subi	r16, 0x5E	; 94
     d6c:	1d 4f       	sbci	r17, 0xFD	; 253
     d6e:	c7 01       	movw	r24, r14
     d70:	b8 01       	movw	r22, r16
     d72:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <getRGBColor>
}
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	08 95       	ret

00000d84 <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	2a 97       	sbiw	r28, 0x0a	; 10
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	6c 01       	movw	r12, r24
     daa:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	8c 01       	movw	r16, r24
     db2:	0c 0d       	add	r16, r12
     db4:	1d 1d       	adc	r17, r13
     db6:	00 0f       	add	r16, r16
     db8:	11 1f       	adc	r17, r17
     dba:	0e 55       	subi	r16, 0x5E	; 94
     dbc:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
     dbe:	5b ea       	ldi	r21, 0xAB	; 171
     dc0:	e5 2e       	mov	r14, r21
     dc2:	53 e0       	ldi	r21, 0x03	; 3
     dc4:	f5 2e       	mov	r15, r21
     dc6:	e8 0e       	add	r14, r24
     dc8:	f9 1e       	adc	r15, r25
     dca:	d7 01       	movw	r26, r14
     dcc:	8d 91       	ld	r24, X+
     dce:	9c 91       	ld	r25, X
     dd0:	8a 30       	cpi	r24, 0x0A	; 10
     dd2:	91 05       	cpc	r25, r1
     dd4:	b4 f5       	brge	.+108    	; 0xe42 <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	d7 01       	movw	r26, r14
     dda:	8d 93       	st	X+, r24
     ddc:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
     dde:	f8 01       	movw	r30, r16
     de0:	22 81       	ldd	r18, Z+2	; 0x02
     de2:	33 81       	ldd	r19, Z+3	; 0x03
     de4:	44 81       	ldd	r20, Z+4	; 0x04
     de6:	55 81       	ldd	r21, Z+5	; 0x05
     de8:	d5 01       	movw	r26, r10
     dea:	1e 96       	adiw	r26, 0x0e	; 14
     dec:	6d 91       	ld	r22, X+
     dee:	7c 91       	ld	r23, X
     df0:	1f 97       	sbiw	r26, 0x0f	; 15
     df2:	50 96       	adiw	r26, 0x10	; 16
     df4:	ed 91       	ld	r30, X+
     df6:	fc 91       	ld	r31, X
     df8:	51 97       	sbiw	r26, 0x11	; 17
     dfa:	d8 01       	movw	r26, r16
     dfc:	8d 91       	ld	r24, X+
     dfe:	9c 91       	ld	r25, X
     e00:	9a 83       	std	Y+2, r25	; 0x02
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	3c 83       	std	Y+4, r19	; 0x04
     e06:	2b 83       	std	Y+3, r18	; 0x03
     e08:	5e 83       	std	Y+6, r21	; 0x06
     e0a:	4d 83       	std	Y+5, r20	; 0x05
     e0c:	78 87       	std	Y+8, r23	; 0x08
     e0e:	6f 83       	std	Y+7, r22	; 0x07
     e10:	fa 87       	std	Y+10, r31	; 0x0a
     e12:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
     e14:	c6 01       	movw	r24, r12
     e16:	be 01       	movw	r22, r28
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <pwmEffect>

	
	
}
     e20:	2a 96       	adiw	r28, 0x0a	; 10
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
     e42:	c6 01       	movw	r24, r12
     e44:	b5 01       	movw	r22, r10
     e46:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
     e4a:	c6 01       	movw	r24, r12
     e4c:	b8 01       	movw	r22, r16
     e4e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
     e52:	f7 01       	movw	r30, r14
     e54:	11 82       	std	Z+1, r1	; 0x01
     e56:	10 82       	st	Z, r1
     e58:	c2 cf       	rjmp	.-124    	; 0xdde <fadeBetweenColorsWithPwm+0x5a>

00000e5a <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	62 97       	sbiw	r28, 0x12	; 18
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	f8 2e       	mov	r15, r24
     e78:	e9 2e       	mov	r14, r25
     e7a:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
     e7c:	1e 96       	adiw	r26, 0x0e	; 14
     e7e:	8d 91       	ld	r24, X+
     e80:	9c 91       	ld	r25, X
     e82:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
     e8a:	a6 c0       	rjmp	.+332    	; 0xfd8 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
     e8c:	89 2b       	or	r24, r25
     e8e:	31 f5       	brne	.+76     	; 0xedc <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
     e90:	8f 2d       	mov	r24, r15
     e92:	9e 2d       	mov	r25, r14
     e94:	fc 01       	movw	r30, r24
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	e8 0f       	add	r30, r24
     ea8:	f9 1f       	adc	r31, r25
     eaa:	e5 59       	subi	r30, 0x95	; 149
     eac:	fb 4f       	sbci	r31, 0xFB	; 251
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
     eb6:	8f 2d       	mov	r24, r15
     eb8:	9e 2d       	mov	r25, r14
     eba:	fc 01       	movw	r30, r24
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	e8 0f       	add	r30, r24
     ece:	f9 1f       	adc	r31, r25
     ed0:	e5 59       	subi	r30, 0x95	; 149
     ed2:	fb 4f       	sbci	r31, 0xFB	; 251
     ed4:	82 e0       	ldi	r24, 0x02	; 2
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	93 83       	std	Z+3, r25	; 0x03
     eda:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
     edc:	8f 2d       	mov	r24, r15
     ede:	9e 2d       	mov	r25, r14
     ee0:	fc 01       	movw	r30, r24
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	e8 0f       	add	r30, r24
     ef4:	f9 1f       	adc	r31, r25
     ef6:	e5 59       	subi	r30, 0x95	; 149
     ef8:	fb 4f       	sbci	r31, 0xFB	; 251
     efa:	15 82       	std	Z+5, r1	; 0x05
     efc:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
     efe:	8f 2d       	mov	r24, r15
     f00:	9e 2d       	mov	r25, r14
     f02:	fc 01       	movw	r30, r24
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	e8 0f       	add	r30, r24
     f16:	f9 1f       	adc	r31, r25
     f18:	e5 59       	subi	r30, 0x95	; 149
     f1a:	fb 4f       	sbci	r31, 0xFB	; 251
     f1c:	50 96       	adiw	r26, 0x10	; 16
     f1e:	8c 91       	ld	r24, X
     f20:	50 97       	sbiw	r26, 0x10	; 16
     f22:	51 96       	adiw	r26, 0x11	; 17
     f24:	9c 91       	ld	r25, X
     f26:	51 97       	sbiw	r26, 0x11	; 17
     f28:	9c 01       	movw	r18, r24
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	28 0f       	add	r18, r24
     f3c:	39 1f       	adc	r19, r25
     f3e:	31 87       	std	Z+9, r19	; 0x09
     f40:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
     f42:	8e 01       	movw	r16, r28
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	c8 01       	movw	r24, r16
     f4a:	bd 01       	movw	r22, r26
     f4c:	47 e0       	ldi	r20, 0x07	; 7
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	0e 94 df 10 	call	0x21be	; 0x21be <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
     f54:	8f 2d       	mov	r24, r15
     f56:	9e 2d       	mov	r25, r14
     f58:	fc 01       	movw	r30, r24
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	e8 0f       	add	r30, r24
     f6c:	f9 1f       	adc	r31, r25
     f6e:	e5 59       	subi	r30, 0x95	; 149
     f70:	fb 4f       	sbci	r31, 0xFB	; 251
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	98 8b       	std	Y+16, r25	; 0x10
     f78:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
     f7a:	8f 2d       	mov	r24, r15
     f7c:	9e 2d       	mov	r25, r14
     f7e:	fc 01       	movw	r30, r24
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	e8 0f       	add	r30, r24
     f92:	f9 1f       	adc	r31, r25
     f94:	e5 59       	subi	r30, 0x95	; 149
     f96:	fb 4f       	sbci	r31, 0xFB	; 251
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	9a 8b       	std	Y+18, r25	; 0x12
     f9e:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
     fa0:	8f 2d       	mov	r24, r15
     fa2:	9e 2d       	mov	r25, r14
     fa4:	b8 01       	movw	r22, r16
     fa6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
     faa:	8f 2d       	mov	r24, r15
     fac:	9e 2d       	mov	r25, r14
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>

}
     fbe:	62 96       	adiw	r28, 0x12	; 18
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
     fd8:	8f 2d       	mov	r24, r15
     fda:	9e 2d       	mov	r25, r14
     fdc:	fc 01       	movw	r30, r24
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	e8 0f       	add	r30, r24
     ff0:	f9 1f       	adc	r31, r25
     ff2:	e5 59       	subi	r30, 0x95	; 149
     ff4:	fb 4f       	sbci	r31, 0xFB	; 251
     ff6:	11 82       	std	Z+1, r1	; 0x01
     ff8:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
     ffa:	8f 2d       	mov	r24, r15
     ffc:	9e 2d       	mov	r25, r14
     ffe:	fc 01       	movw	r30, r24
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	e8 0f       	add	r30, r24
    1012:	f9 1f       	adc	r31, r25
    1014:	e5 59       	subi	r30, 0x95	; 149
    1016:	fb 4f       	sbci	r31, 0xFB	; 251
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	93 83       	std	Z+3, r25	; 0x03
    101e:	82 83       	std	Z+2, r24	; 0x02
    1020:	5d cf       	rjmp	.-326    	; 0xedc <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

00001022 <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	62 97       	sbiw	r28, 0x12	; 18
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	f8 2e       	mov	r15, r24
    1040:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    1042:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    1044:	fb 01       	movw	r30, r22
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    1056:	84 81       	ldd	r24, Z+4	; 0x04
    1058:	95 81       	ldd	r25, Z+5	; 0x05
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    105e:	86 81       	ldd	r24, Z+6	; 0x06
    1060:	97 81       	ldd	r25, Z+7	; 0x07
    1062:	98 87       	std	Y+8, r25	; 0x08
    1064:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    1066:	80 85       	ldd	r24, Z+8	; 0x08
    1068:	91 85       	ldd	r25, Z+9	; 0x09
    106a:	9a 87       	std	Y+10, r25	; 0x0a
    106c:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    106e:	82 85       	ldd	r24, Z+10	; 0x0a
    1070:	93 85       	ldd	r25, Z+11	; 0x0b
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    1076:	82 89       	ldd	r24, Z+18	; 0x12
    1078:	93 89       	ldd	r25, Z+19	; 0x13
    107a:	9e 87       	std	Y+14, r25	; 0x0e
    107c:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    107e:	84 89       	ldd	r24, Z+20	; 0x14
    1080:	95 89       	ldd	r25, Z+21	; 0x15
    1082:	98 8b       	std	Y+16, r25	; 0x10
    1084:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    1086:	86 89       	ldd	r24, Z+22	; 0x16
    1088:	97 89       	ldd	r25, Z+23	; 0x17
    108a:	9a 8b       	std	Y+18, r25	; 0x12
    108c:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    108e:	8f 2d       	mov	r24, r15
    1090:	9e 2d       	mov	r25, r14
    1092:	be 01       	movw	r22, r28
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	0e 94 2d 07 	call	0xe5a	; 0xe5a <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    109c:	a3 ec       	ldi	r26, 0xC3	; 195
    109e:	b3 e0       	ldi	r27, 0x03	; 3
    10a0:	8f 2d       	mov	r24, r15
    10a2:	9e 2d       	mov	r25, r14
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	ee 0f       	add	r30, r30
    10ac:	ff 1f       	adc	r31, r31
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	e8 1b       	sub	r30, r24
    10b8:	f9 0b       	sbc	r31, r25
    10ba:	ea 0f       	add	r30, r26
    10bc:	fb 1f       	adc	r31, r27
    10be:	11 82       	std	Z+1, r1	; 0x01
    10c0:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    10c2:	8f 2d       	mov	r24, r15
    10c4:	9e 2d       	mov	r25, r14
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	fc 01       	movw	r30, r24
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ee 0f       	add	r30, r30
    10d6:	ff 1f       	adc	r31, r31
    10d8:	e8 1b       	sub	r30, r24
    10da:	f9 0b       	sbc	r31, r25
    10dc:	ea 0f       	add	r30, r26
    10de:	fb 1f       	adc	r31, r27
    10e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e4:	95 83       	std	Z+5, r25	; 0x05
    10e6:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    10e8:	8f 2d       	mov	r24, r15
    10ea:	9e 2d       	mov	r25, r14
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	fc 01       	movw	r30, r24
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	e8 1b       	sub	r30, r24
    1100:	f9 0b       	sbc	r31, r25
    1102:	ea 0f       	add	r30, r26
    1104:	fb 1f       	adc	r31, r27
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	93 83       	std	Z+3, r25	; 0x03
    110c:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    110e:	8f 2d       	mov	r24, r15
    1110:	9e 2d       	mov	r25, r14
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	fc 01       	movw	r30, r24
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	e8 1b       	sub	r30, r24
    1126:	f9 0b       	sbc	r31, r25
    1128:	ea 0f       	add	r30, r26
    112a:	fb 1f       	adc	r31, r27
    112c:	17 82       	std	Z+7, r1	; 0x07
    112e:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    1130:	8f 2d       	mov	r24, r15
    1132:	9e 2d       	mov	r25, r14
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	fc 01       	movw	r30, r24
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	e8 1b       	sub	r30, r24
    1148:	f9 0b       	sbc	r31, r25
    114a:	ea 0f       	add	r30, r26
    114c:	fb 1f       	adc	r31, r27
    114e:	13 87       	std	Z+11, r17	; 0x0b
    1150:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    1152:	8f 2d       	mov	r24, r15
    1154:	9e 2d       	mov	r25, r14
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	9c 01       	movw	r18, r24
    115c:	22 0f       	add	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	28 1b       	sub	r18, r24
    116a:	39 0b       	sbc	r19, r25
    116c:	a2 0f       	add	r26, r18
    116e:	b3 1f       	adc	r27, r19
    1170:	0a 5f       	subi	r16, 0xFA	; 250
    1172:	1f 4f       	sbci	r17, 0xFF	; 255
    1174:	1d 96       	adiw	r26, 0x0d	; 13
    1176:	1c 93       	st	X, r17
    1178:	0e 93       	st	-X, r16
    117a:	1c 97       	sbiw	r26, 0x0c	; 12


}
    117c:	62 96       	adiw	r28, 0x12	; 18
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	08 95       	ret

00001196 <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	62 97       	sbiw	r28, 0x12	; 18
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	f8 2e       	mov	r15, r24
    11b4:	e9 2e       	mov	r14, r25
    11b6:	db 01       	movw	r26, r22
	short direction = data[7];
    11b8:	1e 96       	adiw	r26, 0x0e	; 14
    11ba:	6d 91       	ld	r22, X+
    11bc:	7c 91       	ld	r23, X
    11be:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    11c0:	fc 01       	movw	r30, r24
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	e8 0f       	add	r30, r24
    11d4:	f9 1f       	adc	r31, r25
    11d6:	e5 59       	subi	r30, 0x95	; 149
    11d8:	fb 4f       	sbci	r31, 0xFB	; 251
    11da:	40 85       	ldd	r20, Z+8	; 0x08
    11dc:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    11de:	8f 2d       	mov	r24, r15
    11e0:	9e 2d       	mov	r25, r14
    11e2:	fc 01       	movw	r30, r24
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	e8 0f       	add	r30, r24
    11f6:	f9 1f       	adc	r31, r25
    11f8:	e5 59       	subi	r30, 0x95	; 149
    11fa:	fb 4f       	sbci	r31, 0xFB	; 251
    11fc:	86 81       	ldd	r24, Z+6	; 0x06
    11fe:	97 81       	ldd	r25, Z+7	; 0x07
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	09 f4       	brne	.+2      	; 0x1206 <fadeBetweenColorsWithScalingPwmEffect+0x70>
    1204:	aa c0       	rjmp	.+340    	; 0x135a <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    1206:	8f 2d       	mov	r24, r15
    1208:	9e 2d       	mov	r25, r14
    120a:	fc 01       	movw	r30, r24
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	e8 0f       	add	r30, r24
    121e:	f9 1f       	adc	r31, r25
    1220:	e5 59       	subi	r30, 0x95	; 149
    1222:	fb 4f       	sbci	r31, 0xFB	; 251
    1224:	24 81       	ldd	r18, Z+4	; 0x04
    1226:	35 81       	ldd	r19, Z+5	; 0x05
    1228:	24 17       	cp	r18, r20
    122a:	35 07       	cpc	r19, r21
    122c:	0c f0       	brlt	.+2      	; 0x1230 <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    122e:	54 c0       	rjmp	.+168    	; 0x12d8 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    1230:	8f 2d       	mov	r24, r15
    1232:	9e 2d       	mov	r25, r14
    1234:	fc 01       	movw	r30, r24
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	e8 0f       	add	r30, r24
    1248:	f9 1f       	adc	r31, r25
    124a:	e5 59       	subi	r30, 0x95	; 149
    124c:	fb 4f       	sbci	r31, 0xFB	; 251
    124e:	2f 5f       	subi	r18, 0xFF	; 255
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	35 83       	std	Z+5, r19	; 0x05
    1254:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    1256:	8e 01       	movw	r16, r28
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	c8 01       	movw	r24, r16
    125e:	bd 01       	movw	r22, r26
    1260:	47 e0       	ldi	r20, 0x07	; 7
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	0e 94 df 10 	call	0x21be	; 0x21be <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    1268:	8f 2d       	mov	r24, r15
    126a:	9e 2d       	mov	r25, r14
    126c:	fc 01       	movw	r30, r24
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	e8 0f       	add	r30, r24
    1280:	f9 1f       	adc	r31, r25
    1282:	e5 59       	subi	r30, 0x95	; 149
    1284:	fb 4f       	sbci	r31, 0xFB	; 251
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	98 8b       	std	Y+16, r25	; 0x10
    128c:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    128e:	8f 2d       	mov	r24, r15
    1290:	9e 2d       	mov	r25, r14
    1292:	fc 01       	movw	r30, r24
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	e8 0f       	add	r30, r24
    12a6:	f9 1f       	adc	r31, r25
    12a8:	e5 59       	subi	r30, 0x95	; 149
    12aa:	fb 4f       	sbci	r31, 0xFB	; 251
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	9a 8b       	std	Y+18, r25	; 0x12
    12b2:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    12b4:	8f 2d       	mov	r24, r15
    12b6:	9e 2d       	mov	r25, r14
    12b8:	b8 01       	movw	r22, r16
    12ba:	0e 94 c2 06 	call	0xd84	; 0xd84 <fadeBetweenColorsWithPwm>
	

}
    12be:	62 96       	adiw	r28, 0x12	; 18
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    12d8:	8f 2d       	mov	r24, r15
    12da:	9e 2d       	mov	r25, r14
    12dc:	fc 01       	movw	r30, r24
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	e8 0f       	add	r30, r24
    12f0:	f9 1f       	adc	r31, r25
    12f2:	e5 59       	subi	r30, 0x95	; 149
    12f4:	fb 4f       	sbci	r31, 0xFB	; 251
    12f6:	15 82       	std	Z+5, r1	; 0x05
    12f8:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    12fa:	61 30       	cpi	r22, 0x01	; 1
    12fc:	71 05       	cpc	r23, r1
    12fe:	09 f4       	brne	.+2      	; 0x1302 <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    1300:	86 c0       	rjmp	.+268    	; 0x140e <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    1302:	67 2b       	or	r22, r23
    1304:	09 f0       	breq	.+2      	; 0x1308 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    1306:	a7 cf       	rjmp	.-178    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    1308:	8f 2d       	mov	r24, r15
    130a:	9e 2d       	mov	r25, r14
    130c:	fc 01       	movw	r30, r24
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	e8 0f       	add	r30, r24
    1320:	f9 1f       	adc	r31, r25
    1322:	e5 59       	subi	r30, 0x95	; 149
    1324:	fb 4f       	sbci	r31, 0xFB	; 251
    1326:	20 81       	ld	r18, Z
    1328:	31 81       	ldd	r19, Z+1	; 0x01
    132a:	23 30       	cpi	r18, 0x03	; 3
    132c:	31 05       	cpc	r19, r1
    132e:	0c f4       	brge	.+2      	; 0x1332 <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    1330:	97 c0       	rjmp	.+302    	; 0x1460 <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    1332:	8f 2d       	mov	r24, r15
    1334:	9e 2d       	mov	r25, r14
    1336:	fc 01       	movw	r30, r24
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	e8 0f       	add	r30, r24
    134a:	f9 1f       	adc	r31, r25
    134c:	e5 59       	subi	r30, 0x95	; 149
    134e:	fb 4f       	sbci	r31, 0xFB	; 251
    1350:	22 50       	subi	r18, 0x02	; 2
    1352:	30 40       	sbci	r19, 0x00	; 0
    1354:	31 83       	std	Z+1, r19	; 0x01
    1356:	20 83       	st	Z, r18
    1358:	7e cf       	rjmp	.-260    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    135a:	8f 2d       	mov	r24, r15
    135c:	9e 2d       	mov	r25, r14
    135e:	fc 01       	movw	r30, r24
    1360:	ee 0f       	add	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	e8 0f       	add	r30, r24
    1372:	f9 1f       	adc	r31, r25
    1374:	e5 59       	subi	r30, 0x95	; 149
    1376:	fb 4f       	sbci	r31, 0xFB	; 251
    1378:	84 81       	ldd	r24, Z+4	; 0x04
    137a:	95 81       	ldd	r25, Z+5	; 0x05
    137c:	0a 97       	sbiw	r24, 0x0a	; 10
    137e:	0c f1       	brlt	.+66     	; 0x13c2 <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    1380:	61 30       	cpi	r22, 0x01	; 1
    1382:	71 05       	cpc	r23, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    1386:	e6 c0       	rjmp	.+460    	; 0x1554 <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    1388:	67 2b       	or	r22, r23
    138a:	51 f4       	brne	.+20     	; 0x13a0 <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    138c:	8f 2d       	mov	r24, r15
    138e:	9e 2d       	mov	r25, r14
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    13a0:	8f 2d       	mov	r24, r15
    13a2:	9e 2d       	mov	r25, r14
    13a4:	fc 01       	movw	r30, r24
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	e8 0f       	add	r30, r24
    13b8:	f9 1f       	adc	r31, r25
    13ba:	e5 59       	subi	r30, 0x95	; 149
    13bc:	fb 4f       	sbci	r31, 0xFB	; 251
    13be:	15 82       	std	Z+5, r1	; 0x05
    13c0:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    13c2:	8f 2d       	mov	r24, r15
    13c4:	9e 2d       	mov	r25, r14
    13c6:	dc 01       	movw	r26, r24
    13c8:	aa 0f       	add	r26, r26
    13ca:	bb 1f       	adc	r27, r27
    13cc:	aa 0f       	add	r26, r26
    13ce:	bb 1f       	adc	r27, r27
    13d0:	aa 0f       	add	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	a8 0f       	add	r26, r24
    13da:	b9 1f       	adc	r27, r25
    13dc:	a5 59       	subi	r26, 0x95	; 149
    13de:	bb 4f       	sbci	r27, 0xFB	; 251
    13e0:	8f 2d       	mov	r24, r15
    13e2:	9e 2d       	mov	r25, r14
    13e4:	fc 01       	movw	r30, r24
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	e8 0f       	add	r30, r24
    13f8:	f9 1f       	adc	r31, r25
    13fa:	e5 59       	subi	r30, 0x95	; 149
    13fc:	fb 4f       	sbci	r31, 0xFB	; 251
    13fe:	84 81       	ldd	r24, Z+4	; 0x04
    1400:	95 81       	ldd	r25, Z+5	; 0x05
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	15 96       	adiw	r26, 0x05	; 5
    1406:	9c 93       	st	X, r25
    1408:	8e 93       	st	-X, r24
    140a:	14 97       	sbiw	r26, 0x04	; 4
    140c:	58 cf       	rjmp	.-336    	; 0x12be <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    140e:	8f 2d       	mov	r24, r15
    1410:	9e 2d       	mov	r25, r14
    1412:	fc 01       	movw	r30, r24
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	e8 0f       	add	r30, r24
    1426:	f9 1f       	adc	r31, r25
    1428:	e5 59       	subi	r30, 0x95	; 149
    142a:	fb 4f       	sbci	r31, 0xFB	; 251
    142c:	22 81       	ldd	r18, Z+2	; 0x02
    142e:	33 81       	ldd	r19, Z+3	; 0x03
    1430:	23 30       	cpi	r18, 0x03	; 3
    1432:	31 05       	cpc	r19, r1
    1434:	0c f4       	brge	.+2      	; 0x1438 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    1436:	52 c0       	rjmp	.+164    	; 0x14dc <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    1438:	8f 2d       	mov	r24, r15
    143a:	9e 2d       	mov	r25, r14
    143c:	fc 01       	movw	r30, r24
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	e8 0f       	add	r30, r24
    1450:	f9 1f       	adc	r31, r25
    1452:	e5 59       	subi	r30, 0x95	; 149
    1454:	fb 4f       	sbci	r31, 0xFB	; 251
    1456:	22 50       	subi	r18, 0x02	; 2
    1458:	30 40       	sbci	r19, 0x00	; 0
    145a:	33 83       	std	Z+3, r19	; 0x03
    145c:	22 83       	std	Z+2, r18	; 0x02
    145e:	fb ce       	rjmp	.-522    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    1460:	8f 2d       	mov	r24, r15
    1462:	9e 2d       	mov	r25, r14
    1464:	fc 01       	movw	r30, r24
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	e8 0f       	add	r30, r24
    1478:	f9 1f       	adc	r31, r25
    147a:	e5 59       	subi	r30, 0x95	; 149
    147c:	fb 4f       	sbci	r31, 0xFB	; 251
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	80 32       	cpi	r24, 0x20	; 32
    1484:	91 05       	cpc	r25, r1
    1486:	0c f0       	brlt	.+2      	; 0x148a <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    1488:	e6 ce       	rjmp	.-564    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    148a:	02 96       	adiw	r24, 0x02	; 2
    148c:	2f 2d       	mov	r18, r15
    148e:	3e 2d       	mov	r19, r14
    1490:	f9 01       	movw	r30, r18
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	e5 59       	subi	r30, 0x95	; 149
    14a8:	fb 4f       	sbci	r31, 0xFB	; 251
    14aa:	93 83       	std	Z+3, r25	; 0x03
    14ac:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    14ae:	80 97       	sbiw	r24, 0x20	; 32
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    14b2:	d1 ce       	rjmp	.-606    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    14b4:	8f 2d       	mov	r24, r15
    14b6:	9e 2d       	mov	r25, r14
    14b8:	fc 01       	movw	r30, r24
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	e5 59       	subi	r30, 0x95	; 149
    14d0:	fb 4f       	sbci	r31, 0xFB	; 251
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	97 83       	std	Z+7, r25	; 0x07
    14d8:	86 83       	std	Z+6, r24	; 0x06
    14da:	bd ce       	rjmp	.-646    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    14dc:	8f 2d       	mov	r24, r15
    14de:	9e 2d       	mov	r25, r14
    14e0:	fc 01       	movw	r30, r24
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	e8 0f       	add	r30, r24
    14f4:	f9 1f       	adc	r31, r25
    14f6:	e5 59       	subi	r30, 0x95	; 149
    14f8:	fb 4f       	sbci	r31, 0xFB	; 251
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	80 32       	cpi	r24, 0x20	; 32
    1500:	91 05       	cpc	r25, r1
    1502:	0c f0       	brlt	.+2      	; 0x1506 <fadeBetweenColorsWithScalingPwmEffect+0x370>
    1504:	a8 ce       	rjmp	.-688    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    1506:	02 96       	adiw	r24, 0x02	; 2
    1508:	2f 2d       	mov	r18, r15
    150a:	3e 2d       	mov	r19, r14
    150c:	f9 01       	movw	r30, r18
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	ee 0f       	add	r30, r30
    1514:	ff 1f       	adc	r31, r31
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	e2 0f       	add	r30, r18
    1520:	f3 1f       	adc	r31, r19
    1522:	e5 59       	subi	r30, 0x95	; 149
    1524:	fb 4f       	sbci	r31, 0xFB	; 251
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    152a:	80 97       	sbiw	r24, 0x20	; 32
    152c:	09 f0       	breq	.+2      	; 0x1530 <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    152e:	93 ce       	rjmp	.-730    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    1530:	8f 2d       	mov	r24, r15
    1532:	9e 2d       	mov	r25, r14
    1534:	fc 01       	movw	r30, r24
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	ee 0f       	add	r30, r30
    153c:	ff 1f       	adc	r31, r31
    153e:	ee 0f       	add	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	e5 59       	subi	r30, 0x95	; 149
    154c:	fb 4f       	sbci	r31, 0xFB	; 251
    154e:	77 83       	std	Z+7, r23	; 0x07
    1550:	66 83       	std	Z+6, r22	; 0x06
    1552:	81 ce       	rjmp	.-766    	; 0x1256 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    1554:	8f 2d       	mov	r24, r15
    1556:	9e 2d       	mov	r25, r14
    1558:	bd 01       	movw	r22, r26
    155a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <fadeBetweenColors>
    155e:	20 cf       	rjmp	.-448    	; 0x13a0 <fadeBetweenColorsWithScalingPwmEffect+0x20a>

00001560 <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	a6 97       	sbiw	r28, 0x26	; 38
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	f8 2e       	mov	r15, r24
    157e:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    1580:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	fc 01       	movw	r30, r24
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	e8 1b       	sub	r30, r24
    1596:	f9 0b       	sbc	r31, r25
    1598:	ed 53       	subi	r30, 0x3D	; 61
    159a:	fc 4f       	sbci	r31, 0xFC	; 252
    159c:	20 85       	ldd	r18, Z+8	; 0x08
    159e:	31 85       	ldd	r19, Z+9	; 0x09
    15a0:	2a 30       	cpi	r18, 0x0A	; 10
    15a2:	31 05       	cpc	r19, r1
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    15a6:	4b c0       	rjmp	.+150    	; 0x163e <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    15a8:	8f 2d       	mov	r24, r15
    15aa:	9e 2d       	mov	r25, r14
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	fc 01       	movw	r30, r24
    15b2:	ee 0f       	add	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	e8 1b       	sub	r30, r24
    15c0:	f9 0b       	sbc	r31, r25
    15c2:	ed 53       	subi	r30, 0x3D	; 61
    15c4:	fc 4f       	sbci	r31, 0xFC	; 252
    15c6:	26 81       	ldd	r18, Z+6	; 0x06
    15c8:	37 81       	ldd	r19, Z+7	; 0x07
    15ca:	8f 2d       	mov	r24, r15
    15cc:	9e 2d       	mov	r25, r14
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	fc 01       	movw	r30, r24
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	e8 1b       	sub	r30, r24
    15e2:	f9 0b       	sbc	r31, r25
    15e4:	ed 53       	subi	r30, 0x3D	; 61
    15e6:	fc 4f       	sbci	r31, 0xFC	; 252
    15e8:	84 81       	ldd	r24, Z+4	; 0x04
    15ea:	95 81       	ldd	r25, Z+5	; 0x05
    15ec:	28 17       	cp	r18, r24
    15ee:	39 07       	cpc	r19, r25
    15f0:	0c f0       	brlt	.+2      	; 0x15f4 <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    15f2:	95 c0       	rjmp	.+298    	; 0x171e <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    15f4:	8f 2d       	mov	r24, r15
    15f6:	9e 2d       	mov	r25, r14
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	fc 01       	movw	r30, r24
    15fe:	ee 0f       	add	r30, r30
    1600:	ff 1f       	adc	r31, r31
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	e8 1b       	sub	r30, r24
    160c:	f9 0b       	sbc	r31, r25
    160e:	ed 53       	subi	r30, 0x3D	; 61
    1610:	fc 4f       	sbci	r31, 0xFC	; 252
    1612:	2f 5f       	subi	r18, 0xFF	; 255
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	37 83       	std	Z+7, r19	; 0x07
    1618:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    161a:	8f 2d       	mov	r24, r15
    161c:	9e 2d       	mov	r25, r14
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	fc 01       	movw	r30, r24
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e8 1b       	sub	r30, r24
    1632:	f9 0b       	sbc	r31, r25
    1634:	ed 53       	subi	r30, 0x3D	; 61
    1636:	fc 4f       	sbci	r31, 0xFC	; 252
    1638:	11 86       	std	Z+9, r1	; 0x09
    163a:	10 86       	std	Z+8, r1	; 0x08
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    163e:	8f 2d       	mov	r24, r15
    1640:	9e 2d       	mov	r25, r14
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	fc 01       	movw	r30, r24
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	e8 1b       	sub	r30, r24
    1656:	f9 0b       	sbc	r31, r25
    1658:	ed 53       	subi	r30, 0x3D	; 61
    165a:	fc 4f       	sbci	r31, 0xFC	; 252
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	31 87       	std	Z+9, r19	; 0x09
    1662:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    1664:	8f 2d       	mov	r24, r15
    1666:	9e 2d       	mov	r25, r14
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	fc 01       	movw	r30, r24
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	e8 1b       	sub	r30, r24
    167c:	f9 0b       	sbc	r31, r25
    167e:	ed 53       	subi	r30, 0x3D	; 61
    1680:	fc 4f       	sbci	r31, 0xFC	; 252
    1682:	02 84       	ldd	r0, Z+10	; 0x0a
    1684:	f3 85       	ldd	r31, Z+11	; 0x0b
    1686:	e0 2d       	mov	r30, r0
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	9e 8b       	std	Y+22, r25	; 0x16
    168e:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	98 8f       	std	Y+24, r25	; 0x18
    1696:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    1698:	84 81       	ldd	r24, Z+4	; 0x04
    169a:	95 81       	ldd	r25, Z+5	; 0x05
    169c:	9a 8f       	std	Y+26, r25	; 0x1a
    169e:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    16a0:	8f 2d       	mov	r24, r15
    16a2:	9e 2d       	mov	r25, r14
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	fc 01       	movw	r30, r24
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	e8 1b       	sub	r30, r24
    16b8:	f9 0b       	sbc	r31, r25
    16ba:	ed 53       	subi	r30, 0x3D	; 61
    16bc:	fc 4f       	sbci	r31, 0xFC	; 252
    16be:	04 84       	ldd	r0, Z+12	; 0x0c
    16c0:	f5 85       	ldd	r31, Z+13	; 0x0d
    16c2:	e0 2d       	mov	r30, r0
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	9c 8f       	std	Y+28, r25	; 0x1c
    16ca:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	9e 8f       	std	Y+30, r25	; 0x1e
    16d2:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    16d4:	84 81       	ldd	r24, Z+4	; 0x04
    16d6:	95 81       	ldd	r25, Z+5	; 0x05
    16d8:	98 a3       	std	Y+32, r25	; 0x20
    16da:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    16dc:	f8 01       	movw	r30, r16
    16de:	82 89       	ldd	r24, Z+18	; 0x12
    16e0:	93 89       	ldd	r25, Z+19	; 0x13
    16e2:	9a a3       	std	Y+34, r25	; 0x22
    16e4:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    16e6:	84 89       	ldd	r24, Z+20	; 0x14
    16e8:	95 89       	ldd	r25, Z+21	; 0x15
    16ea:	9c a3       	std	Y+36, r25	; 0x24
    16ec:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    16ee:	86 89       	ldd	r24, Z+22	; 0x16
    16f0:	97 89       	ldd	r25, Z+23	; 0x17
    16f2:	9e a3       	std	Y+38, r25	; 0x26
    16f4:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    16f6:	8f 2d       	mov	r24, r15
    16f8:	9e 2d       	mov	r25, r14
    16fa:	be 01       	movw	r22, r28
    16fc:	6b 5e       	subi	r22, 0xEB	; 235
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	0e 94 cb 08 	call	0x1196	; 0x1196 <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    1704:	a6 96       	adiw	r28, 0x26	; 38
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	ef 90       	pop	r14
    171c:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    171e:	8f 2d       	mov	r24, r15
    1720:	9e 2d       	mov	r25, r14
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	fc 01       	movw	r30, r24
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	e8 1b       	sub	r30, r24
    1736:	f9 0b       	sbc	r31, r25
    1738:	ed 53       	subi	r30, 0x3D	; 61
    173a:	fc 4f       	sbci	r31, 0xFC	; 252
    173c:	42 81       	ldd	r20, Z+2	; 0x02
    173e:	53 81       	ldd	r21, Z+3	; 0x03
    1740:	41 30       	cpi	r20, 0x01	; 1
    1742:	51 05       	cpc	r21, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    1746:	6a c0       	rjmp	.+212    	; 0x181c <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    1748:	45 2b       	or	r20, r21
    174a:	09 f0       	breq	.+2      	; 0x174e <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    174c:	f2 c0       	rjmp	.+484    	; 0x1932 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    174e:	8f 2d       	mov	r24, r15
    1750:	9e 2d       	mov	r25, r14
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	fc 01       	movw	r30, r24
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	ee 0f       	add	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	e8 1b       	sub	r30, r24
    1766:	f9 0b       	sbc	r31, r25
    1768:	ed 53       	subi	r30, 0x3D	; 61
    176a:	fc 4f       	sbci	r31, 0xFC	; 252
    176c:	20 81       	ld	r18, Z
    176e:	31 81       	ldd	r19, Z+1	; 0x01
    1770:	21 50       	subi	r18, 0x01	; 1
    1772:	30 40       	sbci	r19, 0x00	; 0
    1774:	8f 2d       	mov	r24, r15
    1776:	9e 2d       	mov	r25, r14
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	fc 01       	movw	r30, r24
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	e8 1b       	sub	r30, r24
    178c:	f9 0b       	sbc	r31, r25
    178e:	ed 53       	subi	r30, 0x3D	; 61
    1790:	fc 4f       	sbci	r31, 0xFC	; 252
    1792:	31 83       	std	Z+1, r19	; 0x01
    1794:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    1796:	23 2b       	or	r18, r19
    1798:	09 f0       	breq	.+2      	; 0x179c <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    179a:	f7 c0       	rjmp	.+494    	; 0x198a <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    179c:	8f 2d       	mov	r24, r15
    179e:	9e 2d       	mov	r25, r14
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	fc 01       	movw	r30, r24
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	e8 1b       	sub	r30, r24
    17b4:	f9 0b       	sbc	r31, r25
    17b6:	ed 53       	subi	r30, 0x3D	; 61
    17b8:	fc 4f       	sbci	r31, 0xFC	; 252
    17ba:	0a 5f       	subi	r16, 0xFA	; 250
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	13 87       	std	Z+11, r17	; 0x0b
    17c0:	02 87       	std	Z+10, r16	; 0x0a
    17c2:	06 50       	subi	r16, 0x06	; 6
    17c4:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    17c6:	8f 2d       	mov	r24, r15
    17c8:	9e 2d       	mov	r25, r14
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	fc 01       	movw	r30, r24
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	e8 1b       	sub	r30, r24
    17de:	f9 0b       	sbc	r31, r25
    17e0:	ed 53       	subi	r30, 0x3D	; 61
    17e2:	fc 4f       	sbci	r31, 0xFC	; 252
    17e4:	15 87       	std	Z+13, r17	; 0x0d
    17e6:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    17e8:	f8 01       	movw	r30, r16
    17ea:	86 81       	ldd	r24, Z+6	; 0x06
    17ec:	97 81       	ldd	r25, Z+7	; 0x07
    17ee:	98 87       	std	Y+8, r25	; 0x08
    17f0:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    17f2:	80 85       	ldd	r24, Z+8	; 0x08
    17f4:	91 85       	ldd	r25, Z+9	; 0x09
    17f6:	9a 87       	std	Y+10, r25	; 0x0a
    17f8:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    17fa:	82 85       	ldd	r24, Z+10	; 0x0a
    17fc:	93 85       	ldd	r25, Z+11	; 0x0b
    17fe:	9c 87       	std	Y+12, r25	; 0x0c
    1800:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    1802:	80 81       	ld	r24, Z
    1804:	91 81       	ldd	r25, Z+1	; 0x01
    1806:	9e 87       	std	Y+14, r25	; 0x0e
    1808:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	98 8b       	std	Y+16, r25	; 0x10
    1810:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    1812:	84 81       	ldd	r24, Z+4	; 0x04
    1814:	95 81       	ldd	r25, Z+5	; 0x05
    1816:	9a 8b       	std	Y+18, r25	; 0x12
    1818:	89 8b       	std	Y+17, r24	; 0x11
    181a:	8b c0       	rjmp	.+278    	; 0x1932 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    181c:	8f 2d       	mov	r24, r15
    181e:	9e 2d       	mov	r25, r14
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	fc 01       	movw	r30, r24
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	e8 1b       	sub	r30, r24
    1834:	f9 0b       	sbc	r31, r25
    1836:	ed 53       	subi	r30, 0x3D	; 61
    1838:	fc 4f       	sbci	r31, 0xFC	; 252
    183a:	20 81       	ld	r18, Z
    183c:	31 81       	ldd	r19, Z+1	; 0x01
    183e:	2f 5f       	subi	r18, 0xFF	; 255
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	8f 2d       	mov	r24, r15
    1844:	9e 2d       	mov	r25, r14
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	fc 01       	movw	r30, r24
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	e8 1b       	sub	r30, r24
    185a:	f9 0b       	sbc	r31, r25
    185c:	ed 53       	subi	r30, 0x3D	; 61
    185e:	fc 4f       	sbci	r31, 0xFC	; 252
    1860:	31 83       	std	Z+1, r19	; 0x01
    1862:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    1864:	21 30       	cpi	r18, 0x01	; 1
    1866:	31 05       	cpc	r19, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    186a:	e5 c0       	rjmp	.+458    	; 0x1a36 <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    186c:	8f 2d       	mov	r24, r15
    186e:	9e 2d       	mov	r25, r14
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	fc 01       	movw	r30, r24
    1876:	ee 0f       	add	r30, r30
    1878:	ff 1f       	adc	r31, r31
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	e8 1b       	sub	r30, r24
    1884:	f9 0b       	sbc	r31, r25
    1886:	ed 53       	subi	r30, 0x3D	; 61
    1888:	fc 4f       	sbci	r31, 0xFC	; 252
    188a:	13 82       	std	Z+3, r1	; 0x03
    188c:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    188e:	8f 2d       	mov	r24, r15
    1890:	9e 2d       	mov	r25, r14
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	fc 01       	movw	r30, r24
    1898:	ee 0f       	add	r30, r30
    189a:	ff 1f       	adc	r31, r31
    189c:	ee 0f       	add	r30, r30
    189e:	ff 1f       	adc	r31, r31
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	e8 1b       	sub	r30, r24
    18a6:	f9 0b       	sbc	r31, r25
    18a8:	ed 53       	subi	r30, 0x3D	; 61
    18aa:	fc 4f       	sbci	r31, 0xFC	; 252
    18ac:	51 83       	std	Z+1, r21	; 0x01
    18ae:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    18b0:	8f 2d       	mov	r24, r15
    18b2:	9e 2d       	mov	r25, r14
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	fc 01       	movw	r30, r24
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	ee 0f       	add	r30, r30
    18c0:	ff 1f       	adc	r31, r31
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	e8 1b       	sub	r30, r24
    18c8:	f9 0b       	sbc	r31, r25
    18ca:	ed 53       	subi	r30, 0x3D	; 61
    18cc:	fc 4f       	sbci	r31, 0xFC	; 252
    18ce:	04 5f       	subi	r16, 0xF4	; 244
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	13 87       	std	Z+11, r17	; 0x0b
    18d4:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    18d6:	8f 2d       	mov	r24, r15
    18d8:	9e 2d       	mov	r25, r14
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	fc 01       	movw	r30, r24
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	e8 1b       	sub	r30, r24
    18ee:	f9 0b       	sbc	r31, r25
    18f0:	ed 53       	subi	r30, 0x3D	; 61
    18f2:	fc 4f       	sbci	r31, 0xFC	; 252
    18f4:	06 50       	subi	r16, 0x06	; 6
    18f6:	10 40       	sbci	r17, 0x00	; 0
    18f8:	15 87       	std	Z+13, r17	; 0x0d
    18fa:	04 87       	std	Z+12, r16	; 0x0c
    18fc:	06 50       	subi	r16, 0x06	; 6
    18fe:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    1900:	f8 01       	movw	r30, r16
    1902:	84 85       	ldd	r24, Z+12	; 0x0c
    1904:	95 85       	ldd	r25, Z+13	; 0x0d
    1906:	98 87       	std	Y+8, r25	; 0x08
    1908:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    190a:	86 85       	ldd	r24, Z+14	; 0x0e
    190c:	97 85       	ldd	r25, Z+15	; 0x0f
    190e:	9a 87       	std	Y+10, r25	; 0x0a
    1910:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    1912:	80 89       	ldd	r24, Z+16	; 0x10
    1914:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    191a:	86 81       	ldd	r24, Z+6	; 0x06
    191c:	97 81       	ldd	r25, Z+7	; 0x07
    191e:	9e 87       	std	Y+14, r25	; 0x0e
    1920:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    1922:	80 85       	ldd	r24, Z+8	; 0x08
    1924:	91 85       	ldd	r25, Z+9	; 0x09
    1926:	98 8b       	std	Y+16, r25	; 0x10
    1928:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    192a:	82 85       	ldd	r24, Z+10	; 0x0a
    192c:	93 85       	ldd	r25, Z+11	; 0x0b
    192e:	9a 8b       	std	Y+18, r25	; 0x12
    1930:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    1932:	8f 2d       	mov	r24, r15
    1934:	9e 2d       	mov	r25, r14
    1936:	be 01       	movw	r22, r28
    1938:	6f 5f       	subi	r22, 0xFF	; 255
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <getRGBColor>
			resetData.beginRed = curColors.red;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	98 87       	std	Y+8, r25	; 0x08
    1946:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	9a 87       	std	Y+10, r25	; 0x0a
    194e:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    1958:	8f 2d       	mov	r24, r15
    195a:	9e 2d       	mov	r25, r14
    195c:	be 01       	movw	r22, r28
    195e:	69 5f       	subi	r22, 0xF9	; 249
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	0e 94 01 06 	call	0xc02	; 0xc02 <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    1966:	8f 2d       	mov	r24, r15
    1968:	9e 2d       	mov	r25, r14
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	fc 01       	movw	r30, r24
    1970:	ee 0f       	add	r30, r30
    1972:	ff 1f       	adc	r31, r31
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31
    1978:	ee 0f       	add	r30, r30
    197a:	ff 1f       	adc	r31, r31
    197c:	e8 1b       	sub	r30, r24
    197e:	f9 0b       	sbc	r31, r25
    1980:	ed 53       	subi	r30, 0x3D	; 61
    1982:	fc 4f       	sbci	r31, 0xFC	; 252
    1984:	17 82       	std	Z+7, r1	; 0x07
    1986:	16 82       	std	Z+6, r1	; 0x06
    1988:	48 ce       	rjmp	.-880    	; 0x161a <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    198a:	8f 2d       	mov	r24, r15
    198c:	9e 2d       	mov	r25, r14
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	fc 01       	movw	r30, r24
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	ee 0f       	add	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	e8 1b       	sub	r30, r24
    19a2:	f9 0b       	sbc	r31, r25
    19a4:	ed 53       	subi	r30, 0x3D	; 61
    19a6:	fc 4f       	sbci	r31, 0xFC	; 252
    19a8:	11 82       	std	Z+1, r1	; 0x01
    19aa:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    19ac:	8f 2d       	mov	r24, r15
    19ae:	9e 2d       	mov	r25, r14
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	fc 01       	movw	r30, r24
    19b6:	ee 0f       	add	r30, r30
    19b8:	ff 1f       	adc	r31, r31
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	e8 1b       	sub	r30, r24
    19c4:	f9 0b       	sbc	r31, r25
    19c6:	ed 53       	subi	r30, 0x3D	; 61
    19c8:	fc 4f       	sbci	r31, 0xFC	; 252
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	93 83       	std	Z+3, r25	; 0x03
    19d0:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    19d2:	8f 2d       	mov	r24, r15
    19d4:	9e 2d       	mov	r25, r14
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	fc 01       	movw	r30, r24
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	ee 0f       	add	r30, r30
    19e2:	ff 1f       	adc	r31, r31
    19e4:	ee 0f       	add	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	e8 1b       	sub	r30, r24
    19ea:	f9 0b       	sbc	r31, r25
    19ec:	ed 53       	subi	r30, 0x3D	; 61
    19ee:	fc 4f       	sbci	r31, 0xFC	; 252
    19f0:	13 87       	std	Z+11, r17	; 0x0b
    19f2:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    19f4:	8f 2d       	mov	r24, r15
    19f6:	9e 2d       	mov	r25, r14
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	fc 01       	movw	r30, r24
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	e8 1b       	sub	r30, r24
    1a0c:	f9 0b       	sbc	r31, r25
    1a0e:	ed 53       	subi	r30, 0x3D	; 61
    1a10:	fc 4f       	sbci	r31, 0xFC	; 252
    1a12:	0a 5f       	subi	r16, 0xFA	; 250
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	15 87       	std	Z+13, r17	; 0x0d
    1a18:	04 87       	std	Z+12, r16	; 0x0c
    1a1a:	06 50       	subi	r16, 0x06	; 6
    1a1c:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    1a1e:	f8 01       	movw	r30, r16
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	98 87       	std	Y+8, r25	; 0x08
    1a26:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	9a 87       	std	Y+10, r25	; 0x0a
    1a2e:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    1a30:	84 81       	ldd	r24, Z+4	; 0x04
    1a32:	95 81       	ldd	r25, Z+5	; 0x05
    1a34:	70 cf       	rjmp	.-288    	; 0x1916 <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    1a36:	8f 2d       	mov	r24, r15
    1a38:	9e 2d       	mov	r25, r14
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	fc 01       	movw	r30, r24
    1a40:	ee 0f       	add	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	ee 0f       	add	r30, r30
    1a4a:	ff 1f       	adc	r31, r31
    1a4c:	e8 1b       	sub	r30, r24
    1a4e:	f9 0b       	sbc	r31, r25
    1a50:	ed 53       	subi	r30, 0x3D	; 61
    1a52:	fc 4f       	sbci	r31, 0xFC	; 252
    1a54:	0a 5f       	subi	r16, 0xFA	; 250
    1a56:	1f 4f       	sbci	r17, 0xFF	; 255
    1a58:	13 87       	std	Z+11, r17	; 0x0b
    1a5a:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    1a5c:	8f 2d       	mov	r24, r15
    1a5e:	9e 2d       	mov	r25, r14
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	fc 01       	movw	r30, r24
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	ee 0f       	add	r30, r30
    1a6c:	ff 1f       	adc	r31, r31
    1a6e:	ee 0f       	add	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	e8 1b       	sub	r30, r24
    1a74:	f9 0b       	sbc	r31, r25
    1a76:	ed 53       	subi	r30, 0x3D	; 61
    1a78:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7a:	0a 5f       	subi	r16, 0xFA	; 250
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	15 87       	std	Z+13, r17	; 0x0d
    1a80:	04 87       	std	Z+12, r16	; 0x0c
    1a82:	0c 50       	subi	r16, 0x0C	; 12
    1a84:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    1a86:	f8 01       	movw	r30, r16
    1a88:	86 81       	ldd	r24, Z+6	; 0x06
    1a8a:	97 81       	ldd	r25, Z+7	; 0x07
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    1a90:	80 85       	ldd	r24, Z+8	; 0x08
    1a92:	91 85       	ldd	r25, Z+9	; 0x09
    1a94:	9a 87       	std	Y+10, r25	; 0x0a
    1a96:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    1a98:	82 85       	ldd	r24, Z+10	; 0x0a
    1a9a:	93 85       	ldd	r25, Z+11	; 0x0b
    1a9c:	9c 87       	std	Y+12, r25	; 0x0c
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    1aa0:	84 85       	ldd	r24, Z+12	; 0x0c
    1aa2:	95 85       	ldd	r25, Z+13	; 0x0d
    1aa4:	9e 87       	std	Y+14, r25	; 0x0e
    1aa6:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    1aa8:	86 85       	ldd	r24, Z+14	; 0x0e
    1aaa:	97 85       	ldd	r25, Z+15	; 0x0f
    1aac:	98 8b       	std	Y+16, r25	; 0x10
    1aae:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    1ab0:	80 89       	ldd	r24, Z+16	; 0x10
    1ab2:	91 89       	ldd	r25, Z+17	; 0x11
    1ab4:	9a 8b       	std	Y+18, r25	; 0x12
    1ab6:	89 8b       	std	Y+17, r24	; 0x11
    1ab8:	3c cf       	rjmp	.-392    	; 0x1932 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00001aba <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    1aba:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    1abc:	2d 91       	ld	r18, X+
    1abe:	3c 91       	ld	r19, X
    1ac0:	11 97       	sbiw	r26, 0x01	; 1
    1ac2:	f9 01       	movw	r30, r18
    1ac4:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1ac6:	2f 5f       	subi	r18, 0xFF	; 255
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	2d 93       	st	X+, r18
    1acc:	3c 93       	st	X, r19
    return returnVal;
}
    1ace:	08 95       	ret

00001ad0 <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    1ad0:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    1ad2:	8d 91       	ld	r24, X+
    1ad4:	9c 91       	ld	r25, X
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	fc 01       	movw	r30, r24
    1ada:	25 91       	lpm	r18, Z+
    1adc:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    1ade:	02 96       	adiw	r24, 0x02	; 2
    1ae0:	8d 93       	st	X+, r24
    1ae2:	9c 93       	st	X, r25
    return returnVal;
}
    1ae4:	c9 01       	movw	r24, r18
    1ae6:	08 95       	ret

00001ae8 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1aee:	14 16       	cp	r1, r20
    1af0:	15 06       	cpc	r1, r21
    1af2:	64 f4       	brge	.+24     	; 0x1b0c <copyFromFlash+0x24>
    1af4:	db 01       	movw	r26, r22
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    1afa:	fe 01       	movw	r30, r28
    1afc:	e8 0f       	add	r30, r24
    1afe:	f9 1f       	adc	r31, r25
    1b00:	e4 91       	lpm	r30, Z+
    1b02:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	84 17       	cp	r24, r20
    1b08:	95 07       	cpc	r25, r21
    1b0a:	bc f3       	brlt	.-18     	; 0x1afa <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	08 95       	ret

00001b12 <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    1b12:	2f 92       	push	r2
    1b14:	3f 92       	push	r3
    1b16:	4f 92       	push	r4
    1b18:	5f 92       	push	r5
    1b1a:	6f 92       	push	r6
    1b1c:	7f 92       	push	r7
    1b1e:	8f 92       	push	r8
    1b20:	9f 92       	push	r9
    1b22:	af 92       	push	r10
    1b24:	bf 92       	push	r11
    1b26:	cf 92       	push	r12
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	1f 93       	push	r17
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <getInstructionGroup+0x24>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <getInstructionGroup+0x26>
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    1b3c:	83 ef       	ldi	r24, 0xF3	; 243
    1b3e:	98 e0       	ldi	r25, 0x08	; 8
    1b40:	90 93 f4 0e 	sts	0x0EF4, r25
    1b44:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1b48:	40 91 04 01 	lds	r20, 0x0104
    1b4c:	50 91 05 01 	lds	r21, 0x0105
    1b50:	fa 01       	movw	r30, r20
    1b52:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	f0 93 05 01 	sts	0x0105, r31
    1b5a:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    1b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b60:	c9 f0       	breq	.+50     	; 0x1b94 <getInstructionGroup+0x82>
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    1b66:	cb 01       	movw	r24, r22
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	bf 90       	pop	r11
    1b80:	af 90       	pop	r10
    1b82:	9f 90       	pop	r9
    1b84:	8f 90       	pop	r8
    1b86:	7f 90       	pop	r7
    1b88:	6f 90       	pop	r6
    1b8a:	5f 90       	pop	r5
    1b8c:	4f 90       	pop	r4
    1b8e:	3f 90       	pop	r3
    1b90:	2f 90       	pop	r2
    1b92:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    1b94:	80 91 00 01 	lds	r24, 0x0100
    1b98:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    1b9c:	20 91 02 01 	lds	r18, 0x0102
    1ba0:	30 91 03 01 	lds	r19, 0x0103
    1ba4:	20 93 00 01 	sts	0x0100, r18
    1ba8:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    1bac:	90 93 03 01 	sts	0x0103, r25
    1bb0:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    1bb4:	c9 01       	movw	r24, r18
    1bb6:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    1bb8:	85 91       	lpm	r24, Z+
    1bba:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	22 0f       	add	r18, r18
    1bc0:	33 1f       	adc	r19, r19
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	28 0f       	add	r18, r24
    1bd0:	39 1f       	adc	r19, r25
    1bd2:	fb 01       	movw	r30, r22
    1bd4:	31 83       	std	Z+1, r19	; 0x01
    1bd6:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    1bd8:	db 01       	movw	r26, r22
    1bda:	14 96       	adiw	r26, 0x04	; 4
    1bdc:	b3 83       	std	Z+3, r27	; 0x03
    1bde:	a2 83       	std	Z+2, r26	; 0x02
    1be0:	4d 5f       	subi	r20, 0xFD	; 253
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1be4:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    1be6:	90 e5       	ldi	r25, 0x50	; 80
    1be8:	c9 2e       	mov	r12, r25
    1bea:	94 e0       	ldi	r25, 0x04	; 4
    1bec:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	a8 2e       	mov	r10, r24
    1bf2:	86 e0       	ldi	r24, 0x06	; 6
    1bf4:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    1bf6:	f1 ed       	ldi	r31, 0xD1	; 209
    1bf8:	8f 2e       	mov	r8, r31
    1bfa:	f3 e0       	ldi	r31, 0x03	; 3
    1bfc:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    1bfe:	e5 eb       	ldi	r30, 0xB5	; 181
    1c00:	6e 2e       	mov	r6, r30
    1c02:	e3 e0       	ldi	r30, 0x03	; 3
    1c04:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    1c06:	39 e0       	ldi	r19, 0x09	; 9
    1c08:	43 2e       	mov	r4, r19
    1c0a:	36 e0       	ldi	r19, 0x06	; 6
    1c0c:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    1c0e:	2e e4       	ldi	r18, 0x4E	; 78
    1c10:	22 2e       	mov	r2, r18
    1c12:	26 e0       	ldi	r18, 0x06	; 6
    1c14:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    1c16:	9f e3       	ldi	r25, 0x3F	; 63
    1c18:	e9 2e       	mov	r14, r25
    1c1a:	93 e0       	ldi	r25, 0x03	; 3
    1c1c:	f9 2e       	mov	r15, r25
    1c1e:	23 c0       	rjmp	.+70     	; 0x1c66 <getInstructionGroup+0x154>
    1c20:	13 96       	adiw	r26, 0x03	; 3
    1c22:	fc 92       	st	X, r15
    1c24:	ee 92       	st	-X, r14
    1c26:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1c28:	18 96       	adiw	r26, 0x08	; 8
    1c2a:	1c 93       	st	X, r17
    1c2c:	18 97       	sbiw	r26, 0x08	; 8
    1c2e:	80 91 f3 0e 	lds	r24, 0x0EF3
    1c32:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    1c3a:	82 0f       	add	r24, r18
    1c3c:	93 1f       	adc	r25, r19
    1c3e:	90 93 f4 0e 	sts	0x0EF4, r25
    1c42:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    1c46:	40 91 04 01 	lds	r20, 0x0104
    1c4a:	50 91 05 01 	lds	r21, 0x0105
    1c4e:	42 0f       	add	r20, r18
    1c50:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    1c52:	fa 01       	movw	r30, r20
    1c54:	84 91       	lpm	r24, Z+
    1c56:	8f 3f       	cpi	r24, 0xFF	; 255
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <getInstructionGroup+0x14a>
    1c5a:	b4 c0       	rjmp	.+360    	; 0x1dc4 <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    1c5c:	1b 96       	adiw	r26, 0x0b	; 11
    1c5e:	fd 01       	movw	r30, r26
    1c60:	32 97       	sbiw	r30, 0x02	; 2
    1c62:	b1 83       	std	Z+1, r27	; 0x01
    1c64:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1c66:	fa 01       	movw	r30, r20
    1c68:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1c6a:	4f 5f       	subi	r20, 0xFF	; 255
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    1c6e:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    1c70:	fa 01       	movw	r30, r20
    1c72:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    1c74:	ca 01       	movw	r24, r20
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	90 93 05 01 	sts	0x0105, r25
    1c80:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    1c84:	11 96       	adiw	r26, 0x01	; 1
    1c86:	2c 93       	st	X, r18
    1c88:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    1c8a:	80 91 f3 0e 	lds	r24, 0x0EF3
    1c8e:	90 91 f4 0e 	lds	r25, 0x0EF4
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
    1c96:	17 96       	adiw	r26, 0x07	; 7
    1c98:	9c 93       	st	X, r25
    1c9a:	8e 93       	st	-X, r24
    1c9c:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    1c9e:	22 23       	and	r18, r18
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <getInstructionGroup+0x192>
    1ca2:	be cf       	rjmp	.-132    	; 0x1c20 <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	39 f1       	breq	.+78     	; 0x1cf6 <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    1ca8:	23 30       	cpi	r18, 0x03	; 3
    1caa:	09 f4       	brne	.+2      	; 0x1cae <getInstructionGroup+0x19c>
    1cac:	4b c0       	rjmp	.+150    	; 0x1d44 <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    1cae:	24 30       	cpi	r18, 0x04	; 4
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <getInstructionGroup+0x1a2>
    1cb2:	68 c0       	rjmp	.+208    	; 0x1d84 <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    1cb4:	25 30       	cpi	r18, 0x05	; 5
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <getInstructionGroup+0x1a8>
    1cb8:	73 c0       	rjmp	.+230    	; 0x1da0 <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    1cba:	26 30       	cpi	r18, 0x06	; 6
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <getInstructionGroup+0x1ae>
    1cbe:	50 c0       	rjmp	.+160    	; 0x1d60 <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    1cc0:	27 30       	cpi	r18, 0x07	; 7
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <getInstructionGroup+0x1b4>
    1cc4:	8a c0       	rjmp	.+276    	; 0x1dda <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    1cc6:	28 30       	cpi	r18, 0x08	; 8
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <getInstructionGroup+0x1ba>
    1cca:	99 c0       	rjmp	.+306    	; 0x1dfe <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    1ccc:	29 30       	cpi	r18, 0x09	; 9
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <getInstructionGroup+0x1c0>
    1cd0:	b2 cf       	rjmp	.-156    	; 0x1c36 <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    1cd2:	8b ea       	ldi	r24, 0xAB	; 171
    1cd4:	93 e0       	ldi	r25, 0x03	; 3
    1cd6:	13 96       	adiw	r26, 0x03	; 3
    1cd8:	9c 93       	st	X, r25
    1cda:	8e 93       	st	-X, r24
    1cdc:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    1cde:	ec e3       	ldi	r30, 0x3C	; 60
    1ce0:	f3 e0       	ldi	r31, 0x03	; 3
    1ce2:	15 96       	adiw	r26, 0x05	; 5
    1ce4:	fc 93       	st	X, r31
    1ce6:	ee 93       	st	-X, r30
    1ce8:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1cea:	18 96       	adiw	r26, 0x08	; 8
    1cec:	1c 93       	st	X, r17
    1cee:	18 97       	sbiw	r26, 0x08	; 8
    1cf0:	46 e0       	ldi	r20, 0x06	; 6
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	0d c0       	rjmp	.+26     	; 0x1d10 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    1cf6:	13 96       	adiw	r26, 0x03	; 3
    1cf8:	5c 92       	st	X, r5
    1cfa:	4e 92       	st	-X, r4
    1cfc:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    1cfe:	15 96       	adiw	r26, 0x05	; 5
    1d00:	3c 92       	st	X, r3
    1d02:	2e 92       	st	-X, r2
    1d04:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1d06:	18 96       	adiw	r26, 0x08	; 8
    1d08:	1c 93       	st	X, r17
    1d0a:	18 97       	sbiw	r26, 0x08	; 8
    1d0c:	46 e0       	ldi	r20, 0x06	; 6
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	84 91       	lpm	r24, Z+
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	81 93       	st	Z+, r24
    1d20:	fc 83       	std	Y+4, r31	; 0x04
    1d22:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	01 96       	adiw	r24, 0x01	; 1
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	24 17       	cp	r18, r20
    1d34:	35 07       	cpc	r19, r21
    1d36:	74 f3       	brlt	.-36     	; 0x1d14 <getInstructionGroup+0x202>
    1d38:	9a 01       	movw	r18, r20
    1d3a:	80 91 f3 0e 	lds	r24, 0x0EF3
    1d3e:	90 91 f4 0e 	lds	r25, 0x0EF4
    1d42:	7b cf       	rjmp	.-266    	; 0x1c3a <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    1d44:	13 96       	adiw	r26, 0x03	; 3
    1d46:	9c 92       	st	X, r9
    1d48:	8e 92       	st	-X, r8
    1d4a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    1d4c:	15 96       	adiw	r26, 0x05	; 5
    1d4e:	7c 92       	st	X, r7
    1d50:	6e 92       	st	-X, r6
    1d52:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1d54:	18 96       	adiw	r26, 0x08	; 8
    1d56:	1c 92       	st	X, r1
    1d58:	18 97       	sbiw	r26, 0x08	; 8
    1d5a:	4a e0       	ldi	r20, 0x0A	; 10
    1d5c:	50 e0       	ldi	r21, 0x00	; 0
    1d5e:	d8 cf       	rjmp	.-80     	; 0x1d10 <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    1d60:	eb ec       	ldi	r30, 0xCB	; 203
    1d62:	f8 e0       	ldi	r31, 0x08	; 8
    1d64:	13 96       	adiw	r26, 0x03	; 3
    1d66:	fc 93       	st	X, r31
    1d68:	ee 93       	st	-X, r30
    1d6a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    1d6c:	8d e2       	ldi	r24, 0x2D	; 45
    1d6e:	97 e0       	ldi	r25, 0x07	; 7
    1d70:	15 96       	adiw	r26, 0x05	; 5
    1d72:	9c 93       	st	X, r25
    1d74:	8e 93       	st	-X, r24
    1d76:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1d78:	18 96       	adiw	r26, 0x08	; 8
    1d7a:	1c 92       	st	X, r1
    1d7c:	18 97       	sbiw	r26, 0x08	; 8
    1d7e:	42 e1       	ldi	r20, 0x12	; 18
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	c6 cf       	rjmp	.-116    	; 0x1d10 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    1d84:	18 96       	adiw	r26, 0x08	; 8
    1d86:	1c 93       	st	X, r17
    1d88:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    1d8a:	13 96       	adiw	r26, 0x03	; 3
    1d8c:	dc 92       	st	X, r13
    1d8e:	ce 92       	st	-X, r12
    1d90:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    1d92:	15 96       	adiw	r26, 0x05	; 5
    1d94:	bc 92       	st	X, r11
    1d96:	ae 92       	st	-X, r10
    1d98:	14 97       	sbiw	r26, 0x04	; 4
    1d9a:	4e e0       	ldi	r20, 0x0E	; 14
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	b8 cf       	rjmp	.-144    	; 0x1d10 <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    1da0:	e2 ec       	ldi	r30, 0xC2	; 194
    1da2:	f6 e0       	ldi	r31, 0x06	; 6
    1da4:	13 96       	adiw	r26, 0x03	; 3
    1da6:	fc 93       	st	X, r31
    1da8:	ee 93       	st	-X, r30
    1daa:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    1dac:	8e e8       	ldi	r24, 0x8E	; 142
    1dae:	96 e0       	ldi	r25, 0x06	; 6
    1db0:	15 96       	adiw	r26, 0x05	; 5
    1db2:	9c 93       	st	X, r25
    1db4:	8e 93       	st	-X, r24
    1db6:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1db8:	18 96       	adiw	r26, 0x08	; 8
    1dba:	1c 92       	st	X, r1
    1dbc:	18 97       	sbiw	r26, 0x08	; 8
    1dbe:	42 e1       	ldi	r20, 0x12	; 18
    1dc0:	50 e0       	ldi	r21, 0x00	; 0
    1dc2:	a6 cf       	rjmp	.-180    	; 0x1d10 <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    1dc4:	1a 96       	adiw	r26, 0x0a	; 10
    1dc6:	1c 92       	st	X, r1
    1dc8:	1e 92       	st	-X, r1
    1dca:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    1dcc:	4f 5f       	subi	r20, 0xFF	; 255
    1dce:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd0:	50 93 05 01 	sts	0x0105, r21
    1dd4:	40 93 04 01 	sts	0x0104, r20
    1dd8:	c6 ce       	rjmp	.-628    	; 0x1b66 <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    1dda:	e0 eb       	ldi	r30, 0xB0	; 176
    1ddc:	fa e0       	ldi	r31, 0x0A	; 10
    1dde:	13 96       	adiw	r26, 0x03	; 3
    1de0:	fc 93       	st	X, r31
    1de2:	ee 93       	st	-X, r30
    1de4:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    1de6:	81 e1       	ldi	r24, 0x11	; 17
    1de8:	98 e0       	ldi	r25, 0x08	; 8
    1dea:	15 96       	adiw	r26, 0x05	; 5
    1dec:	9c 93       	st	X, r25
    1dee:	8e 93       	st	-X, r24
    1df0:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1df2:	18 96       	adiw	r26, 0x08	; 8
    1df4:	1c 92       	st	X, r1
    1df6:	18 97       	sbiw	r26, 0x08	; 8
    1df8:	48 e1       	ldi	r20, 0x18	; 24
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	89 cf       	rjmp	.-238    	; 0x1d10 <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    1dfe:	ec e4       	ldi	r30, 0x4C	; 76
    1e00:	f3 e0       	ldi	r31, 0x03	; 3
    1e02:	13 96       	adiw	r26, 0x03	; 3
    1e04:	fc 93       	st	X, r31
    1e06:	ee 93       	st	-X, r30
    1e08:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    1e0a:	80 e4       	ldi	r24, 0x40	; 64
    1e0c:	93 e0       	ldi	r25, 0x03	; 3
    1e0e:	15 96       	adiw	r26, 0x05	; 5
    1e10:	9c 93       	st	X, r25
    1e12:	8e 93       	st	-X, r24
    1e14:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	45 91       	lpm	r20, Z+
    1e1e:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    1e20:	90 93 05 01 	sts	0x0105, r25
    1e24:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    1e28:	44 0f       	add	r20, r20
    1e2a:	55 1f       	adc	r21, r21
    1e2c:	44 0f       	add	r20, r20
    1e2e:	55 1f       	adc	r21, r21
    1e30:	44 0f       	add	r20, r20
    1e32:	55 1f       	adc	r21, r21
    1e34:	4e 5f       	subi	r20, 0xFE	; 254
    1e36:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    1e38:	18 96       	adiw	r26, 0x08	; 8
    1e3a:	1c 92       	st	X, r1
    1e3c:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    1e3e:	14 16       	cp	r1, r20
    1e40:	15 06       	cpc	r1, r21
    1e42:	0c f4       	brge	.+2      	; 0x1e46 <getInstructionGroup+0x334>
    1e44:	65 cf       	rjmp	.-310    	; 0x1d10 <getInstructionGroup+0x1fe>
    1e46:	78 cf       	rjmp	.-272    	; 0x1d38 <getInstructionGroup+0x226>

00001e48 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    1e4c:	a0 91 f3 0c 	lds	r26, 0x0CF3
    1e50:	b0 91 f4 0c 	lds	r27, 0x0CF4
    1e54:	a2 30       	cpi	r26, 0x02	; 2
    1e56:	b1 05       	cpc	r27, r1
    1e58:	78 f4       	brcc	.+30     	; 0x1e78 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    1e5a:	11 97       	sbiw	r26, 0x01	; 1
    1e5c:	81 f1       	breq	.+96     	; 0x1ebe <getPreviousGroup+0x76>
    1e5e:	c0 91 04 01 	lds	r28, 0x0104
    1e62:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    1e66:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <getInstructionGroup>
			dataPtr = tmpPtr;
    1e6a:	d0 93 05 01 	sts	0x0105, r29
    1e6e:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    1e78:	fd 01       	movw	r30, r26
    1e7a:	31 97       	sbiw	r30, 0x01	; 1
    1e7c:	f0 93 f4 0c 	sts	0x0CF4, r31
    1e80:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    1e84:	aa 0f       	add	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	af 50       	subi	r26, 0x0F	; 15
    1e8a:	b3 4f       	sbci	r27, 0xF3	; 243
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	eb 50       	subi	r30, 0x0B	; 11
    1e92:	f3 4f       	sbci	r31, 0xF3	; 243
    1e94:	2d 91       	ld	r18, X+
    1e96:	3c 91       	ld	r19, X
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	28 0f       	add	r18, r24
    1e9e:	39 1f       	adc	r19, r25
    1ea0:	80 91 04 01 	lds	r24, 0x0104
    1ea4:	90 91 05 01 	lds	r25, 0x0105
    1ea8:	82 1b       	sub	r24, r18
    1eaa:	93 0b       	sbc	r25, r19
    1eac:	90 93 05 01 	sts	0x0105, r25
    1eb0:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    1eb4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    1ebe:	80 91 f5 0c 	lds	r24, 0x0CF5
    1ec2:	90 91 f6 0c 	lds	r25, 0x0CF6
    1ec6:	c0 91 04 01 	lds	r28, 0x0104
    1eca:	d0 91 05 01 	lds	r29, 0x0105
    1ece:	c8 1b       	sub	r28, r24
    1ed0:	d9 0b       	sbc	r29, r25
    1ed2:	d0 93 05 01 	sts	0x0105, r29
    1ed6:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    1eda:	10 92 f4 0c 	sts	0x0CF4, r1
    1ede:	10 92 f3 0c 	sts	0x0CF3, r1
    1ee2:	c1 cf       	rjmp	.-126    	; 0x1e66 <getPreviousGroup+0x1e>

00001ee4 <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    1ee4:	e0 91 f3 0c 	lds	r30, 0x0CF3
    1ee8:	f0 91 f4 0c 	lds	r31, 0x0CF4
    1eec:	ee 0f       	add	r30, r30
    1eee:	ff 1f       	adc	r31, r31
    1ef0:	ed 50       	subi	r30, 0x0D	; 13
    1ef2:	f3 4f       	sbci	r31, 0xF3	; 243
    1ef4:	20 81       	ld	r18, Z
    1ef6:	31 81       	ldd	r19, Z+1	; 0x01
    1ef8:	80 91 04 01 	lds	r24, 0x0104
    1efc:	90 91 05 01 	lds	r25, 0x0105
    1f00:	82 1b       	sub	r24, r18
    1f02:	93 0b       	sbc	r25, r19
    1f04:	90 93 05 01 	sts	0x0105, r25
    1f08:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    1f0c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <getInstructionGroup>
}
    1f10:	08 95       	ret

00001f12 <getNextGroup>:

struct instruction_group *getNextGroup() {
    1f12:	cf 93       	push	r28
    1f14:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    1f16:	c0 91 04 01 	lds	r28, 0x0104
    1f1a:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    1f1e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <getInstructionGroup>
    1f22:	ac 01       	movw	r20, r24

	if(ig != 0) {
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	d9 f0       	breq	.+54     	; 0x1f5e <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    1f28:	20 91 f3 0c 	lds	r18, 0x0CF3
    1f2c:	30 91 f4 0c 	lds	r19, 0x0CF4
    1f30:	f9 01       	movw	r30, r18
    1f32:	ee 0f       	add	r30, r30
    1f34:	ff 1f       	adc	r31, r31
    1f36:	eb 50       	subi	r30, 0x0B	; 11
    1f38:	f3 4f       	sbci	r31, 0xF3	; 243
    1f3a:	80 91 04 01 	lds	r24, 0x0104
    1f3e:	90 91 05 01 	lds	r25, 0x0105
    1f42:	8c 1b       	sub	r24, r28
    1f44:	9d 0b       	sbc	r25, r29
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    1f4a:	2f 5f       	subi	r18, 0xFF	; 255
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	30 93 f4 0c 	sts	0x0CF4, r19
    1f52:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    1f56:	ca 01       	movw	r24, r20
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    1f5e:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <getLastGroup>
    1f62:	ac 01       	movw	r20, r24
    1f64:	f8 cf       	rjmp	.-16     	; 0x1f56 <getNextGroup+0x44>

00001f66 <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    1f66:	10 92 f4 0c 	sts	0x0CF4, r1
    1f6a:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    1f6e:	8e ef       	ldi	r24, 0xFE	; 254
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	e5 ef       	ldi	r30, 0xF5	; 245
    1f74:	fc e0       	ldi	r31, 0x0C	; 12
    1f76:	df 01       	movw	r26, r30
    1f78:	9c 01       	movw	r18, r24
    1f7a:	1d 92       	st	X+, r1
    1f7c:	21 50       	subi	r18, 0x01	; 1
    1f7e:	30 40       	sbci	r19, 0x00	; 0
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <initDecoder+0x14>
}
    1f82:	08 95       	ret

00001f84 <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    1f84:	9c 01       	movw	r18, r24
    1f86:	97 fd       	sbrc	r25, 7
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <abs+0xa>
    1f8a:	c9 01       	movw	r24, r18
    1f8c:	08 95       	ret
    1f8e:	30 95       	com	r19
    1f90:	21 95       	neg	r18
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	c9 01       	movw	r24, r18
    1f96:	08 95       	ret

00001f98 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    1f98:	86 30       	cpi	r24, 0x06	; 6
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	24 f0       	brlt	.+8      	; 0x1fa6 <setRGBColor+0xe>
		if(led == 6) {
    1f9e:	86 30       	cpi	r24, 0x06	; 6
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	89 f0       	breq	.+34     	; 0x1fc6 <setRGBColor+0x2e>
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	e8 0f       	add	r30, r24
    1fae:	f9 1f       	adc	r31, r25
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    1fb4:	e5 51       	subi	r30, 0x15	; 21
    1fb6:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    1fb8:	71 83       	std	Z+1, r23	; 0x01
    1fba:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    1fbc:	55 83       	std	Z+5, r21	; 0x05
    1fbe:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    1fc0:	33 83       	std	Z+3, r19	; 0x03
    1fc2:	22 83       	std	Z+2, r18	; 0x02



}
    1fc4:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    1fc6:	e2 e4       	ldi	r30, 0x42	; 66
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	f4 cf       	rjmp	.-24     	; 0x1fb4 <setRGBColor+0x1c>

00001fcc <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    1fcc:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    1fce:	86 30       	cpi	r24, 0x06	; 6
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	24 f0       	brlt	.+8      	; 0x1fdc <getRGBColor+0x10>
		if(led == 6) {
    1fd4:	86 30       	cpi	r24, 0x06	; 6
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	e1 f0       	breq	.+56     	; 0x2012 <getRGBColor+0x46>
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	fc 01       	movw	r30, r24
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e8 0f       	add	r30, r24
    1fe4:	f9 1f       	adc	r31, r25
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    1fea:	e5 51       	subi	r30, 0x15	; 21
    1fec:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	9c 93       	st	X, r25
    1ff6:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    1ff8:	84 81       	ldd	r24, Z+4	; 0x04
    1ffa:	95 81       	ldd	r25, Z+5	; 0x05
    1ffc:	13 96       	adiw	r26, 0x03	; 3
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24
    2002:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	93 81       	ldd	r25, Z+3	; 0x03
    2008:	15 96       	adiw	r26, 0x05	; 5
    200a:	9c 93       	st	X, r25
    200c:	8e 93       	st	-X, r24
    200e:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    2010:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    2012:	e2 e4       	ldi	r30, 0x42	; 66
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	e9 cf       	rjmp	.-46     	; 0x1fea <getRGBColor+0x1e>

00002018 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    2018:	43 e2       	ldi	r20, 0x23	; 35
    201a:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    201c:	fa 01       	movw	r30, r20
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	e5 51       	subi	r30, 0x15	; 21
    2024:	fd 4f       	sbci	r31, 0xFD	; 253
    2026:	01 90       	ld	r0, Z+
    2028:	f0 81       	ld	r31, Z
    202a:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    202c:	e2 95       	swap	r30
    202e:	f2 95       	swap	r31
    2030:	f0 7f       	andi	r31, 0xF0	; 240
    2032:	fe 27       	eor	r31, r30
    2034:	e0 7f       	andi	r30, 0xF0	; 240
    2036:	fe 27       	eor	r31, r30
    2038:	2c e0       	ldi	r18, 0x0C	; 12
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	08 c0       	rjmp	.+16     	; 0x204e <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    203e:	8b b3       	in	r24, 0x1b	; 27
    2040:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    2042:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    2044:	8b b3       	in	r24, 0x1b	; 27
    2046:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    2048:	21 15       	cp	r18, r1
    204a:	31 05       	cpc	r19, r1
    204c:	91 f0       	breq	.+36     	; 0x2072 <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    204e:	21 50       	subi	r18, 0x01	; 1
    2050:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    2052:	cf 01       	movw	r24, r30
    2054:	02 2e       	mov	r0, r18
    2056:	02 c0       	rjmp	.+4      	; 0x205c <displayColors+0x44>
    2058:	95 95       	asr	r25
    205a:	87 95       	ror	r24
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <displayColors+0x40>
    2060:	80 ff       	sbrs	r24, 0
    2062:	ed cf       	rjmp	.-38     	; 0x203e <displayColors+0x26>
				PINHIGH(BDI);
    2064:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    2066:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    2068:	8b b3       	in	r24, 0x1b	; 27
    206a:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    206c:	21 15       	cp	r18, r1
    206e:	31 05       	cpc	r19, r1
    2070:	71 f7       	brne	.-36     	; 0x204e <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    2072:	42 31       	cpi	r20, 0x12	; 18
    2074:	51 05       	cpc	r21, r1
    2076:	41 f0       	breq	.+16     	; 0x2088 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    2078:	41 50       	subi	r20, 0x01	; 1
    207a:	50 40       	sbci	r21, 0x00	; 0
    207c:	57 ff       	sbrs	r21, 7
    207e:	ce cf       	rjmp	.-100    	; 0x201c <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    2080:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    2082:	8b b3       	in	r24, 0x1b	; 27
    2084:	1b ba       	out	0x1b, r1	; 27
}
    2086:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    2088:	8b b3       	in	r24, 0x1b	; 27
    208a:	1b ba       	out	0x1b, r1	; 27
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    2090:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    2092:	2b b3       	in	r18, 0x1b	; 27
    2094:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	88 34       	cpi	r24, 0x48	; 72
    209a:	91 05       	cpc	r25, r1
    209c:	c9 f7       	brne	.-14     	; 0x2090 <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    209e:	41 e1       	ldi	r20, 0x11	; 17
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	bc cf       	rjmp	.-136    	; 0x201c <displayColors+0x4>

000020a4 <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    20a4:	10 92 ec 02 	sts	0x02EC, r1
    20a8:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    20ac:	10 92 f0 02 	sts	0x02F0, r1
    20b0:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    20b4:	10 92 ee 02 	sts	0x02EE, r1
    20b8:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    20bc:	10 92 f2 02 	sts	0x02F2, r1
    20c0:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    20c4:	10 92 f6 02 	sts	0x02F6, r1
    20c8:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    20cc:	10 92 f4 02 	sts	0x02F4, r1
    20d0:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    20d4:	0e 94 0c 10 	call	0x2018	; 0x2018 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    20d8:	84 e6       	ldi	r24, 0x64	; 100
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	90 93 ec 02 	sts	0x02EC, r25
    20e0:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    20e4:	10 92 f0 02 	sts	0x02F0, r1
    20e8:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    20ec:	10 92 ee 02 	sts	0x02EE, r1
    20f0:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    20f4:	90 93 f2 02 	sts	0x02F2, r25
    20f8:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    20fc:	10 92 f6 02 	sts	0x02F6, r1
    2100:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    2104:	10 92 f4 02 	sts	0x02F4, r1
    2108:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    210c:	90 91 06 01 	lds	r25, 0x0106
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    2114:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    2116:	86 b7       	in	r24, 0x36	; 54
    2118:	89 23       	and	r24, r25
    211a:	e9 f3       	breq	.-6      	; 0x2116 <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    211c:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    211e:	2f 5f       	subi	r18, 0xFF	; 255
    2120:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    2122:	22 33       	cpi	r18, 0x32	; 50
    2124:	31 05       	cpc	r19, r1
    2126:	b9 f7       	brne	.-18     	; 0x2116 <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    2128:	0e 94 0c 10 	call	0x2018	; 0x2018 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    212c:	10 92 ec 02 	sts	0x02EC, r1
    2130:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    2134:	10 92 f0 02 	sts	0x02F0, r1
    2138:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    213c:	10 92 ee 02 	sts	0x02EE, r1
    2140:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    2144:	10 92 f2 02 	sts	0x02F2, r1
    2148:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    214c:	10 92 f6 02 	sts	0x02F6, r1
    2150:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    2154:	10 92 f4 02 	sts	0x02F4, r1
    2158:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    215c:	90 91 06 01 	lds	r25, 0x0106
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    2164:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    2166:	86 b7       	in	r24, 0x36	; 54
    2168:	89 23       	and	r24, r25
    216a:	e9 f3       	breq	.-6      	; 0x2166 <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    216c:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    216e:	2f 5f       	subi	r18, 0xFF	; 255
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    2172:	22 33       	cpi	r18, 0x32	; 50
    2174:	31 05       	cpc	r19, r1
    2176:	b9 f7       	brne	.-18     	; 0x2166 <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    2178:	0e 94 0c 10 	call	0x2018	; 0x2018 <displayColors>
}
    217c:	08 95       	ret

0000217e <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    217e:	90 91 06 01 	lds	r25, 0x0106
    2182:	86 b7       	in	r24, 0x36	; 54
    2184:	89 23       	and	r24, r25
    2186:	e9 f3       	breq	.-6      	; 0x2182 <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    2188:	80 e1       	ldi	r24, 0x10	; 16
    218a:	86 bf       	out	0x36, r24	; 54
}
    218c:	08 95       	ret

0000218e <copy_data>:

void copy_data(char *dest, char *src, short length) {
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    2194:	14 16       	cp	r1, r20
    2196:	15 06       	cpc	r1, r21
    2198:	7c f4       	brge	.+30     	; 0x21b8 <copy_data+0x2a>
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    219e:	fe 01       	movw	r30, r28
    21a0:	e2 0f       	add	r30, r18
    21a2:	f3 1f       	adc	r31, r19
    21a4:	db 01       	movw	r26, r22
    21a6:	a2 0f       	add	r26, r18
    21a8:	b3 1f       	adc	r27, r19
    21aa:	8c 91       	ld	r24, X
    21ac:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    21ae:	2f 5f       	subi	r18, 0xFF	; 255
    21b0:	3f 4f       	sbci	r19, 0xFF	; 255
    21b2:	24 17       	cp	r18, r20
    21b4:	35 07       	cpc	r19, r21
    21b6:	9c f3       	brlt	.-26     	; 0x219e <copy_data+0x10>
		dest[i] = src[i];
	}
}
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    21be:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    21c0:	14 16       	cp	r1, r20
    21c2:	15 06       	cpc	r1, r21
    21c4:	64 f4       	brge	.+24     	; 0x21de <copy_short_data+0x20>
    21c6:	db 01       	movw	r26, r22
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    21cc:	8d 91       	ld	r24, X+
    21ce:	9d 91       	ld	r25, X+
    21d0:	81 93       	st	Z+, r24
    21d2:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    21d4:	2f 5f       	subi	r18, 0xFF	; 255
    21d6:	3f 4f       	sbci	r19, 0xFF	; 255
    21d8:	24 17       	cp	r18, r20
    21da:	35 07       	cpc	r19, r21
    21dc:	bc f3       	brlt	.-18     	; 0x21cc <copy_short_data+0xe>
    21de:	08 95       	ret

000021e0 <_fpadd_parts>:
    21e0:	a0 e0       	ldi	r26, 0x00	; 0
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e6 ef       	ldi	r30, 0xF6	; 246
    21e6:	f0 e1       	ldi	r31, 0x10	; 16
    21e8:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__>
    21ec:	dc 01       	movw	r26, r24
    21ee:	2b 01       	movw	r4, r22
    21f0:	fa 01       	movw	r30, r20
    21f2:	9c 91       	ld	r25, X
    21f4:	92 30       	cpi	r25, 0x02	; 2
    21f6:	08 f4       	brcc	.+2      	; 0x21fa <_fpadd_parts+0x1a>
    21f8:	39 c1       	rjmp	.+626    	; 0x246c <_fpadd_parts+0x28c>
    21fa:	eb 01       	movw	r28, r22
    21fc:	88 81       	ld	r24, Y
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	08 f4       	brcc	.+2      	; 0x2204 <_fpadd_parts+0x24>
    2202:	33 c1       	rjmp	.+614    	; 0x246a <_fpadd_parts+0x28a>
    2204:	94 30       	cpi	r25, 0x04	; 4
    2206:	69 f4       	brne	.+26     	; 0x2222 <_fpadd_parts+0x42>
    2208:	84 30       	cpi	r24, 0x04	; 4
    220a:	09 f0       	breq	.+2      	; 0x220e <_fpadd_parts+0x2e>
    220c:	2f c1       	rjmp	.+606    	; 0x246c <_fpadd_parts+0x28c>
    220e:	11 96       	adiw	r26, 0x01	; 1
    2210:	9c 91       	ld	r25, X
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	98 17       	cp	r25, r24
    2218:	09 f4       	brne	.+2      	; 0x221c <_fpadd_parts+0x3c>
    221a:	28 c1       	rjmp	.+592    	; 0x246c <_fpadd_parts+0x28c>
    221c:	a7 e0       	ldi	r26, 0x07	; 7
    221e:	b1 e0       	ldi	r27, 0x01	; 1
    2220:	25 c1       	rjmp	.+586    	; 0x246c <_fpadd_parts+0x28c>
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	09 f4       	brne	.+2      	; 0x2228 <_fpadd_parts+0x48>
    2226:	21 c1       	rjmp	.+578    	; 0x246a <_fpadd_parts+0x28a>
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	a9 f4       	brne	.+42     	; 0x2256 <_fpadd_parts+0x76>
    222c:	92 30       	cpi	r25, 0x02	; 2
    222e:	09 f0       	breq	.+2      	; 0x2232 <_fpadd_parts+0x52>
    2230:	1d c1       	rjmp	.+570    	; 0x246c <_fpadd_parts+0x28c>
    2232:	9a 01       	movw	r18, r20
    2234:	ad 01       	movw	r20, r26
    2236:	88 e0       	ldi	r24, 0x08	; 8
    2238:	ea 01       	movw	r28, r20
    223a:	09 90       	ld	r0, Y+
    223c:	ae 01       	movw	r20, r28
    223e:	e9 01       	movw	r28, r18
    2240:	09 92       	st	Y+, r0
    2242:	9e 01       	movw	r18, r28
    2244:	81 50       	subi	r24, 0x01	; 1
    2246:	c1 f7       	brne	.-16     	; 0x2238 <_fpadd_parts+0x58>
    2248:	e2 01       	movw	r28, r4
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	11 96       	adiw	r26, 0x01	; 1
    224e:	9c 91       	ld	r25, X
    2250:	89 23       	and	r24, r25
    2252:	81 83       	std	Z+1, r24	; 0x01
    2254:	08 c1       	rjmp	.+528    	; 0x2466 <_fpadd_parts+0x286>
    2256:	92 30       	cpi	r25, 0x02	; 2
    2258:	09 f4       	brne	.+2      	; 0x225c <_fpadd_parts+0x7c>
    225a:	07 c1       	rjmp	.+526    	; 0x246a <_fpadd_parts+0x28a>
    225c:	12 96       	adiw	r26, 0x02	; 2
    225e:	2d 90       	ld	r2, X+
    2260:	3c 90       	ld	r3, X
    2262:	13 97       	sbiw	r26, 0x03	; 3
    2264:	eb 01       	movw	r28, r22
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	14 96       	adiw	r26, 0x04	; 4
    226c:	ad 90       	ld	r10, X+
    226e:	bd 90       	ld	r11, X+
    2270:	cd 90       	ld	r12, X+
    2272:	dc 90       	ld	r13, X
    2274:	17 97       	sbiw	r26, 0x07	; 7
    2276:	ec 80       	ldd	r14, Y+4	; 0x04
    2278:	fd 80       	ldd	r15, Y+5	; 0x05
    227a:	0e 81       	ldd	r16, Y+6	; 0x06
    227c:	1f 81       	ldd	r17, Y+7	; 0x07
    227e:	91 01       	movw	r18, r2
    2280:	28 1b       	sub	r18, r24
    2282:	39 0b       	sbc	r19, r25
    2284:	b9 01       	movw	r22, r18
    2286:	37 ff       	sbrs	r19, 7
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <_fpadd_parts+0xb2>
    228a:	66 27       	eor	r22, r22
    228c:	77 27       	eor	r23, r23
    228e:	62 1b       	sub	r22, r18
    2290:	73 0b       	sbc	r23, r19
    2292:	60 32       	cpi	r22, 0x20	; 32
    2294:	71 05       	cpc	r23, r1
    2296:	0c f0       	brlt	.+2      	; 0x229a <_fpadd_parts+0xba>
    2298:	61 c0       	rjmp	.+194    	; 0x235c <_fpadd_parts+0x17c>
    229a:	12 16       	cp	r1, r18
    229c:	13 06       	cpc	r1, r19
    229e:	6c f5       	brge	.+90     	; 0x22fa <_fpadd_parts+0x11a>
    22a0:	37 01       	movw	r6, r14
    22a2:	48 01       	movw	r8, r16
    22a4:	06 2e       	mov	r0, r22
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <_fpadd_parts+0xd0>
    22a8:	96 94       	lsr	r9
    22aa:	87 94       	ror	r8
    22ac:	77 94       	ror	r7
    22ae:	67 94       	ror	r6
    22b0:	0a 94       	dec	r0
    22b2:	d2 f7       	brpl	.-12     	; 0x22a8 <_fpadd_parts+0xc8>
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	04 c0       	rjmp	.+8      	; 0x22c6 <_fpadd_parts+0xe6>
    22be:	22 0f       	add	r18, r18
    22c0:	33 1f       	adc	r19, r19
    22c2:	44 1f       	adc	r20, r20
    22c4:	55 1f       	adc	r21, r21
    22c6:	6a 95       	dec	r22
    22c8:	d2 f7       	brpl	.-12     	; 0x22be <_fpadd_parts+0xde>
    22ca:	21 50       	subi	r18, 0x01	; 1
    22cc:	30 40       	sbci	r19, 0x00	; 0
    22ce:	40 40       	sbci	r20, 0x00	; 0
    22d0:	50 40       	sbci	r21, 0x00	; 0
    22d2:	2e 21       	and	r18, r14
    22d4:	3f 21       	and	r19, r15
    22d6:	40 23       	and	r20, r16
    22d8:	51 23       	and	r21, r17
    22da:	21 15       	cp	r18, r1
    22dc:	31 05       	cpc	r19, r1
    22de:	41 05       	cpc	r20, r1
    22e0:	51 05       	cpc	r21, r1
    22e2:	21 f0       	breq	.+8      	; 0x22ec <_fpadd_parts+0x10c>
    22e4:	21 e0       	ldi	r18, 0x01	; 1
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	79 01       	movw	r14, r18
    22ee:	8a 01       	movw	r16, r20
    22f0:	e6 28       	or	r14, r6
    22f2:	f7 28       	or	r15, r7
    22f4:	08 29       	or	r16, r8
    22f6:	19 29       	or	r17, r9
    22f8:	3c c0       	rjmp	.+120    	; 0x2372 <_fpadd_parts+0x192>
    22fa:	23 2b       	or	r18, r19
    22fc:	d1 f1       	breq	.+116    	; 0x2372 <_fpadd_parts+0x192>
    22fe:	26 0e       	add	r2, r22
    2300:	37 1e       	adc	r3, r23
    2302:	35 01       	movw	r6, r10
    2304:	46 01       	movw	r8, r12
    2306:	06 2e       	mov	r0, r22
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <_fpadd_parts+0x132>
    230a:	96 94       	lsr	r9
    230c:	87 94       	ror	r8
    230e:	77 94       	ror	r7
    2310:	67 94       	ror	r6
    2312:	0a 94       	dec	r0
    2314:	d2 f7       	brpl	.-12     	; 0x230a <_fpadd_parts+0x12a>
    2316:	21 e0       	ldi	r18, 0x01	; 1
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <_fpadd_parts+0x148>
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	44 1f       	adc	r20, r20
    2326:	55 1f       	adc	r21, r21
    2328:	6a 95       	dec	r22
    232a:	d2 f7       	brpl	.-12     	; 0x2320 <_fpadd_parts+0x140>
    232c:	21 50       	subi	r18, 0x01	; 1
    232e:	30 40       	sbci	r19, 0x00	; 0
    2330:	40 40       	sbci	r20, 0x00	; 0
    2332:	50 40       	sbci	r21, 0x00	; 0
    2334:	2a 21       	and	r18, r10
    2336:	3b 21       	and	r19, r11
    2338:	4c 21       	and	r20, r12
    233a:	5d 21       	and	r21, r13
    233c:	21 15       	cp	r18, r1
    233e:	31 05       	cpc	r19, r1
    2340:	41 05       	cpc	r20, r1
    2342:	51 05       	cpc	r21, r1
    2344:	21 f0       	breq	.+8      	; 0x234e <_fpadd_parts+0x16e>
    2346:	21 e0       	ldi	r18, 0x01	; 1
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	59 01       	movw	r10, r18
    2350:	6a 01       	movw	r12, r20
    2352:	a6 28       	or	r10, r6
    2354:	b7 28       	or	r11, r7
    2356:	c8 28       	or	r12, r8
    2358:	d9 28       	or	r13, r9
    235a:	0b c0       	rjmp	.+22     	; 0x2372 <_fpadd_parts+0x192>
    235c:	82 15       	cp	r24, r2
    235e:	93 05       	cpc	r25, r3
    2360:	2c f0       	brlt	.+10     	; 0x236c <_fpadd_parts+0x18c>
    2362:	1c 01       	movw	r2, r24
    2364:	aa 24       	eor	r10, r10
    2366:	bb 24       	eor	r11, r11
    2368:	65 01       	movw	r12, r10
    236a:	03 c0       	rjmp	.+6      	; 0x2372 <_fpadd_parts+0x192>
    236c:	ee 24       	eor	r14, r14
    236e:	ff 24       	eor	r15, r15
    2370:	87 01       	movw	r16, r14
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 91       	ld	r25, X
    2376:	d2 01       	movw	r26, r4
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	8c 91       	ld	r24, X
    237c:	98 17       	cp	r25, r24
    237e:	09 f4       	brne	.+2      	; 0x2382 <_fpadd_parts+0x1a2>
    2380:	45 c0       	rjmp	.+138    	; 0x240c <_fpadd_parts+0x22c>
    2382:	99 23       	and	r25, r25
    2384:	39 f0       	breq	.+14     	; 0x2394 <_fpadd_parts+0x1b4>
    2386:	a8 01       	movw	r20, r16
    2388:	97 01       	movw	r18, r14
    238a:	2a 19       	sub	r18, r10
    238c:	3b 09       	sbc	r19, r11
    238e:	4c 09       	sbc	r20, r12
    2390:	5d 09       	sbc	r21, r13
    2392:	06 c0       	rjmp	.+12     	; 0x23a0 <_fpadd_parts+0x1c0>
    2394:	a6 01       	movw	r20, r12
    2396:	95 01       	movw	r18, r10
    2398:	2e 19       	sub	r18, r14
    239a:	3f 09       	sbc	r19, r15
    239c:	40 0b       	sbc	r20, r16
    239e:	51 0b       	sbc	r21, r17
    23a0:	57 fd       	sbrc	r21, 7
    23a2:	08 c0       	rjmp	.+16     	; 0x23b4 <_fpadd_parts+0x1d4>
    23a4:	11 82       	std	Z+1, r1	; 0x01
    23a6:	33 82       	std	Z+3, r3	; 0x03
    23a8:	22 82       	std	Z+2, r2	; 0x02
    23aa:	24 83       	std	Z+4, r18	; 0x04
    23ac:	35 83       	std	Z+5, r19	; 0x05
    23ae:	46 83       	std	Z+6, r20	; 0x06
    23b0:	57 83       	std	Z+7, r21	; 0x07
    23b2:	1d c0       	rjmp	.+58     	; 0x23ee <_fpadd_parts+0x20e>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	81 83       	std	Z+1, r24	; 0x01
    23b8:	33 82       	std	Z+3, r3	; 0x03
    23ba:	22 82       	std	Z+2, r2	; 0x02
    23bc:	88 27       	eor	r24, r24
    23be:	99 27       	eor	r25, r25
    23c0:	dc 01       	movw	r26, r24
    23c2:	82 1b       	sub	r24, r18
    23c4:	93 0b       	sbc	r25, r19
    23c6:	a4 0b       	sbc	r26, r20
    23c8:	b5 0b       	sbc	r27, r21
    23ca:	84 83       	std	Z+4, r24	; 0x04
    23cc:	95 83       	std	Z+5, r25	; 0x05
    23ce:	a6 83       	std	Z+6, r26	; 0x06
    23d0:	b7 83       	std	Z+7, r27	; 0x07
    23d2:	0d c0       	rjmp	.+26     	; 0x23ee <_fpadd_parts+0x20e>
    23d4:	22 0f       	add	r18, r18
    23d6:	33 1f       	adc	r19, r19
    23d8:	44 1f       	adc	r20, r20
    23da:	55 1f       	adc	r21, r21
    23dc:	24 83       	std	Z+4, r18	; 0x04
    23de:	35 83       	std	Z+5, r19	; 0x05
    23e0:	46 83       	std	Z+6, r20	; 0x06
    23e2:	57 83       	std	Z+7, r21	; 0x07
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	93 83       	std	Z+3, r25	; 0x03
    23ec:	82 83       	std	Z+2, r24	; 0x02
    23ee:	24 81       	ldd	r18, Z+4	; 0x04
    23f0:	35 81       	ldd	r19, Z+5	; 0x05
    23f2:	46 81       	ldd	r20, Z+6	; 0x06
    23f4:	57 81       	ldd	r21, Z+7	; 0x07
    23f6:	da 01       	movw	r26, r20
    23f8:	c9 01       	movw	r24, r18
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	a1 09       	sbc	r26, r1
    23fe:	b1 09       	sbc	r27, r1
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	af 4f       	sbci	r26, 0xFF	; 255
    2406:	bf 43       	sbci	r27, 0x3F	; 63
    2408:	28 f3       	brcs	.-54     	; 0x23d4 <_fpadd_parts+0x1f4>
    240a:	0b c0       	rjmp	.+22     	; 0x2422 <_fpadd_parts+0x242>
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	33 82       	std	Z+3, r3	; 0x03
    2410:	22 82       	std	Z+2, r2	; 0x02
    2412:	ea 0c       	add	r14, r10
    2414:	fb 1c       	adc	r15, r11
    2416:	0c 1d       	adc	r16, r12
    2418:	1d 1d       	adc	r17, r13
    241a:	e4 82       	std	Z+4, r14	; 0x04
    241c:	f5 82       	std	Z+5, r15	; 0x05
    241e:	06 83       	std	Z+6, r16	; 0x06
    2420:	17 83       	std	Z+7, r17	; 0x07
    2422:	83 e0       	ldi	r24, 0x03	; 3
    2424:	80 83       	st	Z, r24
    2426:	24 81       	ldd	r18, Z+4	; 0x04
    2428:	35 81       	ldd	r19, Z+5	; 0x05
    242a:	46 81       	ldd	r20, Z+6	; 0x06
    242c:	57 81       	ldd	r21, Z+7	; 0x07
    242e:	57 ff       	sbrs	r21, 7
    2430:	1a c0       	rjmp	.+52     	; 0x2466 <_fpadd_parts+0x286>
    2432:	c9 01       	movw	r24, r18
    2434:	aa 27       	eor	r26, r26
    2436:	97 fd       	sbrc	r25, 7
    2438:	a0 95       	com	r26
    243a:	ba 2f       	mov	r27, r26
    243c:	81 70       	andi	r24, 0x01	; 1
    243e:	90 70       	andi	r25, 0x00	; 0
    2440:	a0 70       	andi	r26, 0x00	; 0
    2442:	b0 70       	andi	r27, 0x00	; 0
    2444:	56 95       	lsr	r21
    2446:	47 95       	ror	r20
    2448:	37 95       	ror	r19
    244a:	27 95       	ror	r18
    244c:	82 2b       	or	r24, r18
    244e:	93 2b       	or	r25, r19
    2450:	a4 2b       	or	r26, r20
    2452:	b5 2b       	or	r27, r21
    2454:	84 83       	std	Z+4, r24	; 0x04
    2456:	95 83       	std	Z+5, r25	; 0x05
    2458:	a6 83       	std	Z+6, r26	; 0x06
    245a:	b7 83       	std	Z+7, r27	; 0x07
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	93 83       	std	Z+3, r25	; 0x03
    2464:	82 83       	std	Z+2, r24	; 0x02
    2466:	df 01       	movw	r26, r30
    2468:	01 c0       	rjmp	.+2      	; 0x246c <_fpadd_parts+0x28c>
    246a:	d2 01       	movw	r26, r4
    246c:	cd 01       	movw	r24, r26
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	e2 e1       	ldi	r30, 0x12	; 18
    2474:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__>

00002478 <__subsf3>:
    2478:	a0 e2       	ldi	r26, 0x20	; 32
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e2 e4       	ldi	r30, 0x42	; 66
    247e:	f2 e1       	ldi	r31, 0x12	; 18
    2480:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__+0x18>
    2484:	69 83       	std	Y+1, r22	; 0x01
    2486:	7a 83       	std	Y+2, r23	; 0x02
    2488:	8b 83       	std	Y+3, r24	; 0x03
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	2d 83       	std	Y+5, r18	; 0x05
    248e:	3e 83       	std	Y+6, r19	; 0x06
    2490:	4f 83       	std	Y+7, r20	; 0x07
    2492:	58 87       	std	Y+8, r21	; 0x08
    2494:	e9 e0       	ldi	r30, 0x09	; 9
    2496:	ee 2e       	mov	r14, r30
    2498:	f1 2c       	mov	r15, r1
    249a:	ec 0e       	add	r14, r28
    249c:	fd 1e       	adc	r15, r29
    249e:	ce 01       	movw	r24, r28
    24a0:	01 96       	adiw	r24, 0x01	; 1
    24a2:	b7 01       	movw	r22, r14
    24a4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    24a8:	8e 01       	movw	r16, r28
    24aa:	0f 5e       	subi	r16, 0xEF	; 239
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	ce 01       	movw	r24, r28
    24b0:	05 96       	adiw	r24, 0x05	; 5
    24b2:	b8 01       	movw	r22, r16
    24b4:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    24b8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	89 27       	eor	r24, r25
    24be:	8a 8b       	std	Y+18, r24	; 0x12
    24c0:	c7 01       	movw	r24, r14
    24c2:	b8 01       	movw	r22, r16
    24c4:	ae 01       	movw	r20, r28
    24c6:	47 5e       	subi	r20, 0xE7	; 231
    24c8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ca:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_fpadd_parts>
    24ce:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__pack_f>
    24d2:	a0 96       	adiw	r28, 0x20	; 32
    24d4:	e6 e0       	ldi	r30, 0x06	; 6
    24d6:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__+0x18>

000024da <__addsf3>:
    24da:	a0 e2       	ldi	r26, 0x20	; 32
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e3 e7       	ldi	r30, 0x73	; 115
    24e0:	f2 e1       	ldi	r31, 0x12	; 18
    24e2:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__prologue_saves__+0x18>
    24e6:	69 83       	std	Y+1, r22	; 0x01
    24e8:	7a 83       	std	Y+2, r23	; 0x02
    24ea:	8b 83       	std	Y+3, r24	; 0x03
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	2d 83       	std	Y+5, r18	; 0x05
    24f0:	3e 83       	std	Y+6, r19	; 0x06
    24f2:	4f 83       	std	Y+7, r20	; 0x07
    24f4:	58 87       	std	Y+8, r21	; 0x08
    24f6:	f9 e0       	ldi	r31, 0x09	; 9
    24f8:	ef 2e       	mov	r14, r31
    24fa:	f1 2c       	mov	r15, r1
    24fc:	ec 0e       	add	r14, r28
    24fe:	fd 1e       	adc	r15, r29
    2500:	ce 01       	movw	r24, r28
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	b7 01       	movw	r22, r14
    2506:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    250a:	8e 01       	movw	r16, r28
    250c:	0f 5e       	subi	r16, 0xEF	; 239
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	ce 01       	movw	r24, r28
    2512:	05 96       	adiw	r24, 0x05	; 5
    2514:	b8 01       	movw	r22, r16
    2516:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    251a:	c7 01       	movw	r24, r14
    251c:	b8 01       	movw	r22, r16
    251e:	ae 01       	movw	r20, r28
    2520:	47 5e       	subi	r20, 0xE7	; 231
    2522:	5f 4f       	sbci	r21, 0xFF	; 255
    2524:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_fpadd_parts>
    2528:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__pack_f>
    252c:	a0 96       	adiw	r28, 0x20	; 32
    252e:	e6 e0       	ldi	r30, 0x06	; 6
    2530:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__epilogue_restores__+0x18>

00002534 <__mulsf3>:
    2534:	a0 e2       	ldi	r26, 0x20	; 32
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e0 ea       	ldi	r30, 0xA0	; 160
    253a:	f2 e1       	ldi	r31, 0x12	; 18
    253c:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__>
    2540:	69 83       	std	Y+1, r22	; 0x01
    2542:	7a 83       	std	Y+2, r23	; 0x02
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	2d 83       	std	Y+5, r18	; 0x05
    254a:	3e 83       	std	Y+6, r19	; 0x06
    254c:	4f 83       	std	Y+7, r20	; 0x07
    254e:	58 87       	std	Y+8, r21	; 0x08
    2550:	ce 01       	movw	r24, r28
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	be 01       	movw	r22, r28
    2556:	67 5f       	subi	r22, 0xF7	; 247
    2558:	7f 4f       	sbci	r23, 0xFF	; 255
    255a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    255e:	ce 01       	movw	r24, r28
    2560:	05 96       	adiw	r24, 0x05	; 5
    2562:	be 01       	movw	r22, r28
    2564:	6f 5e       	subi	r22, 0xEF	; 239
    2566:	7f 4f       	sbci	r23, 0xFF	; 255
    2568:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    256c:	99 85       	ldd	r25, Y+9	; 0x09
    256e:	92 30       	cpi	r25, 0x02	; 2
    2570:	88 f0       	brcs	.+34     	; 0x2594 <__mulsf3+0x60>
    2572:	89 89       	ldd	r24, Y+17	; 0x11
    2574:	82 30       	cpi	r24, 0x02	; 2
    2576:	c8 f0       	brcs	.+50     	; 0x25aa <__mulsf3+0x76>
    2578:	94 30       	cpi	r25, 0x04	; 4
    257a:	19 f4       	brne	.+6      	; 0x2582 <__mulsf3+0x4e>
    257c:	82 30       	cpi	r24, 0x02	; 2
    257e:	51 f4       	brne	.+20     	; 0x2594 <__mulsf3+0x60>
    2580:	04 c0       	rjmp	.+8      	; 0x258a <__mulsf3+0x56>
    2582:	84 30       	cpi	r24, 0x04	; 4
    2584:	29 f4       	brne	.+10     	; 0x2590 <__mulsf3+0x5c>
    2586:	92 30       	cpi	r25, 0x02	; 2
    2588:	81 f4       	brne	.+32     	; 0x25aa <__mulsf3+0x76>
    258a:	87 e0       	ldi	r24, 0x07	; 7
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	c6 c0       	rjmp	.+396    	; 0x271c <__mulsf3+0x1e8>
    2590:	92 30       	cpi	r25, 0x02	; 2
    2592:	49 f4       	brne	.+18     	; 0x25a6 <__mulsf3+0x72>
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	9a 85       	ldd	r25, Y+10	; 0x0a
    2598:	8a 89       	ldd	r24, Y+18	; 0x12
    259a:	98 13       	cpse	r25, r24
    259c:	21 e0       	ldi	r18, 0x01	; 1
    259e:	2a 87       	std	Y+10, r18	; 0x0a
    25a0:	ce 01       	movw	r24, r28
    25a2:	09 96       	adiw	r24, 0x09	; 9
    25a4:	bb c0       	rjmp	.+374    	; 0x271c <__mulsf3+0x1e8>
    25a6:	82 30       	cpi	r24, 0x02	; 2
    25a8:	49 f4       	brne	.+18     	; 0x25bc <__mulsf3+0x88>
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	8a 89       	ldd	r24, Y+18	; 0x12
    25b0:	98 13       	cpse	r25, r24
    25b2:	21 e0       	ldi	r18, 0x01	; 1
    25b4:	2a 8b       	std	Y+18, r18	; 0x12
    25b6:	ce 01       	movw	r24, r28
    25b8:	41 96       	adiw	r24, 0x11	; 17
    25ba:	b0 c0       	rjmp	.+352    	; 0x271c <__mulsf3+0x1e8>
    25bc:	2d 84       	ldd	r2, Y+13	; 0x0d
    25be:	3e 84       	ldd	r3, Y+14	; 0x0e
    25c0:	4f 84       	ldd	r4, Y+15	; 0x0f
    25c2:	58 88       	ldd	r5, Y+16	; 0x10
    25c4:	6d 88       	ldd	r6, Y+21	; 0x15
    25c6:	7e 88       	ldd	r7, Y+22	; 0x16
    25c8:	8f 88       	ldd	r8, Y+23	; 0x17
    25ca:	98 8c       	ldd	r9, Y+24	; 0x18
    25cc:	ee 24       	eor	r14, r14
    25ce:	ff 24       	eor	r15, r15
    25d0:	87 01       	movw	r16, r14
    25d2:	aa 24       	eor	r10, r10
    25d4:	bb 24       	eor	r11, r11
    25d6:	65 01       	movw	r12, r10
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	e0 e0       	ldi	r30, 0x00	; 0
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	c1 01       	movw	r24, r2
    25e6:	81 70       	andi	r24, 0x01	; 1
    25e8:	90 70       	andi	r25, 0x00	; 0
    25ea:	89 2b       	or	r24, r25
    25ec:	e9 f0       	breq	.+58     	; 0x2628 <__mulsf3+0xf4>
    25ee:	e6 0c       	add	r14, r6
    25f0:	f7 1c       	adc	r15, r7
    25f2:	08 1d       	adc	r16, r8
    25f4:	19 1d       	adc	r17, r9
    25f6:	9a 01       	movw	r18, r20
    25f8:	ab 01       	movw	r20, r22
    25fa:	2a 0d       	add	r18, r10
    25fc:	3b 1d       	adc	r19, r11
    25fe:	4c 1d       	adc	r20, r12
    2600:	5d 1d       	adc	r21, r13
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a0 e0       	ldi	r26, 0x00	; 0
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e6 14       	cp	r14, r6
    260c:	f7 04       	cpc	r15, r7
    260e:	08 05       	cpc	r16, r8
    2610:	19 05       	cpc	r17, r9
    2612:	20 f4       	brcc	.+8      	; 0x261c <__mulsf3+0xe8>
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e0       	ldi	r26, 0x00	; 0
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	ba 01       	movw	r22, r20
    261e:	a9 01       	movw	r20, r18
    2620:	48 0f       	add	r20, r24
    2622:	59 1f       	adc	r21, r25
    2624:	6a 1f       	adc	r22, r26
    2626:	7b 1f       	adc	r23, r27
    2628:	aa 0c       	add	r10, r10
    262a:	bb 1c       	adc	r11, r11
    262c:	cc 1c       	adc	r12, r12
    262e:	dd 1c       	adc	r13, r13
    2630:	97 fe       	sbrs	r9, 7
    2632:	08 c0       	rjmp	.+16     	; 0x2644 <__mulsf3+0x110>
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e0       	ldi	r26, 0x00	; 0
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	a8 2a       	or	r10, r24
    263e:	b9 2a       	or	r11, r25
    2640:	ca 2a       	or	r12, r26
    2642:	db 2a       	or	r13, r27
    2644:	31 96       	adiw	r30, 0x01	; 1
    2646:	e0 32       	cpi	r30, 0x20	; 32
    2648:	f1 05       	cpc	r31, r1
    264a:	49 f0       	breq	.+18     	; 0x265e <__mulsf3+0x12a>
    264c:	66 0c       	add	r6, r6
    264e:	77 1c       	adc	r7, r7
    2650:	88 1c       	adc	r8, r8
    2652:	99 1c       	adc	r9, r9
    2654:	56 94       	lsr	r5
    2656:	47 94       	ror	r4
    2658:	37 94       	ror	r3
    265a:	27 94       	ror	r2
    265c:	c3 cf       	rjmp	.-122    	; 0x25e4 <__mulsf3+0xb0>
    265e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2660:	ea 89       	ldd	r30, Y+18	; 0x12
    2662:	2b 89       	ldd	r18, Y+19	; 0x13
    2664:	3c 89       	ldd	r19, Y+20	; 0x14
    2666:	8b 85       	ldd	r24, Y+11	; 0x0b
    2668:	9c 85       	ldd	r25, Y+12	; 0x0c
    266a:	28 0f       	add	r18, r24
    266c:	39 1f       	adc	r19, r25
    266e:	2e 5f       	subi	r18, 0xFE	; 254
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	17 c0       	rjmp	.+46     	; 0x26a2 <__mulsf3+0x16e>
    2674:	ca 01       	movw	r24, r20
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	89 2b       	or	r24, r25
    267c:	61 f0       	breq	.+24     	; 0x2696 <__mulsf3+0x162>
    267e:	16 95       	lsr	r17
    2680:	07 95       	ror	r16
    2682:	f7 94       	ror	r15
    2684:	e7 94       	ror	r14
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	a0 e0       	ldi	r26, 0x00	; 0
    268c:	b0 e8       	ldi	r27, 0x80	; 128
    268e:	e8 2a       	or	r14, r24
    2690:	f9 2a       	or	r15, r25
    2692:	0a 2b       	or	r16, r26
    2694:	1b 2b       	or	r17, r27
    2696:	76 95       	lsr	r23
    2698:	67 95       	ror	r22
    269a:	57 95       	ror	r21
    269c:	47 95       	ror	r20
    269e:	2f 5f       	subi	r18, 0xFF	; 255
    26a0:	3f 4f       	sbci	r19, 0xFF	; 255
    26a2:	77 fd       	sbrc	r23, 7
    26a4:	e7 cf       	rjmp	.-50     	; 0x2674 <__mulsf3+0x140>
    26a6:	0c c0       	rjmp	.+24     	; 0x26c0 <__mulsf3+0x18c>
    26a8:	44 0f       	add	r20, r20
    26aa:	55 1f       	adc	r21, r21
    26ac:	66 1f       	adc	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	17 fd       	sbrc	r17, 7
    26b2:	41 60       	ori	r20, 0x01	; 1
    26b4:	ee 0c       	add	r14, r14
    26b6:	ff 1c       	adc	r15, r15
    26b8:	00 1f       	adc	r16, r16
    26ba:	11 1f       	adc	r17, r17
    26bc:	21 50       	subi	r18, 0x01	; 1
    26be:	30 40       	sbci	r19, 0x00	; 0
    26c0:	40 30       	cpi	r20, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	59 07       	cpc	r21, r25
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	69 07       	cpc	r22, r25
    26ca:	90 e4       	ldi	r25, 0x40	; 64
    26cc:	79 07       	cpc	r23, r25
    26ce:	60 f3       	brcs	.-40     	; 0x26a8 <__mulsf3+0x174>
    26d0:	2b 8f       	std	Y+27, r18	; 0x1b
    26d2:	3c 8f       	std	Y+28, r19	; 0x1c
    26d4:	db 01       	movw	r26, r22
    26d6:	ca 01       	movw	r24, r20
    26d8:	8f 77       	andi	r24, 0x7F	; 127
    26da:	90 70       	andi	r25, 0x00	; 0
    26dc:	a0 70       	andi	r26, 0x00	; 0
    26de:	b0 70       	andi	r27, 0x00	; 0
    26e0:	80 34       	cpi	r24, 0x40	; 64
    26e2:	91 05       	cpc	r25, r1
    26e4:	a1 05       	cpc	r26, r1
    26e6:	b1 05       	cpc	r27, r1
    26e8:	61 f4       	brne	.+24     	; 0x2702 <__mulsf3+0x1ce>
    26ea:	47 fd       	sbrc	r20, 7
    26ec:	0a c0       	rjmp	.+20     	; 0x2702 <__mulsf3+0x1ce>
    26ee:	e1 14       	cp	r14, r1
    26f0:	f1 04       	cpc	r15, r1
    26f2:	01 05       	cpc	r16, r1
    26f4:	11 05       	cpc	r17, r1
    26f6:	29 f0       	breq	.+10     	; 0x2702 <__mulsf3+0x1ce>
    26f8:	40 5c       	subi	r20, 0xC0	; 192
    26fa:	5f 4f       	sbci	r21, 0xFF	; 255
    26fc:	6f 4f       	sbci	r22, 0xFF	; 255
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	40 78       	andi	r20, 0x80	; 128
    2702:	1a 8e       	std	Y+26, r1	; 0x1a
    2704:	fe 17       	cp	r31, r30
    2706:	11 f0       	breq	.+4      	; 0x270c <__mulsf3+0x1d8>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	8a 8f       	std	Y+26, r24	; 0x1a
    270c:	4d 8f       	std	Y+29, r20	; 0x1d
    270e:	5e 8f       	std	Y+30, r21	; 0x1e
    2710:	6f 8f       	std	Y+31, r22	; 0x1f
    2712:	78 a3       	std	Y+32, r23	; 0x20
    2714:	83 e0       	ldi	r24, 0x03	; 3
    2716:	89 8f       	std	Y+25, r24	; 0x19
    2718:	ce 01       	movw	r24, r28
    271a:	49 96       	adiw	r24, 0x19	; 25
    271c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__pack_f>
    2720:	a0 96       	adiw	r28, 0x20	; 32
    2722:	e2 e1       	ldi	r30, 0x12	; 18
    2724:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__>

00002728 <__divsf3>:
    2728:	a8 e1       	ldi	r26, 0x18	; 24
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	ea e9       	ldi	r30, 0x9A	; 154
    272e:	f3 e1       	ldi	r31, 0x13	; 19
    2730:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x10>
    2734:	69 83       	std	Y+1, r22	; 0x01
    2736:	7a 83       	std	Y+2, r23	; 0x02
    2738:	8b 83       	std	Y+3, r24	; 0x03
    273a:	9c 83       	std	Y+4, r25	; 0x04
    273c:	2d 83       	std	Y+5, r18	; 0x05
    273e:	3e 83       	std	Y+6, r19	; 0x06
    2740:	4f 83       	std	Y+7, r20	; 0x07
    2742:	58 87       	std	Y+8, r21	; 0x08
    2744:	b9 e0       	ldi	r27, 0x09	; 9
    2746:	eb 2e       	mov	r14, r27
    2748:	f1 2c       	mov	r15, r1
    274a:	ec 0e       	add	r14, r28
    274c:	fd 1e       	adc	r15, r29
    274e:	ce 01       	movw	r24, r28
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	b7 01       	movw	r22, r14
    2754:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    2758:	8e 01       	movw	r16, r28
    275a:	0f 5e       	subi	r16, 0xEF	; 239
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	ce 01       	movw	r24, r28
    2760:	05 96       	adiw	r24, 0x05	; 5
    2762:	b8 01       	movw	r22, r16
    2764:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    2768:	29 85       	ldd	r18, Y+9	; 0x09
    276a:	22 30       	cpi	r18, 0x02	; 2
    276c:	08 f4       	brcc	.+2      	; 0x2770 <__divsf3+0x48>
    276e:	7e c0       	rjmp	.+252    	; 0x286c <__divsf3+0x144>
    2770:	39 89       	ldd	r19, Y+17	; 0x11
    2772:	32 30       	cpi	r19, 0x02	; 2
    2774:	10 f4       	brcc	.+4      	; 0x277a <__divsf3+0x52>
    2776:	b8 01       	movw	r22, r16
    2778:	7c c0       	rjmp	.+248    	; 0x2872 <__divsf3+0x14a>
    277a:	8a 85       	ldd	r24, Y+10	; 0x0a
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	89 27       	eor	r24, r25
    2780:	8a 87       	std	Y+10, r24	; 0x0a
    2782:	24 30       	cpi	r18, 0x04	; 4
    2784:	11 f0       	breq	.+4      	; 0x278a <__divsf3+0x62>
    2786:	22 30       	cpi	r18, 0x02	; 2
    2788:	31 f4       	brne	.+12     	; 0x2796 <__divsf3+0x6e>
    278a:	23 17       	cp	r18, r19
    278c:	09 f0       	breq	.+2      	; 0x2790 <__divsf3+0x68>
    278e:	6e c0       	rjmp	.+220    	; 0x286c <__divsf3+0x144>
    2790:	67 e0       	ldi	r22, 0x07	; 7
    2792:	71 e0       	ldi	r23, 0x01	; 1
    2794:	6e c0       	rjmp	.+220    	; 0x2872 <__divsf3+0x14a>
    2796:	34 30       	cpi	r19, 0x04	; 4
    2798:	39 f4       	brne	.+14     	; 0x27a8 <__divsf3+0x80>
    279a:	1d 86       	std	Y+13, r1	; 0x0d
    279c:	1e 86       	std	Y+14, r1	; 0x0e
    279e:	1f 86       	std	Y+15, r1	; 0x0f
    27a0:	18 8a       	std	Y+16, r1	; 0x10
    27a2:	1c 86       	std	Y+12, r1	; 0x0c
    27a4:	1b 86       	std	Y+11, r1	; 0x0b
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <__divsf3+0x88>
    27a8:	32 30       	cpi	r19, 0x02	; 2
    27aa:	21 f4       	brne	.+8      	; 0x27b4 <__divsf3+0x8c>
    27ac:	84 e0       	ldi	r24, 0x04	; 4
    27ae:	89 87       	std	Y+9, r24	; 0x09
    27b0:	b7 01       	movw	r22, r14
    27b2:	5f c0       	rjmp	.+190    	; 0x2872 <__divsf3+0x14a>
    27b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    27b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    27b8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ba:	9c 89       	ldd	r25, Y+20	; 0x14
    27bc:	28 1b       	sub	r18, r24
    27be:	39 0b       	sbc	r19, r25
    27c0:	3c 87       	std	Y+12, r19	; 0x0c
    27c2:	2b 87       	std	Y+11, r18	; 0x0b
    27c4:	ed 84       	ldd	r14, Y+13	; 0x0d
    27c6:	fe 84       	ldd	r15, Y+14	; 0x0e
    27c8:	0f 85       	ldd	r16, Y+15	; 0x0f
    27ca:	18 89       	ldd	r17, Y+16	; 0x10
    27cc:	ad 88       	ldd	r10, Y+21	; 0x15
    27ce:	be 88       	ldd	r11, Y+22	; 0x16
    27d0:	cf 88       	ldd	r12, Y+23	; 0x17
    27d2:	d8 8c       	ldd	r13, Y+24	; 0x18
    27d4:	ea 14       	cp	r14, r10
    27d6:	fb 04       	cpc	r15, r11
    27d8:	0c 05       	cpc	r16, r12
    27da:	1d 05       	cpc	r17, r13
    27dc:	40 f4       	brcc	.+16     	; 0x27ee <__divsf3+0xc6>
    27de:	ee 0c       	add	r14, r14
    27e0:	ff 1c       	adc	r15, r15
    27e2:	00 1f       	adc	r16, r16
    27e4:	11 1f       	adc	r17, r17
    27e6:	21 50       	subi	r18, 0x01	; 1
    27e8:	30 40       	sbci	r19, 0x00	; 0
    27ea:	3c 87       	std	Y+12, r19	; 0x0c
    27ec:	2b 87       	std	Y+11, r18	; 0x0b
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	b0 e4       	ldi	r27, 0x40	; 64
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	ea 14       	cp	r14, r10
    2804:	fb 04       	cpc	r15, r11
    2806:	0c 05       	cpc	r16, r12
    2808:	1d 05       	cpc	r17, r13
    280a:	40 f0       	brcs	.+16     	; 0x281c <__divsf3+0xf4>
    280c:	28 2b       	or	r18, r24
    280e:	39 2b       	or	r19, r25
    2810:	4a 2b       	or	r20, r26
    2812:	5b 2b       	or	r21, r27
    2814:	ea 18       	sub	r14, r10
    2816:	fb 08       	sbc	r15, r11
    2818:	0c 09       	sbc	r16, r12
    281a:	1d 09       	sbc	r17, r13
    281c:	b6 95       	lsr	r27
    281e:	a7 95       	ror	r26
    2820:	97 95       	ror	r25
    2822:	87 95       	ror	r24
    2824:	ee 0c       	add	r14, r14
    2826:	ff 1c       	adc	r15, r15
    2828:	00 1f       	adc	r16, r16
    282a:	11 1f       	adc	r17, r17
    282c:	6f 5f       	subi	r22, 0xFF	; 255
    282e:	7f 4f       	sbci	r23, 0xFF	; 255
    2830:	6f 31       	cpi	r22, 0x1F	; 31
    2832:	71 05       	cpc	r23, r1
    2834:	31 f7       	brne	.-52     	; 0x2802 <__divsf3+0xda>
    2836:	da 01       	movw	r26, r20
    2838:	c9 01       	movw	r24, r18
    283a:	8f 77       	andi	r24, 0x7F	; 127
    283c:	90 70       	andi	r25, 0x00	; 0
    283e:	a0 70       	andi	r26, 0x00	; 0
    2840:	b0 70       	andi	r27, 0x00	; 0
    2842:	80 34       	cpi	r24, 0x40	; 64
    2844:	91 05       	cpc	r25, r1
    2846:	a1 05       	cpc	r26, r1
    2848:	b1 05       	cpc	r27, r1
    284a:	61 f4       	brne	.+24     	; 0x2864 <__divsf3+0x13c>
    284c:	27 fd       	sbrc	r18, 7
    284e:	0a c0       	rjmp	.+20     	; 0x2864 <__divsf3+0x13c>
    2850:	e1 14       	cp	r14, r1
    2852:	f1 04       	cpc	r15, r1
    2854:	01 05       	cpc	r16, r1
    2856:	11 05       	cpc	r17, r1
    2858:	29 f0       	breq	.+10     	; 0x2864 <__divsf3+0x13c>
    285a:	20 5c       	subi	r18, 0xC0	; 192
    285c:	3f 4f       	sbci	r19, 0xFF	; 255
    285e:	4f 4f       	sbci	r20, 0xFF	; 255
    2860:	5f 4f       	sbci	r21, 0xFF	; 255
    2862:	20 78       	andi	r18, 0x80	; 128
    2864:	2d 87       	std	Y+13, r18	; 0x0d
    2866:	3e 87       	std	Y+14, r19	; 0x0e
    2868:	4f 87       	std	Y+15, r20	; 0x0f
    286a:	58 8b       	std	Y+16, r21	; 0x10
    286c:	be 01       	movw	r22, r28
    286e:	67 5f       	subi	r22, 0xF7	; 247
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	cb 01       	movw	r24, r22
    2874:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__pack_f>
    2878:	68 96       	adiw	r28, 0x18	; 24
    287a:	ea e0       	ldi	r30, 0x0A	; 10
    287c:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x10>

00002880 <__floatsisf>:
    2880:	a8 e0       	ldi	r26, 0x08	; 8
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e6 e4       	ldi	r30, 0x46	; 70
    2886:	f4 e1       	ldi	r31, 0x14	; 20
    2888:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__prologue_saves__+0x12>
    288c:	9b 01       	movw	r18, r22
    288e:	ac 01       	movw	r20, r24
    2890:	83 e0       	ldi	r24, 0x03	; 3
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	da 01       	movw	r26, r20
    2896:	c9 01       	movw	r24, r18
    2898:	88 27       	eor	r24, r24
    289a:	b7 fd       	sbrc	r27, 7
    289c:	83 95       	inc	r24
    289e:	99 27       	eor	r25, r25
    28a0:	aa 27       	eor	r26, r26
    28a2:	bb 27       	eor	r27, r27
    28a4:	b8 2e       	mov	r11, r24
    28a6:	21 15       	cp	r18, r1
    28a8:	31 05       	cpc	r19, r1
    28aa:	41 05       	cpc	r20, r1
    28ac:	51 05       	cpc	r21, r1
    28ae:	19 f4       	brne	.+6      	; 0x28b6 <__floatsisf+0x36>
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	89 83       	std	Y+1, r24	; 0x01
    28b4:	3a c0       	rjmp	.+116    	; 0x292a <__floatsisf+0xaa>
    28b6:	88 23       	and	r24, r24
    28b8:	a9 f0       	breq	.+42     	; 0x28e4 <__floatsisf+0x64>
    28ba:	20 30       	cpi	r18, 0x00	; 0
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	38 07       	cpc	r19, r24
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	48 07       	cpc	r20, r24
    28c4:	80 e8       	ldi	r24, 0x80	; 128
    28c6:	58 07       	cpc	r21, r24
    28c8:	29 f4       	brne	.+10     	; 0x28d4 <__floatsisf+0x54>
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	9f ec       	ldi	r25, 0xCF	; 207
    28d2:	30 c0       	rjmp	.+96     	; 0x2934 <__floatsisf+0xb4>
    28d4:	ee 24       	eor	r14, r14
    28d6:	ff 24       	eor	r15, r15
    28d8:	87 01       	movw	r16, r14
    28da:	e2 1a       	sub	r14, r18
    28dc:	f3 0a       	sbc	r15, r19
    28de:	04 0b       	sbc	r16, r20
    28e0:	15 0b       	sbc	r17, r21
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <__floatsisf+0x68>
    28e4:	79 01       	movw	r14, r18
    28e6:	8a 01       	movw	r16, r20
    28e8:	8e e1       	ldi	r24, 0x1E	; 30
    28ea:	c8 2e       	mov	r12, r24
    28ec:	d1 2c       	mov	r13, r1
    28ee:	dc 82       	std	Y+4, r13	; 0x04
    28f0:	cb 82       	std	Y+3, r12	; 0x03
    28f2:	ed 82       	std	Y+5, r14	; 0x05
    28f4:	fe 82       	std	Y+6, r15	; 0x06
    28f6:	0f 83       	std	Y+7, r16	; 0x07
    28f8:	18 87       	std	Y+8, r17	; 0x08
    28fa:	c8 01       	movw	r24, r16
    28fc:	b7 01       	movw	r22, r14
    28fe:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__clzsi2>
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	18 16       	cp	r1, r24
    2906:	19 06       	cpc	r1, r25
    2908:	84 f4       	brge	.+32     	; 0x292a <__floatsisf+0xaa>
    290a:	08 2e       	mov	r0, r24
    290c:	04 c0       	rjmp	.+8      	; 0x2916 <__floatsisf+0x96>
    290e:	ee 0c       	add	r14, r14
    2910:	ff 1c       	adc	r15, r15
    2912:	00 1f       	adc	r16, r16
    2914:	11 1f       	adc	r17, r17
    2916:	0a 94       	dec	r0
    2918:	d2 f7       	brpl	.-12     	; 0x290e <__floatsisf+0x8e>
    291a:	ed 82       	std	Y+5, r14	; 0x05
    291c:	fe 82       	std	Y+6, r15	; 0x06
    291e:	0f 83       	std	Y+7, r16	; 0x07
    2920:	18 87       	std	Y+8, r17	; 0x08
    2922:	c8 1a       	sub	r12, r24
    2924:	d9 0a       	sbc	r13, r25
    2926:	dc 82       	std	Y+4, r13	; 0x04
    2928:	cb 82       	std	Y+3, r12	; 0x03
    292a:	ba 82       	std	Y+2, r11	; 0x02
    292c:	ce 01       	movw	r24, r28
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__pack_f>
    2934:	28 96       	adiw	r28, 0x08	; 8
    2936:	e9 e0       	ldi	r30, 0x09	; 9
    2938:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__epilogue_restores__+0x12>

0000293c <__fixsfsi>:
    293c:	ac e0       	ldi	r26, 0x0C	; 12
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e4 ea       	ldi	r30, 0xA4	; 164
    2942:	f4 e1       	ldi	r31, 0x14	; 20
    2944:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x20>
    2948:	69 83       	std	Y+1, r22	; 0x01
    294a:	7a 83       	std	Y+2, r23	; 0x02
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	ce 01       	movw	r24, r28
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	be 01       	movw	r22, r28
    2956:	6b 5f       	subi	r22, 0xFB	; 251
    2958:	7f 4f       	sbci	r23, 0xFF	; 255
    295a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <__unpack_f>
    295e:	8d 81       	ldd	r24, Y+5	; 0x05
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	61 f1       	breq	.+88     	; 0x29bc <__fixsfsi+0x80>
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	50 f1       	brcs	.+84     	; 0x29bc <__fixsfsi+0x80>
    2968:	84 30       	cpi	r24, 0x04	; 4
    296a:	21 f4       	brne	.+8      	; 0x2974 <__fixsfsi+0x38>
    296c:	8e 81       	ldd	r24, Y+6	; 0x06
    296e:	88 23       	and	r24, r24
    2970:	51 f1       	breq	.+84     	; 0x29c6 <__fixsfsi+0x8a>
    2972:	2e c0       	rjmp	.+92     	; 0x29d0 <__fixsfsi+0x94>
    2974:	2f 81       	ldd	r18, Y+7	; 0x07
    2976:	38 85       	ldd	r19, Y+8	; 0x08
    2978:	37 fd       	sbrc	r19, 7
    297a:	20 c0       	rjmp	.+64     	; 0x29bc <__fixsfsi+0x80>
    297c:	6e 81       	ldd	r22, Y+6	; 0x06
    297e:	2f 31       	cpi	r18, 0x1F	; 31
    2980:	31 05       	cpc	r19, r1
    2982:	1c f0       	brlt	.+6      	; 0x298a <__fixsfsi+0x4e>
    2984:	66 23       	and	r22, r22
    2986:	f9 f0       	breq	.+62     	; 0x29c6 <__fixsfsi+0x8a>
    2988:	23 c0       	rjmp	.+70     	; 0x29d0 <__fixsfsi+0x94>
    298a:	8e e1       	ldi	r24, 0x1E	; 30
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	82 1b       	sub	r24, r18
    2990:	93 0b       	sbc	r25, r19
    2992:	29 85       	ldd	r18, Y+9	; 0x09
    2994:	3a 85       	ldd	r19, Y+10	; 0x0a
    2996:	4b 85       	ldd	r20, Y+11	; 0x0b
    2998:	5c 85       	ldd	r21, Y+12	; 0x0c
    299a:	04 c0       	rjmp	.+8      	; 0x29a4 <__fixsfsi+0x68>
    299c:	56 95       	lsr	r21
    299e:	47 95       	ror	r20
    29a0:	37 95       	ror	r19
    29a2:	27 95       	ror	r18
    29a4:	8a 95       	dec	r24
    29a6:	d2 f7       	brpl	.-12     	; 0x299c <__fixsfsi+0x60>
    29a8:	66 23       	and	r22, r22
    29aa:	b1 f0       	breq	.+44     	; 0x29d8 <__fixsfsi+0x9c>
    29ac:	50 95       	com	r21
    29ae:	40 95       	com	r20
    29b0:	30 95       	com	r19
    29b2:	21 95       	neg	r18
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	4f 4f       	sbci	r20, 0xFF	; 255
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	0e c0       	rjmp	.+28     	; 0x29d8 <__fixsfsi+0x9c>
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	50 e0       	ldi	r21, 0x00	; 0
    29c4:	09 c0       	rjmp	.+18     	; 0x29d8 <__fixsfsi+0x9c>
    29c6:	2f ef       	ldi	r18, 0xFF	; 255
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f ef       	ldi	r20, 0xFF	; 255
    29cc:	5f e7       	ldi	r21, 0x7F	; 127
    29ce:	04 c0       	rjmp	.+8      	; 0x29d8 <__fixsfsi+0x9c>
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	50 e8       	ldi	r21, 0x80	; 128
    29d8:	b9 01       	movw	r22, r18
    29da:	ca 01       	movw	r24, r20
    29dc:	2c 96       	adiw	r28, 0x0c	; 12
    29de:	e2 e0       	ldi	r30, 0x02	; 2
    29e0:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x20>

000029e4 <__clzsi2>:
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	7b 01       	movw	r14, r22
    29ee:	8c 01       	movw	r16, r24
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	e8 16       	cp	r14, r24
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	f8 06       	cpc	r15, r24
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	08 07       	cpc	r16, r24
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	18 07       	cpc	r17, r24
    2a00:	88 f4       	brcc	.+34     	; 0x2a24 <__clzsi2+0x40>
    2a02:	8f ef       	ldi	r24, 0xFF	; 255
    2a04:	e8 16       	cp	r14, r24
    2a06:	f1 04       	cpc	r15, r1
    2a08:	01 05       	cpc	r16, r1
    2a0a:	11 05       	cpc	r17, r1
    2a0c:	31 f0       	breq	.+12     	; 0x2a1a <__clzsi2+0x36>
    2a0e:	28 f0       	brcs	.+10     	; 0x2a1a <__clzsi2+0x36>
    2a10:	88 e0       	ldi	r24, 0x08	; 8
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e0       	ldi	r26, 0x00	; 0
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	17 c0       	rjmp	.+46     	; 0x2a48 <__clzsi2+0x64>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	12 c0       	rjmp	.+36     	; 0x2a48 <__clzsi2+0x64>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	e8 16       	cp	r14, r24
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	f8 06       	cpc	r15, r24
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	08 07       	cpc	r16, r24
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	18 07       	cpc	r17, r24
    2a34:	28 f0       	brcs	.+10     	; 0x2a40 <__clzsi2+0x5c>
    2a36:	88 e1       	ldi	r24, 0x18	; 24
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <__clzsi2+0x64>
    2a40:	80 e1       	ldi	r24, 0x10	; 16
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	20 e2       	ldi	r18, 0x20	; 32
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	28 1b       	sub	r18, r24
    2a52:	39 0b       	sbc	r19, r25
    2a54:	4a 0b       	sbc	r20, r26
    2a56:	5b 0b       	sbc	r21, r27
    2a58:	04 c0       	rjmp	.+8      	; 0x2a62 <__clzsi2+0x7e>
    2a5a:	16 95       	lsr	r17
    2a5c:	07 95       	ror	r16
    2a5e:	f7 94       	ror	r15
    2a60:	e7 94       	ror	r14
    2a62:	8a 95       	dec	r24
    2a64:	d2 f7       	brpl	.-12     	; 0x2a5a <__clzsi2+0x76>
    2a66:	f7 01       	movw	r30, r14
    2a68:	e1 5f       	subi	r30, 0xF1	; 241
    2a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6c:	80 81       	ld	r24, Z
    2a6e:	28 1b       	sub	r18, r24
    2a70:	31 09       	sbc	r19, r1
    2a72:	41 09       	sbc	r20, r1
    2a74:	51 09       	sbc	r21, r1
    2a76:	c9 01       	movw	r24, r18
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	08 95       	ret

00002a82 <__pack_f>:
    2a82:	df 92       	push	r13
    2a84:	ef 92       	push	r14
    2a86:	ff 92       	push	r15
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	e4 80       	ldd	r14, Z+4	; 0x04
    2a90:	f5 80       	ldd	r15, Z+5	; 0x05
    2a92:	06 81       	ldd	r16, Z+6	; 0x06
    2a94:	17 81       	ldd	r17, Z+7	; 0x07
    2a96:	d1 80       	ldd	r13, Z+1	; 0x01
    2a98:	80 81       	ld	r24, Z
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	48 f4       	brcc	.+18     	; 0x2ab0 <__pack_f+0x2e>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e1       	ldi	r26, 0x10	; 16
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e8 2a       	or	r14, r24
    2aa8:	f9 2a       	or	r15, r25
    2aaa:	0a 2b       	or	r16, r26
    2aac:	1b 2b       	or	r17, r27
    2aae:	a5 c0       	rjmp	.+330    	; 0x2bfa <__pack_f+0x178>
    2ab0:	84 30       	cpi	r24, 0x04	; 4
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <__pack_f+0x34>
    2ab4:	9f c0       	rjmp	.+318    	; 0x2bf4 <__pack_f+0x172>
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	21 f4       	brne	.+8      	; 0x2ac2 <__pack_f+0x40>
    2aba:	ee 24       	eor	r14, r14
    2abc:	ff 24       	eor	r15, r15
    2abe:	87 01       	movw	r16, r14
    2ac0:	05 c0       	rjmp	.+10     	; 0x2acc <__pack_f+0x4a>
    2ac2:	e1 14       	cp	r14, r1
    2ac4:	f1 04       	cpc	r15, r1
    2ac6:	01 05       	cpc	r16, r1
    2ac8:	11 05       	cpc	r17, r1
    2aca:	19 f4       	brne	.+6      	; 0x2ad2 <__pack_f+0x50>
    2acc:	e0 e0       	ldi	r30, 0x00	; 0
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	96 c0       	rjmp	.+300    	; 0x2bfe <__pack_f+0x17c>
    2ad2:	62 81       	ldd	r22, Z+2	; 0x02
    2ad4:	73 81       	ldd	r23, Z+3	; 0x03
    2ad6:	9f ef       	ldi	r25, 0xFF	; 255
    2ad8:	62 38       	cpi	r22, 0x82	; 130
    2ada:	79 07       	cpc	r23, r25
    2adc:	0c f0       	brlt	.+2      	; 0x2ae0 <__pack_f+0x5e>
    2ade:	5b c0       	rjmp	.+182    	; 0x2b96 <__pack_f+0x114>
    2ae0:	22 e8       	ldi	r18, 0x82	; 130
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	26 1b       	sub	r18, r22
    2ae6:	37 0b       	sbc	r19, r23
    2ae8:	2a 31       	cpi	r18, 0x1A	; 26
    2aea:	31 05       	cpc	r19, r1
    2aec:	2c f0       	brlt	.+10     	; 0x2af8 <__pack_f+0x76>
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e0       	ldi	r20, 0x00	; 0
    2af4:	50 e0       	ldi	r21, 0x00	; 0
    2af6:	2a c0       	rjmp	.+84     	; 0x2b4c <__pack_f+0xca>
    2af8:	b8 01       	movw	r22, r16
    2afa:	a7 01       	movw	r20, r14
    2afc:	02 2e       	mov	r0, r18
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <__pack_f+0x86>
    2b00:	76 95       	lsr	r23
    2b02:	67 95       	ror	r22
    2b04:	57 95       	ror	r21
    2b06:	47 95       	ror	r20
    2b08:	0a 94       	dec	r0
    2b0a:	d2 f7       	brpl	.-12     	; 0x2b00 <__pack_f+0x7e>
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e0       	ldi	r26, 0x00	; 0
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	04 c0       	rjmp	.+8      	; 0x2b1e <__pack_f+0x9c>
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	aa 1f       	adc	r26, r26
    2b1c:	bb 1f       	adc	r27, r27
    2b1e:	2a 95       	dec	r18
    2b20:	d2 f7       	brpl	.-12     	; 0x2b16 <__pack_f+0x94>
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	a1 09       	sbc	r26, r1
    2b26:	b1 09       	sbc	r27, r1
    2b28:	8e 21       	and	r24, r14
    2b2a:	9f 21       	and	r25, r15
    2b2c:	a0 23       	and	r26, r16
    2b2e:	b1 23       	and	r27, r17
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	a1 05       	cpc	r26, r1
    2b34:	b1 05       	cpc	r27, r1
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <__pack_f+0xbe>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	9a 01       	movw	r18, r20
    2b42:	ab 01       	movw	r20, r22
    2b44:	28 2b       	or	r18, r24
    2b46:	39 2b       	or	r19, r25
    2b48:	4a 2b       	or	r20, r26
    2b4a:	5b 2b       	or	r21, r27
    2b4c:	da 01       	movw	r26, r20
    2b4e:	c9 01       	movw	r24, r18
    2b50:	8f 77       	andi	r24, 0x7F	; 127
    2b52:	90 70       	andi	r25, 0x00	; 0
    2b54:	a0 70       	andi	r26, 0x00	; 0
    2b56:	b0 70       	andi	r27, 0x00	; 0
    2b58:	80 34       	cpi	r24, 0x40	; 64
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	a1 05       	cpc	r26, r1
    2b5e:	b1 05       	cpc	r27, r1
    2b60:	39 f4       	brne	.+14     	; 0x2b70 <__pack_f+0xee>
    2b62:	27 ff       	sbrs	r18, 7
    2b64:	09 c0       	rjmp	.+18     	; 0x2b78 <__pack_f+0xf6>
    2b66:	20 5c       	subi	r18, 0xC0	; 192
    2b68:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6a:	4f 4f       	sbci	r20, 0xFF	; 255
    2b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <__pack_f+0xf6>
    2b70:	21 5c       	subi	r18, 0xC1	; 193
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	4f 4f       	sbci	r20, 0xFF	; 255
    2b76:	5f 4f       	sbci	r21, 0xFF	; 255
    2b78:	e0 e0       	ldi	r30, 0x00	; 0
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	20 30       	cpi	r18, 0x00	; 0
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	3a 07       	cpc	r19, r26
    2b82:	a0 e0       	ldi	r26, 0x00	; 0
    2b84:	4a 07       	cpc	r20, r26
    2b86:	a0 e4       	ldi	r26, 0x40	; 64
    2b88:	5a 07       	cpc	r21, r26
    2b8a:	10 f0       	brcs	.+4      	; 0x2b90 <__pack_f+0x10e>
    2b8c:	e1 e0       	ldi	r30, 0x01	; 1
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	79 01       	movw	r14, r18
    2b92:	8a 01       	movw	r16, r20
    2b94:	27 c0       	rjmp	.+78     	; 0x2be4 <__pack_f+0x162>
    2b96:	60 38       	cpi	r22, 0x80	; 128
    2b98:	71 05       	cpc	r23, r1
    2b9a:	64 f5       	brge	.+88     	; 0x2bf4 <__pack_f+0x172>
    2b9c:	fb 01       	movw	r30, r22
    2b9e:	e1 58       	subi	r30, 0x81	; 129
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	d8 01       	movw	r26, r16
    2ba4:	c7 01       	movw	r24, r14
    2ba6:	8f 77       	andi	r24, 0x7F	; 127
    2ba8:	90 70       	andi	r25, 0x00	; 0
    2baa:	a0 70       	andi	r26, 0x00	; 0
    2bac:	b0 70       	andi	r27, 0x00	; 0
    2bae:	80 34       	cpi	r24, 0x40	; 64
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	a1 05       	cpc	r26, r1
    2bb4:	b1 05       	cpc	r27, r1
    2bb6:	39 f4       	brne	.+14     	; 0x2bc6 <__pack_f+0x144>
    2bb8:	e7 fe       	sbrs	r14, 7
    2bba:	0d c0       	rjmp	.+26     	; 0x2bd6 <__pack_f+0x154>
    2bbc:	80 e4       	ldi	r24, 0x40	; 64
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e0       	ldi	r26, 0x00	; 0
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <__pack_f+0x14c>
    2bc6:	8f e3       	ldi	r24, 0x3F	; 63
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e0       	ldi	r26, 0x00	; 0
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e8 0e       	add	r14, r24
    2bd0:	f9 1e       	adc	r15, r25
    2bd2:	0a 1f       	adc	r16, r26
    2bd4:	1b 1f       	adc	r17, r27
    2bd6:	17 ff       	sbrs	r17, 7
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <__pack_f+0x162>
    2bda:	16 95       	lsr	r17
    2bdc:	07 95       	ror	r16
    2bde:	f7 94       	ror	r15
    2be0:	e7 94       	ror	r14
    2be2:	31 96       	adiw	r30, 0x01	; 1
    2be4:	87 e0       	ldi	r24, 0x07	; 7
    2be6:	16 95       	lsr	r17
    2be8:	07 95       	ror	r16
    2bea:	f7 94       	ror	r15
    2bec:	e7 94       	ror	r14
    2bee:	8a 95       	dec	r24
    2bf0:	d1 f7       	brne	.-12     	; 0x2be6 <__pack_f+0x164>
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <__pack_f+0x17c>
    2bf4:	ee 24       	eor	r14, r14
    2bf6:	ff 24       	eor	r15, r15
    2bf8:	87 01       	movw	r16, r14
    2bfa:	ef ef       	ldi	r30, 0xFF	; 255
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	6e 2f       	mov	r22, r30
    2c00:	67 95       	ror	r22
    2c02:	66 27       	eor	r22, r22
    2c04:	67 95       	ror	r22
    2c06:	90 2f       	mov	r25, r16
    2c08:	9f 77       	andi	r25, 0x7F	; 127
    2c0a:	d7 94       	ror	r13
    2c0c:	dd 24       	eor	r13, r13
    2c0e:	d7 94       	ror	r13
    2c10:	8e 2f       	mov	r24, r30
    2c12:	86 95       	lsr	r24
    2c14:	49 2f       	mov	r20, r25
    2c16:	46 2b       	or	r20, r22
    2c18:	58 2f       	mov	r21, r24
    2c1a:	5d 29       	or	r21, r13
    2c1c:	b7 01       	movw	r22, r14
    2c1e:	ca 01       	movw	r24, r20
    2c20:	1f 91       	pop	r17
    2c22:	0f 91       	pop	r16
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	08 95       	ret

00002c2c <__unpack_f>:
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	db 01       	movw	r26, r22
    2c30:	40 81       	ld	r20, Z
    2c32:	51 81       	ldd	r21, Z+1	; 0x01
    2c34:	22 81       	ldd	r18, Z+2	; 0x02
    2c36:	62 2f       	mov	r22, r18
    2c38:	6f 77       	andi	r22, 0x7F	; 127
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	22 1f       	adc	r18, r18
    2c3e:	22 27       	eor	r18, r18
    2c40:	22 1f       	adc	r18, r18
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	89 2f       	mov	r24, r25
    2c46:	88 0f       	add	r24, r24
    2c48:	82 2b       	or	r24, r18
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	99 1f       	adc	r25, r25
    2c50:	99 27       	eor	r25, r25
    2c52:	99 1f       	adc	r25, r25
    2c54:	11 96       	adiw	r26, 0x01	; 1
    2c56:	9c 93       	st	X, r25
    2c58:	11 97       	sbiw	r26, 0x01	; 1
    2c5a:	21 15       	cp	r18, r1
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	a9 f5       	brne	.+106    	; 0x2cca <__unpack_f+0x9e>
    2c60:	41 15       	cp	r20, r1
    2c62:	51 05       	cpc	r21, r1
    2c64:	61 05       	cpc	r22, r1
    2c66:	71 05       	cpc	r23, r1
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <__unpack_f+0x42>
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	37 c0       	rjmp	.+110    	; 0x2cdc <__unpack_f+0xb0>
    2c6e:	82 e8       	ldi	r24, 0x82	; 130
    2c70:	9f ef       	ldi	r25, 0xFF	; 255
    2c72:	13 96       	adiw	r26, 0x03	; 3
    2c74:	9c 93       	st	X, r25
    2c76:	8e 93       	st	-X, r24
    2c78:	12 97       	sbiw	r26, 0x02	; 2
    2c7a:	9a 01       	movw	r18, r20
    2c7c:	ab 01       	movw	r20, r22
    2c7e:	67 e0       	ldi	r22, 0x07	; 7
    2c80:	22 0f       	add	r18, r18
    2c82:	33 1f       	adc	r19, r19
    2c84:	44 1f       	adc	r20, r20
    2c86:	55 1f       	adc	r21, r21
    2c88:	6a 95       	dec	r22
    2c8a:	d1 f7       	brne	.-12     	; 0x2c80 <__unpack_f+0x54>
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	8c 93       	st	X, r24
    2c90:	0d c0       	rjmp	.+26     	; 0x2cac <__unpack_f+0x80>
    2c92:	22 0f       	add	r18, r18
    2c94:	33 1f       	adc	r19, r19
    2c96:	44 1f       	adc	r20, r20
    2c98:	55 1f       	adc	r21, r21
    2c9a:	12 96       	adiw	r26, 0x02	; 2
    2c9c:	8d 91       	ld	r24, X+
    2c9e:	9c 91       	ld	r25, X
    2ca0:	13 97       	sbiw	r26, 0x03	; 3
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	13 96       	adiw	r26, 0x03	; 3
    2ca6:	9c 93       	st	X, r25
    2ca8:	8e 93       	st	-X, r24
    2caa:	12 97       	sbiw	r26, 0x02	; 2
    2cac:	20 30       	cpi	r18, 0x00	; 0
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	38 07       	cpc	r19, r24
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	48 07       	cpc	r20, r24
    2cb6:	80 e4       	ldi	r24, 0x40	; 64
    2cb8:	58 07       	cpc	r21, r24
    2cba:	58 f3       	brcs	.-42     	; 0x2c92 <__unpack_f+0x66>
    2cbc:	14 96       	adiw	r26, 0x04	; 4
    2cbe:	2d 93       	st	X+, r18
    2cc0:	3d 93       	st	X+, r19
    2cc2:	4d 93       	st	X+, r20
    2cc4:	5c 93       	st	X, r21
    2cc6:	17 97       	sbiw	r26, 0x07	; 7
    2cc8:	08 95       	ret
    2cca:	2f 3f       	cpi	r18, 0xFF	; 255
    2ccc:	31 05       	cpc	r19, r1
    2cce:	79 f4       	brne	.+30     	; 0x2cee <__unpack_f+0xc2>
    2cd0:	41 15       	cp	r20, r1
    2cd2:	51 05       	cpc	r21, r1
    2cd4:	61 05       	cpc	r22, r1
    2cd6:	71 05       	cpc	r23, r1
    2cd8:	19 f4       	brne	.+6      	; 0x2ce0 <__unpack_f+0xb4>
    2cda:	84 e0       	ldi	r24, 0x04	; 4
    2cdc:	8c 93       	st	X, r24
    2cde:	08 95       	ret
    2ce0:	64 ff       	sbrs	r22, 4
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <__unpack_f+0xbe>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	8c 93       	st	X, r24
    2ce8:	12 c0       	rjmp	.+36     	; 0x2d0e <__unpack_f+0xe2>
    2cea:	1c 92       	st	X, r1
    2cec:	10 c0       	rjmp	.+32     	; 0x2d0e <__unpack_f+0xe2>
    2cee:	2f 57       	subi	r18, 0x7F	; 127
    2cf0:	30 40       	sbci	r19, 0x00	; 0
    2cf2:	13 96       	adiw	r26, 0x03	; 3
    2cf4:	3c 93       	st	X, r19
    2cf6:	2e 93       	st	-X, r18
    2cf8:	12 97       	sbiw	r26, 0x02	; 2
    2cfa:	83 e0       	ldi	r24, 0x03	; 3
    2cfc:	8c 93       	st	X, r24
    2cfe:	87 e0       	ldi	r24, 0x07	; 7
    2d00:	44 0f       	add	r20, r20
    2d02:	55 1f       	adc	r21, r21
    2d04:	66 1f       	adc	r22, r22
    2d06:	77 1f       	adc	r23, r23
    2d08:	8a 95       	dec	r24
    2d0a:	d1 f7       	brne	.-12     	; 0x2d00 <__unpack_f+0xd4>
    2d0c:	70 64       	ori	r23, 0x40	; 64
    2d0e:	14 96       	adiw	r26, 0x04	; 4
    2d10:	4d 93       	st	X+, r20
    2d12:	5d 93       	st	X+, r21
    2d14:	6d 93       	st	X+, r22
    2d16:	7c 93       	st	X, r23
    2d18:	17 97       	sbiw	r26, 0x07	; 7
    2d1a:	08 95       	ret

00002d1c <__prologue_saves__>:
    2d1c:	2f 92       	push	r2
    2d1e:	3f 92       	push	r3
    2d20:	4f 92       	push	r4
    2d22:	5f 92       	push	r5
    2d24:	6f 92       	push	r6
    2d26:	7f 92       	push	r7
    2d28:	8f 92       	push	r8
    2d2a:	9f 92       	push	r9
    2d2c:	af 92       	push	r10
    2d2e:	bf 92       	push	r11
    2d30:	cf 92       	push	r12
    2d32:	df 92       	push	r13
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	ca 1b       	sub	r28, r26
    2d46:	db 0b       	sbc	r29, r27
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	09 94       	ijmp

00002d54 <__epilogue_restores__>:
    2d54:	2a 88       	ldd	r2, Y+18	; 0x12
    2d56:	39 88       	ldd	r3, Y+17	; 0x11
    2d58:	48 88       	ldd	r4, Y+16	; 0x10
    2d5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d66:	b9 84       	ldd	r11, Y+9	; 0x09
    2d68:	c8 84       	ldd	r12, Y+8	; 0x08
    2d6a:	df 80       	ldd	r13, Y+7	; 0x07
    2d6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d70:	0c 81       	ldd	r16, Y+4	; 0x04
    2d72:	1b 81       	ldd	r17, Y+3	; 0x03
    2d74:	aa 81       	ldd	r26, Y+2	; 0x02
    2d76:	b9 81       	ldd	r27, Y+1	; 0x01
    2d78:	ce 0f       	add	r28, r30
    2d7a:	d1 1d       	adc	r29, r1
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	ed 01       	movw	r28, r26
    2d88:	08 95       	ret

00002d8a <_exit>:
    2d8a:	f8 94       	cli

00002d8c <__stop_program>:
    2d8c:	ff cf       	rjmp	.-2      	; 0x2d8c <__stop_program>


test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00005f5e  00005ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ce5  00800210  00800210  00006102  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00006102  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005e2  00000000  00000000  00006182  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bbc  00000000  00000000  00006764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bc  00000000  00000000  00008320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014bc  00000000  00000000  00008adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00009f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a9c  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000138f  00000000  00000000  0000acd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000c063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__ctors_end>
       4:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
       8:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
       c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      10:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      14:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      18:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      1c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      20:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      24:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      28:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      2c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      30:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      34:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      38:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      3c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      40:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      44:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      48:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      4c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      50:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      54:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      58:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      5c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      60:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      64:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      68:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      6c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      70:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      74:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      78:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      7c:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      80:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      84:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>
      88:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__bad_interrupt>

0000008c <song_instructions>:
      8c:	ff 73 00 00 08 04 00 40 00 00 00 80 00 01 00 00     .s.....@........
      9c:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
      ac:	00 00 00 00 00 08 00 01 08 04 00 40 00 00 00 80     ...........@....
      bc:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
      cc:	00 01 00 00 00 00 00 00 00 08 00 02 08 04 00 40     ...............@
      dc:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
      ec:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 03     .`.`............
      fc:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     10c:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     11c:	00 08 00 04 03 ff 00 00 00 80 00 01 00 10 00 05     ................
     12c:	08 08 00 40 00 00 00 80 00 08 00 00 00 00 00 00     ...@............
     13c:	00 20 00 ff 00 1e 00 00 00 08 00 00 00 00 00 00     . ..............
     14c:	00 20 00 ff 00 00 00 00 00 08 00 00 00 00 00 00     . ..............
     15c:	00 20 00 ff 00 00 00 1e 00 08 00 00 00 00 00 00     . ..............
     16c:	00 20 00 06 08 08 00 40 00 00 00 80 00 08 00 00     . .....@........
     17c:	00 00 00 00 00 20 00 ff 00 1e 00 00 00 08 00 00     ..... ..........
     18c:	00 00 00 00 00 20 00 ff 00 00 00 00 00 08 00 00     ..... ..........
     19c:	00 00 00 00 00 20 00 ff 00 00 00 1e 00 08 00 00     ..... ..........
     1ac:	00 00 00 00 00 20 00 07 03 ff 00 00 00 80 00 01     ..... ..........
     1bc:	00 10 00 08 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
     1cc:	00 00 00 00 00 08 00 60 00 60 00 60 00 01 00 00     .......`.`.`....
     1dc:	00 00 00 00 00 08 00 09 08 04 00 40 00 00 00 80     ...........@....
     1ec:	00 01 00 00 00 00 00 00 00 08 00 60 00 60 00 60     ...........`.`.`
     1fc:	00 01 00 00 00 00 00 00 00 08 00 0a 08 04 00 40     ...............@
     20c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 60     ...............`
     21c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 0b     .`.`............
     22c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
     23c:	00 08 00 60 00 60 00 60 00 01 00 00 00 00 00 00     ...`.`.`........
     24c:	00 08 00 ff ff 01 00 04 08 04 00 00 00 00 00 ff     ................
     25c:	00 04 00 00 00 00 00 00 00 10 00 00 00 ff 00 00     ................
     26c:	00 04 00 00 00 00 00 00 00 10 00 05 03 ff 00 00     ................
     27c:	00 80 00 01 00 10 00 06 03 ff 00 00 00 80 00 01     ................
     28c:	00 10 00 07 08 04 00 00 00 00 00 ff 00 04 00 00     ................
     29c:	00 00 00 00 00 10 00 00 00 ff 00 00 00 04 00 00     ................
     2ac:	00 00 00 00 00 10 00 ff ff 02 00 05 08 02 00 ff     ................
     2bc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 01 00 06     ................
     2cc:	08 02 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
     2dc:	00 01 00 ff ff 01 00 04 08 02 00 ff 00 ff 00 ff     ................
     2ec:	00 01 00 00 00 00 00 00 00 01 00 07 08 02 00 ff     ................
     2fc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 01 00 ff     ................
     30c:	ff 01 00 04 08 04 00 ff 00 00 00 00 00 04 00 00     ................
     31c:	00 00 00 00 00 10 00 00 00 00 00 ff 00 04 00 00     ................
     32c:	00 00 00 00 00 10 00 05 03 00 00 ff 00 00 00 01     ................
     33c:	00 10 00 06 03 00 00 ff 00 00 00 01 00 10 00 07     ................
     34c:	08 04 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     ................
     35c:	00 10 00 ff 00 00 00 00 00 04 00 00 00 00 00 00     ................
     36c:	00 10 00 ff ff 02 00 00 08 08 00 ff 00 00 00 00     ................
     37c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     38c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     39c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     3ac:	00 01 00 00 00 00 00 00 00 0c 00 01 08 08 00 ff     ................
     3bc:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     3cc:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     3dc:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     3ec:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 02     ................
     3fc:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     40c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     41c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     42c:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     43c:	00 0c 00 03 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     44c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     45c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     46c:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     47c:	00 00 00 00 00 0c 00 05 08 04 00 80 00 40 00 00     .............@..
     48c:	00 04 00 00 00 00 00 00 00 20 00 ff 00 00 00 00     ......... ......
     49c:	00 04 00 00 00 00 00 00 00 20 00 06 08 04 00 ff     ......... ......
     4ac:	00 00 00 00 00 04 00 00 00 00 00 00 00 20 00 80     ............. ..
     4bc:	00 1e 00 00 00 04 00 00 00 00 00 00 00 20 00 08     ............. ..
     4cc:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     4dc:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
     4ec:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
     4fc:	00 0c 00 ff 00 00 00 1e 00 01 00 00 00 00 00 00     ................
     50c:	00 0c 00 09 08 08 00 ff 00 00 00 00 00 01 00 00     ................
     51c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
     52c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
     53c:	00 00 00 00 00 0c 00 ff 00 00 00 1e 00 01 00 00     ................
     54c:	00 00 00 00 00 0c 00 0a 08 08 00 ff 00 00 00 00     ................
     55c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
     56c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
     57c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 00 00 1e     ................
     58c:	00 01 00 00 00 00 00 00 00 0c 00 0b 08 08 00 ff     ................
     59c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     5ac:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     5bc:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     .<..............
     5cc:	00 00 00 1e 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
     5dc:	ff 12 00 00 08 04 00 00 00 ff 00 00 00 01 00 00     ................
     5ec:	00 00 00 00 00 10 00 00 00 ff 00 5a 00 01 00 00     ...........Z....
     5fc:	00 00 00 00 00 10 00 01 08 06 00 00 00 ff 00 00     ................
     60c:	00 02 00 00 00 00 00 00 00 10 00 60 00 60 00 60     ...........`.`.`
     61c:	00 02 00 00 00 00 00 00 00 20 00 00 00 ff 00 5a     ......... .....Z
     62c:	00 02 00 00 00 00 00 00 00 10 00 02 08 06 00 00     ................
     63c:	00 ff 00 00 00 02 00 00 00 00 00 00 00 10 00 60     ...............`
     64c:	00 60 00 60 00 02 00 00 00 00 00 00 00 20 00 00     .`.`......... ..
     65c:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 10 00 03     ...Z............
     66c:	08 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     67c:	00 10 00 00 00 ff 00 5a 00 01 00 00 00 00 00 00     .......Z........
     68c:	00 10 00 05 08 02 00 60 00 60 00 60 00 08 00 00     .......`.`.`....
     69c:	00 00 00 00 00 20 00 06 08 02 00 64 00 32 00 00     ..... .....d.2..
     6ac:	00 08 00 00 00 00 00 00 00 20 00 08 08 04 00 00     ......... ......
     6bc:	00 ff 00 00 00 02 00 00 00 00 00 00 00 10 00 00     ................
     6cc:	00 ff 00 5a 00 02 00 00 00 00 00 00 00 10 00 09     ...Z............
     6dc:	08 06 00 00 00 ff 00 00 00 02 00 00 00 00 00 00     ................
     6ec:	00 10 00 60 00 60 00 60 00 02 00 00 00 00 00 00     ...`.`.`........
     6fc:	00 20 00 00 00 ff 00 5a 00 02 00 00 00 00 00 00     . .....Z........
     70c:	00 10 00 0a 08 06 00 00 00 ff 00 00 00 02 00 00     ................
     71c:	00 00 00 00 00 10 00 60 00 60 00 60 00 02 00 00     .......`.`.`....
     72c:	00 00 00 00 00 20 00 00 00 ff 00 5a 00 02 00 00     ..... .....Z....
     73c:	00 00 00 00 00 10 00 0b 08 04 00 00 00 ff 00 00     ................
     74c:	00 02 00 00 00 00 00 00 00 10 00 00 00 ff 00 5a     ...............Z
     75c:	00 02 00 00 00 00 00 00 00 10 00 ff ff 0a 00 00     ................
     76c:	05 00 00 ff 00 00 00 00 00 00 00 ff 00 32 00 01     .............2..
     77c:	00 20 00 01 05 00 00 ff 00 00 00 00 00 00 00 ff     . ..............
     78c:	00 32 00 01 00 20 00 02 05 00 00 ff 00 00 00 00     .2... ..........
     79c:	00 00 00 ff 00 32 00 01 00 20 00 03 05 00 00 ff     .....2... ......
     7ac:	00 00 00 00 00 00 00 ff 00 32 00 01 00 20 00 05     .........2... ..
     7bc:	05 00 00 00 00 ff 00 00 00 ff 00 00 00 c8 00 01     ................
     7cc:	00 20 00 06 05 00 00 00 00 ff 00 00 00 ff 00 00     . ..............
     7dc:	00 c8 00 01 00 20 00 08 05 00 00 ff 00 00 00 00     ..... ..........
     7ec:	00 00 00 ff 00 32 00 01 00 20 00 09 05 00 00 ff     .....2... ......
     7fc:	00 00 00 00 00 00 00 ff 00 32 00 01 00 20 00 0a     .........2... ..
     80c:	05 00 00 ff 00 00 00 00 00 00 00 ff 00 32 00 01     .............2..
     81c:	00 20 00 0b 05 00 00 ff 00 00 00 00 00 00 00 ff     . ..............
     82c:	00 32 00 01 00 20 00 ff ff 0a 00 00 08 03 00 80     .2... ..........
     83c:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     84c:	00 00 00 00 00 06 00 01 08 03 00 80 00 00 00 ff     ................
     85c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     86c:	00 06 00 02 08 03 00 80 00 00 00 ff 00 01 00 ff     ................
     87c:	00 00 00 00 00 01 00 00 00 00 00 00 00 06 00 03     ................
     88c:	08 03 00 80 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
     89c:	00 01 00 00 00 00 00 00 00 06 00 05 08 02 00 00     ................
     8ac:	00 ff 00 ff 00 10 00 00 00 00 00 00 00 20 00 06     ............. ..
     8bc:	08 02 00 00 00 ff 00 ff 00 10 00 00 00 00 00 00     ................
     8cc:	00 20 00 08 08 03 00 80 00 00 00 ff 00 01 00 ff     . ..............
     8dc:	00 00 00 00 00 01 00 00 00 00 00 00 00 06 00 09     ................
     8ec:	08 03 00 80 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
     8fc:	00 01 00 00 00 00 00 00 00 06 00 0a 08 03 00 80     ................
     90c:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     91c:	00 00 00 00 00 06 00 0b 08 03 00 80 00 00 00 ff     ................
     92c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     93c:	00 06 00 ff ff 0a 00 00 08 04 00 33 00 33 00 ff     ...........3.3..
     94c:	00 01 00 00 00 00 00 00 00 01 00 ff 00 c8 00 00     ................
     95c:	00 01 00 00 00 00 00 00 00 01 00 01 08 04 00 ff     ................
     96c:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 32     ...............2
     97c:	00 32 00 ff 00 01 00 00 00 00 00 00 00 01 00 02     .2..............
     98c:	08 04 00 32 00 32 00 ff 00 01 00 00 00 00 00 00     ...2.2..........
     99c:	00 01 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     9ac:	00 01 00 03 08 04 00 ff 00 c8 00 00 00 01 00 00     ................
     9bc:	00 00 00 00 00 01 00 32 00 32 00 ff 00 01 00 00     .......2.2......
     9cc:	00 00 00 00 00 01 00 05 08 02 00 ff 00 ff 00 ff     ................
     9dc:	00 10 00 00 00 00 00 00 00 20 00 06 08 02 00 ff     ......... ......
     9ec:	00 ff 00 ff 00 10 00 00 00 00 00 00 00 20 00 08     ............. ..
     9fc:	08 04 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
     a0c:	00 01 00 32 00 32 00 ff 00 01 00 00 00 00 00 00     ...2.2..........
     a1c:	00 01 00 09 08 04 00 32 00 32 00 ff 00 01 00 00     .......2.2......
     a2c:	00 00 00 00 00 01 00 ff 00 c8 00 00 00 01 00 00     ................
     a3c:	00 00 00 00 00 01 00 0a 08 04 00 ff 00 c8 00 00     ................
     a4c:	00 01 00 00 00 00 00 00 00 01 00 32 00 32 00 ff     ...........2.2..
     a5c:	00 01 00 00 00 00 00 00 00 01 00 0b 08 04 00 32     ...............2
     a6c:	00 32 00 ff 00 01 00 00 00 00 00 00 00 01 00 ff     .2..............
     a7c:	00 c8 00 00 00 01 00 00 00 00 00 00 00 01 00 ff     ................
     a8c:	ff 05 00 00 08 0a 00 ff 00 00 00 00 00 01 00 00     ................
     a9c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     aac:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     abc:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     acc:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     adc:	00 00 00 00 00 01 00 01 08 0a 00 ff 00 00 00 00     ................
     aec:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     afc:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     b0c:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     b1c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     b2c:	00 01 00 00 00 00 00 00 00 01 00 02 08 0a 00 ff     ................
     b3c:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     b4c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     b5c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     b6c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     b7c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 03     ................
     b8c:	08 0a 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     b9c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     bac:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     bbc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     bcc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     bdc:	00 01 00 05 08 0a 00 ff 00 00 00 00 00 04 00 00     ................
     bec:	00 00 00 00 00 20 00 00 00 00 00 ff 00 04 00 00     ..... ..........
     bfc:	00 00 00 00 00 20 00 00 00 ff 00 00 00 04 00 00     ..... ..........
     c0c:	00 00 00 00 00 20 00 00 00 00 00 ff 00 04 00 00     ..... ..........
     c1c:	00 00 00 00 00 20 00 00 00 ff 00 00 00 04 00 00     ..... ..........
     c2c:	00 00 00 00 00 20 00 06 08 0a 00 ff 00 00 00 00     ..... ..........
     c3c:	00 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     c4c:	00 04 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
     c5c:	00 04 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
     c6c:	00 04 00 00 00 00 00 00 00 20 00 00 00 ff 00 00     ......... ......
     c7c:	00 04 00 00 00 00 00 00 00 20 00 08 08 0a 00 ff     ......... ......
     c8c:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     c9c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     cac:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 00     ................
     cbc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 00     ................
     ccc:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 09     ................
     cdc:	08 0a 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     cec:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     cfc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     d0c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     d1c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
     d2c:	00 01 00 0a 08 0a 00 ff 00 00 00 00 00 01 00 00     ................
     d3c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     d4c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     d5c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     d6c:	00 00 00 00 00 01 00 00 00 ff 00 00 00 01 00 00     ................
     d7c:	00 00 00 00 00 01 00 0b 08 0a 00 ff 00 00 00 00     ................
     d8c:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     d9c:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     dac:	00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     dbc:	00 01 00 00 00 00 00 00 00 01 00 00 00 ff 00 00     ................
     dcc:	00 01 00 00 00 00 00 00 00 01 00 ff ff 05 00 00     ................
     ddc:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
     dec:	00 08 00 00 00 00 00 00 00 01 00 ff 00 00 00 00     ................
     dfc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
     e0c:	00 01 00 01 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
     e1c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00     ................
     e2c:	00 00 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     e3c:	00 00 00 00 00 01 00 02 08 06 00 ff 00 ff 00 ff     ................
     e4c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     e5c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     e6c:	00 01 00 00 00 00 00 00 00 01 00 03 08 06 00 ff     ................
     e7c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
     e8c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 ff     ................
     e9c:	00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 05     ................
     eac:	08 04 00 00 00 00 00 ff 00 20 00 00 00 00 00 00     ......... ......
     ebc:	00 40 00 ff 00 00 00 00 00 20 00 00 00 00 00 00     .@....... ......
     ecc:	00 40 00 06 08 04 00 ff 00 00 00 00 00 20 00 00     .@........... ..
     edc:	00 00 00 00 00 40 00 00 00 00 00 ff 00 20 00 00     .....@....... ..
     eec:	00 00 00 00 00 40 00 08 08 06 00 ff 00 ff 00 ff     .....@..........
     efc:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
     f0c:	00 01 00 00 00 00 00 ff 00 01 00 ff 00 00 00 00     ................
     f1c:	00 01 00 00 00 00 00 00 00 01 00 09 08 06 00 ff     ................
     f2c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
     f3c:	00 00 00 00 00 01 00 ff 00 00 00 00 00 01 00 00     ................
     f4c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 0a     ................
     f5c:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
     f6c:	00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 ff     ................
     f7c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
     f8c:	00 01 00 0b 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
     f9c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 ff     ................
     fac:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
     fbc:	00 00 00 00 00 01 00 ff ff 0a 00 00 08 06 00 80     ................
     fcc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
     fdc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
     fec:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 01     ................
     ffc:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    100c:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    101c:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    102c:	00 04 00 02 08 06 00 80 00 00 00 ff 00 01 00 00     ................
    103c:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    104c:	00 00 00 00 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    105c:	00 00 00 00 00 04 00 03 08 06 00 80 00 00 00 ff     ................
    106c:	00 01 00 00 00 00 00 01 00 04 00 00 00 00 00 ff     ................
    107c:	00 01 00 00 00 00 00 01 00 04 00 00 00 ff 00 00     ................
    108c:	00 01 00 00 00 00 00 01 00 04 00 04 03 80 00 00     ................
    109c:	00 ff 00 01 00 40 00 07 03 80 00 00 00 ff 00 01     .....@..........
    10ac:	00 40 00 08 08 06 00 80 00 00 00 ff 00 01 00 00     .@..............
    10bc:	00 00 00 01 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    10cc:	00 00 00 01 00 04 00 00 00 ff 00 00 00 01 00 00     ................
    10dc:	00 00 00 01 00 04 00 09 08 06 00 80 00 00 00 ff     ................
    10ec:	00 01 00 00 00 00 00 00 00 04 00 00 00 00 00 ff     ................
    10fc:	00 01 00 00 00 00 00 00 00 04 00 00 00 ff 00 00     ................
    110c:	00 01 00 00 00 00 00 00 00 04 00 0a 08 06 00 80     ................
    111c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    112c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    113c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 0b     ................
    114c:	08 06 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    115c:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    116c:	00 04 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    117c:	00 04 00 ff ff d2 00 00 03 40 00 00 00 80 00 01     .........@......
    118c:	00 04 00 01 08 02 00 40 00 00 00 80 00 01 00 00     .......@........
    119c:	00 00 00 00 00 08 00 02 08 03 00 40 00 00 00 80     ...........@....
    11ac:	00 04 00 64 00 14 00 00 00 04 00 02 00 00 00 01     ...d............
    11bc:	00 18 00 03 08 02 00 40 00 00 00 80 00 19 00 64     .......@.......d
    11cc:	00 14 00 00 00 19 00 05 08 03 00 64 00 00 00 00     ...........d....
    11dc:	00 03 00 ff 00 3c 00 00 00 03 00 00 00 00 00 00     .....<..........
    11ec:	00 23 00 06 08 03 00 64 00 00 00 00 00 03 00 ff     .#.....d........
    11fc:	00 3c 00 00 00 03 00 00 00 00 00 00 00 23 00 08     .<...........#..
    120c:	08 02 00 40 00 00 00 80 00 19 00 64 00 14 00 00     ...@.......d....
    121c:	00 19 00 09 08 03 00 40 00 00 00 80 00 04 00 64     .......@.......d
    122c:	00 14 00 00 00 04 00 02 00 00 00 01 00 18 00 0a     ................
    123c:	08 02 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    124c:	00 08 00 0b 03 40 00 00 00 80 00 01 00 04 00 ff     .....@..........
    125c:	ff 6e 00 00 08 03 00 c8 00 14 00 00 00 04 00 00     .n..............
    126c:	00 01 00 01 00 20 00 00 00 00 00 00 00 04 00 01     ..... ..........
    127c:	03 00 00 ff 00 ff 00 01 00 0c 00 02 03 00 00 ff     ................
    128c:	00 ff 00 01 00 0c 00 03 08 02 00 c8 00 28 00 00     .............(..
    129c:	00 01 00 00 00 01 00 01 00 10 00 04 03 00 00 ff     ................
    12ac:	00 ff 00 01 00 18 00 07 03 00 00 ff 00 ff 00 01     ................
    12bc:	00 18 00 08 08 02 00 c8 00 28 00 00 00 01 00 00     .........(......
    12cc:	00 01 00 01 00 10 00 09 03 00 00 ff 00 ff 00 01     ................
    12dc:	00 0c 00 0a 03 00 00 ff 00 ff 00 01 00 0c 00 0b     ................
    12ec:	08 03 00 c8 00 28 00 00 00 04 00 00 00 01 00 01     .....(..........
    12fc:	00 20 00 00 00 00 00 00 00 04 00 ff ff 14 00 00     . ..............
    130c:	08 04 00 00 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    131c:	00 04 00 00 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    132c:	00 10 00 01 08 02 00 00 00 ff 00 ff 00 04 00 00     ................
    133c:	00 01 00 01 00 20 00 02 03 00 00 ff 00 ff 00 01     ..... ..........
    134c:	00 10 00 03 08 04 00 00 00 ff 00 ff 00 01 00 00     ................
    135c:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    136c:	00 00 00 00 00 10 00 05 08 02 00 00 00 ff 00 ff     ................
    137c:	00 20 00 00 00 00 00 00 00 20 00 06 08 02 00 00     . ....... ......
    138c:	00 00 00 ff 00 20 00 00 00 00 00 00 00 20 00 08     ..... ....... ..
    139c:	08 04 00 00 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    13ac:	00 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    13bc:	00 10 00 09 03 00 00 00 00 ff 00 01 00 10 00 0a     ................
    13cc:	08 02 00 00 00 00 00 ff 00 04 00 00 00 00 00 01     ................
    13dc:	00 20 00 0b 08 04 00 00 00 00 00 ff 00 01 00 00     . ..............
    13ec:	00 00 00 00 00 04 00 00 00 00 00 ff 00 01 00 00     ................
    13fc:	00 00 00 00 00 10 00 ff ff 0a 00 00 08 04 00 00     ................
    140c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 00     ................
    141c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 01     ................
    142c:	08 02 00 00 00 ff 00 ff 00 04 00 00 00 01 00 01     ................
    143c:	00 20 00 02 03 00 00 ff 00 ff 00 01 00 10 00 03     . ..............
    144c:	08 04 00 00 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    145c:	00 04 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    146c:	00 10 00 05 08 02 00 00 00 ff 00 ff 00 20 00 00     ............. ..
    147c:	00 00 00 00 00 20 00 06 08 02 00 ff 00 ff 00 00     ..... ..........
    148c:	00 20 00 00 00 00 00 00 00 20 00 08 08 04 00 00     . ....... ......
    149c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    14ac:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 09     ................
    14bc:	03 ff 00 ff 00 00 00 01 00 10 00 0a 08 02 00 ff     ................
    14cc:	00 ff 00 00 00 04 00 01 00 01 00 00 00 20 00 0b     ............. ..
    14dc:	08 04 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    14ec:	00 04 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    14fc:	00 10 00 ff ff 0a 00 00 08 04 00 ff 00 00 00 80     ................
    150c:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 80     ................
    151c:	00 01 00 00 00 00 00 00 00 10 00 01 08 02 00 ff     ................
    152c:	00 00 00 80 00 04 00 02 00 00 00 01 00 20 00 02     ............. ..
    153c:	03 ff 00 00 00 80 00 01 00 10 00 03 08 04 00 ff     ................
    154c:	00 00 00 80 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    155c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 05     ................
    156c:	08 02 00 ff 00 00 00 80 00 20 00 00 00 00 00 00     ......... ......
    157c:	00 20 00 06 08 02 00 ff 00 ff 00 00 00 20 00 00     . ........... ..
    158c:	00 00 00 00 00 20 00 08 08 04 00 ff 00 00 00 80     ..... ..........
    159c:	00 01 00 00 00 00 00 00 00 04 00 ff 00 ff 00 00     ................
    15ac:	00 01 00 00 00 00 00 00 00 10 00 09 03 ff 00 ff     ................
    15bc:	00 00 00 01 00 10 00 0a 08 02 00 ff 00 ff 00 00     ................
    15cc:	00 04 00 01 00 01 00 00 00 20 00 0b 08 04 00 ff     ......... ......
    15dc:	00 ff 00 00 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    15ec:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    15fc:	ff 0a 00 00 08 04 00 ff 00 00 00 80 00 01 00 00     ................
    160c:	00 00 00 00 00 04 00 ff 00 00 00 80 00 01 00 00     ................
    161c:	00 00 00 00 00 10 00 01 08 02 00 ff 00 00 00 80     ................
    162c:	00 04 00 02 00 00 00 01 00 20 00 02 03 ff 00 00     ......... ......
    163c:	00 80 00 01 00 10 00 03 08 04 00 ff 00 00 00 00     ................
    164c:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 80     ................
    165c:	00 01 00 00 00 00 00 00 00 10 00 05 08 02 00 ff     ................
    166c:	00 00 00 80 00 20 00 00 00 00 00 00 00 20 00 06     ..... ....... ..
    167c:	08 02 00 ff 00 00 00 00 00 20 00 00 00 00 00 00     ......... ......
    168c:	00 20 00 08 08 04 00 ff 00 00 00 00 00 01 00 00     . ..............
    169c:	00 00 00 00 00 04 00 ff 00 00 00 80 00 01 00 00     ................
    16ac:	00 00 00 00 00 10 00 09 03 ff 00 00 00 00 00 01     ................
    16bc:	00 10 00 0a 08 02 00 ff 00 00 00 00 00 04 00 01     ................
    16cc:	00 00 00 00 00 20 00 0b 08 04 00 ff 00 00 00 00     ..... ..........
    16dc:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    16ec:	00 01 00 00 00 00 00 00 00 10 00 ff ff 28 00 00     .............(..
    16fc:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    170c:	00 08 00 01 08 02 00 00 00 80 00 80 00 01 00 00     ................
    171c:	00 00 00 00 00 08 00 02 08 02 00 00 00 80 00 80     ................
    172c:	00 01 00 00 00 00 00 00 00 08 00 03 08 04 00 00     ................
    173c:	00 80 00 1e 00 08 00 00 00 00 00 ff 00 08 00 ff     ................
    174c:	00 ff 00 ff 00 02 00 00 00 00 00 00 00 18 00 08     ................
    175c:	08 04 00 00 00 80 00 1e 00 08 00 00 00 00 00 ff     ................
    176c:	00 08 00 ff 00 ff 00 ff 00 02 00 00 00 00 00 00     ................
    177c:	00 18 00 09 08 02 00 00 00 80 00 80 00 01 00 00     ................
    178c:	00 00 00 00 00 08 00 0a 08 02 00 00 00 80 00 80     ................
    179c:	00 01 00 00 00 00 00 00 00 08 00 0b 08 02 00 00     ................
    17ac:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 ff     ................
    17bc:	ff 64 00 00 08 02 00 00 00 80 00 80 00 01 00 00     .d..............
    17cc:	00 00 00 00 00 08 00 01 08 02 00 00 00 80 00 80     ................
    17dc:	00 01 00 00 00 00 00 00 00 08 00 02 08 02 00 00     ................
    17ec:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 03     ................
    17fc:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    180c:	00 08 00 05 08 04 00 00 00 80 00 1e 00 08 00 00     ................
    181c:	00 00 00 00 00 20 00 00 00 00 00 ff 00 08 00 00     ..... ..........
    182c:	00 00 00 00 00 20 00 06 08 04 00 00 00 80 00 1e     ..... ..........
    183c:	00 08 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
    184c:	00 08 00 00 00 00 00 00 00 20 00 08 08 02 00 00     ......... ......
    185c:	00 80 00 80 00 01 00 00 00 00 00 00 00 08 00 09     ................
    186c:	08 02 00 00 00 80 00 80 00 01 00 00 00 00 00 00     ................
    187c:	00 08 00 0a 08 02 00 00 00 80 00 80 00 01 00 00     ................
    188c:	00 00 00 00 00 08 00 0b 08 02 00 00 00 80 00 80     ................
    189c:	00 01 00 00 00 00 00 00 00 08 00 ff ff 64 00 00     .............d..
    18ac:	08 02 00 00 00 00 00 ff 00 02 00 00 00 00 00 00     ................
    18bc:	00 10 00 01 08 04 00 00 00 00 00 ff 00 01 00 00     ................
    18cc:	00 00 00 00 00 18 00 00 00 80 00 1e 00 01 00 00     ................
    18dc:	00 00 00 00 00 08 00 02 08 02 00 00 00 00 00 ff     ................
    18ec:	00 02 00 00 00 00 00 00 00 10 00 03 08 04 00 00     ................
    18fc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    190c:	00 80 00 1e 00 01 00 00 00 00 00 00 00 08 00 05     ................
    191c:	08 02 00 00 00 80 00 80 00 08 00 00 00 00 00 00     ................
    192c:	00 20 00 06 08 02 00 00 00 80 00 80 00 08 00 00     . ..............
    193c:	00 00 00 00 00 20 00 08 08 04 00 00 00 00 00 ff     ..... ..........
    194c:	00 01 00 00 00 00 00 00 00 08 00 00 00 80 00 1e     ................
    195c:	00 01 00 00 00 00 00 00 00 08 00 09 08 02 00 00     ................
    196c:	00 00 00 ff 00 02 00 00 00 00 00 00 00 10 00 0a     ................
    197c:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    198c:	00 18 00 00 00 80 00 1e 00 01 00 00 00 00 00 00     ................
    199c:	00 08 00 0b 08 02 00 00 00 00 00 ff 00 02 00 00     ................
    19ac:	00 00 00 00 00 10 00 ff ff 64 00 00 08 02 00 00     .........d......
    19bc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 01     ................
    19cc:	08 04 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    19dc:	00 08 00 00 00 80 00 1e 00 01 00 00 00 00 00 00     ................
    19ec:	00 08 00 02 08 02 00 00 00 00 00 ff 00 01 00 00     ................
    19fc:	00 00 00 00 00 08 00 03 08 04 00 00 00 00 00 ff     ................
    1a0c:	00 01 00 00 00 00 00 00 00 08 00 00 00 80 00 1e     ................
    1a1c:	00 01 00 00 00 00 00 00 00 08 00 08 08 04 00 00     ................
    1a2c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 00     ................
    1a3c:	00 80 00 1e 00 01 00 00 00 00 00 00 00 08 00 09     ................
    1a4c:	08 02 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1a5c:	00 08 00 0a 08 04 00 00 00 00 00 ff 00 01 00 00     ................
    1a6c:	00 00 00 00 00 08 00 00 00 80 00 1e 00 01 00 00     ................
    1a7c:	00 00 00 00 00 08 00 0b 08 02 00 00 00 00 00 ff     ................
    1a8c:	00 01 00 00 00 00 00 00 00 08 00 ff ff 64 00 00     .............d..
    1a9c:	08 08 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1aac:	00 08 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1abc:	00 08 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1acc:	00 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1adc:	00 08 00 01 08 02 00 80 00 1e 00 00 00 01 00 00     ................
    1aec:	00 00 00 00 00 0c 00 02 08 02 00 80 00 1e 00 00     ................
    1afc:	00 01 00 00 00 00 00 00 00 0c 00 03 08 08 00 80     ................
    1b0c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 08 00 80     ................
    1b1c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 08 00 80     ................
    1b2c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    1b3c:	00 00 00 80 00 04 00 00 00 00 00 00 00 08 00 05     ................
    1b4c:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1b5c:	00 01 00 06 08 04 00 40 00 00 00 80 00 04 00 00     .......@........
    1b6c:	00 00 00 00 00 20 00 ff 00 00 00 00 00 04 00 00     ..... ..........
    1b7c:	00 00 00 00 00 20 00 08 08 08 00 80 00 1e 00 00     ..... ..........
    1b8c:	00 01 00 00 00 00 00 00 00 08 00 80 00 1e 00 00     ................
    1b9c:	00 01 00 00 00 00 00 00 00 08 00 80 00 1e 00 00     ................
    1bac:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    1bbc:	00 04 00 00 00 00 00 00 00 08 00 09 08 02 00 80     ................
    1bcc:	00 1e 00 00 00 01 00 00 00 00 00 00 00 08 00 0a     ................
    1bdc:	08 02 00 80 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    1bec:	00 08 00 0b 08 08 00 80 00 1e 00 00 00 01 00 00     ................
    1bfc:	00 00 00 00 00 08 00 80 00 20 00 00 00 01 00 00     ......... ......
    1c0c:	00 00 00 00 00 08 00 80 00 20 00 00 00 01 00 00     ......... ......
    1c1c:	00 00 00 00 00 08 00 ff 00 00 00 00 00 01 00 00     ................
    1c2c:	00 00 00 00 00 08 00 ff ff c8 00 00 08 06 00 ff     ................
    1c3c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1c4c:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1c5c:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 01     ................
    1c6c:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1c7c:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1c8c:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1c9c:	00 01 00 02 08 06 00 ff 00 00 00 00 00 01 00 00     ................
    1cac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1cbc:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1ccc:	00 00 00 00 00 01 00 03 08 06 00 ff 00 00 00 00     ................
    1cdc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1cec:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1cfc:	00 08 00 00 00 00 00 00 00 01 00 05 05 ff 00 00     ................
    1d0c:	00 00 00 00 00 00 00 ff 00 0a 00 14 00 4b 00 06     .............K..
    1d1c:	05 ff 00 00 00 00 00 00 00 00 00 ff 00 0a 00 14     ................
    1d2c:	00 4b 00 08 08 06 00 ff 00 00 00 00 00 01 00 00     .K..............
    1d3c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 af     ................
    1d4c:	00 60 00 60 00 01 00 00 00 00 00 00 00 08 00 00     .`.`............
    1d5c:	00 00 00 00 00 01 00 09 08 06 00 ff 00 00 00 00     ................
    1d6c:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1d7c:	00 08 00 af 00 60 00 60 00 01 00 00 00 00 00 00     .....`.`........
    1d8c:	00 08 00 00 00 00 00 00 00 01 00 0a 08 06 00 ff     ................
    1d9c:	00 00 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    1dac:	00 00 00 00 00 08 00 af 00 60 00 60 00 01 00 00     .........`.`....
    1dbc:	00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 0b     ................
    1dcc:	08 06 00 ff 00 00 00 00 00 01 00 00 00 00 00 ff     ................
    1ddc:	00 01 00 00 00 00 00 00 00 08 00 af 00 60 00 60     .............`.`
    1dec:	00 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00     ................
    1dfc:	00 01 00 ff ff 32 00 05 08 06 00 ff 00 ff 00 ff     .....2..........
    1e0c:	00 01 00 00 00 ff 00 00 00 02 00 00 00 00 00 ff     ................
    1e1c:	00 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1e2c:	00 20 00 00 00 00 00 00 00 01 00 06 08 06 00 ff     . ..............
    1e3c:	00 ff 00 ff 00 01 00 00 00 ff 00 00 00 02 00 00     ................
    1e4c:	00 00 00 ff 00 02 00 ff 00 00 00 00 00 01 00 00     ................
    1e5c:	00 00 00 00 00 20 00 00 00 00 00 00 00 01 00 ff     ..... ..........
    1e6c:	ff 0a 00 00 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1e7c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 01     ................
    1e8c:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1e9c:	00 01 00 00 00 00 00 00 00 0c 00 02 08 03 00 ff     ................
    1eac:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1ebc:	00 00 00 00 00 0c 00 03 08 03 00 ff 00 ff 00 ff     ................
    1ecc:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1edc:	00 0c 00 05 08 04 00 40 00 00 00 80 00 06 00 00     .......@........
    1eec:	00 00 00 00 00 20 00 00 00 00 00 ff 00 06 00 00     ..... ..........
    1efc:	00 00 00 00 00 20 00 06 08 04 00 40 00 00 00 80     ..... .....@....
    1f0c:	00 06 00 00 00 00 00 00 00 20 00 00 00 00 00 ff     ......... ......
    1f1c:	00 06 00 00 00 00 00 00 00 20 00 08 08 03 00 ff     ......... ......
    1f2c:	00 ff 00 ff 00 01 00 ff 00 00 00 00 00 01 00 00     ................
    1f3c:	00 00 00 00 00 0c 00 09 08 03 00 ff 00 ff 00 ff     ................
    1f4c:	00 01 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    1f5c:	00 0c 00 0a 08 03 00 ff 00 ff 00 ff 00 01 00 ff     ................
    1f6c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 0b     ................
    1f7c:	08 03 00 ff 00 ff 00 ff 00 01 00 ff 00 00 00 00     ................
    1f8c:	00 01 00 00 00 00 00 00 00 0c 00 ff ff 28 00 00     .............(..
    1f9c:	08 0a 00 40 00 00 00 80 00 01 00 00 00 ff 00 00     ...@............
    1fac:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    1fbc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    1fcc:	00 0c 00 00 00 00 00 ff 00 01 00 40 00 00 00 80     ...........@....
    1fdc:	00 01 00 00 00 00 00 00 00 14 00 00 00 00 00 00     ................
    1fec:	00 01 00 01 08 0a 00 40 00 00 00 80 00 02 00 00     .......@........
    1ffc:	00 ff 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    200c:	00 ff 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    201c:	00 00 00 00 00 0c 00 00 00 00 00 ff 00 01 00 80     ................
    202c:	00 00 00 ff 00 02 00 00 00 00 00 00 00 14 00 00     ................
    203c:	00 00 00 00 00 01 00 02 08 0a 00 40 00 00 00 80     ...........@....
    204c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    205c:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 ff     ................
    206c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 ff     ................
    207c:	00 01 00 40 00 00 00 80 00 02 00 00 00 00 00 00     ...@............
    208c:	00 14 00 00 00 00 00 00 00 01 00 03 08 0a 00 40     ...............@
    209c:	00 00 00 80 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    20ac:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    20bc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    20cc:	00 00 00 ff 00 01 00 40 00 00 00 80 00 02 00 00     .......@........
    20dc:	00 00 00 00 00 14 00 00 00 00 00 00 00 01 00 05     ................
    20ec:	08 04 00 00 00 ff 00 00 00 20 00 00 00 00 00 00     ......... ......
    20fc:	00 20 00 00 00 00 00 ff 00 20 00 00 00 00 00 00     . ....... ......
    210c:	00 20 00 06 08 04 00 00 00 ff 00 00 00 20 00 00     . ........... ..
    211c:	00 00 00 00 00 20 00 00 00 00 00 ff 00 20 00 00     ..... ....... ..
    212c:	00 00 00 00 00 20 00 08 08 0a 00 40 00 00 00 80     ..... .....@....
    213c:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    214c:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 ff     ................
    215c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 00 00 ff     ................
    216c:	00 01 00 40 00 00 00 80 00 02 00 00 00 00 00 00     ...@............
    217c:	00 14 00 00 00 00 00 00 00 01 00 09 08 0a 00 40     ...............@
    218c:	00 00 00 80 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    219c:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    21ac:	00 00 00 ff 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    21bc:	00 00 00 ff 00 01 00 40 00 00 00 80 00 02 00 00     .......@........
    21cc:	00 00 00 00 00 14 00 00 00 00 00 00 00 01 00 0a     ................
    21dc:	08 0a 00 40 00 00 00 80 00 01 00 00 00 ff 00 00     ...@............
    21ec:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    21fc:	00 01 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    220c:	00 0c 00 00 00 00 00 ff 00 01 00 40 00 00 00 80     ...........@....
    221c:	00 02 00 00 00 00 00 00 00 14 00 00 00 00 00 00     ................
    222c:	00 01 00 0b 08 0a 00 40 00 00 00 80 00 01 00 00     .......@........
    223c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     ................
    224c:	00 ff 00 00 00 01 00 00 00 00 00 ff 00 01 00 00     ................
    225c:	00 00 00 00 00 0c 00 00 00 00 00 ff 00 01 00 40     ...............@
    226c:	00 00 00 80 00 02 00 00 00 00 00 00 00 14 00 00     ................
    227c:	00 00 00 00 00 01 00 ff ff 32 00 00 08 03 00 00     .........2......
    228c:	00 00 00 ff 00 01 00 00 00 ff 00 00 00 01 00 00     ................
    229c:	00 00 00 00 00 0c 00 01 08 04 00 40 00 00 00 80     ...........@....
    22ac:	00 01 00 00 00 00 00 00 00 0c 00 40 00 00 00 80     ...........@....
    22bc:	00 01 00 00 00 00 00 00 00 24 00 02 08 04 00 40     .........$.....@
    22cc:	00 00 00 80 00 01 00 00 00 00 00 00 00 0c 00 40     ...............@
    22dc:	00 00 00 80 00 01 00 00 00 00 00 00 00 24 00 03     .............$..
    22ec:	08 03 00 00 00 00 00 ff 00 01 00 00 00 ff 00 00     ................
    22fc:	00 01 00 00 00 00 00 00 00 0c 00 05 08 04 00 00     ................
    230c:	00 ff 00 00 00 20 00 00 00 00 00 00 00 20 00 00     ..... ....... ..
    231c:	00 00 00 ff 00 20 00 00 00 00 00 00 00 20 00 06     ..... ....... ..
    232c:	08 04 00 00 00 ff 00 00 00 20 00 00 00 00 00 00     ......... ......
    233c:	00 20 00 00 00 00 00 ff 00 20 00 00 00 00 00 00     . ....... ......
    234c:	00 20 00 08 08 03 00 00 00 00 00 ff 00 01 00 00     . ..............
    235c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 0c 00 09     ................
    236c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    237c:	00 0c 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    238c:	00 24 00 0a 08 04 00 40 00 00 00 80 00 01 00 00     .$.....@........
    239c:	00 00 00 00 00 0c 00 40 00 00 00 80 00 01 00 00     .......@........
    23ac:	00 00 00 00 00 24 00 0b 08 03 00 00 00 00 00 ff     .....$..........
    23bc:	00 01 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    23cc:	00 0c 00 ff ff 32 00 00 08 04 00 00 00 00 00 ff     .....2..........
    23dc:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    23ec:	00 01 00 00 00 00 00 00 00 11 00 01 08 02 00 40     ...............@
    23fc:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 02     ................
    240c:	08 06 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    241c:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    242c:	00 08 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    243c:	00 08 00 03 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    244c:	00 00 00 00 00 08 00 00 00 00 00 ff 00 01 00 00     ................
    245c:	00 00 00 00 00 11 00 05 03 1e 00 00 00 3c 00 10     .............<..
    246c:	00 10 00 06 03 1e 00 00 00 3c 00 10 00 10 00 08     .........<......
    247c:	08 04 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    248c:	00 08 00 00 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    249c:	00 11 00 09 08 06 00 00 00 00 00 ff 00 01 00 00     ................
    24ac:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    24bc:	00 00 00 00 00 08 00 ff 00 ff 00 ff 00 01 00 00     ................
    24cc:	00 00 00 00 00 08 00 0a 08 02 00 40 00 00 00 80     ...........@....
    24dc:	00 01 00 00 00 00 00 00 00 08 00 0b 08 04 00 00     ................
    24ec:	00 00 00 ff 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    24fc:	00 00 00 80 00 01 00 00 00 00 00 00 00 11 00 ff     ................
    250c:	ff c8 00 05 03 1e 00 00 00 3c 00 10 00 10 00 06     .........<......
    251c:	03 1e 00 00 00 3c 00 10 00 10 00 ff ff 64 00 03     .....<.......d..
    252c:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    253c:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    254c:	00 18 00 05 03 1e 00 00 00 3c 00 10 00 10 00 06     .........<......
    255c:	03 1e 00 00 00 3c 00 10 00 10 00 08 08 04 00 00     .....<..........
    256c:	00 80 00 80 00 01 00 02 00 00 00 01 00 10 00 00     ................
    257c:	00 00 00 c8 00 01 00 02 00 00 00 01 00 18 00 ff     ................
    258c:	ff 64 00 03 08 04 00 00 00 80 00 80 00 01 00 02     .d..............
    259c:	00 00 00 01 00 10 00 00 00 00 00 c8 00 01 00 02     ................
    25ac:	00 00 00 01 00 18 00 04 03 40 00 00 00 80 00 01     .........@......
    25bc:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 08     .....@..........
    25cc:	08 04 00 00 00 80 00 80 00 01 00 02 00 00 00 01     ................
    25dc:	00 10 00 00 00 00 00 c8 00 01 00 02 00 00 00 01     ................
    25ec:	00 18 00 ff ff 64 00 04 03 40 00 00 00 80 00 01     .....d...@......
    25fc:	00 04 00 07 03 40 00 00 00 80 00 01 00 04 00 ff     .....@..........
    260c:	ff 64 00 03 08 03 00 96 00 00 00 00 00 02 00 00     .d..............
    261c:	00 00 00 64 00 02 00 02 00 00 00 01 00 1e 00 04     ...d............
    262c:	03 40 00 00 00 80 00 01 00 04 00 07 03 40 00 00     .@...........@..
    263c:	00 80 00 01 00 04 00 08 08 03 00 96 00 00 00 00     ................
    264c:	00 02 00 00 00 00 00 64 00 02 00 02 00 00 00 01     .......d........
    265c:	00 1e 00 ff ff 64 00 03 08 03 00 ff 00 00 00 00     .....d..........
    266c:	00 10 00 00 00 00 00 ff 00 10 00 60 00 60 00 60     ...........`.`.`
    267c:	00 04 00 08 08 03 00 80 00 00 00 ff 00 10 00 00     ................
    268c:	00 80 00 80 00 10 00 60 00 60 00 60 00 04 00 ff     .......`.`.`....
    269c:	ff 64 00 05 08 03 00 ff 00 00 00 00 00 04 00 00     .d..............
    26ac:	00 00 00 ff 00 04 00 00 00 00 00 00 00 18 00 06     ................
    26bc:	08 03 00 80 00 00 00 ff 00 04 00 00 00 80 00 80     ................
    26cc:	00 04 00 00 00 00 00 00 00 18 00 ff ff 64 00 00     .............d..
    26dc:	03 00 00 00 00 ff 00 01 00 20 00 01 03 80 00 00     ......... ......
    26ec:	00 ff 00 01 00 20 00 02 03 00 00 00 00 ff 00 01     ..... ..........
    26fc:	00 20 00 03 03 80 00 00 00 ff 00 01 00 20 00 05     . ........... ..
    270c:	08 04 00 80 00 00 00 ff 00 10 00 00 00 00 00 00     ................
    271c:	00 10 00 00 00 00 00 ff 00 10 00 00 00 00 00 00     ................
    272c:	00 10 00 06 08 04 00 00 00 00 00 ff 00 10 00 00     ................
    273c:	00 00 00 00 00 10 00 80 00 00 00 ff 00 10 00 00     ................
    274c:	00 00 00 00 00 10 00 08 03 80 00 00 00 ff 00 01     ................
    275c:	00 20 00 09 03 00 00 00 00 ff 00 01 00 20 00 0a     . ........... ..
    276c:	03 80 00 00 00 ff 00 01 00 20 00 0b 03 00 00 00     ......... ......
    277c:	00 ff 00 01 00 20 00 ff ff 64 00 00 08 06 00 ff     ..... ...d......
    278c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    279c:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    27ac:	00 ff 00 00 00 01 00 00 00 00 00 00 00 10 00 01     ................
    27bc:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    27cc:	00 10 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    27dc:	00 10 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    27ec:	00 30 00 02 08 06 00 ff 00 ff 00 ff 00 01 00 00     .0..............
    27fc:	00 00 00 00 00 10 00 ff 00 ff 00 ff 00 01 00 00     ................
    280c:	00 00 00 00 00 10 00 ff 00 ff 00 00 00 01 00 00     ................
    281c:	00 00 00 00 00 30 00 03 08 06 00 ff 00 ff 00 ff     .....0..........
    282c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 ff     ................
    283c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 00     ................
    284c:	00 01 00 00 00 00 00 00 00 30 00 05 08 02 00 ff     .........0......
    285c:	00 c8 00 00 00 01 00 00 00 00 00 00 00 18 00 06     ................
    286c:	08 02 00 ff 00 c8 00 00 00 01 00 00 00 00 00 00     ................
    287c:	00 18 00 08 08 06 00 ff 00 ff 00 ff 00 01 00 00     ................
    288c:	00 00 00 00 00 10 00 ff 00 ff 00 ff 00 01 00 00     ................
    289c:	00 00 00 00 00 10 00 ff 00 ff 00 00 00 01 00 00     ................
    28ac:	00 00 00 00 00 30 00 09 08 06 00 ff 00 ff 00 ff     .....0..........
    28bc:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 ff     ................
    28cc:	00 01 00 00 00 00 00 00 00 10 00 ff 00 ff 00 00     ................
    28dc:	00 01 00 00 00 00 00 00 00 30 00 0a 08 06 00 ff     .........0......
    28ec:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    28fc:	00 ff 00 ff 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    290c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 30 00 0b     .............0..
    291c:	08 06 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    292c:	00 10 00 ff 00 ff 00 ff 00 01 00 00 00 00 00 00     ................
    293c:	00 10 00 ff 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    294c:	00 10 00 ff ff 64 00 00 03 14 00 14 00 00 00 01     .....d..........
    295c:	00 20 00 01 03 14 00 14 00 00 00 01 00 20 00 02     . ........... ..
    296c:	03 14 00 14 00 00 00 01 00 20 00 03 03 14 00 14     ......... ......
    297c:	00 00 00 01 00 20 00 05 08 03 00 ff 00 ff 00 00     ..... ..........
    298c:	00 10 00 ff 00 ff 00 ff 00 02 00 00 00 00 00 00     ................
    299c:	00 20 00 06 08 03 00 ff 00 ff 00 00 00 10 00 ff     . ..............
    29ac:	00 ff 00 ff 00 02 00 00 00 00 00 00 00 20 00 08     ............. ..
    29bc:	03 14 00 14 00 00 00 01 00 20 00 09 03 14 00 14     ......... ......
    29cc:	00 00 00 01 00 20 00 0a 03 14 00 14 00 00 00 01     ..... ..........
    29dc:	00 20 00 0b 03 14 00 14 00 00 00 01 00 20 00 ff     . ........... ..
    29ec:	ff 64 00 00 05 14 00 14 00 00 00 ff 00 80 00 00     .d..............
    29fc:	00 c8 00 02 00 10 00 01 05 14 00 14 00 00 00 40     ...............@
    2a0c:	00 00 00 80 00 c8 00 02 00 10 00 02 05 14 00 14     ................
    2a1c:	00 00 00 ff 00 80 00 00 00 c8 00 02 00 10 00 03     ................
    2a2c:	05 14 00 14 00 00 00 40 00 00 00 80 00 c8 00 02     .......@........
    2a3c:	00 10 00 04 05 40 00 00 00 80 00 ff 00 80 00 00     .....@..........
    2a4c:	00 c8 00 02 00 10 00 07 05 40 00 00 00 80 00 ff     .........@......
    2a5c:	00 80 00 00 00 c8 00 02 00 10 00 08 05 14 00 14     ................
    2a6c:	00 00 00 40 00 00 00 80 00 c8 00 02 00 10 00 09     ...@............
    2a7c:	05 14 00 14 00 00 00 ff 00 80 00 00 00 c8 00 02     ................
    2a8c:	00 10 00 0a 05 14 00 14 00 00 00 40 00 00 00 80     ...........@....
    2a9c:	00 c8 00 02 00 10 00 0b 05 14 00 14 00 00 00 ff     ................
    2aac:	00 80 00 00 00 c8 00 02 00 10 00 ff ff 64 00 00     .............d..
    2abc:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2acc:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    2adc:	00 10 00 01 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    2aec:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    2afc:	00 00 00 00 00 10 00 02 08 04 00 ff 00 00 00 00     ................
    2b0c:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2b1c:	00 01 00 00 00 00 00 00 00 10 00 03 08 04 00 40     ...............@
    2b2c:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    2b3c:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 05     ................
    2b4c:	07 ff 00 00 00 00 00 00 00 00 00 ff 00 00 00 ff     ................
    2b5c:	00 00 00 2c 01 01 00 01 00 06 07 ff 00 00 00 00     ...,............
    2b6c:	00 00 00 00 00 ff 00 00 00 ff 00 00 00 2c 01 01     .............,..
    2b7c:	00 01 00 08 08 04 00 40 00 00 00 80 00 01 00 00     .......@........
    2b8c:	00 00 00 00 00 08 00 40 00 00 00 80 00 01 00 00     .......@........
    2b9c:	00 00 00 00 00 10 00 09 08 04 00 ff 00 00 00 00     ................
    2bac:	00 01 00 00 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2bbc:	00 01 00 00 00 00 00 00 00 10 00 0a 08 04 00 40     ...............@
    2bcc:	00 00 00 80 00 01 00 00 00 00 00 00 00 08 00 40     ...............@
    2bdc:	00 00 00 80 00 01 00 00 00 00 00 00 00 10 00 0b     ................
    2bec:	08 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2bfc:	00 08 00 40 00 00 00 80 00 01 00 00 00 00 00 00     ...@............
    2c0c:	00 10 00 ff ff 64 00 00 08 02 00 14 00 00 00 00     .....d..........
    2c1c:	00 01 00 00 00 00 00 00 00 20 00 01 08 02 00 14     ......... ......
    2c2c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 02     ............. ..
    2c3c:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2c4c:	00 20 00 03 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    2c5c:	00 00 00 00 00 20 00 04 08 04 00 ff 00 00 00 00     ..... ..........
    2c6c:	00 01 00 02 00 00 00 00 00 08 00 40 00 00 00 80     ...........@....
    2c7c:	00 01 00 02 00 00 00 00 00 10 00 07 08 04 00 ff     ................
    2c8c:	00 00 00 00 00 01 00 02 00 00 00 00 00 08 00 40     ...............@
    2c9c:	00 00 00 80 00 01 00 02 00 00 00 00 00 10 00 08     ................
    2cac:	08 02 00 14 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2cbc:	00 20 00 09 08 02 00 14 00 00 00 00 00 01 00 00     . ..............
    2ccc:	00 00 00 00 00 20 00 0a 08 02 00 14 00 00 00 00     ..... ..........
    2cdc:	00 01 00 00 00 00 00 00 00 20 00 0b 08 02 00 14     ......... ......
    2cec:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 ff     ............. ..
    2cfc:	ff 64 00 00 08 02 00 ff 00 00 00 00 00 01 00 00     .d..............
    2d0c:	00 00 00 00 00 20 00 01 08 02 00 ff 00 00 00 00     ..... ..........
    2d1c:	00 01 00 00 00 00 00 00 00 20 00 02 08 02 00 ff     ......... ......
    2d2c:	00 00 00 00 00 01 00 00 00 00 00 00 00 20 00 03     ............. ..
    2d3c:	08 02 00 ff 00 00 00 00 00 01 00 0a 00 00 00 0a     ................
    2d4c:	00 10 00 05 08 03 00 7d 00 00 00 fa 00 10 00 7d     .......}.......}
    2d5c:	00 00 00 00 00 10 00 00 00 00 00 00 00 20 00 06     ............. ..
    2d6c:	08 03 00 7d 00 00 00 fa 00 10 00 7d 00 00 00 00     ...}.......}....
    2d7c:	00 10 00 00 00 00 00 00 00 20 00 08 08 02 00 ff     ......... ......
    2d8c:	00 00 00 00 00 01 00 0a 00 00 00 0a 00 10 00 09     ................
    2d9c:	08 02 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2dac:	00 20 00 0a 08 02 00 ff 00 00 00 00 00 01 00 00     . ..............
    2dbc:	00 00 00 00 00 20 00 0b 08 02 00 ff 00 00 00 00     ..... ..........
    2dcc:	00 01 00 00 00 00 00 00 00 20 00 ff ff 64 00 00     ......... ...d..
    2ddc:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2dec:	00 10 00 01 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2dfc:	00 00 00 00 00 10 00 02 08 02 00 28 00 00 00 00     ...........(....
    2e0c:	00 01 00 00 00 00 00 00 00 10 00 03 08 02 00 28     ...............(
    2e1c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 05     ................
    2e2c:	08 03 00 7d 00 00 00 00 00 10 00 7d 00 7d 00 00     ...}.......}.}..
    2e3c:	00 10 00 00 00 00 00 00 00 20 00 06 08 03 00 7d     ......... .....}
    2e4c:	00 00 00 00 00 10 00 7d 00 7d 00 00 00 10 00 00     .......}.}......
    2e5c:	00 00 00 00 00 20 00 08 08 02 00 28 00 00 00 00     ..... .....(....
    2e6c:	00 01 00 00 00 00 00 00 00 10 00 09 08 02 00 28     ...............(
    2e7c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 0a     ................
    2e8c:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2e9c:	00 10 00 0b 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2eac:	00 00 00 00 00 10 00 ff ff 64 00 00 08 04 00 28     .........d.....(
    2ebc:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    2ecc:	00 80 00 40 00 01 00 00 00 00 00 00 00 10 00 01     ...@............
    2edc:	08 02 00 00 00 00 00 00 00 01 00 00 00 00 00 00     ................
    2eec:	00 10 00 02 08 02 00 00 00 00 00 00 00 01 00 00     ................
    2efc:	00 00 00 00 00 10 00 03 08 04 00 28 00 00 00 00     ...........(....
    2f0c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 80 00 40     ...............@
    2f1c:	00 01 00 00 00 00 00 00 00 10 00 08 08 04 00 28     ...............(
    2f2c:	00 00 00 00 00 01 00 00 00 00 00 00 00 10 00 ff     ................
    2f3c:	00 80 00 40 00 01 00 00 00 00 00 00 00 10 00 09     ...@............
    2f4c:	08 02 00 28 00 00 00 00 00 01 00 00 00 00 00 00     ...(............
    2f5c:	00 10 00 0a 08 02 00 28 00 00 00 00 00 01 00 00     .......(........
    2f6c:	00 00 00 00 00 10 00 0b 08 04 00 28 00 00 00 00     ...........(....
    2f7c:	00 01 00 00 00 00 00 00 00 10 00 ff 00 80 00 40     ...............@
    2f8c:	00 01 00 00 00 00 00 00 00 10 00 ff ff 64 00 05     .............d..
    2f9c:	09 ff 00 ff 00 ff 00 ff ff 64 00 00 03 80 00 00     .........d......
    2fac:	00 ff 00 01 00 10 00 01 03 80 00 00 00 ff 00 01     ................
    2fbc:	00 10 00 02 03 80 00 00 00 ff 00 01 00 10 00 03     ................
    2fcc:	03 ff 00 00 00 00 00 01 00 10 00 04 03 00 00 ff     ................
    2fdc:	00 80 00 04 00 10 00 07 03 00 00 ff 00 80 00 04     ................
    2fec:	00 10 00 08 03 ff 00 00 00 00 00 01 00 10 00 09     ................
    2ffc:	03 80 00 00 00 ff 00 01 00 10 00 0a 03 80 00 00     ................
    300c:	00 ff 00 01 00 10 00 0b 03 80 00 00 00 ff 00 01     ................
    301c:	00 10 00 ff ff 64 00 00 08 02 00 80 00 00 00 ff     .....d..........
    302c:	00 01 00 00 00 00 00 00 00 09 00 01 08 04 00 80     ................
    303c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    304c:	00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 02     ................
    305c:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    306c:	00 04 00 03 08 04 00 80 00 00 00 ff 00 01 00 00     ................
    307c:	00 00 00 00 00 04 00 ff 00 00 00 00 00 01 00 00     ................
    308c:	00 00 00 00 00 04 00 05 08 02 00 00 00 ff 00 80     ................
    309c:	00 04 00 00 00 00 00 00 00 08 00 06 08 02 00 00     ................
    30ac:	00 ff 00 80 00 04 00 00 00 00 00 00 00 08 00 08     ................
    30bc:	08 04 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    30cc:	00 04 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    30dc:	00 04 00 09 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    30ec:	00 00 00 00 00 04 00 0a 08 04 00 80 00 00 00 ff     ................
    30fc:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    310c:	00 01 00 00 00 00 00 00 00 04 00 0b 08 02 00 80     ................
    311c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 09 00 ff     ................
    312c:	ff 32 00 00 08 08 00 ff 00 00 00 00 00 01 00 00     .2..............
    313c:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    314c:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    315c:	00 00 00 00 00 0c 00 1e 00 00 00 ff 00 01 00 00     ................
    316c:	00 00 00 00 00 01 00 01 08 08 00 ff 00 00 00 00     ................
    317c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    318c:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    319c:	00 01 00 00 00 00 00 00 00 0c 00 1e 00 00 00 ff     ................
    31ac:	00 01 00 00 00 00 00 00 00 01 00 02 08 08 00 ff     ................
    31bc:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    31cc:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    31dc:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 1e     .<..............
    31ec:	00 00 00 ff 00 01 00 00 00 00 00 00 00 01 00 03     ................
    31fc:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    320c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    321c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    322c:	00 0c 00 1e 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    323c:	00 01 00 04 03 00 00 00 00 3c 00 01 00 20 00 05     .........<... ..
    324c:	08 04 00 80 00 40 00 00 00 04 00 00 00 00 00 00     .....@..........
    325c:	00 20 00 00 00 00 00 ff 00 04 00 00 00 00 00 00     . ..............
    326c:	00 20 00 06 08 04 00 80 00 40 00 00 00 04 00 00     . .......@......
    327c:	00 00 00 00 00 20 00 00 00 ff 00 00 00 04 00 00     ..... ..........
    328c:	00 00 00 00 00 20 00 07 03 00 00 3c 00 00 00 01     ..... .....<....
    329c:	00 20 00 08 08 08 00 ff 00 00 00 00 00 01 00 00     . ..............
    32ac:	00 00 00 00 00 0c 00 ff 00 1e 00 00 00 01 00 00     ................
    32bc:	00 00 00 00 00 0c 00 ff 00 3c 00 00 00 01 00 00     .........<......
    32cc:	00 00 00 00 00 0c 00 00 00 ff 00 00 00 01 00 00     ................
    32dc:	00 00 00 00 00 01 00 09 08 08 00 ff 00 00 00 00     ................
    32ec:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 1e 00 00     ................
    32fc:	00 01 00 00 00 00 00 00 00 0c 00 ff 00 3c 00 00     .............<..
    330c:	00 01 00 00 00 00 00 00 00 0c 00 00 00 ff 00 00     ................
    331c:	00 01 00 00 00 00 00 00 00 01 00 0a 08 08 00 ff     ................
    332c:	00 00 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    333c:	00 1e 00 00 00 01 00 00 00 00 00 00 00 0c 00 ff     ................
    334c:	00 3c 00 00 00 01 00 00 00 00 00 00 00 0c 00 00     .<..............
    335c:	00 ff 00 00 00 01 00 00 00 00 00 00 00 01 00 0b     ................
    336c:	08 08 00 ff 00 00 00 00 00 01 00 00 00 00 00 00     ................
    337c:	00 0c 00 ff 00 1e 00 00 00 01 00 00 00 00 00 00     ................
    338c:	00 0c 00 ff 00 3c 00 00 00 01 00 00 00 00 00 00     .....<..........
    339c:	00 0c 00 00 00 ff 00 00 00 01 00 00 00 00 00 00     ................
    33ac:	00 01 00 ff ff 32 00 ff ff 64 00 ff ff 64 00 ff     .....2...d...d..
    33bc:	ff 64 00 ff ff 64 00 ff ff 64 00 ff ff 64 00 ff     .d...d...d...d..
    33cc:	ff 64 00 ff ff 64 00 ff ff 64 00 ff ff 64 00 ff     .d...d...d...d..
    33dc:	ff 64 00 ff ff 64 00 ff ff 64 00 ff ff 64 00 ff     .d...d...d...d..
    33ec:	ff 64 00 ff ff 0b 00 00 08 04 00 80 00 00 00 ff     .d..............
    33fc:	00 01 00 00 00 00 00 00 00 04 00 ff 00 00 00 00     ................
    340c:	00 01 00 00 00 00 00 00 00 04 00 01 08 02 00 80     ................
    341c:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 02     ................
    342c:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    343c:	00 04 00 03 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    344c:	00 00 00 00 00 04 00 05 08 03 00 ff 00 00 00 00     ................
    345c:	00 08 00 80 00 00 00 ff 00 08 00 00 00 00 00 00     ................
    346c:	00 20 00 06 08 03 00 ff 00 00 00 00 00 08 00 80     . ..............
    347c:	00 00 00 ff 00 08 00 00 00 00 00 00 00 20 00 08     ............. ..
    348c:	08 02 00 80 00 00 00 ff 00 01 00 00 00 00 00 00     ................
    349c:	00 04 00 09 08 02 00 80 00 00 00 ff 00 01 00 00     ................
    34ac:	00 00 00 00 00 04 00 0a 08 02 00 80 00 00 00 ff     ................
    34bc:	00 01 00 00 00 00 00 00 00 04 00 0b 08 04 00 80     ................
    34cc:	00 00 00 ff 00 01 00 00 00 00 00 00 00 04 00 ff     ................
    34dc:	00 00 00 00 00 01 00 00 00 00 00 00 00 04 00 ff     ................
	...

000034ee <__ctors_end>:
    34ee:	11 24       	eor	r1, r1
    34f0:	1f be       	out	0x3f, r1	; 63
    34f2:	cf ef       	ldi	r28, 0xFF	; 255
    34f4:	d0 e1       	ldi	r29, 0x10	; 16
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	cd bf       	out	0x3d, r28	; 61

000034fa <__do_copy_data>:
    34fa:	12 e0       	ldi	r17, 0x02	; 2
    34fc:	a0 e0       	ldi	r26, 0x00	; 0
    34fe:	b1 e0       	ldi	r27, 0x01	; 1
    3500:	ee e5       	ldi	r30, 0x5E	; 94
    3502:	ff e5       	ldi	r31, 0x5F	; 95
    3504:	00 e0       	ldi	r16, 0x00	; 0
    3506:	0b bf       	out	0x3b, r16	; 59
    3508:	02 c0       	rjmp	.+4      	; 0x350e <__do_copy_data+0x14>
    350a:	07 90       	elpm	r0, Z+
    350c:	0d 92       	st	X+, r0
    350e:	a0 31       	cpi	r26, 0x10	; 16
    3510:	b1 07       	cpc	r27, r17
    3512:	d9 f7       	brne	.-10     	; 0x350a <__do_copy_data+0x10>

00003514 <__do_clear_bss>:
    3514:	1e e0       	ldi	r17, 0x0E	; 14
    3516:	a0 e1       	ldi	r26, 0x10	; 16
    3518:	b2 e0       	ldi	r27, 0x02	; 2
    351a:	01 c0       	rjmp	.+2      	; 0x351e <.do_clear_bss_start>

0000351c <.do_clear_bss_loop>:
    351c:	1d 92       	st	X+, r1

0000351e <.do_clear_bss_start>:
    351e:	a5 3f       	cpi	r26, 0xF5	; 245
    3520:	b1 07       	cpc	r27, r17
    3522:	e1 f7       	brne	.-8      	; 0x351c <.do_clear_bss_loop>
    3524:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <main>
    3528:	0c 94 ad 2f 	jmp	0x5f5a	; 0x5f5a <_exit>

0000352c <__bad_interrupt>:
    352c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003530 <doEffects>:


/**
*Preforms the set instruction for each led
*/
void doEffects(struct effect_info *ledInstructions) {
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	ec 01       	movw	r28, r24
    353e:	00 e0       	ldi	r16, 0x00	; 0
    3540:	10 e0       	ldi	r17, 0x00	; 0
    3542:	ee 24       	eor	r14, r14
    3544:	ff 24       	eor	r15, r15
    3546:	0c c0       	rjmp	.+24     	; 0x3560 <doEffects+0x30>
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
    3548:	80 91 10 02 	lds	r24, 0x0210
    354c:	90 91 11 02 	lds	r25, 0x0211
    3550:	0a 97       	sbiw	r24, 0x0a	; 10
    3552:	4c f5       	brge	.+82     	; 0x35a6 <doEffects+0x76>
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    3554:	0f 5f       	subi	r16, 0xFF	; 255
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	27 96       	adiw	r28, 0x07	; 7
    355a:	0c 30       	cpi	r16, 0x0C	; 12
    355c:	11 05       	cpc	r17, r1
    355e:	79 f0       	breq	.+30     	; 0x357e <doEffects+0x4e>
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
    3560:	8e 81       	ldd	r24, Y+6	; 0x06
    3562:	81 30       	cpi	r24, 0x01	; 1
    3564:	89 f3       	breq	.-30     	; 0x3548 <doEffects+0x18>
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
				resetScalingCounter = TRUE;
			}
		}
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    3566:	6c 81       	ldd	r22, Y+4	; 0x04
    3568:	7d 81       	ldd	r23, Y+5	; 0x05
    356a:	e8 81       	ld	r30, Y
    356c:	f9 81       	ldd	r31, Y+1	; 0x01
    356e:	c8 01       	movw	r24, r16
    3570:	09 95       	icall
void doEffects(struct effect_info *ledInstructions) {
	static int timerScalingCounter = 0;
	int i;
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
    3572:	0f 5f       	subi	r16, 0xFF	; 255
    3574:	1f 4f       	sbci	r17, 0xFF	; 255
    3576:	27 96       	adiw	r28, 0x07	; 7
    3578:	0c 30       	cpi	r16, 0x0C	; 12
    357a:	11 05       	cpc	r17, r1
    357c:	89 f7       	brne	.-30     	; 0x3560 <doEffects+0x30>
		else {
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	e8 16       	cp	r14, r24
    3582:	f1 04       	cpc	r15, r1
    3584:	d1 f0       	breq	.+52     	; 0x35ba <doEffects+0x8a>
		timerScalingCounter = 0;
	}
	else {
		timerScalingCounter++;
    3586:	80 91 10 02 	lds	r24, 0x0210
    358a:	90 91 11 02 	lds	r25, 0x0211
    358e:	01 96       	adiw	r24, 0x01	; 1
    3590:	90 93 11 02 	sts	0x0211, r25
    3594:	80 93 10 02 	sts	0x0210, r24
	}
}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	08 95       	ret
	short resetScalingCounter  = FALSE;
	//call each effect function
	for(i = 0; i < LEDCOUNT; i++){	
		if (ledInstructions[i].tenMsTriggerOnly == TRUE) {
			if (timerScalingCounter  >=  TEN_MS_MULTIPLIER) {
				ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
    35a6:	6c 81       	ldd	r22, Y+4	; 0x04
    35a8:	7d 81       	ldd	r23, Y+5	; 0x05
    35aa:	e8 81       	ld	r30, Y
    35ac:	f9 81       	ldd	r31, Y+1	; 0x01
    35ae:	c8 01       	movw	r24, r16
    35b0:	09 95       	icall
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	e8 2e       	mov	r14, r24
    35b6:	f1 2c       	mov	r15, r1
    35b8:	cd cf       	rjmp	.-102    	; 0x3554 <doEffects+0x24>
			ledInstructions[i].effectFunc(i,ledInstructions[i].effectData);
		}
	}
	
	if(resetScalingCounter == TRUE) {
		timerScalingCounter = 0;
    35ba:	10 92 11 02 	sts	0x0211, r1
    35be:	10 92 10 02 	sts	0x0210, r1
	}
	else {
		timerScalingCounter++;
	}
}
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	1f 91       	pop	r17
    35c8:	0f 91       	pop	r16
    35ca:	ff 90       	pop	r15
    35cc:	ef 90       	pop	r14
    35ce:	08 95       	ret

000035d0 <main>:
#define BITMASK_BACKWARD 0x01
#define BITMASK_FORWARD 0x02

void doEffects(struct effect_info *ledInstructions);

 int main(void) {
    35d0:	2f 92       	push	r2
    35d2:	3f 92       	push	r3
    35d4:	4f 92       	push	r4
    35d6:	5f 92       	push	r5
    35d8:	6f 92       	push	r6
    35da:	7f 92       	push	r7
    35dc:	8f 92       	push	r8
    35de:	9f 92       	push	r9
    35e0:	af 92       	push	r10
    35e2:	bf 92       	push	r11
    35e4:	cf 92       	push	r12
    35e6:	df 92       	push	r13
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	c0 56       	subi	r28, 0x60	; 96
    35fa:	d0 40       	sbci	r29, 0x00	; 0
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61


	//Set all pins of port G to input
	DDRG=0x00;
    3606:	10 92 64 00 	sts	0x0064, r1

	//enable pull-up resistors 
	PORTG = 0xff;
    360a:	8f ef       	ldi	r24, 0xFF	; 255
    360c:	80 93 65 00 	sts	0x0065, r24
	int switchStates = 0x00;


	
	//set all pins of port A to output
	DDRA=0xff;
    3610:	8a bb       	out	0x1a, r24	; 26

	
	//set all PORTA to low
	PORTA = 0x00;
    3612:	1b ba       	out	0x1b, r1	; 27
	//disable leds on octrobrite
	//PINHIGH(BEI);

	//Bring BEI pin of octobrite 
	//to enable  leds on board
	PINLOW(BEI);
    3614:	8b b3       	in	r24, 0x1b	; 27
    3616:	1b ba       	out	0x1b, r1	; 27
	//Bit  5:5 	Reserved, must be 0
	//
	//Bit  6:6 	Input Capture Edge Select, use
	//			falling edge
	//Bit  7:7	Set Input capture noise to off
	TCCR1B |= (1 << WGM12);
    3618:	8e b5       	in	r24, 0x2e	; 46
    361a:	88 60       	ori	r24, 0x08	; 8
    361c:	8e bd       	out	0x2e, r24	; 46
	//0b[00][00][00][00]
	//Bits 7:2	Disable compare output for
	//			all channels
	//
	//Bits 1:0 Set timer/counter mode to 4 (CTC)
	TCCR1A = (1 << COM1A0);
    361e:	80 e4       	ldi	r24, 0x40	; 64
    3620:	8f bd       	out	0x2f, r24	; 47

	//SET output compare register to match every
	//10ms. (16Mhz /8 = 2Mhz * 10ms = 20000)
	//OCR1A = 0x4E20;
	//OCR1A = 0x07d0;
	OCR1A = CLOCKCOUNT;
    3622:	80 ea       	ldi	r24, 0xA0	; 160
    3624:	9f e0       	ldi	r25, 0x0F	; 15
    3626:	9b bd       	out	0x2b, r25	; 43
    3628:	8a bd       	out	0x2a, r24	; 42
	//Calculate Output 1 compare flag
	//bitmask
	
	
	//Start the timer
	TCCR1B |= ((1 << CS11));
    362a:	8e b5       	in	r24, 0x2e	; 46
    362c:	82 60       	ori	r24, 0x02	; 2
    362e:	8e bd       	out	0x2e, r24	; 46
		waitForTimer();
		displayColors();
	}
	*/

	initDecoder();
    3630:	0e 94 9b 28 	call	0x5136	; 0x5136 <initDecoder>
    3634:	4d e0       	ldi	r20, 0x0D	; 13
    3636:	64 2e       	mov	r6, r20
    3638:	71 2c       	mov	r7, r1
    363a:	6c 0e       	add	r6, r28
    363c:	7d 1e       	adc	r7, r29
    363e:	f3 01       	movw	r30, r6
    3640:	85 e2       	ldi	r24, 0x25	; 37
    3642:	9c e1       	ldi	r25, 0x1C	; 28
    3644:	9e 01       	movw	r18, r28
    3646:	2f 59       	subi	r18, 0x9F	; 159
    3648:	3f 4f       	sbci	r19, 0xFF	; 255
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
		ledInstructions[i].effectData = 0;
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    364a:	41 e0       	ldi	r20, 0x01	; 1
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
		ledInstructions[i].effectFunc = ledOffEffect;
    364c:	6a e8       	ldi	r22, 0x8A	; 138
    364e:	7c e1       	ldi	r23, 0x1C	; 28
    3650:	71 83       	std	Z+1, r23	; 0x01
    3652:	60 83       	st	Z, r22
		ledInstructions[i].effectResetFunc = resetLedOffEffect;
    3654:	93 83       	std	Z+3, r25	; 0x03
    3656:	82 83       	std	Z+2, r24	; 0x02
		ledInstructions[i].effectData = 0;
    3658:	15 82       	std	Z+5, r1	; 0x05
    365a:	14 82       	std	Z+4, r1	; 0x04
		ledInstructions[0].tenMsTriggerOnly = TRUE;
    365c:	4b 8b       	std	Y+19, r20	; 0x13
    365e:	37 96       	adiw	r30, 0x07	; 7
	//holds function pointer and data pointer for each led
	struct effect_info ledInstructions[LEDCOUNT];

	//set each led instruction to do nothing at first
	short i;
	for(i=0; i < LEDCOUNT; i++) {
    3660:	e2 17       	cp	r30, r18
    3662:	f3 07       	cpc	r31, r19
    3664:	99 f7       	brne	.-26     	; 0x364c <main+0x7c>
		displayColors();
	}
*/


	groupNew = getNextGroup();
    3666:	0e 94 71 28 	call	0x50e2	; 0x50e2 <getNextGroup>
    366a:	fc 01       	movw	r30, r24
    366c:	ee 24       	eor	r14, r14
    366e:	ff 24       	eor	r15, r15
    3670:	88 24       	eor	r8, r8
    3672:	8a 94       	dec	r8
    3674:	98 2c       	mov	r9, r8
    3676:	2e 01       	movw	r4, r28
    3678:	08 94       	sec
    367a:	41 1c       	adc	r4, r1
    367c:	51 1c       	adc	r5, r1
    367e:	aa 24       	eor	r10, r10
    3680:	bb 24       	eor	r11, r11

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    3682:	3c e0       	ldi	r19, 0x0C	; 12
    3684:	23 2e       	mov	r2, r19
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
			ledSet[ledNumber] = 1;
    3686:	33 24       	eor	r3, r3
    3688:	33 94       	inc	r3

	while(1) {

		//setup new effects
		struct instruction *tmpInstruction;
		tmpInstruction = groupNew->firstInstruction;
    368a:	02 81       	ldd	r16, Z+2	; 0x02
    368c:	13 81       	ldd	r17, Z+3	; 0x03
		char ledSet[LEDCOUNT];
		memset(&ledSet,0,sizeof(char) * LEDCOUNT);
    368e:	d2 01       	movw	r26, r4
    3690:	e2 2d       	mov	r30, r2
    3692:	1d 92       	st	X+, r1
    3694:	ea 95       	dec	r30
    3696:	e9 f7       	brne	.-6      	; 0x3692 <main+0xc2>
		do {
			short ledNumber = (short) tmpInstruction->ledNumber;
    3698:	d8 01       	movw	r26, r16
    369a:	8c 91       	ld	r24, X
    369c:	90 e0       	ldi	r25, 0x00	; 0
			ledSet[ledNumber] = 1;
    369e:	f2 01       	movw	r30, r4
    36a0:	e8 0f       	add	r30, r24
    36a2:	f9 1f       	adc	r31, r25
    36a4:	30 82       	st	Z, r3
			ledInstructions[ledNumber].effectFunc = tmpInstruction->effectInfo.effectFunc;
    36a6:	fc 01       	movw	r30, r24
    36a8:	ee 0f       	add	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	ee 0f       	add	r30, r30
    36ae:	ff 1f       	adc	r31, r31
    36b0:	ee 0f       	add	r30, r30
    36b2:	ff 1f       	adc	r31, r31
    36b4:	e8 1b       	sub	r30, r24
    36b6:	f9 0b       	sbc	r31, r25
    36b8:	e4 0d       	add	r30, r4
    36ba:	f5 1d       	adc	r31, r5
    36bc:	12 96       	adiw	r26, 0x02	; 2
    36be:	2d 91       	ld	r18, X+
    36c0:	3c 91       	ld	r19, X
    36c2:	13 97       	sbiw	r26, 0x03	; 3
    36c4:	35 87       	std	Z+13, r19	; 0x0d
    36c6:	24 87       	std	Z+12, r18	; 0x0c
			ledInstructions[ledNumber].effectData = tmpInstruction->effectInfo.effectData;
    36c8:	16 96       	adiw	r26, 0x06	; 6
    36ca:	6d 91       	ld	r22, X+
    36cc:	7c 91       	ld	r23, X
    36ce:	17 97       	sbiw	r26, 0x07	; 7
    36d0:	71 8b       	std	Z+17, r23	; 0x11
    36d2:	60 8b       	std	Z+16, r22	; 0x10
			ledInstructions[ledNumber].tenMsTriggerOnly = tmpInstruction->effectInfo.tenMsTriggerOnly;
    36d4:	18 96       	adiw	r26, 0x08	; 8
    36d6:	2c 91       	ld	r18, X
    36d8:	18 97       	sbiw	r26, 0x08	; 8
    36da:	22 8b       	std	Z+18, r18	; 0x12
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
    36dc:	14 96       	adiw	r26, 0x04	; 4
    36de:	ed 91       	ld	r30, X+
    36e0:	fc 91       	ld	r31, X
    36e2:	15 97       	sbiw	r26, 0x05	; 5
    36e4:	09 95       	icall
			tmpInstruction = tmpInstruction->nextInstruction;
    36e6:	f8 01       	movw	r30, r16
    36e8:	01 85       	ldd	r16, Z+9	; 0x09
    36ea:	12 85       	ldd	r17, Z+10	; 0x0a
		} while (tmpInstruction != 0);
    36ec:	01 15       	cp	r16, r1
    36ee:	11 05       	cpc	r17, r1
    36f0:	99 f6       	brne	.-90     	; 0x3698 <main+0xc8>
    36f2:	f2 01       	movw	r30, r4
    36f4:	d3 01       	movw	r26, r6
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
			if(ledSet[i] == 0) {
    36f6:	80 81       	ld	r24, Z
    36f8:	88 23       	and	r24, r24
    36fa:	61 f4       	brne	.+24     	; 0x3714 <main+0x144>
				ledInstructions[i].effectFunc = ledOffEffect;
    36fc:	6a e8       	ldi	r22, 0x8A	; 138
    36fe:	7c e1       	ldi	r23, 0x1C	; 28
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	7c 93       	st	X, r23
    3704:	6e 93       	st	-X, r22
				ledInstructions[i].effectData = NULL;
    3706:	15 96       	adiw	r26, 0x05	; 5
    3708:	1c 92       	st	X, r1
    370a:	1e 92       	st	-X, r1
    370c:	14 97       	sbiw	r26, 0x04	; 4
				ledInstructions[i].tenMsTriggerOnly = TRUE;
    370e:	16 96       	adiw	r26, 0x06	; 6
    3710:	3c 92       	st	X, r3
    3712:	16 97       	sbiw	r26, 0x06	; 6
    3714:	31 96       	adiw	r30, 0x01	; 1
    3716:	17 96       	adiw	r26, 0x07	; 7
			tmpInstruction->effectInfo.effectResetFunc(ledNumber,ledInstructions[ledNumber].effectData);
			tmpInstruction = tmpInstruction->nextInstruction;
		} while (tmpInstruction != 0);
		
		//all leds are turned off it not explicity set
		for(int i=0; i < LEDCOUNT; i++) {
    3718:	e6 15       	cp	r30, r6
    371a:	f7 05       	cpc	r31, r7
    371c:	61 f7       	brne	.-40     	; 0x36f6 <main+0x126>
    371e:	00 e0       	ldi	r16, 0x00	; 0
    3720:	10 e0       	ldi	r17, 0x00	; 0
    3722:	cc 24       	eor	r12, r12
    3724:	dd 24       	eor	r13, r13
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    3726:	e1 14       	cp	r14, r1
    3728:	f1 04       	cpc	r15, r1
    372a:	19 f4       	brne	.+6      	; 0x3732 <main+0x162>
    372c:	88 24       	eor	r8, r8
    372e:	8a 94       	dec	r8
    3730:	98 2c       	mov	r9, r8
				firstHeld = -1;
			}

			doEffects(ledInstructions);
    3732:	c3 01       	movw	r24, r6
    3734:	0e 94 98 1a 	call	0x3530	; 0x3530 <doEffects>
			waitForTimer();
    3738:	0e 94 a7 29 	call	0x534e	; 0x534e <waitForTimer>
			displayColors();
    373c:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <displayColors>
			deltaTimer++;
    3740:	0f 5f       	subi	r16, 0xFF	; 255
    3742:	1f 4f       	sbci	r17, 0xFF	; 255
		while(1) {
			
			//because of switch bouncing we need
			//to wait unti 10ms intervals
			//to check a switch's state
			if(deltaTimer >= TEN_MS_MULTIPLIER) {
    3744:	0a 30       	cpi	r16, 0x0A	; 10
    3746:	11 05       	cpc	r17, r1
    3748:	74 f3       	brlt	.-36     	; 0x3726 <main+0x156>
				//check if forward button is pressed down
				//because of pullup resistors 
				//0 is on and 1 is off
				//FIXED: WAS USING PORT B, BUT CAUSED A ISSUE WHILE PROGRAMMING
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
    374a:	80 91 63 00 	lds	r24, 0x0063
    374e:	81 fd       	sbrc	r24, 1
    3750:	1a c0       	rjmp	.+52     	; 0x3786 <main+0x1b6>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
    3752:	ab 28       	or	r10, r11
    3754:	09 f4       	brne	.+2      	; 0x3758 <main+0x188>
    3756:	4d c0       	rjmp	.+154    	; 0x37f2 <main+0x222>
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    3758:	80 91 63 00 	lds	r24, 0x0063
    375c:	80 fd       	sbrc	r24, 0
    375e:	21 c0       	rjmp	.+66     	; 0x37a2 <main+0x1d2>
					if((switchStates & BITMASK_BACKWARD)== 0) {
    3760:	e0 fe       	sbrs	r14, 0
    3762:	59 c0       	rjmp	.+178    	; 0x3816 <main+0x246>
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    3764:	c1 fe       	sbrs	r12, 1
    3766:	29 c0       	rjmp	.+82     	; 0x37ba <main+0x1ea>
					if(firstHeld == BITMASK_BACKWARD) {
    3768:	b1 e0       	ldi	r27, 0x01	; 1
    376a:	8b 16       	cp	r8, r27
    376c:	91 04       	cpc	r9, r1
    376e:	b1 f1       	breq	.+108    	; 0x37dc <main+0x20c>
    3770:	22 e0       	ldi	r18, 0x02	; 2
    3772:	a2 2e       	mov	r10, r18
    3774:	b1 2c       	mov	r11, r1
    3776:	ae 20       	and	r10, r14
    3778:	bf 20       	and	r11, r15
					if( firstHeld == BITMASK_FORWARD)  {
						if(switchStates & BITMASK_FORWARD) {

							groupNew = getNextGroup();
							justReleasedMask ^= BITMASK_BACKWARD;
							break;
    377a:	00 e0       	ldi	r16, 0x00	; 0
    377c:	10 e0       	ldi	r17, 0x00	; 0
				}
				
				deltaTimer = 0;
			}

			if(switchStates == 0) {
    377e:	e1 14       	cp	r14, r1
    3780:	f1 04       	cpc	r15, r1
    3782:	b9 f6       	brne	.-82     	; 0x3732 <main+0x162>
    3784:	d3 cf       	rjmp	.-90     	; 0x372c <main+0x15c>
				//forward button is not being pressed down
				else {

					//if the forward button was just released and
					//the back button is sitll being pressed, move backwards
					if(switchStates & BITMASK_FORWARD) {
    3786:	ab 28       	or	r10, r11
    3788:	21 f0       	breq	.+8      	; 0x3792 <main+0x1c2>
						justReleasedMask |= BITMASK_FORWARD;
    378a:	a2 e0       	ldi	r26, 0x02	; 2
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	ca 2a       	or	r12, r26
    3790:	db 2a       	or	r13, r27
					}
					switchStates = switchStates & (~BITMASK_FORWARD);
    3792:	ed ef       	ldi	r30, 0xFD	; 253
    3794:	ff ef       	ldi	r31, 0xFF	; 255
    3796:	ee 22       	and	r14, r30
    3798:	ff 22       	and	r15, r31
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
    379a:	80 91 63 00 	lds	r24, 0x0063
    379e:	80 ff       	sbrs	r24, 0
    37a0:	df cf       	rjmp	.-66     	; 0x3760 <main+0x190>
				}
				else {
					
					//if the back button was just released and
					//the foward button is being pressed, move foward
					if(switchStates & BITMASK_BACKWARD) {
    37a2:	e0 fe       	sbrs	r14, 0
    37a4:	04 c0       	rjmp	.+8      	; 0x37ae <main+0x1de>
						justReleasedMask |= BITMASK_BACKWARD;
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	c8 2a       	or	r12, r24
    37ac:	d9 2a       	or	r13, r25
					}
					switchStates = switchStates & (~BITMASK_BACKWARD);
    37ae:	ae ef       	ldi	r26, 0xFE	; 254
    37b0:	bf ef       	ldi	r27, 0xFF	; 255
    37b2:	ea 22       	and	r14, r26
    37b4:	fb 22       	and	r15, r27
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
    37b6:	c1 fc       	sbrc	r12, 1
    37b8:	d7 cf       	rjmp	.-82     	; 0x3768 <main+0x198>
							break;
						}
					}
				}

				else if( justReleasedMask & BITMASK_BACKWARD)  {
    37ba:	c0 fe       	sbrs	r12, 0
    37bc:	d9 cf       	rjmp	.-78     	; 0x3770 <main+0x1a0>
					if( firstHeld == BITMASK_FORWARD)  {
    37be:	e2 e0       	ldi	r30, 0x02	; 2
    37c0:	8e 16       	cp	r8, r30
    37c2:	91 04       	cpc	r9, r1
    37c4:	a9 f6       	brne	.-86     	; 0x3770 <main+0x1a0>
						if(switchStates & BITMASK_FORWARD) {
    37c6:	92 e0       	ldi	r25, 0x02	; 2
    37c8:	a9 2e       	mov	r10, r25
    37ca:	b1 2c       	mov	r11, r1
    37cc:	ae 20       	and	r10, r14
    37ce:	bf 20       	and	r11, r15
    37d0:	e1 fe       	sbrs	r14, 1
    37d2:	d3 cf       	rjmp	.-90     	; 0x377a <main+0x1aa>

							groupNew = getNextGroup();
    37d4:	0e 94 71 28 	call	0x50e2	; 0x50e2 <getNextGroup>
    37d8:	fc 01       	movw	r30, r24
    37da:	57 cf       	rjmp	.-338    	; 0x368a <main+0xba>
				}

				
				if( justReleasedMask & BITMASK_FORWARD) {
					if(firstHeld == BITMASK_BACKWARD) {
						if(switchStates & BITMASK_BACKWARD) {
    37dc:	e0 fe       	sbrs	r14, 0
    37de:	c8 cf       	rjmp	.-112    	; 0x3770 <main+0x1a0>
							groupNew = getPreviousGroup();
    37e0:	0e 94 0c 28 	call	0x5018	; 0x5018 <getPreviousGroup>
    37e4:	fc 01       	movw	r30, r24
    37e6:	32 e0       	ldi	r19, 0x02	; 2
    37e8:	a3 2e       	mov	r10, r19
    37ea:	b1 2c       	mov	r11, r1
    37ec:	ae 20       	and	r10, r14
    37ee:	bf 20       	and	r11, r15
    37f0:	4c cf       	rjmp	.-360    	; 0x368a <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    37f2:	7f ef       	ldi	r23, 0xFF	; 255
    37f4:	87 16       	cp	r8, r23
    37f6:	7f ef       	ldi	r23, 0xFF	; 255
    37f8:	97 06       	cpc	r9, r23
    37fa:	11 f1       	breq	.+68     	; 0x3840 <main+0x270>
				//BECAUSE IT USED THE SAME PORT. SO, DON'T USE PORT B!
				if((~PING) & BITMASK_FORWARD) {
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	e8 2a       	or	r14, r24
    3802:	f9 2a       	or	r15, r25
						
						if(firstHeld < 0) {
							firstHeld  = BITMASK_FORWARD;
						}

						groupNew = getNextGroup();
    3804:	0e 94 71 28 	call	0x50e2	; 0x50e2 <getNextGroup>
    3808:	fc 01       	movw	r30, r24
    380a:	62 e0       	ldi	r22, 0x02	; 2
    380c:	a6 2e       	mov	r10, r22
    380e:	b1 2c       	mov	r11, r1
    3810:	ae 20       	and	r10, r14
    3812:	bf 20       	and	r11, r15
    3814:	3a cf       	rjmp	.-396    	; 0x368a <main+0xba>
					
				}
				
				if((~PING) & BITMASK_BACKWARD) {
					if((switchStates & BITMASK_BACKWARD)== 0) {
						switchStates = switchStates | BITMASK_BACKWARD;
    3816:	61 e0       	ldi	r22, 0x01	; 1
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	e6 2a       	or	r14, r22
    381c:	f7 2a       	or	r15, r23
						groupNew = getPreviousGroup();
    381e:	0e 94 0c 28 	call	0x5018	; 0x5018 <getPreviousGroup>
    3822:	fc 01       	movw	r30, r24

						if(firstHeld < 0) {
    3824:	7f ef       	ldi	r23, 0xFF	; 255
    3826:	87 16       	cp	r8, r23
    3828:	7f ef       	ldi	r23, 0xFF	; 255
    382a:	97 06       	cpc	r9, r23
    382c:	e1 f6       	brne	.-72     	; 0x37e6 <main+0x216>
    382e:	51 e0       	ldi	r21, 0x01	; 1
    3830:	85 2e       	mov	r8, r21
    3832:	91 2c       	mov	r9, r1
    3834:	42 e0       	ldi	r20, 0x02	; 2
    3836:	a4 2e       	mov	r10, r20
    3838:	b1 2c       	mov	r11, r1
    383a:	ae 20       	and	r10, r14
    383c:	bf 20       	and	r11, r15
    383e:	25 cf       	rjmp	.-438    	; 0x368a <main+0xba>
					//make sure the forward button isn't already
					//pressed down
					if((switchStates & BITMASK_FORWARD) == 0 ) {
						switchStates = switchStates | BITMASK_FORWARD;
						
						if(firstHeld < 0) {
    3840:	72 e0       	ldi	r23, 0x02	; 2
    3842:	87 2e       	mov	r8, r23
    3844:	91 2c       	mov	r9, r1
    3846:	da cf       	rjmp	.-76     	; 0x37fc <main+0x22c>

00003848 <resetLedOnEffect>:
void ledOnEffect(short ledNumber,short *data) {
	setRGBColor(ledNumber,data[0],data[1],data[2]);
}

void resetLedOnEffect (short ledNumber, short *data) {
}
    3848:	08 95       	ret

0000384a <resetLedOffEffect>:

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
}
void resetLedOffEffect(short ledNumber, short *data) {
}
    384a:	08 95       	ret

0000384c <doNothingEffect>:


//this effect simply returns 
void doNothingEffect(short led, short *data) {
	return;
}
    384c:	08 95       	ret

0000384e <resetDoNothingEffect>:

void resetDoNothingEffect(short ledNumber, short *data) {
	return;
}
    384e:	08 95       	ret

00003850 <resetLightBeamEffect>:
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
void resetLightBeamEffect(short ledNumber, short *data) {
	lightBeamSavedData[ledNumber].currentMsTime = 0;
    3850:	fc 01       	movw	r30, r24
    3852:	ee 0f       	add	r30, r30
    3854:	ff 1f       	adc	r31, r31
    3856:	ee 0f       	add	r30, r30
    3858:	ff 1f       	adc	r31, r31
    385a:	ed 51       	subi	r30, 0x1D	; 29
    385c:	fb 4f       	sbci	r31, 0xFB	; 251
    385e:	11 82       	std	Z+1, r1	; 0x01
    3860:	10 82       	st	Z, r1
	lightBeamSavedData[ledNumber].currentBeamIndex = 0;
    3862:	13 82       	std	Z+3, r1	; 0x03
    3864:	12 82       	std	Z+2, r1	; 0x02
}	
    3866:	08 95       	ret

00003868 <lightBeamEffect>:
	short currentMsTime;
	short currentBeamIndex;
} lightBeamSavedData[LEDCOUNT];


void lightBeamEffect(short ledNumber, short *data) {
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	cf 93       	push	r28
    386e:	df 93       	push	r29
    3870:	8c 01       	movw	r16, r24
    3872:	eb 01       	movw	r28, r22
	//check beam effect time
	
	struct LightBeamEffectSavedData *curSavedBeam = &lightBeamSavedData[ledNumber];
    3874:	dc 01       	movw	r26, r24
    3876:	aa 0f       	add	r26, r26
    3878:	bb 1f       	adc	r27, r27
    387a:	aa 0f       	add	r26, r26
    387c:	bb 1f       	adc	r27, r27
    387e:	ad 51       	subi	r26, 0x1D	; 29
    3880:	bb 4f       	sbci	r27, 0xFB	; 251
	
	struct LightBeamEffectDataArgument2 *firstBeamArgument = 
		(struct LightBeamEffectDataArgument2  *) &data[1];
    3882:	6e 5f       	subi	r22, 0xFE	; 254
    3884:	7f 4f       	sbci	r23, 0xFF	; 255


	short currentBeamIndex = curSavedBeam->currentBeamIndex;
    3886:	12 96       	adiw	r26, 0x02	; 2
    3888:	2d 91       	ld	r18, X+
    388a:	3c 91       	ld	r19, X
    388c:	13 97       	sbiw	r26, 0x03	; 3
	
	

	if(curSavedBeam->currentMsTime > 
    388e:	4d 91       	ld	r20, X+
    3890:	5c 91       	ld	r21, X
    3892:	11 97       	sbiw	r26, 0x01	; 1
    3894:	f9 01       	movw	r30, r18
    3896:	ee 0f       	add	r30, r30
    3898:	ff 1f       	adc	r31, r31
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	ee 0f       	add	r30, r30
    38a0:	ff 1f       	adc	r31, r31
    38a2:	e6 0f       	add	r30, r22
    38a4:	f7 1f       	adc	r31, r23
    38a6:	86 81       	ldd	r24, Z+6	; 0x06
    38a8:	97 81       	ldd	r25, Z+7	; 0x07
    38aa:	84 17       	cp	r24, r20
    38ac:	95 07       	cpc	r25, r21
    38ae:	6c f5       	brge	.+90     	; 0x390a <lightBeamEffect+0xa2>
			firstBeamArgument[currentBeamIndex].onTime) {
			curSavedBeam->currentBeamIndex+=1;
    38b0:	2f 5f       	subi	r18, 0xFF	; 255
    38b2:	3f 4f       	sbci	r19, 0xFF	; 255
    38b4:	13 96       	adiw	r26, 0x03	; 3
    38b6:	3c 93       	st	X, r19
    38b8:	2e 93       	st	-X, r18
    38ba:	12 97       	sbiw	r26, 0x02	; 2
		if(curSavedBeam->currentBeamIndex >= data[0]) {
    38bc:	88 81       	ld	r24, Y
    38be:	99 81       	ldd	r25, Y+1	; 0x01
    38c0:	28 17       	cp	r18, r24
    38c2:	39 07       	cpc	r19, r25
    38c4:	24 f0       	brlt	.+8      	; 0x38ce <lightBeamEffect+0x66>
			curSavedBeam->currentBeamIndex = 0;
    38c6:	13 96       	adiw	r26, 0x03	; 3
    38c8:	1c 92       	st	X, r1
    38ca:	1e 92       	st	-X, r1
    38cc:	12 97       	sbiw	r26, 0x02	; 2
		}
		curSavedBeam->currentMsTime = 0;
    38ce:	11 96       	adiw	r26, 0x01	; 1
    38d0:	1c 92       	st	X, r1
    38d2:	1e 92       	st	-X, r1
    38d4:	12 96       	adiw	r26, 0x02	; 2
    38d6:	2d 91       	ld	r18, X+
    38d8:	3c 91       	ld	r19, X
    38da:	13 97       	sbiw	r26, 0x03	; 3
	else {
		curSavedBeam->currentMsTime++;
	}
	
	//display the current beam value
	setRGBColor( 
    38dc:	f9 01       	movw	r30, r18
    38de:	ee 0f       	add	r30, r30
    38e0:	ff 1f       	adc	r31, r31
    38e2:	ee 0f       	add	r30, r30
    38e4:	ff 1f       	adc	r31, r31
    38e6:	ee 0f       	add	r30, r30
    38e8:	ff 1f       	adc	r31, r31
    38ea:	e6 0f       	add	r30, r22
    38ec:	f7 1f       	adc	r31, r23
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	42 81       	ldd	r20, Z+2	; 0x02
    38f4:	53 81       	ldd	r21, Z+3	; 0x03
    38f6:	24 81       	ldd	r18, Z+4	; 0x04
    38f8:	35 81       	ldd	r19, Z+5	; 0x05
    38fa:	c8 01       	movw	r24, r16
    38fc:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
		firstBeamArgument[curSavedBeam->currentBeamIndex].red,
		firstBeamArgument[curSavedBeam->currentBeamIndex].green,
		firstBeamArgument[curSavedBeam->currentBeamIndex].blue
	);

}
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	08 95       	ret
		curSavedBeam->currentMsTime = 0;
					
	}

	else {
		curSavedBeam->currentMsTime++;
    390a:	4f 5f       	subi	r20, 0xFF	; 255
    390c:	5f 4f       	sbci	r21, 0xFF	; 255
    390e:	4d 93       	st	X+, r20
    3910:	5c 93       	st	X, r21
    3912:	e4 cf       	rjmp	.-56     	; 0x38dc <lightBeamEffect+0x74>

00003914 <ledOffEffect>:

void resetLedOnEffect (short ledNumber, short *data) {
}

void ledOffEffect(short ledNumber, short *data) {
	setRGBColor(ledNumber,0,0,0);
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	40 e0       	ldi	r20, 0x00	; 0
    391a:	50 e0       	ldi	r21, 0x00	; 0
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
}
    3924:	08 95       	ret

00003926 <ledOnEffect>:
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;


}

void ledOnEffect(short ledNumber,short *data) {
    3926:	fb 01       	movw	r30, r22
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    3928:	60 81       	ld	r22, Z
    392a:	71 81       	ldd	r23, Z+1	; 0x01
    392c:	42 81       	ldd	r20, Z+2	; 0x02
    392e:	53 81       	ldd	r21, Z+3	; 0x03
    3930:	24 81       	ldd	r18, Z+4	; 0x04
    3932:	35 81       	ldd	r19, Z+5	; 0x05
    3934:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
}
    3938:	08 95       	ret

0000393a <resetPwmEffect>:

	}
	
}

void resetPwmEffect(short ledNumber, short *data) {
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
	pwmLedCounter[(short) ledNumber] = 0;
    393e:	fc 01       	movw	r30, r24
    3940:	ee 0f       	add	r30, r30
    3942:	ff 1f       	adc	r31, r31
    3944:	df 01       	movw	r26, r30
    3946:	a5 5b       	subi	r26, 0xB5	; 181
    3948:	bc 4f       	sbci	r27, 0xFC	; 252
    394a:	1d 92       	st	X+, r1
    394c:	1c 92       	st	X, r1
	pwmLedOn[(short) ledNumber] = 1;
    394e:	ed 59       	subi	r30, 0x9D	; 157
    3950:	fc 4f       	sbci	r31, 0xFC	; 252
    3952:	21 e0       	ldi	r18, 0x01	; 1
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	31 83       	std	Z+1, r19	; 0x01
    3958:	20 83       	st	Z, r18
	//turn on the led
	setRGBColor(ledNumber,data[0],data[1],data[2]);
    395a:	fb 01       	movw	r30, r22
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	42 81       	ldd	r20, Z+2	; 0x02
    3962:	53 81       	ldd	r21, Z+3	; 0x03
    3964:	24 81       	ldd	r18, Z+4	; 0x04
    3966:	35 81       	ldd	r19, Z+5	; 0x05
    3968:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
}
    396c:	1f 91       	pop	r17
    396e:	0f 91       	pop	r16
    3970:	08 95       	ret

00003972 <pwmEffect>:


short pwmLedCounter[LEDCOUNT];
short pwmLedOn[LEDCOUNT];

void pwmEffect(short ledNumber, short *data) {
    3972:	ef 92       	push	r14
    3974:	ff 92       	push	r15
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	9c 01       	movw	r18, r24
    3980:	fb 01       	movw	r30, r22
	
	short *curCounter = &pwmLedCounter[(short) ledNumber];
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	8c 01       	movw	r16, r24
    3988:	05 5b       	subi	r16, 0xB5	; 181
    398a:	1c 4f       	sbci	r17, 0xFC	; 252
	short *curLedOn = &pwmLedOn[(short) ledNumber];
    398c:	ec 01       	movw	r28, r24
    398e:	cd 59       	subi	r28, 0x9D	; 157
    3990:	dc 4f       	sbci	r29, 0xFC	; 252
	
	short redColor = data[0];
    3992:	60 81       	ld	r22, Z
    3994:	71 81       	ldd	r23, Z+1	; 0x01
	short greenColor = data[1];
    3996:	42 81       	ldd	r20, Z+2	; 0x02
    3998:	53 81       	ldd	r21, Z+3	; 0x03
	short blueColor = data [2];
    399a:	e4 80       	ldd	r14, Z+4	; 0x04
    399c:	f5 80       	ldd	r15, Z+5	; 0x05
	short onLength = data[3] -1;
    399e:	a6 81       	ldd	r26, Z+6	; 0x06
    39a0:	b7 81       	ldd	r27, Z+7	; 0x07
	short offLength = data[4] -1;
    39a2:	00 84       	ldd	r0, Z+8	; 0x08
    39a4:	f1 85       	ldd	r31, Z+9	; 0x09
    39a6:	e0 2d       	mov	r30, r0

	//if pwmLedOn is true
	if(*curLedOn == 1) {
    39a8:	88 81       	ld	r24, Y
    39aa:	99 81       	ldd	r25, Y+1	; 0x01
    39ac:	81 30       	cpi	r24, 0x01	; 1
    39ae:	91 05       	cpc	r25, r1
    39b0:	09 f1       	breq	.+66     	; 0x39f4 <pwmEffect+0x82>

	}


	//if pwmLedOn is off
	else if(*curLedOn == 0) {
    39b2:	89 2b       	or	r24, r25
    39b4:	c1 f4       	brne	.+48     	; 0x39e6 <pwmEffect+0x74>
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
    39b6:	31 97       	sbiw	r30, 0x01	; 1
    39b8:	d8 01       	movw	r26, r16
    39ba:	8d 91       	ld	r24, X+
    39bc:	9c 91       	ld	r25, X
    39be:	11 97       	sbiw	r26, 0x01	; 1
    39c0:	8e 17       	cp	r24, r30
    39c2:	9f 07       	cpc	r25, r31
    39c4:	0c f0       	brlt	.+2      	; 0x39c8 <pwmEffect+0x56>
    39c6:	43 c0       	rjmp	.+134    	; 0x3a4e <pwmEffect+0xdc>
		}
		
		//set the rgb color 
		else  {
			
			setRGBColor(ledNumber,0,0,0);
    39c8:	c9 01       	movw	r24, r18
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
			*curCounter +=1;
    39da:	f8 01       	movw	r30, r16
    39dc:	80 81       	ld	r24, Z
    39de:	91 81       	ldd	r25, Z+1	; 0x01
    39e0:	01 96       	adiw	r24, 0x01	; 1
    39e2:	91 83       	std	Z+1, r25	; 0x01
    39e4:	80 83       	st	Z, r24
		}

	}
	
}
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	0f 91       	pop	r16
    39ee:	ff 90       	pop	r15
    39f0:	ef 90       	pop	r14
    39f2:	08 95       	ret
	//if pwmLedOn is true
	if(*curLedOn == 1) {
		
		//Turn off the leds when on length
		//is longer then counter
		if(*curCounter >= onLength) {
    39f4:	11 97       	sbiw	r26, 0x01	; 1
    39f6:	f8 01       	movw	r30, r16
    39f8:	80 81       	ld	r24, Z
    39fa:	91 81       	ldd	r25, Z+1	; 0x01
    39fc:	8a 17       	cp	r24, r26
    39fe:	9b 07       	cpc	r25, r27
    3a00:	a4 f0       	brlt	.+40     	; 0x3a2a <pwmEffect+0xb8>
			//we are turning led's off.
			*curLedOn = 0;
    3a02:	19 82       	std	Y+1, r1	; 0x01
    3a04:	18 82       	st	Y, r1
			*curCounter = 0;
    3a06:	11 82       	std	Z+1, r1	; 0x01
    3a08:	10 82       	st	Z, r1
			setRGBColor(ledNumber,0,0,0);
    3a0a:	c9 01       	movw	r24, r18
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	40 e0       	ldi	r20, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	08 95       	ret
			setRGBColor(ledNumber,0,0,0);
		}
		
		//set the rgb color 
		else  {
			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    3a2a:	c9 01       	movw	r24, r18
    3a2c:	97 01       	movw	r18, r14
    3a2e:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
			*curCounter += 1;
    3a32:	d8 01       	movw	r26, r16
    3a34:	8d 91       	ld	r24, X+
    3a36:	9c 91       	ld	r25, X
    3a38:	11 97       	sbiw	r26, 0x01	; 1
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	8d 93       	st	X+, r24
    3a3e:	9c 93       	st	X, r25
			*curCounter +=1;
		}

	}
	
}
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	08 95       	ret
		
		//Turn on the leds when on length
		//is longer then counter
		if(*curCounter >= offLength) {
			//we are turning led's off.
			*curLedOn = 1;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	99 83       	std	Y+1, r25	; 0x01
    3a54:	88 83       	st	Y, r24
			*curCounter = 0;
    3a56:	1d 92       	st	X+, r1
    3a58:	1c 92       	st	X, r1
 			setRGBColor(ledNumber,redColor,greenColor,blueColor);
    3a5a:	c9 01       	movw	r24, r18
    3a5c:	97 01       	movw	r18, r14
    3a5e:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
			*curCounter +=1;
		}

	}
	
}
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	08 95       	ret

00003a70 <fadeBetweenColors>:
	short endBlue;
	short stepCount;
};

void fadeBetweenColors(short ledNumber, short *data)
{
    3a70:	2f 92       	push	r2
    3a72:	3f 92       	push	r3
    3a74:	4f 92       	push	r4
    3a76:	5f 92       	push	r5
    3a78:	6f 92       	push	r6
    3a7a:	7f 92       	push	r7
    3a7c:	8f 92       	push	r8
    3a7e:	9f 92       	push	r9
    3a80:	af 92       	push	r10
    3a82:	bf 92       	push	r11
    3a84:	cf 92       	push	r12
    3a86:	df 92       	push	r13
    3a88:	ef 92       	push	r14
    3a8a:	ff 92       	push	r15
    3a8c:	0f 93       	push	r16
    3a8e:	1f 93       	push	r17
    3a90:	df 93       	push	r29
    3a92:	cf 93       	push	r28
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	6e 97       	sbiw	r28, 0x1e	; 30
    3a9a:	0f b6       	in	r0, 0x3f	; 63
    3a9c:	f8 94       	cli
    3a9e:	de bf       	out	0x3e, r29	; 62
    3aa0:	0f be       	out	0x3f, r0	; 63
    3aa2:	cd bf       	out	0x3d, r28	; 61
    3aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    3aa6:	8d 8f       	std	Y+29, r24	; 0x1d
    3aa8:	fb 01       	movw	r30, r22
//	struct FadeBetweenColorsDataArgument *dataArgument = (struct FadeBetweenColorsDataArgument *) data;
	short br = data[0];
    3aaa:	20 81       	ld	r18, Z
    3aac:	31 81       	ldd	r19, Z+1	; 0x01
    3aae:	3c 8f       	std	Y+28, r19	; 0x1c
    3ab0:	2b 8f       	std	Y+27, r18	; 0x1b
	short bg = data[1];
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab8:	89 8f       	std	Y+25, r24	; 0x19
	short bb = data[2];
    3aba:	a4 81       	ldd	r26, Z+4	; 0x04
    3abc:	b5 81       	ldd	r27, Z+5	; 0x05
    3abe:	b8 8f       	std	Y+24, r27	; 0x18
    3ac0:	af 8b       	std	Y+23, r26	; 0x17
	short er = data[3];
    3ac2:	26 81       	ldd	r18, Z+6	; 0x06
    3ac4:	37 81       	ldd	r19, Z+7	; 0x07
    3ac6:	3e 8b       	std	Y+22, r19	; 0x16
    3ac8:	2d 8b       	std	Y+21, r18	; 0x15
	short eg = data[4];
    3aca:	80 85       	ldd	r24, Z+8	; 0x08
    3acc:	91 85       	ldd	r25, Z+9	; 0x09
    3ace:	9c 8b       	std	Y+20, r25	; 0x14
    3ad0:	8b 8b       	std	Y+19, r24	; 0x13
	short eb = data[5];
    3ad2:	a2 85       	ldd	r26, Z+10	; 0x0a
    3ad4:	b3 85       	ldd	r27, Z+11	; 0x0b
    3ad6:	ba 8b       	std	Y+18, r27	; 0x12
    3ad8:	a9 8b       	std	Y+17, r26	; 0x11

	short stepCount = data[6];
    3ada:	24 85       	ldd	r18, Z+12	; 0x0c
    3adc:	35 85       	ldd	r19, Z+13	; 0x0d
    3ade:	38 8b       	std	Y+16, r19	; 0x10
    3ae0:	2f 87       	std	Y+15, r18	; 0x0f
	
	static float savedColors[LEDCOUNT * 3];
	
	int *currentStep,*direction;
	currentStep = &currentStepLeds[(short)ledNumber];
    3ae2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ae6:	88 0f       	add	r24, r24
    3ae8:	99 1f       	adc	r25, r25
    3aea:	dc 01       	movw	r26, r24
    3aec:	ad 5c       	subi	r26, 0xCD	; 205
    3aee:	bc 4f       	sbci	r27, 0xFC	; 252
    3af0:	be 87       	std	Y+14, r27	; 0x0e
    3af2:	ad 87       	std	Y+13, r26	; 0x0d
	direction = &directionLeds[(short)ledNumber];
    3af4:	fc 01       	movw	r30, r24
    3af6:	e5 58       	subi	r30, 0x85	; 133
    3af8:	fc 4f       	sbci	r31, 0xFC	; 252
    3afa:	fc 87       	std	Y+12, r31	; 0x0c
    3afc:	eb 87       	std	Y+11, r30	; 0x0b
	float *cb;
	int ledIndex;
	
	//set up pointers for local color references
	ledIndex = (ledNumber * 3);
	cr = &savedColors[ledIndex];
    3afe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3b00:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3b02:	82 0f       	add	r24, r18
    3b04:	93 1f       	adc	r25, r19
    3b06:	88 0f       	add	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	88 0f       	add	r24, r24
    3b0c:	99 1f       	adc	r25, r25
    3b0e:	dc 01       	movw	r26, r24
    3b10:	ae 5e       	subi	r26, 0xEE	; 238
    3b12:	bd 4f       	sbci	r27, 0xFD	; 253
    3b14:	ba 87       	std	Y+10, r27	; 0x0a
    3b16:	a9 87       	std	Y+9, r26	; 0x09
	cg = &savedColors[ledIndex + 1];
    3b18:	fc 01       	movw	r30, r24
    3b1a:	ea 5e       	subi	r30, 0xEA	; 234
    3b1c:	fd 4f       	sbci	r31, 0xFD	; 253
    3b1e:	f8 87       	std	Y+8, r31	; 0x08
    3b20:	ef 83       	std	Y+7, r30	; 0x07
	cb = &savedColors[ledIndex + 2];
    3b22:	9c 01       	movw	r18, r24
    3b24:	26 5e       	subi	r18, 0xE6	; 230
    3b26:	3d 4f       	sbci	r19, 0xFD	; 253
    3b28:	3e 83       	std	Y+6, r19	; 0x06
    3b2a:	2d 83       	std	Y+5, r18	; 0x05
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
    3b2c:	80 91 ea 02 	lds	r24, 0x02EA
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <fadeBetweenColors+0xc6>
    3b34:	09 c1       	rjmp	.+530    	; 0x3d48 <fadeBetweenColors+0x2d8>
    3b36:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3b38:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3b3a:	bd 01       	movw	r22, r26
    3b3c:	88 27       	eor	r24, r24
    3b3e:	77 fd       	sbrc	r23, 7
    3b40:	80 95       	com	r24
    3b42:	98 2f       	mov	r25, r24
    3b44:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3b48:	3b 01       	movw	r6, r22
    3b4a:	4c 01       	movw	r8, r24
    3b4c:	e9 8d       	ldd	r30, Y+25	; 0x19
    3b4e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3b50:	bf 01       	movw	r22, r30
    3b52:	88 27       	eor	r24, r24
    3b54:	77 fd       	sbrc	r23, 7
    3b56:	80 95       	com	r24
    3b58:	98 2f       	mov	r25, r24
    3b5a:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3b5e:	1b 01       	movw	r2, r22
    3b60:	2c 01       	movw	r4, r24
    3b62:	2f 89       	ldd	r18, Y+23	; 0x17
    3b64:	38 8d       	ldd	r19, Y+24	; 0x18
    3b66:	b9 01       	movw	r22, r18
    3b68:	88 27       	eor	r24, r24
    3b6a:	77 fd       	sbrc	r23, 7
    3b6c:	80 95       	com	r24
    3b6e:	98 2f       	mov	r25, r24
    3b70:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3b74:	69 83       	std	Y+1, r22	; 0x01
    3b76:	7a 83       	std	Y+2, r23	; 0x02
    3b78:	8b 83       	std	Y+3, r24	; 0x03
    3b7a:	9c 83       	std	Y+4, r25	; 0x04
    3b7c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b7e:	be 85       	ldd	r27, Y+14	; 0x0e
    3b80:	cd 90       	ld	r12, X+
    3b82:	dc 90       	ld	r13, X
	float dg = eg - bg;
	float db = eb - bb;

	//get the amount of change
	//for each color
	float sr = dr / (float)stepCount;
    3b84:	ef 85       	ldd	r30, Y+15	; 0x0f
    3b86:	f8 89       	ldd	r31, Y+16	; 0x10
    3b88:	bf 01       	movw	r22, r30
    3b8a:	88 27       	eor	r24, r24
    3b8c:	77 fd       	sbrc	r23, 7
    3b8e:	80 95       	com	r24
    3b90:	98 2f       	mov	r25, r24
    3b92:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3b96:	7b 01       	movw	r14, r22
    3b98:	8c 01       	movw	r16, r24
	float sg = dg / (float)stepCount;
	float sb = db / (float)stepCount;

	//calculate the current value for each color
	*cr = (float) br + (sr * (float) *currentStep );
    3b9a:	b6 01       	movw	r22, r12
    3b9c:	88 27       	eor	r24, r24
    3b9e:	77 fd       	sbrc	r23, 7
    3ba0:	80 95       	com	r24
    3ba2:	98 2f       	mov	r25, r24
    3ba4:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3ba8:	5b 01       	movw	r10, r22
    3baa:	6c 01       	movw	r12, r24
    3bac:	2d 89       	ldd	r18, Y+21	; 0x15
    3bae:	3e 89       	ldd	r19, Y+22	; 0x16
    3bb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bb4:	28 1b       	sub	r18, r24
    3bb6:	39 0b       	sbc	r19, r25
    3bb8:	b9 01       	movw	r22, r18
    3bba:	88 27       	eor	r24, r24
    3bbc:	77 fd       	sbrc	r23, 7
    3bbe:	80 95       	com	r24
    3bc0:	98 2f       	mov	r25, r24
    3bc2:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3bc6:	a8 01       	movw	r20, r16
    3bc8:	97 01       	movw	r18, r14
    3bca:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divsf3>
    3bce:	9b 01       	movw	r18, r22
    3bd0:	ac 01       	movw	r20, r24
    3bd2:	c6 01       	movw	r24, r12
    3bd4:	b5 01       	movw	r22, r10
    3bd6:	0e 94 82 2b 	call	0x5704	; 0x5704 <__mulsf3>
    3bda:	a4 01       	movw	r20, r8
    3bdc:	93 01       	movw	r18, r6
    3bde:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__addsf3>
    3be2:	a9 85       	ldd	r26, Y+9	; 0x09
    3be4:	ba 85       	ldd	r27, Y+10	; 0x0a
    3be6:	6d 93       	st	X+, r22
    3be8:	7d 93       	st	X+, r23
    3bea:	8d 93       	st	X+, r24
    3bec:	9c 93       	st	X, r25
    3bee:	13 97       	sbiw	r26, 0x03	; 3
	*cg = (float) bg + (sg * (float) *currentStep );
    3bf0:	eb 89       	ldd	r30, Y+19	; 0x13
    3bf2:	fc 89       	ldd	r31, Y+20	; 0x14
    3bf4:	29 8d       	ldd	r18, Y+25	; 0x19
    3bf6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3bf8:	e2 1b       	sub	r30, r18
    3bfa:	f3 0b       	sbc	r31, r19
    3bfc:	bf 01       	movw	r22, r30
    3bfe:	88 27       	eor	r24, r24
    3c00:	77 fd       	sbrc	r23, 7
    3c02:	80 95       	com	r24
    3c04:	98 2f       	mov	r25, r24
    3c06:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3c0a:	a8 01       	movw	r20, r16
    3c0c:	97 01       	movw	r18, r14
    3c0e:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divsf3>
    3c12:	a6 01       	movw	r20, r12
    3c14:	95 01       	movw	r18, r10
    3c16:	0e 94 82 2b 	call	0x5704	; 0x5704 <__mulsf3>
    3c1a:	a2 01       	movw	r20, r4
    3c1c:	91 01       	movw	r18, r2
    3c1e:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__addsf3>
    3c22:	af 81       	ldd	r26, Y+7	; 0x07
    3c24:	b8 85       	ldd	r27, Y+8	; 0x08
    3c26:	6d 93       	st	X+, r22
    3c28:	7d 93       	st	X+, r23
    3c2a:	8d 93       	st	X+, r24
    3c2c:	9c 93       	st	X, r25
    3c2e:	13 97       	sbiw	r26, 0x03	; 3
	*cb = (float) bb + (sb * (float) *currentStep );
    3c30:	e9 89       	ldd	r30, Y+17	; 0x11
    3c32:	fa 89       	ldd	r31, Y+18	; 0x12
    3c34:	2f 89       	ldd	r18, Y+23	; 0x17
    3c36:	38 8d       	ldd	r19, Y+24	; 0x18
    3c38:	e2 1b       	sub	r30, r18
    3c3a:	f3 0b       	sbc	r31, r19
    3c3c:	bf 01       	movw	r22, r30
    3c3e:	88 27       	eor	r24, r24
    3c40:	77 fd       	sbrc	r23, 7
    3c42:	80 95       	com	r24
    3c44:	98 2f       	mov	r25, r24
    3c46:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3c4a:	a8 01       	movw	r20, r16
    3c4c:	97 01       	movw	r18, r14
    3c4e:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <__divsf3>
    3c52:	a6 01       	movw	r20, r12
    3c54:	95 01       	movw	r18, r10
    3c56:	0e 94 82 2b 	call	0x5704	; 0x5704 <__mulsf3>
    3c5a:	29 81       	ldd	r18, Y+1	; 0x01
    3c5c:	3a 81       	ldd	r19, Y+2	; 0x02
    3c5e:	4b 81       	ldd	r20, Y+3	; 0x03
    3c60:	5c 81       	ldd	r21, Y+4	; 0x04
    3c62:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__addsf3>
    3c66:	7b 01       	movw	r14, r22
    3c68:	8c 01       	movw	r16, r24
    3c6a:	ad 81       	ldd	r26, Y+5	; 0x05
    3c6c:	be 81       	ldd	r27, Y+6	; 0x06
    3c6e:	6d 93       	st	X+, r22
    3c70:	7d 93       	st	X+, r23
    3c72:	8d 93       	st	X+, r24
    3c74:	9c 93       	st	X, r25
    3c76:	13 97       	sbiw	r26, 0x03	; 3


	setRGBColor(ledNumber,(int) *cr,(int) *cg,(int) *cb);
    3c78:	e9 85       	ldd	r30, Y+9	; 0x09
    3c7a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c7c:	60 81       	ld	r22, Z
    3c7e:	71 81       	ldd	r23, Z+1	; 0x01
    3c80:	82 81       	ldd	r24, Z+2	; 0x02
    3c82:	93 81       	ldd	r25, Z+3	; 0x03
    3c84:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__fixsfsi>
    3c88:	3b 01       	movw	r6, r22
    3c8a:	4c 01       	movw	r8, r24
    3c8c:	af 81       	ldd	r26, Y+7	; 0x07
    3c8e:	b8 85       	ldd	r27, Y+8	; 0x08
    3c90:	6d 91       	ld	r22, X+
    3c92:	7d 91       	ld	r23, X+
    3c94:	8d 91       	ld	r24, X+
    3c96:	9c 91       	ld	r25, X
    3c98:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__fixsfsi>
    3c9c:	5b 01       	movw	r10, r22
    3c9e:	6c 01       	movw	r12, r24
    3ca0:	c8 01       	movw	r24, r16
    3ca2:	b7 01       	movw	r22, r14
    3ca4:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__fixsfsi>
    3ca8:	8b 01       	movw	r16, r22
    3caa:	9c 01       	movw	r18, r24
    3cac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cb0:	b3 01       	movw	r22, r6
    3cb2:	a5 01       	movw	r20, r10
    3cb4:	98 01       	movw	r18, r16
    3cb6:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
    3cba:	eb 85       	ldd	r30, Y+11	; 0x0b
    3cbc:	fc 85       	ldd	r31, Y+12	; 0x0c
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	59 f1       	breq	.+86     	; 0x3d1c <fadeBetweenColors+0x2ac>
	}

	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
    3cc6:	ed 85       	ldd	r30, Y+13	; 0x0d
    3cc8:	fe 85       	ldd	r31, Y+14	; 0x0e
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
		if(*currentStep < 0)  {
    3cd4:	97 fd       	sbrc	r25, 7
    3cd6:	19 c0       	rjmp	.+50     	; 0x3d0a <fadeBetweenColors+0x29a>
			*currentStep = 0;
			*direction = 1;
		}
	}
}
    3cd8:	6e 96       	adiw	r28, 0x1e	; 30
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	0f be       	out	0x3f, r0	; 63
    3ce2:	cd bf       	out	0x3d, r28	; 61
    3ce4:	cf 91       	pop	r28
    3ce6:	df 91       	pop	r29
    3ce8:	1f 91       	pop	r17
    3cea:	0f 91       	pop	r16
    3cec:	ff 90       	pop	r15
    3cee:	ef 90       	pop	r14
    3cf0:	df 90       	pop	r13
    3cf2:	cf 90       	pop	r12
    3cf4:	bf 90       	pop	r11
    3cf6:	af 90       	pop	r10
    3cf8:	9f 90       	pop	r9
    3cfa:	8f 90       	pop	r8
    3cfc:	7f 90       	pop	r7
    3cfe:	6f 90       	pop	r6
    3d00:	5f 90       	pop	r5
    3d02:	4f 90       	pop	r4
    3d04:	3f 90       	pop	r3
    3d06:	2f 90       	pop	r2
    3d08:	08 95       	ret
	//we are moving from end color 
	//to beginning color
	else {
		*currentStep = *currentStep - 1;
		if(*currentStep < 0)  {
			*currentStep = 0;
    3d0a:	11 82       	std	Z+1, r1	; 0x01
    3d0c:	10 82       	st	Z, r1
			*direction = 1;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d14:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d16:	8d 93       	st	X+, r24
    3d18:	9c 93       	st	X, r25
    3d1a:	de cf       	rjmp	.-68     	; 0x3cd8 <fadeBetweenColors+0x268>
	
	
	//if we are moving from beginning color
	//to end color
	if(*direction == 1) {
		*currentStep = *currentStep + 1;
    3d1c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d1e:	be 85       	ldd	r27, Y+14	; 0x0e
    3d20:	8d 91       	ld	r24, X+
    3d22:	9c 91       	ld	r25, X
    3d24:	11 97       	sbiw	r26, 0x01	; 1
    3d26:	01 96       	adiw	r24, 0x01	; 1
    3d28:	8d 93       	st	X+, r24
    3d2a:	9c 93       	st	X, r25
		if(*currentStep > stepCount) {
    3d2c:	ef 85       	ldd	r30, Y+15	; 0x0f
    3d2e:	f8 89       	ldd	r31, Y+16	; 0x10
    3d30:	e8 17       	cp	r30, r24
    3d32:	f9 07       	cpc	r31, r25
    3d34:	8c f6       	brge	.-94     	; 0x3cd8 <fadeBetweenColors+0x268>
			*direction = 0;
    3d36:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d38:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d3a:	1d 92       	st	X+, r1
    3d3c:	1c 92       	st	X, r1
			*currentStep = stepCount;
    3d3e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d40:	be 85       	ldd	r27, Y+14	; 0x0e
    3d42:	ed 93       	st	X+, r30
    3d44:	fc 93       	st	X, r31
    3d46:	c8 cf       	rjmp	.-112    	; 0x3cd8 <fadeBetweenColors+0x268>
	
	
	//set current colors to beginning colors
	//on reset
	if(resetEffect == TRUE) { 
		*cr = br;
    3d48:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3d4a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3d4c:	bf 01       	movw	r22, r30
    3d4e:	88 27       	eor	r24, r24
    3d50:	77 fd       	sbrc	r23, 7
    3d52:	80 95       	com	r24
    3d54:	98 2f       	mov	r25, r24
    3d56:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3d5a:	3b 01       	movw	r6, r22
    3d5c:	4c 01       	movw	r8, r24
    3d5e:	a9 85       	ldd	r26, Y+9	; 0x09
    3d60:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d62:	6d 93       	st	X+, r22
    3d64:	7d 93       	st	X+, r23
    3d66:	8d 93       	st	X+, r24
    3d68:	9c 93       	st	X, r25
    3d6a:	13 97       	sbiw	r26, 0x03	; 3
		*cg = bg;
    3d6c:	e9 8d       	ldd	r30, Y+25	; 0x19
    3d6e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3d70:	bf 01       	movw	r22, r30
    3d72:	88 27       	eor	r24, r24
    3d74:	77 fd       	sbrc	r23, 7
    3d76:	80 95       	com	r24
    3d78:	98 2f       	mov	r25, r24
    3d7a:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3d7e:	1b 01       	movw	r2, r22
    3d80:	2c 01       	movw	r4, r24
    3d82:	af 81       	ldd	r26, Y+7	; 0x07
    3d84:	b8 85       	ldd	r27, Y+8	; 0x08
    3d86:	6d 93       	st	X+, r22
    3d88:	7d 93       	st	X+, r23
    3d8a:	8d 93       	st	X+, r24
    3d8c:	9c 93       	st	X, r25
    3d8e:	13 97       	sbiw	r26, 0x03	; 3
		*cb = bb;
    3d90:	ef 89       	ldd	r30, Y+23	; 0x17
    3d92:	f8 8d       	ldd	r31, Y+24	; 0x18
    3d94:	bf 01       	movw	r22, r30
    3d96:	88 27       	eor	r24, r24
    3d98:	77 fd       	sbrc	r23, 7
    3d9a:	80 95       	com	r24
    3d9c:	98 2f       	mov	r25, r24
    3d9e:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <__floatsisf>
    3da2:	69 83       	std	Y+1, r22	; 0x01
    3da4:	7a 83       	std	Y+2, r23	; 0x02
    3da6:	8b 83       	std	Y+3, r24	; 0x03
    3da8:	9c 83       	std	Y+4, r25	; 0x04
    3daa:	ad 81       	ldd	r26, Y+5	; 0x05
    3dac:	be 81       	ldd	r27, Y+6	; 0x06
    3dae:	6d 93       	st	X+, r22
    3db0:	7d 93       	st	X+, r23
    3db2:	8d 93       	st	X+, r24
    3db4:	9c 93       	st	X, r25
    3db6:	13 97       	sbiw	r26, 0x03	; 3
		*currentStep = 0;
    3db8:	ed 85       	ldd	r30, Y+13	; 0x0d
    3dba:	fe 85       	ldd	r31, Y+14	; 0x0e
    3dbc:	11 82       	std	Z+1, r1	; 0x01
    3dbe:	10 82       	st	Z, r1
		*direction = 1;	
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	ab 85       	ldd	r26, Y+11	; 0x0b
    3dc6:	bc 85       	ldd	r27, Y+12	; 0x0c
    3dc8:	8d 93       	st	X+, r24
    3dca:	9c 93       	st	X, r25
    3dcc:	cc 24       	eor	r12, r12
    3dce:	dd 24       	eor	r13, r13
    3dd0:	d9 ce       	rjmp	.-590    	; 0x3b84 <fadeBetweenColors+0x114>

00003dd2 <resetFadeBetweenColorsEffect>:

int currentStepLeds[LEDCOUNT];
int directionLeds[LEDCOUNT];

void resetFadeBetweenColorsEffect(short ledNumber, short*data) {
	resetEffect = TRUE;
    3dd2:	21 e0       	ldi	r18, 0x01	; 1
    3dd4:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,data);
    3dd8:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <fadeBetweenColors>
	resetEffect = FALSE;
    3ddc:	10 92 ea 02 	sts	0x02EA, r1
}
    3de0:	08 95       	ret

00003de2 <blinkEffect>:
	fadeBetweenColors(ledNumber,theData);
	resetEffect=FALSE;
}

void blinkEffect(short ledNumber, short *data)
{
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	df 93       	push	r29
    3de8:	cf 93       	push	r28
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
    3dee:	2e 97       	sbiw	r28, 0x0e	; 14
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	9c 01       	movw	r18, r24
    3dfc:	fb 01       	movw	r30, r22

	
	if (blinkLedCounters[(short) ledNumber] >= BLINK_LENGTH) {
    3dfe:	8c 01       	movw	r16, r24
    3e00:	00 0f       	add	r16, r16
    3e02:	11 1f       	adc	r17, r17
    3e04:	0d 56       	subi	r16, 0x6D	; 109
    3e06:	1c 4f       	sbci	r17, 0xFC	; 252
    3e08:	d8 01       	movw	r26, r16
    3e0a:	8d 91       	ld	r24, X+
    3e0c:	9c 91       	ld	r25, X
    3e0e:	42 97       	sbiw	r24, 0x12	; 18
    3e10:	14 f5       	brge	.+68     	; 0x3e56 <blinkEffect+0x74>
		return;
	}
	short newEffectData[7];
	newEffectData[0] = data[0];
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	89 83       	std	Y+1, r24	; 0x01
	newEffectData[1] = data[1];
    3e1a:	82 81       	ldd	r24, Z+2	; 0x02
    3e1c:	93 81       	ldd	r25, Z+3	; 0x03
    3e1e:	9c 83       	std	Y+4, r25	; 0x04
    3e20:	8b 83       	std	Y+3, r24	; 0x03
	newEffectData[2] = data[2];
    3e22:	84 81       	ldd	r24, Z+4	; 0x04
    3e24:	95 81       	ldd	r25, Z+5	; 0x05
    3e26:	9e 83       	std	Y+6, r25	; 0x06
    3e28:	8d 83       	std	Y+5, r24	; 0x05
	newEffectData[3] = 0;
    3e2a:	18 86       	std	Y+8, r1	; 0x08
    3e2c:	1f 82       	std	Y+7, r1	; 0x07
	newEffectData[4] = 0;
    3e2e:	1a 86       	std	Y+10, r1	; 0x0a
    3e30:	19 86       	std	Y+9, r1	; 0x09
	newEffectData[5] = 0;
    3e32:	1c 86       	std	Y+12, r1	; 0x0c
    3e34:	1b 86       	std	Y+11, r1	; 0x0b
	newEffectData[6] = BLINK_LENGTH;
    3e36:	82 e1       	ldi	r24, 0x12	; 18
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	9e 87       	std	Y+14, r25	; 0x0e
    3e3c:	8d 87       	std	Y+13, r24	; 0x0d
	
	fadeBetweenColors(ledNumber,newEffectData);
    3e3e:	c9 01       	movw	r24, r18
    3e40:	be 01       	movw	r22, r28
    3e42:	6f 5f       	subi	r22, 0xFF	; 255
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <fadeBetweenColors>
	blinkLedCounters[(short) ledNumber] += 1;
    3e4a:	f8 01       	movw	r30, r16
    3e4c:	80 81       	ld	r24, Z
    3e4e:	91 81       	ldd	r25, Z+1	; 0x01
    3e50:	01 96       	adiw	r24, 0x01	; 1
    3e52:	91 83       	std	Z+1, r25	; 0x01
    3e54:	80 83       	st	Z, r24
	
}
    3e56:	2e 96       	adiw	r28, 0x0e	; 14
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	1f 91       	pop	r17
    3e68:	0f 91       	pop	r16
    3e6a:	08 95       	ret

00003e6c <resetBlinkEffect>:
short blinkLedCounters[LEDCOUNT];


#define BLINK_LENGTH 18

void resetBlinkEffect(short ledNumber, short *data) {
    3e6c:	df 93       	push	r29
    3e6e:	cf 93       	push	r28
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	2e 97       	sbiw	r28, 0x0e	; 14
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	db 01       	movw	r26, r22

	blinkLedCounters[(short) ledNumber] = 0;
    3e82:	fc 01       	movw	r30, r24
    3e84:	ee 0f       	add	r30, r30
    3e86:	ff 1f       	adc	r31, r31
    3e88:	ed 56       	subi	r30, 0x6D	; 109
    3e8a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e8c:	11 82       	std	Z+1, r1	; 0x01
    3e8e:	10 82       	st	Z, r1

	short theData[7];
	theData[0] = data[0];
    3e90:	2d 91       	ld	r18, X+
    3e92:	3c 91       	ld	r19, X
    3e94:	11 97       	sbiw	r26, 0x01	; 1
    3e96:	3a 83       	std	Y+2, r19	; 0x02
    3e98:	29 83       	std	Y+1, r18	; 0x01
	theData[1] = data[1];
    3e9a:	12 96       	adiw	r26, 0x02	; 2
    3e9c:	2d 91       	ld	r18, X+
    3e9e:	3c 91       	ld	r19, X
    3ea0:	13 97       	sbiw	r26, 0x03	; 3
    3ea2:	3c 83       	std	Y+4, r19	; 0x04
    3ea4:	2b 83       	std	Y+3, r18	; 0x03
	theData[2] = data[2];
    3ea6:	14 96       	adiw	r26, 0x04	; 4
    3ea8:	2d 91       	ld	r18, X+
    3eaa:	3c 91       	ld	r19, X
    3eac:	15 97       	sbiw	r26, 0x05	; 5
    3eae:	3e 83       	std	Y+6, r19	; 0x06
    3eb0:	2d 83       	std	Y+5, r18	; 0x05
	theData[3] = 0;
    3eb2:	18 86       	std	Y+8, r1	; 0x08
    3eb4:	1f 82       	std	Y+7, r1	; 0x07
	theData[4] = 0;
    3eb6:	1a 86       	std	Y+10, r1	; 0x0a
    3eb8:	19 86       	std	Y+9, r1	; 0x09
	theData[5] = 0;
    3eba:	1c 86       	std	Y+12, r1	; 0x0c
    3ebc:	1b 86       	std	Y+11, r1	; 0x0b
	theData[6] = BLINK_LENGTH; 
    3ebe:	22 e1       	ldi	r18, 0x12	; 18
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	3e 87       	std	Y+14, r19	; 0x0e
    3ec4:	2d 87       	std	Y+13, r18	; 0x0d
	resetEffect=TRUE;
    3ec6:	21 e0       	ldi	r18, 0x01	; 1
    3ec8:	20 93 ea 02 	sts	0x02EA, r18
	fadeBetweenColors(ledNumber,theData);
    3ecc:	be 01       	movw	r22, r28
    3ece:	6f 5f       	subi	r22, 0xFF	; 255
    3ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed2:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <fadeBetweenColors>
	resetEffect=FALSE;
    3ed6:	10 92 ea 02 	sts	0x02EA, r1
}
    3eda:	2e 96       	adiw	r28, 0x0e	; 14
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	f8 94       	cli
    3ee0:	de bf       	out	0x3e, r29	; 62
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	cd bf       	out	0x3d, r28	; 61
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <resetFadeBetweenColorsWithPwm>:

	
	
}

void resetFadeBetweenColorsWithPwm(short ledNumber, short *data) {
    3eec:	cf 92       	push	r12
    3eee:	df 92       	push	r13
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	0f 93       	push	r16
    3ef6:	1f 93       	push	r17
    3ef8:	7c 01       	movw	r14, r24
    3efa:	6b 01       	movw	r12, r22
	pwmLedCounter[(short) ledNumber] = 0;
    3efc:	8c 01       	movw	r16, r24
    3efe:	00 0f       	add	r16, r16
    3f00:	11 1f       	adc	r17, r17
    3f02:	f8 01       	movw	r30, r16
    3f04:	e5 5b       	subi	r30, 0xB5	; 181
    3f06:	fc 4f       	sbci	r31, 0xFC	; 252
    3f08:	11 82       	std	Z+1, r1	; 0x01
    3f0a:	10 82       	st	Z, r1
	pwmLedOn[(short) ledNumber] = 1;
    3f0c:	f8 01       	movw	r30, r16
    3f0e:	ed 59       	subi	r30, 0x9D	; 157
    3f10:	fc 4f       	sbci	r31, 0xFC	; 252
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
	fadeWithPwm10msCounter[(short) ledNumber] = 0;
    3f1a:	f8 01       	movw	r30, r16
    3f1c:	e5 55       	subi	r30, 0x55	; 85
    3f1e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f20:	11 82       	std	Z+1, r1	; 0x01
    3f22:	10 82       	st	Z, r1

	//NOTE resetPwmEffect DOES NOT DEPEND ON DATA ATM SO IT's OK!
	resetPwmEffect(ledNumber,data);
    3f24:	c7 01       	movw	r24, r14
    3f26:	0e 94 9d 1c 	call	0x393a	; 0x393a <resetPwmEffect>
	//NOTE IF ARGUMENTS FOR FADE   BETWEEN COLORS EFFECT CHANGES
	//THEN THIS WILL NOT WORK!
	
	resetFadeBetweenColorsEffect(ledNumber,data);
    3f2a:	c7 01       	movw	r24, r14
    3f2c:	b6 01       	movw	r22, r12
    3f2e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <resetFadeBetweenColorsEffect>
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	getRGBColor((short) ledNumber, colorInfo);
    3f32:	0e 0d       	add	r16, r14
    3f34:	1f 1d       	adc	r17, r15
    3f36:	00 0f       	add	r16, r16
    3f38:	11 1f       	adc	r17, r17
    3f3a:	0e 55       	subi	r16, 0x5E	; 94
    3f3c:	1d 4f       	sbci	r17, 0xFD	; 253
    3f3e:	c7 01       	movw	r24, r14
    3f40:	b8 01       	movw	r22, r16
    3f42:	0e 94 ce 28 	call	0x519c	; 0x519c <getRGBColor>
}
    3f46:	1f 91       	pop	r17
    3f48:	0f 91       	pop	r16
    3f4a:	ff 90       	pop	r15
    3f4c:	ef 90       	pop	r14
    3f4e:	df 90       	pop	r13
    3f50:	cf 90       	pop	r12
    3f52:	08 95       	ret

00003f54 <fadeBetweenColorsWithPwm>:
}


short fadeWithPwm10msCounter[LEDCOUNT];
static struct rgbColors fadeWithPwm10msCounterColorStructs[LEDCOUNT];
void fadeBetweenColorsWithPwm(short ledNumber, short *data) {
    3f54:	af 92       	push	r10
    3f56:	bf 92       	push	r11
    3f58:	cf 92       	push	r12
    3f5a:	df 92       	push	r13
    3f5c:	ef 92       	push	r14
    3f5e:	ff 92       	push	r15
    3f60:	0f 93       	push	r16
    3f62:	1f 93       	push	r17
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	2a 97       	sbiw	r28, 0x0a	; 10
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	f8 94       	cli
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	0f be       	out	0x3f, r0	; 63
    3f76:	cd bf       	out	0x3d, r28	; 61
    3f78:	6c 01       	movw	r12, r24
    3f7a:	5b 01       	movw	r10, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmOnCount
	//data[8] = pwmOffCount
	
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
    3f7c:	88 0f       	add	r24, r24
    3f7e:	99 1f       	adc	r25, r25
    3f80:	8c 01       	movw	r16, r24
    3f82:	0c 0d       	add	r16, r12
    3f84:	1d 1d       	adc	r17, r13
    3f86:	00 0f       	add	r16, r16
    3f88:	11 1f       	adc	r17, r17
    3f8a:	0e 55       	subi	r16, 0x5E	; 94
    3f8c:	1d 4f       	sbci	r17, 0xFD	; 253
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
    3f8e:	5b ea       	ldi	r21, 0xAB	; 171
    3f90:	e5 2e       	mov	r14, r21
    3f92:	53 e0       	ldi	r21, 0x03	; 3
    3f94:	f5 2e       	mov	r15, r21
    3f96:	e8 0e       	add	r14, r24
    3f98:	f9 1e       	adc	r15, r25
    3f9a:	d7 01       	movw	r26, r14
    3f9c:	8d 91       	ld	r24, X+
    3f9e:	9c 91       	ld	r25, X
    3fa0:	8a 30       	cpi	r24, 0x0A	; 10
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	b4 f5       	brge	.+108    	; 0x4012 <fadeBetweenColorsWithPwm+0xbe>
		getRGBColor((short) ledNumber, colorInfo);

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
	}
	else {
		fadeWithPwm10msCounter[(short) ledNumber] += 1;
    3fa6:	01 96       	adiw	r24, 0x01	; 1
    3fa8:	d7 01       	movw	r26, r14
    3faa:	8d 93       	st	X+, r24
    3fac:	9c 93       	st	X, r25
		(short) colorInfo->red,
		(short) colorInfo->green,
		(short) colorInfo->blue,
		data[7],
		data[8],
	};
    3fae:	f8 01       	movw	r30, r16
    3fb0:	22 81       	ldd	r18, Z+2	; 0x02
    3fb2:	33 81       	ldd	r19, Z+3	; 0x03
    3fb4:	44 81       	ldd	r20, Z+4	; 0x04
    3fb6:	55 81       	ldd	r21, Z+5	; 0x05
    3fb8:	d5 01       	movw	r26, r10
    3fba:	1e 96       	adiw	r26, 0x0e	; 14
    3fbc:	6d 91       	ld	r22, X+
    3fbe:	7c 91       	ld	r23, X
    3fc0:	1f 97       	sbiw	r26, 0x0f	; 15
    3fc2:	50 96       	adiw	r26, 0x10	; 16
    3fc4:	ed 91       	ld	r30, X+
    3fc6:	fc 91       	ld	r31, X
    3fc8:	51 97       	sbiw	r26, 0x11	; 17
    3fca:	d8 01       	movw	r26, r16
    3fcc:	8d 91       	ld	r24, X+
    3fce:	9c 91       	ld	r25, X
    3fd0:	9a 83       	std	Y+2, r25	; 0x02
    3fd2:	89 83       	std	Y+1, r24	; 0x01
    3fd4:	3c 83       	std	Y+4, r19	; 0x04
    3fd6:	2b 83       	std	Y+3, r18	; 0x03
    3fd8:	5e 83       	std	Y+6, r21	; 0x06
    3fda:	4d 83       	std	Y+5, r20	; 0x05
    3fdc:	78 87       	std	Y+8, r23	; 0x08
    3fde:	6f 83       	std	Y+7, r22	; 0x07
    3fe0:	fa 87       	std	Y+10, r31	; 0x0a
    3fe2:	e9 87       	std	Y+9, r30	; 0x09

	//call pwm effect 
	pwmEffect(ledNumber,pwmData);
    3fe4:	c6 01       	movw	r24, r12
    3fe6:	be 01       	movw	r22, r28
    3fe8:	6f 5f       	subi	r22, 0xFF	; 255
    3fea:	7f 4f       	sbci	r23, 0xFF	; 255
    3fec:	0e 94 b9 1c 	call	0x3972	; 0x3972 <pwmEffect>

	
	
}
    3ff0:	2a 96       	adiw	r28, 0x0a	; 10
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	f8 94       	cli
    3ff6:	de bf       	out	0x3e, r29	; 62
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	cd bf       	out	0x3d, r28	; 61
    3ffc:	cf 91       	pop	r28
    3ffe:	df 91       	pop	r29
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	ff 90       	pop	r15
    4006:	ef 90       	pop	r14
    4008:	df 90       	pop	r13
    400a:	cf 90       	pop	r12
    400c:	bf 90       	pop	r11
    400e:	af 90       	pop	r10
    4010:	08 95       	ret
	
	struct rgbColors *colorInfo = &fadeWithPwm10msCounterColorStructs[(short) ledNumber];
	//First call the fadeBetweenColors effect.
	//This shoul only happen every 10 ms!
	if(fadeWithPwm10msCounter[(short) ledNumber] >= TEN_MS_MULTIPLIER) {
		fadeBetweenColors( (short) ledNumber, data);
    4012:	c6 01       	movw	r24, r12
    4014:	b5 01       	movw	r22, r10
    4016:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <fadeBetweenColors>
		
		getRGBColor((short) ledNumber, colorInfo);
    401a:	c6 01       	movw	r24, r12
    401c:	b8 01       	movw	r22, r16
    401e:	0e 94 ce 28 	call	0x519c	; 0x519c <getRGBColor>

		fadeWithPwm10msCounter[(short) ledNumber] = 0;
    4022:	f7 01       	movw	r30, r14
    4024:	11 82       	std	Z+1, r1	; 0x01
    4026:	10 82       	st	Z, r1
    4028:	c2 cf       	rjmp	.-124    	; 0x3fae <fadeBetweenColorsWithPwm+0x5a>

0000402a <resetFadeBetweenColorsWithScalingPwmEffect>:
	

}

void resetFadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) 
{
    402a:	ef 92       	push	r14
    402c:	ff 92       	push	r15
    402e:	0f 93       	push	r16
    4030:	1f 93       	push	r17
    4032:	df 93       	push	r29
    4034:	cf 93       	push	r28
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	62 97       	sbiw	r28, 0x12	; 18
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	f8 2e       	mov	r15, r24
    4048:	e9 2e       	mov	r14, r25
    404a:	db 01       	movw	r26, r22
	//data[6] = colorChangeStepCount
	//data[7] = pwmScalingDirection (0 on to off, 1 off to one)
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
    404c:	1e 96       	adiw	r26, 0x0e	; 14
    404e:	8d 91       	ld	r24, X+
    4050:	9c 91       	ld	r25, X
    4052:	1f 97       	sbiw	r26, 0x0f	; 15
	if(direction == PWM_SCALE_UP) {
    4054:	81 30       	cpi	r24, 0x01	; 1
    4056:	91 05       	cpc	r25, r1
    4058:	09 f4       	brne	.+2      	; 0x405c <resetFadeBetweenColorsWithScalingPwmEffect+0x32>
    405a:	a6 c0       	rjmp	.+332    	; 0x41a8 <resetFadeBetweenColorsWithScalingPwmEffect+0x17e>
		pwmScaleData[ledNumber].onCount = 0;
		pwmScaleData[ledNumber].offCount = 32;
	}

	else if(direction == PWM_SCALE_DOWN) {
    405c:	89 2b       	or	r24, r25
    405e:	31 f5       	brne	.+76     	; 0x40ac <resetFadeBetweenColorsWithScalingPwmEffect+0x82>
		pwmScaleData[ledNumber].onCount = 32;
    4060:	8f 2d       	mov	r24, r15
    4062:	9e 2d       	mov	r25, r14
    4064:	fc 01       	movw	r30, r24
    4066:	ee 0f       	add	r30, r30
    4068:	ff 1f       	adc	r31, r31
    406a:	ee 0f       	add	r30, r30
    406c:	ff 1f       	adc	r31, r31
    406e:	ee 0f       	add	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	e8 0f       	add	r30, r24
    4078:	f9 1f       	adc	r31, r25
    407a:	e5 59       	subi	r30, 0x95	; 149
    407c:	fb 4f       	sbci	r31, 0xFB	; 251
    407e:	80 e2       	ldi	r24, 0x20	; 32
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	80 83       	st	Z, r24
		pwmScaleData[ledNumber].offCount = 2;
    4086:	8f 2d       	mov	r24, r15
    4088:	9e 2d       	mov	r25, r14
    408a:	fc 01       	movw	r30, r24
    408c:	ee 0f       	add	r30, r30
    408e:	ff 1f       	adc	r31, r31
    4090:	ee 0f       	add	r30, r30
    4092:	ff 1f       	adc	r31, r31
    4094:	ee 0f       	add	r30, r30
    4096:	ff 1f       	adc	r31, r31
    4098:	88 0f       	add	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	e8 0f       	add	r30, r24
    409e:	f9 1f       	adc	r31, r25
    40a0:	e5 59       	subi	r30, 0x95	; 149
    40a2:	fb 4f       	sbci	r31, 0xFB	; 251
    40a4:	82 e0       	ldi	r24, 0x02	; 2
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	93 83       	std	Z+3, r25	; 0x03
    40aa:	82 83       	std	Z+2, r24	; 0x02
	}
	pwmScaleData[ledNumber].curTimeCounter = 0;
    40ac:	8f 2d       	mov	r24, r15
    40ae:	9e 2d       	mov	r25, r14
    40b0:	fc 01       	movw	r30, r24
    40b2:	ee 0f       	add	r30, r30
    40b4:	ff 1f       	adc	r31, r31
    40b6:	ee 0f       	add	r30, r30
    40b8:	ff 1f       	adc	r31, r31
    40ba:	ee 0f       	add	r30, r30
    40bc:	ff 1f       	adc	r31, r31
    40be:	88 0f       	add	r24, r24
    40c0:	99 1f       	adc	r25, r25
    40c2:	e8 0f       	add	r30, r24
    40c4:	f9 1f       	adc	r31, r25
    40c6:	e5 59       	subi	r30, 0x95	; 149
    40c8:	fb 4f       	sbci	r31, 0xFB	; 251
    40ca:	15 82       	std	Z+5, r1	; 0x05
    40cc:	14 82       	std	Z+4, r1	; 0x04
	pwmScaleData[ledNumber].stepCount = data[8] * TEN_MS_MULTIPLIER;
    40ce:	8f 2d       	mov	r24, r15
    40d0:	9e 2d       	mov	r25, r14
    40d2:	fc 01       	movw	r30, r24
    40d4:	ee 0f       	add	r30, r30
    40d6:	ff 1f       	adc	r31, r31
    40d8:	ee 0f       	add	r30, r30
    40da:	ff 1f       	adc	r31, r31
    40dc:	ee 0f       	add	r30, r30
    40de:	ff 1f       	adc	r31, r31
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	e8 0f       	add	r30, r24
    40e6:	f9 1f       	adc	r31, r25
    40e8:	e5 59       	subi	r30, 0x95	; 149
    40ea:	fb 4f       	sbci	r31, 0xFB	; 251
    40ec:	50 96       	adiw	r26, 0x10	; 16
    40ee:	8c 91       	ld	r24, X
    40f0:	50 97       	sbiw	r26, 0x10	; 16
    40f2:	51 96       	adiw	r26, 0x11	; 17
    40f4:	9c 91       	ld	r25, X
    40f6:	51 97       	sbiw	r26, 0x11	; 17
    40f8:	9c 01       	movw	r18, r24
    40fa:	22 0f       	add	r18, r18
    40fc:	33 1f       	adc	r19, r19
    40fe:	22 0f       	add	r18, r18
    4100:	33 1f       	adc	r19, r19
    4102:	22 0f       	add	r18, r18
    4104:	33 1f       	adc	r19, r19
    4106:	88 0f       	add	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	28 0f       	add	r18, r24
    410c:	39 1f       	adc	r19, r25
    410e:	31 87       	std	Z+9, r19	; 0x09
    4110:	20 87       	std	Z+8, r18	; 0x08

	short newData[9];
	copy_short_data(newData,data,7);
    4112:	8e 01       	movw	r16, r28
    4114:	0f 5f       	subi	r16, 0xFF	; 255
    4116:	1f 4f       	sbci	r17, 0xFF	; 255
    4118:	c8 01       	movw	r24, r16
    411a:	bd 01       	movw	r22, r26
    411c:	47 e0       	ldi	r20, 0x07	; 7
    411e:	50 e0       	ldi	r21, 0x00	; 0
    4120:	0e 94 c7 29 	call	0x538e	; 0x538e <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    4124:	8f 2d       	mov	r24, r15
    4126:	9e 2d       	mov	r25, r14
    4128:	fc 01       	movw	r30, r24
    412a:	ee 0f       	add	r30, r30
    412c:	ff 1f       	adc	r31, r31
    412e:	ee 0f       	add	r30, r30
    4130:	ff 1f       	adc	r31, r31
    4132:	ee 0f       	add	r30, r30
    4134:	ff 1f       	adc	r31, r31
    4136:	88 0f       	add	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	e8 0f       	add	r30, r24
    413c:	f9 1f       	adc	r31, r25
    413e:	e5 59       	subi	r30, 0x95	; 149
    4140:	fb 4f       	sbci	r31, 0xFB	; 251
    4142:	80 81       	ld	r24, Z
    4144:	91 81       	ldd	r25, Z+1	; 0x01
    4146:	98 8b       	std	Y+16, r25	; 0x10
    4148:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    414a:	8f 2d       	mov	r24, r15
    414c:	9e 2d       	mov	r25, r14
    414e:	fc 01       	movw	r30, r24
    4150:	ee 0f       	add	r30, r30
    4152:	ff 1f       	adc	r31, r31
    4154:	ee 0f       	add	r30, r30
    4156:	ff 1f       	adc	r31, r31
    4158:	ee 0f       	add	r30, r30
    415a:	ff 1f       	adc	r31, r31
    415c:	88 0f       	add	r24, r24
    415e:	99 1f       	adc	r25, r25
    4160:	e8 0f       	add	r30, r24
    4162:	f9 1f       	adc	r31, r25
    4164:	e5 59       	subi	r30, 0x95	; 149
    4166:	fb 4f       	sbci	r31, 0xFB	; 251
    4168:	82 81       	ldd	r24, Z+2	; 0x02
    416a:	93 81       	ldd	r25, Z+3	; 0x03
    416c:	9a 8b       	std	Y+18, r25	; 0x12
    416e:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithPwm(ledNumber,newData);
    4170:	8f 2d       	mov	r24, r15
    4172:	9e 2d       	mov	r25, r14
    4174:	b8 01       	movw	r22, r16
    4176:	0e 94 76 1f 	call	0x3eec	; 0x3eec <resetFadeBetweenColorsWithPwm>

	//TODO: This is a bit of a hack. LED flashes green for a second
	//so we just shut it off at first.
	setRGBColor(ledNumber,0,0,0);
    417a:	8f 2d       	mov	r24, r15
    417c:	9e 2d       	mov	r25, r14
    417e:	60 e0       	ldi	r22, 0x00	; 0
    4180:	70 e0       	ldi	r23, 0x00	; 0
    4182:	40 e0       	ldi	r20, 0x00	; 0
    4184:	50 e0       	ldi	r21, 0x00	; 0
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>

}
    418e:	62 96       	adiw	r28, 0x12	; 18
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	1f 91       	pop	r17
    41a0:	0f 91       	pop	r16
    41a2:	ff 90       	pop	r15
    41a4:	ef 90       	pop	r14
    41a6:	08 95       	ret
	//data[8] = pwmChangeStepCount In Ms

	//set initial conditions for effcect
	int direction = data[7];
	if(direction == PWM_SCALE_UP) {
		pwmScaleData[ledNumber].onCount = 0;
    41a8:	8f 2d       	mov	r24, r15
    41aa:	9e 2d       	mov	r25, r14
    41ac:	fc 01       	movw	r30, r24
    41ae:	ee 0f       	add	r30, r30
    41b0:	ff 1f       	adc	r31, r31
    41b2:	ee 0f       	add	r30, r30
    41b4:	ff 1f       	adc	r31, r31
    41b6:	ee 0f       	add	r30, r30
    41b8:	ff 1f       	adc	r31, r31
    41ba:	88 0f       	add	r24, r24
    41bc:	99 1f       	adc	r25, r25
    41be:	e8 0f       	add	r30, r24
    41c0:	f9 1f       	adc	r31, r25
    41c2:	e5 59       	subi	r30, 0x95	; 149
    41c4:	fb 4f       	sbci	r31, 0xFB	; 251
    41c6:	11 82       	std	Z+1, r1	; 0x01
    41c8:	10 82       	st	Z, r1
		pwmScaleData[ledNumber].offCount = 32;
    41ca:	8f 2d       	mov	r24, r15
    41cc:	9e 2d       	mov	r25, r14
    41ce:	fc 01       	movw	r30, r24
    41d0:	ee 0f       	add	r30, r30
    41d2:	ff 1f       	adc	r31, r31
    41d4:	ee 0f       	add	r30, r30
    41d6:	ff 1f       	adc	r31, r31
    41d8:	ee 0f       	add	r30, r30
    41da:	ff 1f       	adc	r31, r31
    41dc:	88 0f       	add	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	e8 0f       	add	r30, r24
    41e2:	f9 1f       	adc	r31, r25
    41e4:	e5 59       	subi	r30, 0x95	; 149
    41e6:	fb 4f       	sbci	r31, 0xFB	; 251
    41e8:	80 e2       	ldi	r24, 0x20	; 32
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	93 83       	std	Z+3, r25	; 0x03
    41ee:	82 83       	std	Z+2, r24	; 0x02
    41f0:	5d cf       	rjmp	.-326    	; 0x40ac <resetFadeBetweenColorsWithScalingPwmEffect+0x82>

000041f2 <resetFadeBetween3ColorsWithScalingPwmEffect>:
	*/
	
	
}

void resetFadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    41f2:	ef 92       	push	r14
    41f4:	ff 92       	push	r15
    41f6:	0f 93       	push	r16
    41f8:	1f 93       	push	r17
    41fa:	df 93       	push	r29
    41fc:	cf 93       	push	r28
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
    4202:	62 97       	sbiw	r28, 0x12	; 18
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	f8 2e       	mov	r15, r24
    4210:	e9 2e       	mov	r14, r25
	//resetFadeBetweenColorsWithScalingPwmEffect
	struct FadeBetweenColorsWithPwmEffectData resetData;
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *)data;
    4212:	8b 01       	movw	r16, r22
	resetData.beginRed = dataArgument->beginRed;
    4214:	fb 01       	movw	r30, r22
    4216:	80 81       	ld	r24, Z
    4218:	91 81       	ldd	r25, Z+1	; 0x01
    421a:	9a 83       	std	Y+2, r25	; 0x02
    421c:	89 83       	std	Y+1, r24	; 0x01
	resetData.beginGreen = dataArgument->beginGreen;
    421e:	82 81       	ldd	r24, Z+2	; 0x02
    4220:	93 81       	ldd	r25, Z+3	; 0x03
    4222:	9c 83       	std	Y+4, r25	; 0x04
    4224:	8b 83       	std	Y+3, r24	; 0x03
	resetData.beginBlue = dataArgument->beginBlue;
    4226:	84 81       	ldd	r24, Z+4	; 0x04
    4228:	95 81       	ldd	r25, Z+5	; 0x05
    422a:	9e 83       	std	Y+6, r25	; 0x06
    422c:	8d 83       	std	Y+5, r24	; 0x05
	resetData.endRed = dataArgument->middleRed;
    422e:	86 81       	ldd	r24, Z+6	; 0x06
    4230:	97 81       	ldd	r25, Z+7	; 0x07
    4232:	98 87       	std	Y+8, r25	; 0x08
    4234:	8f 83       	std	Y+7, r24	; 0x07
	resetData.endGreen = dataArgument->middleGreen;
    4236:	80 85       	ldd	r24, Z+8	; 0x08
    4238:	91 85       	ldd	r25, Z+9	; 0x09
    423a:	9a 87       	std	Y+10, r25	; 0x0a
    423c:	89 87       	std	Y+9, r24	; 0x09
	resetData.endBlue = dataArgument->middleBlue;
    423e:	82 85       	ldd	r24, Z+10	; 0x0a
    4240:	93 85       	ldd	r25, Z+11	; 0x0b
    4242:	9c 87       	std	Y+12, r25	; 0x0c
    4244:	8b 87       	std	Y+11, r24	; 0x0b
	resetData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    4246:	82 89       	ldd	r24, Z+18	; 0x12
    4248:	93 89       	ldd	r25, Z+19	; 0x13
    424a:	9e 87       	std	Y+14, r25	; 0x0e
    424c:	8d 87       	std	Y+13, r24	; 0x0d
	resetData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    424e:	84 89       	ldd	r24, Z+20	; 0x14
    4250:	95 89       	ldd	r25, Z+21	; 0x15
    4252:	98 8b       	std	Y+16, r25	; 0x10
    4254:	8f 87       	std	Y+15, r24	; 0x0f
	resetData.pwmChangeStepCount = dataArgument ->pwmChangeStepCount;
    4256:	86 89       	ldd	r24, Z+22	; 0x16
    4258:	97 89       	ldd	r25, Z+23	; 0x17
    425a:	9a 8b       	std	Y+18, r25	; 0x12
    425c:	89 8b       	std	Y+17, r24	; 0x11
	resetFadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&resetData);
    425e:	8f 2d       	mov	r24, r15
    4260:	9e 2d       	mov	r25, r14
    4262:	be 01       	movw	r22, r28
    4264:	6f 5f       	subi	r22, 0xFF	; 255
    4266:	7f 4f       	sbci	r23, 0xFF	; 255
    4268:	0e 94 15 20 	call	0x402a	; 0x402a <resetFadeBetweenColorsWithScalingPwmEffect>


	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber] . colorIndicator = 0;
    426c:	a3 ec       	ldi	r26, 0xC3	; 195
    426e:	b3 e0       	ldi	r27, 0x03	; 3
    4270:	8f 2d       	mov	r24, r15
    4272:	9e 2d       	mov	r25, r14
    4274:	88 0f       	add	r24, r24
    4276:	99 1f       	adc	r25, r25
    4278:	fc 01       	movw	r30, r24
    427a:	ee 0f       	add	r30, r30
    427c:	ff 1f       	adc	r31, r31
    427e:	ee 0f       	add	r30, r30
    4280:	ff 1f       	adc	r31, r31
    4282:	ee 0f       	add	r30, r30
    4284:	ff 1f       	adc	r31, r31
    4286:	e8 1b       	sub	r30, r24
    4288:	f9 0b       	sbc	r31, r25
    428a:	ea 0f       	add	r30, r26
    428c:	fb 1f       	adc	r31, r27
    428e:	11 82       	std	Z+1, r1	; 0x01
    4290:	10 82       	st	Z, r1
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorReset10msTick = 
    4292:	8f 2d       	mov	r24, r15
    4294:	9e 2d       	mov	r25, r14
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	fc 01       	movw	r30, r24
    429c:	ee 0f       	add	r30, r30
    429e:	ff 1f       	adc	r31, r31
    42a0:	ee 0f       	add	r30, r30
    42a2:	ff 1f       	adc	r31, r31
    42a4:	ee 0f       	add	r30, r30
    42a6:	ff 1f       	adc	r31, r31
    42a8:	e8 1b       	sub	r30, r24
    42aa:	f9 0b       	sbc	r31, r25
    42ac:	ea 0f       	add	r30, r26
    42ae:	fb 1f       	adc	r31, r27
    42b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b4:	95 83       	std	Z+5, r25	; 0x05
    42b6:	84 83       	std	Z+4, r24	; 0x04
		resetData.colorChangeStepCount;
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    42b8:	8f 2d       	mov	r24, r15
    42ba:	9e 2d       	mov	r25, r14
    42bc:	88 0f       	add	r24, r24
    42be:	99 1f       	adc	r25, r25
    42c0:	fc 01       	movw	r30, r24
    42c2:	ee 0f       	add	r30, r30
    42c4:	ff 1f       	adc	r31, r31
    42c6:	ee 0f       	add	r30, r30
    42c8:	ff 1f       	adc	r31, r31
    42ca:	ee 0f       	add	r30, r30
    42cc:	ff 1f       	adc	r31, r31
    42ce:	e8 1b       	sub	r30, r24
    42d0:	f9 0b       	sbc	r31, r25
    42d2:	ea 0f       	add	r30, r26
    42d4:	fb 1f       	adc	r31, r27
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	93 83       	std	Z+3, r25	; 0x03
    42dc:	82 83       	std	Z+2, r24	; 0x02
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    42de:	8f 2d       	mov	r24, r15
    42e0:	9e 2d       	mov	r25, r14
    42e2:	88 0f       	add	r24, r24
    42e4:	99 1f       	adc	r25, r25
    42e6:	fc 01       	movw	r30, r24
    42e8:	ee 0f       	add	r30, r30
    42ea:	ff 1f       	adc	r31, r31
    42ec:	ee 0f       	add	r30, r30
    42ee:	ff 1f       	adc	r31, r31
    42f0:	ee 0f       	add	r30, r30
    42f2:	ff 1f       	adc	r31, r31
    42f4:	e8 1b       	sub	r30, r24
    42f6:	f9 0b       	sbc	r31, r25
    42f8:	ea 0f       	add	r30, r26
    42fa:	fb 1f       	adc	r31, r27
    42fc:	17 82       	std	Z+7, r1	; 0x07
    42fe:	16 82       	std	Z+6, r1	; 0x06
	
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    4300:	8f 2d       	mov	r24, r15
    4302:	9e 2d       	mov	r25, r14
    4304:	88 0f       	add	r24, r24
    4306:	99 1f       	adc	r25, r25
    4308:	fc 01       	movw	r30, r24
    430a:	ee 0f       	add	r30, r30
    430c:	ff 1f       	adc	r31, r31
    430e:	ee 0f       	add	r30, r30
    4310:	ff 1f       	adc	r31, r31
    4312:	ee 0f       	add	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	e8 1b       	sub	r30, r24
    4318:	f9 0b       	sbc	r31, r25
    431a:	ea 0f       	add	r30, r26
    431c:	fb 1f       	adc	r31, r27
    431e:	13 87       	std	Z+11, r17	; 0x0b
    4320:	02 87       	std	Z+10, r16	; 0x0a
	fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4322:	8f 2d       	mov	r24, r15
    4324:	9e 2d       	mov	r25, r14
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	9c 01       	movw	r18, r24
    432c:	22 0f       	add	r18, r18
    432e:	33 1f       	adc	r19, r19
    4330:	22 0f       	add	r18, r18
    4332:	33 1f       	adc	r19, r19
    4334:	22 0f       	add	r18, r18
    4336:	33 1f       	adc	r19, r19
    4338:	28 1b       	sub	r18, r24
    433a:	39 0b       	sbc	r19, r25
    433c:	a2 0f       	add	r26, r18
    433e:	b3 1f       	adc	r27, r19
    4340:	0a 5f       	subi	r16, 0xFA	; 250
    4342:	1f 4f       	sbci	r17, 0xFF	; 255
    4344:	1d 96       	adiw	r26, 0x0d	; 13
    4346:	1c 93       	st	X, r17
    4348:	0e 93       	st	-X, r16
    434a:	1c 97       	sbiw	r26, 0x0c	; 12


}
    434c:	62 96       	adiw	r28, 0x12	; 18
    434e:	0f b6       	in	r0, 0x3f	; 63
    4350:	f8 94       	cli
    4352:	de bf       	out	0x3e, r29	; 62
    4354:	0f be       	out	0x3f, r0	; 63
    4356:	cd bf       	out	0x3d, r28	; 61
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	ff 90       	pop	r15
    4362:	ef 90       	pop	r14
    4364:	08 95       	ret

00004366 <fadeBetweenColorsWithScalingPwmEffect>:
	int stepCount;
} pwmScaleData[LEDCOUNT];



void fadeBetweenColorsWithScalingPwmEffect(short ledNumber, short *data) {
    4366:	ef 92       	push	r14
    4368:	ff 92       	push	r15
    436a:	0f 93       	push	r16
    436c:	1f 93       	push	r17
    436e:	df 93       	push	r29
    4370:	cf 93       	push	r28
    4372:	cd b7       	in	r28, 0x3d	; 61
    4374:	de b7       	in	r29, 0x3e	; 62
    4376:	62 97       	sbiw	r28, 0x12	; 18
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	de bf       	out	0x3e, r29	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	cd bf       	out	0x3d, r28	; 61
    4382:	f8 2e       	mov	r15, r24
    4384:	e9 2e       	mov	r14, r25
    4386:	db 01       	movw	r26, r22
	short direction = data[7];
    4388:	1e 96       	adiw	r26, 0x0e	; 14
    438a:	6d 91       	ld	r22, X+
    438c:	7c 91       	ld	r23, X
    438e:	1f 97       	sbiw	r26, 0x0f	; 15
	short stepCount = pwmScaleData[ledNumber].stepCount;
    4390:	fc 01       	movw	r30, r24
    4392:	ee 0f       	add	r30, r30
    4394:	ff 1f       	adc	r31, r31
    4396:	ee 0f       	add	r30, r30
    4398:	ff 1f       	adc	r31, r31
    439a:	ee 0f       	add	r30, r30
    439c:	ff 1f       	adc	r31, r31
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	e8 0f       	add	r30, r24
    43a4:	f9 1f       	adc	r31, r25
    43a6:	e5 59       	subi	r30, 0x95	; 149
    43a8:	fb 4f       	sbci	r31, 0xFB	; 251
    43aa:	40 85       	ldd	r20, Z+8	; 0x08
    43ac:	51 85       	ldd	r21, Z+9	; 0x09

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
    43ae:	8f 2d       	mov	r24, r15
    43b0:	9e 2d       	mov	r25, r14
    43b2:	fc 01       	movw	r30, r24
    43b4:	ee 0f       	add	r30, r30
    43b6:	ff 1f       	adc	r31, r31
    43b8:	ee 0f       	add	r30, r30
    43ba:	ff 1f       	adc	r31, r31
    43bc:	ee 0f       	add	r30, r30
    43be:	ff 1f       	adc	r31, r31
    43c0:	88 0f       	add	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	e8 0f       	add	r30, r24
    43c6:	f9 1f       	adc	r31, r25
    43c8:	e5 59       	subi	r30, 0x95	; 149
    43ca:	fb 4f       	sbci	r31, 0xFB	; 251
    43cc:	86 81       	ldd	r24, Z+6	; 0x06
    43ce:	97 81       	ldd	r25, Z+7	; 0x07
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <fadeBetweenColorsWithScalingPwmEffect+0x70>
    43d4:	aa c0       	rjmp	.+340    	; 0x452a <fadeBetweenColorsWithScalingPwmEffect+0x1c4>
		
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
    43d6:	8f 2d       	mov	r24, r15
    43d8:	9e 2d       	mov	r25, r14
    43da:	fc 01       	movw	r30, r24
    43dc:	ee 0f       	add	r30, r30
    43de:	ff 1f       	adc	r31, r31
    43e0:	ee 0f       	add	r30, r30
    43e2:	ff 1f       	adc	r31, r31
    43e4:	ee 0f       	add	r30, r30
    43e6:	ff 1f       	adc	r31, r31
    43e8:	88 0f       	add	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	e8 0f       	add	r30, r24
    43ee:	f9 1f       	adc	r31, r25
    43f0:	e5 59       	subi	r30, 0x95	; 149
    43f2:	fb 4f       	sbci	r31, 0xFB	; 251
    43f4:	24 81       	ldd	r18, Z+4	; 0x04
    43f6:	35 81       	ldd	r19, Z+5	; 0x05
    43f8:	24 17       	cp	r18, r20
    43fa:	35 07       	cpc	r19, r21
    43fc:	0c f0       	brlt	.+2      	; 0x4400 <fadeBetweenColorsWithScalingPwmEffect+0x9a>
    43fe:	54 c0       	rjmp	.+168    	; 0x44a8 <fadeBetweenColorsWithScalingPwmEffect+0x142>
			}
 		} 

	} 
	else {
		pwmScaleData[ledNumber].curTimeCounter ++;
    4400:	8f 2d       	mov	r24, r15
    4402:	9e 2d       	mov	r25, r14
    4404:	fc 01       	movw	r30, r24
    4406:	ee 0f       	add	r30, r30
    4408:	ff 1f       	adc	r31, r31
    440a:	ee 0f       	add	r30, r30
    440c:	ff 1f       	adc	r31, r31
    440e:	ee 0f       	add	r30, r30
    4410:	ff 1f       	adc	r31, r31
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	e8 0f       	add	r30, r24
    4418:	f9 1f       	adc	r31, r25
    441a:	e5 59       	subi	r30, 0x95	; 149
    441c:	fb 4f       	sbci	r31, 0xFB	; 251
    441e:	2f 5f       	subi	r18, 0xFF	; 255
    4420:	3f 4f       	sbci	r19, 0xFF	; 255
    4422:	35 83       	std	Z+5, r19	; 0x05
    4424:	24 83       	std	Z+4, r18	; 0x04
	}

	short newData[9];
	copy_short_data(newData,data,7);
    4426:	8e 01       	movw	r16, r28
    4428:	0f 5f       	subi	r16, 0xFF	; 255
    442a:	1f 4f       	sbci	r17, 0xFF	; 255
    442c:	c8 01       	movw	r24, r16
    442e:	bd 01       	movw	r22, r26
    4430:	47 e0       	ldi	r20, 0x07	; 7
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	0e 94 c7 29 	call	0x538e	; 0x538e <copy_short_data>
	newData[7] = pwmScaleData[ledNumber].onCount;
    4438:	8f 2d       	mov	r24, r15
    443a:	9e 2d       	mov	r25, r14
    443c:	fc 01       	movw	r30, r24
    443e:	ee 0f       	add	r30, r30
    4440:	ff 1f       	adc	r31, r31
    4442:	ee 0f       	add	r30, r30
    4444:	ff 1f       	adc	r31, r31
    4446:	ee 0f       	add	r30, r30
    4448:	ff 1f       	adc	r31, r31
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	e8 0f       	add	r30, r24
    4450:	f9 1f       	adc	r31, r25
    4452:	e5 59       	subi	r30, 0x95	; 149
    4454:	fb 4f       	sbci	r31, 0xFB	; 251
    4456:	80 81       	ld	r24, Z
    4458:	91 81       	ldd	r25, Z+1	; 0x01
    445a:	98 8b       	std	Y+16, r25	; 0x10
    445c:	8f 87       	std	Y+15, r24	; 0x0f
	newData[8] = pwmScaleData[ledNumber].offCount;
    445e:	8f 2d       	mov	r24, r15
    4460:	9e 2d       	mov	r25, r14
    4462:	fc 01       	movw	r30, r24
    4464:	ee 0f       	add	r30, r30
    4466:	ff 1f       	adc	r31, r31
    4468:	ee 0f       	add	r30, r30
    446a:	ff 1f       	adc	r31, r31
    446c:	ee 0f       	add	r30, r30
    446e:	ff 1f       	adc	r31, r31
    4470:	88 0f       	add	r24, r24
    4472:	99 1f       	adc	r25, r25
    4474:	e8 0f       	add	r30, r24
    4476:	f9 1f       	adc	r31, r25
    4478:	e5 59       	subi	r30, 0x95	; 149
    447a:	fb 4f       	sbci	r31, 0xFB	; 251
    447c:	82 81       	ldd	r24, Z+2	; 0x02
    447e:	93 81       	ldd	r25, Z+3	; 0x03
    4480:	9a 8b       	std	Y+18, r25	; 0x12
    4482:	89 8b       	std	Y+17, r24	; 0x11
	fadeBetweenColorsWithPwm(ledNumber,newData);
    4484:	8f 2d       	mov	r24, r15
    4486:	9e 2d       	mov	r25, r14
    4488:	b8 01       	movw	r22, r16
    448a:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <fadeBetweenColorsWithPwm>
	

}
    448e:	62 96       	adiw	r28, 0x12	; 18
    4490:	0f b6       	in	r0, 0x3f	; 63
    4492:	f8 94       	cli
    4494:	de bf       	out	0x3e, r29	; 62
    4496:	0f be       	out	0x3f, r0	; 63
    4498:	cd bf       	out	0x3d, r28	; 61
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	ff 90       	pop	r15
    44a4:	ef 90       	pop	r14
    44a6:	08 95       	ret
		pwmScaleData[ledNumber].curTimeCounter++;
		return;
	}

	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
    44a8:	8f 2d       	mov	r24, r15
    44aa:	9e 2d       	mov	r25, r14
    44ac:	fc 01       	movw	r30, r24
    44ae:	ee 0f       	add	r30, r30
    44b0:	ff 1f       	adc	r31, r31
    44b2:	ee 0f       	add	r30, r30
    44b4:	ff 1f       	adc	r31, r31
    44b6:	ee 0f       	add	r30, r30
    44b8:	ff 1f       	adc	r31, r31
    44ba:	88 0f       	add	r24, r24
    44bc:	99 1f       	adc	r25, r25
    44be:	e8 0f       	add	r30, r24
    44c0:	f9 1f       	adc	r31, r25
    44c2:	e5 59       	subi	r30, 0x95	; 149
    44c4:	fb 4f       	sbci	r31, 0xFB	; 251
    44c6:	15 82       	std	Z+5, r1	; 0x05
    44c8:	14 82       	std	Z+4, r1	; 0x04
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
    44ca:	61 30       	cpi	r22, 0x01	; 1
    44cc:	71 05       	cpc	r23, r1
    44ce:	09 f4       	brne	.+2      	; 0x44d2 <fadeBetweenColorsWithScalingPwmEffect+0x16c>
    44d0:	86 c0       	rjmp	.+268    	; 0x45de <fadeBetweenColorsWithScalingPwmEffect+0x278>
				}
			}
 		} 

		//check the scaling directoin
		else if(direction == PWM_SCALE_DOWN) {
    44d2:	67 2b       	or	r22, r23
    44d4:	09 f0       	breq	.+2      	; 0x44d8 <fadeBetweenColorsWithScalingPwmEffect+0x172>
    44d6:	a7 cf       	rjmp	.-178    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
			if(pwmScaleData[ledNumber].onCount > 2) {
    44d8:	8f 2d       	mov	r24, r15
    44da:	9e 2d       	mov	r25, r14
    44dc:	fc 01       	movw	r30, r24
    44de:	ee 0f       	add	r30, r30
    44e0:	ff 1f       	adc	r31, r31
    44e2:	ee 0f       	add	r30, r30
    44e4:	ff 1f       	adc	r31, r31
    44e6:	ee 0f       	add	r30, r30
    44e8:	ff 1f       	adc	r31, r31
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	e8 0f       	add	r30, r24
    44f0:	f9 1f       	adc	r31, r25
    44f2:	e5 59       	subi	r30, 0x95	; 149
    44f4:	fb 4f       	sbci	r31, 0xFB	; 251
    44f6:	20 81       	ld	r18, Z
    44f8:	31 81       	ldd	r19, Z+1	; 0x01
    44fa:	23 30       	cpi	r18, 0x03	; 3
    44fc:	31 05       	cpc	r19, r1
    44fe:	0c f4       	brge	.+2      	; 0x4502 <fadeBetweenColorsWithScalingPwmEffect+0x19c>
    4500:	97 c0       	rjmp	.+302    	; 0x4630 <fadeBetweenColorsWithScalingPwmEffect+0x2ca>
				//keep decreasing the on count
				pwmScaleData[ledNumber].onCount -=2;
    4502:	8f 2d       	mov	r24, r15
    4504:	9e 2d       	mov	r25, r14
    4506:	fc 01       	movw	r30, r24
    4508:	ee 0f       	add	r30, r30
    450a:	ff 1f       	adc	r31, r31
    450c:	ee 0f       	add	r30, r30
    450e:	ff 1f       	adc	r31, r31
    4510:	ee 0f       	add	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	88 0f       	add	r24, r24
    4516:	99 1f       	adc	r25, r25
    4518:	e8 0f       	add	r30, r24
    451a:	f9 1f       	adc	r31, r25
    451c:	e5 59       	subi	r30, 0x95	; 149
    451e:	fb 4f       	sbci	r31, 0xFB	; 251
    4520:	22 50       	subi	r18, 0x02	; 2
    4522:	30 40       	sbci	r19, 0x00	; 0
    4524:	31 83       	std	Z+1, r19	; 0x01
    4526:	20 83       	st	Z, r18
    4528:	7e cf       	rjmp	.-260    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
	short stepCount = pwmScaleData[ledNumber].stepCount;

	//see if we are done scaling 
	if(pwmScaleData[ledNumber].pwmFinished == TRUE) {
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
    452a:	8f 2d       	mov	r24, r15
    452c:	9e 2d       	mov	r25, r14
    452e:	fc 01       	movw	r30, r24
    4530:	ee 0f       	add	r30, r30
    4532:	ff 1f       	adc	r31, r31
    4534:	ee 0f       	add	r30, r30
    4536:	ff 1f       	adc	r31, r31
    4538:	ee 0f       	add	r30, r30
    453a:	ff 1f       	adc	r31, r31
    453c:	88 0f       	add	r24, r24
    453e:	99 1f       	adc	r25, r25
    4540:	e8 0f       	add	r30, r24
    4542:	f9 1f       	adc	r31, r25
    4544:	e5 59       	subi	r30, 0x95	; 149
    4546:	fb 4f       	sbci	r31, 0xFB	; 251
    4548:	84 81       	ldd	r24, Z+4	; 0x04
    454a:	95 81       	ldd	r25, Z+5	; 0x05
    454c:	0a 97       	sbiw	r24, 0x0a	; 10
    454e:	0c f1       	brlt	.+66     	; 0x4592 <fadeBetweenColorsWithScalingPwmEffect+0x22c>
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
    4550:	61 30       	cpi	r22, 0x01	; 1
    4552:	71 05       	cpc	r23, r1
    4554:	09 f4       	brne	.+2      	; 0x4558 <fadeBetweenColorsWithScalingPwmEffect+0x1f2>
    4556:	e6 c0       	rjmp	.+460    	; 0x4724 <fadeBetweenColorsWithScalingPwmEffect+0x3be>
				fadeBetweenColors(ledNumber,data);
			}

			//if direction is DOWN then turn led off
			if(direction == PWM_SCALE_DOWN) {
    4558:	67 2b       	or	r22, r23
    455a:	51 f4       	brne	.+20     	; 0x4570 <fadeBetweenColorsWithScalingPwmEffect+0x20a>
				setRGBColor(ledNumber,0,0,0);
    455c:	8f 2d       	mov	r24, r15
    455e:	9e 2d       	mov	r25, r14
    4560:	60 e0       	ldi	r22, 0x00	; 0
    4562:	70 e0       	ldi	r23, 0x00	; 0
    4564:	40 e0       	ldi	r20, 0x00	; 0
    4566:	50 e0       	ldi	r21, 0x00	; 0
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	0e 94 b4 28 	call	0x5168	; 0x5168 <setRGBColor>
			}

			pwmScaleData[ledNumber].curTimeCounter = 0;	
    4570:	8f 2d       	mov	r24, r15
    4572:	9e 2d       	mov	r25, r14
    4574:	fc 01       	movw	r30, r24
    4576:	ee 0f       	add	r30, r30
    4578:	ff 1f       	adc	r31, r31
    457a:	ee 0f       	add	r30, r30
    457c:	ff 1f       	adc	r31, r31
    457e:	ee 0f       	add	r30, r30
    4580:	ff 1f       	adc	r31, r31
    4582:	88 0f       	add	r24, r24
    4584:	99 1f       	adc	r25, r25
    4586:	e8 0f       	add	r30, r24
    4588:	f9 1f       	adc	r31, r25
    458a:	e5 59       	subi	r30, 0x95	; 149
    458c:	fb 4f       	sbci	r31, 0xFB	; 251
    458e:	15 82       	std	Z+5, r1	; 0x05
    4590:	14 82       	std	Z+4, r1	; 0x04
		}
		
		pwmScaleData[ledNumber].curTimeCounter++;
    4592:	8f 2d       	mov	r24, r15
    4594:	9e 2d       	mov	r25, r14
    4596:	dc 01       	movw	r26, r24
    4598:	aa 0f       	add	r26, r26
    459a:	bb 1f       	adc	r27, r27
    459c:	aa 0f       	add	r26, r26
    459e:	bb 1f       	adc	r27, r27
    45a0:	aa 0f       	add	r26, r26
    45a2:	bb 1f       	adc	r27, r27
    45a4:	88 0f       	add	r24, r24
    45a6:	99 1f       	adc	r25, r25
    45a8:	a8 0f       	add	r26, r24
    45aa:	b9 1f       	adc	r27, r25
    45ac:	a5 59       	subi	r26, 0x95	; 149
    45ae:	bb 4f       	sbci	r27, 0xFB	; 251
    45b0:	8f 2d       	mov	r24, r15
    45b2:	9e 2d       	mov	r25, r14
    45b4:	fc 01       	movw	r30, r24
    45b6:	ee 0f       	add	r30, r30
    45b8:	ff 1f       	adc	r31, r31
    45ba:	ee 0f       	add	r30, r30
    45bc:	ff 1f       	adc	r31, r31
    45be:	ee 0f       	add	r30, r30
    45c0:	ff 1f       	adc	r31, r31
    45c2:	88 0f       	add	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	e8 0f       	add	r30, r24
    45c8:	f9 1f       	adc	r31, r25
    45ca:	e5 59       	subi	r30, 0x95	; 149
    45cc:	fb 4f       	sbci	r31, 0xFB	; 251
    45ce:	84 81       	ldd	r24, Z+4	; 0x04
    45d0:	95 81       	ldd	r25, Z+5	; 0x05
    45d2:	01 96       	adiw	r24, 0x01	; 1
    45d4:	15 96       	adiw	r26, 0x05	; 5
    45d6:	9c 93       	st	X, r25
    45d8:	8e 93       	st	-X, r24
    45da:	14 97       	sbiw	r26, 0x04	; 4
    45dc:	58 cf       	rjmp	.-336    	; 0x448e <fadeBetweenColorsWithScalingPwmEffect+0x128>
	else if(pwmScaleData[ledNumber].curTimeCounter >= stepCount) {
		pwmScaleData[ledNumber].curTimeCounter = 0;
		
		//check the scaling directoin
		if(direction == PWM_SCALE_UP) {
			if(pwmScaleData[ledNumber].offCount > 2) {
    45de:	8f 2d       	mov	r24, r15
    45e0:	9e 2d       	mov	r25, r14
    45e2:	fc 01       	movw	r30, r24
    45e4:	ee 0f       	add	r30, r30
    45e6:	ff 1f       	adc	r31, r31
    45e8:	ee 0f       	add	r30, r30
    45ea:	ff 1f       	adc	r31, r31
    45ec:	ee 0f       	add	r30, r30
    45ee:	ff 1f       	adc	r31, r31
    45f0:	88 0f       	add	r24, r24
    45f2:	99 1f       	adc	r25, r25
    45f4:	e8 0f       	add	r30, r24
    45f6:	f9 1f       	adc	r31, r25
    45f8:	e5 59       	subi	r30, 0x95	; 149
    45fa:	fb 4f       	sbci	r31, 0xFB	; 251
    45fc:	22 81       	ldd	r18, Z+2	; 0x02
    45fe:	33 81       	ldd	r19, Z+3	; 0x03
    4600:	23 30       	cpi	r18, 0x03	; 3
    4602:	31 05       	cpc	r19, r1
    4604:	0c f4       	brge	.+2      	; 0x4608 <fadeBetweenColorsWithScalingPwmEffect+0x2a2>
    4606:	52 c0       	rjmp	.+164    	; 0x46ac <fadeBetweenColorsWithScalingPwmEffect+0x346>
				//keep decreasing the off count
				pwmScaleData[ledNumber].offCount -=2;
    4608:	8f 2d       	mov	r24, r15
    460a:	9e 2d       	mov	r25, r14
    460c:	fc 01       	movw	r30, r24
    460e:	ee 0f       	add	r30, r30
    4610:	ff 1f       	adc	r31, r31
    4612:	ee 0f       	add	r30, r30
    4614:	ff 1f       	adc	r31, r31
    4616:	ee 0f       	add	r30, r30
    4618:	ff 1f       	adc	r31, r31
    461a:	88 0f       	add	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	e8 0f       	add	r30, r24
    4620:	f9 1f       	adc	r31, r25
    4622:	e5 59       	subi	r30, 0x95	; 149
    4624:	fb 4f       	sbci	r31, 0xFB	; 251
    4626:	22 50       	subi	r18, 0x02	; 2
    4628:	30 40       	sbci	r19, 0x00	; 0
    462a:	33 83       	std	Z+3, r19	; 0x03
    462c:	22 83       	std	Z+2, r18	; 0x02
    462e:	fb ce       	rjmp	.-522    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].onCount -=2;
				
			} 
			else {
				//keep increasing the off count until we get to 32
				if(pwmScaleData[ledNumber].offCount < 32) {
    4630:	8f 2d       	mov	r24, r15
    4632:	9e 2d       	mov	r25, r14
    4634:	fc 01       	movw	r30, r24
    4636:	ee 0f       	add	r30, r30
    4638:	ff 1f       	adc	r31, r31
    463a:	ee 0f       	add	r30, r30
    463c:	ff 1f       	adc	r31, r31
    463e:	ee 0f       	add	r30, r30
    4640:	ff 1f       	adc	r31, r31
    4642:	88 0f       	add	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	e8 0f       	add	r30, r24
    4648:	f9 1f       	adc	r31, r25
    464a:	e5 59       	subi	r30, 0x95	; 149
    464c:	fb 4f       	sbci	r31, 0xFB	; 251
    464e:	82 81       	ldd	r24, Z+2	; 0x02
    4650:	93 81       	ldd	r25, Z+3	; 0x03
    4652:	80 32       	cpi	r24, 0x20	; 32
    4654:	91 05       	cpc	r25, r1
    4656:	0c f0       	brlt	.+2      	; 0x465a <fadeBetweenColorsWithScalingPwmEffect+0x2f4>
    4658:	e6 ce       	rjmp	.-564    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].offCount += 2;
    465a:	02 96       	adiw	r24, 0x02	; 2
    465c:	2f 2d       	mov	r18, r15
    465e:	3e 2d       	mov	r19, r14
    4660:	f9 01       	movw	r30, r18
    4662:	ee 0f       	add	r30, r30
    4664:	ff 1f       	adc	r31, r31
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	ee 0f       	add	r30, r30
    466c:	ff 1f       	adc	r31, r31
    466e:	22 0f       	add	r18, r18
    4670:	33 1f       	adc	r19, r19
    4672:	e2 0f       	add	r30, r18
    4674:	f3 1f       	adc	r31, r19
    4676:	e5 59       	subi	r30, 0x95	; 149
    4678:	fb 4f       	sbci	r31, 0xFB	; 251
    467a:	93 83       	std	Z+3, r25	; 0x03
    467c:	82 83       	std	Z+2, r24	; 0x02

					if(pwmScaleData[ledNumber].offCount == 32) {
    467e:	80 97       	sbiw	r24, 0x20	; 32
    4680:	09 f0       	breq	.+2      	; 0x4684 <fadeBetweenColorsWithScalingPwmEffect+0x31e>
    4682:	d1 ce       	rjmp	.-606    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    4684:	8f 2d       	mov	r24, r15
    4686:	9e 2d       	mov	r25, r14
    4688:	fc 01       	movw	r30, r24
    468a:	ee 0f       	add	r30, r30
    468c:	ff 1f       	adc	r31, r31
    468e:	ee 0f       	add	r30, r30
    4690:	ff 1f       	adc	r31, r31
    4692:	ee 0f       	add	r30, r30
    4694:	ff 1f       	adc	r31, r31
    4696:	88 0f       	add	r24, r24
    4698:	99 1f       	adc	r25, r25
    469a:	e8 0f       	add	r30, r24
    469c:	f9 1f       	adc	r31, r25
    469e:	e5 59       	subi	r30, 0x95	; 149
    46a0:	fb 4f       	sbci	r31, 0xFB	; 251
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	97 83       	std	Z+7, r25	; 0x07
    46a8:	86 83       	std	Z+6, r24	; 0x06
    46aa:	bd ce       	rjmp	.-646    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
				pwmScaleData[ledNumber].offCount -=2;
				
			} 
			else {
				//keep increasing the On count until we get to 32
				if(pwmScaleData[ledNumber].onCount < 32) {
    46ac:	8f 2d       	mov	r24, r15
    46ae:	9e 2d       	mov	r25, r14
    46b0:	fc 01       	movw	r30, r24
    46b2:	ee 0f       	add	r30, r30
    46b4:	ff 1f       	adc	r31, r31
    46b6:	ee 0f       	add	r30, r30
    46b8:	ff 1f       	adc	r31, r31
    46ba:	ee 0f       	add	r30, r30
    46bc:	ff 1f       	adc	r31, r31
    46be:	88 0f       	add	r24, r24
    46c0:	99 1f       	adc	r25, r25
    46c2:	e8 0f       	add	r30, r24
    46c4:	f9 1f       	adc	r31, r25
    46c6:	e5 59       	subi	r30, 0x95	; 149
    46c8:	fb 4f       	sbci	r31, 0xFB	; 251
    46ca:	80 81       	ld	r24, Z
    46cc:	91 81       	ldd	r25, Z+1	; 0x01
    46ce:	80 32       	cpi	r24, 0x20	; 32
    46d0:	91 05       	cpc	r25, r1
    46d2:	0c f0       	brlt	.+2      	; 0x46d6 <fadeBetweenColorsWithScalingPwmEffect+0x370>
    46d4:	a8 ce       	rjmp	.-688    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
					pwmScaleData[ledNumber].onCount += 2;
    46d6:	02 96       	adiw	r24, 0x02	; 2
    46d8:	2f 2d       	mov	r18, r15
    46da:	3e 2d       	mov	r19, r14
    46dc:	f9 01       	movw	r30, r18
    46de:	ee 0f       	add	r30, r30
    46e0:	ff 1f       	adc	r31, r31
    46e2:	ee 0f       	add	r30, r30
    46e4:	ff 1f       	adc	r31, r31
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	22 0f       	add	r18, r18
    46ec:	33 1f       	adc	r19, r19
    46ee:	e2 0f       	add	r30, r18
    46f0:	f3 1f       	adc	r31, r19
    46f2:	e5 59       	subi	r30, 0x95	; 149
    46f4:	fb 4f       	sbci	r31, 0xFB	; 251
    46f6:	91 83       	std	Z+1, r25	; 0x01
    46f8:	80 83       	st	Z, r24

					if(pwmScaleData[ledNumber].onCount == 32) {
    46fa:	80 97       	sbiw	r24, 0x20	; 32
    46fc:	09 f0       	breq	.+2      	; 0x4700 <fadeBetweenColorsWithScalingPwmEffect+0x39a>
    46fe:	93 ce       	rjmp	.-730    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
						pwmScaleData[ledNumber].pwmFinished = TRUE;
    4700:	8f 2d       	mov	r24, r15
    4702:	9e 2d       	mov	r25, r14
    4704:	fc 01       	movw	r30, r24
    4706:	ee 0f       	add	r30, r30
    4708:	ff 1f       	adc	r31, r31
    470a:	ee 0f       	add	r30, r30
    470c:	ff 1f       	adc	r31, r31
    470e:	ee 0f       	add	r30, r30
    4710:	ff 1f       	adc	r31, r31
    4712:	88 0f       	add	r24, r24
    4714:	99 1f       	adc	r25, r25
    4716:	e8 0f       	add	r30, r24
    4718:	f9 1f       	adc	r31, r25
    471a:	e5 59       	subi	r30, 0x95	; 149
    471c:	fb 4f       	sbci	r31, 0xFB	; 251
    471e:	77 83       	std	Z+7, r23	; 0x07
    4720:	66 83       	std	Z+6, r22	; 0x06
    4722:	81 ce       	rjmp	.-766    	; 0x4426 <fadeBetweenColorsWithScalingPwmEffect+0xc0>
		//check if we need to display a color
		if(pwmScaleData[ledNumber].curTimeCounter >= TEN_MS_MULTIPLIER) {
			
			//if direction is UP then use the fadeBetweenColor effect
			if(direction == PWM_SCALE_UP) {
				fadeBetweenColors(ledNumber,data);
    4724:	8f 2d       	mov	r24, r15
    4726:	9e 2d       	mov	r25, r14
    4728:	bd 01       	movw	r22, r26
    472a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <fadeBetweenColors>
    472e:	20 cf       	rjmp	.-448    	; 0x4570 <fadeBetweenColorsWithScalingPwmEffect+0x20a>

00004730 <fadeBetween3ColorsWithScalingPwmEffect>:
	short twoMsCounter;
	short *colorBeginPtr;
	short *colorEndPtr;
} fadeBetween3ColorsWithScalingPwmEffectData[LEDCOUNT];

void fadeBetween3ColorsWithScalingPwmEffect(short ledNumber, short *data) {
    4730:	ef 92       	push	r14
    4732:	ff 92       	push	r15
    4734:	0f 93       	push	r16
    4736:	1f 93       	push	r17
    4738:	df 93       	push	r29
    473a:	cf 93       	push	r28
    473c:	cd b7       	in	r28, 0x3d	; 61
    473e:	de b7       	in	r29, 0x3e	; 62
    4740:	a6 97       	sbiw	r28, 0x26	; 38
    4742:	0f b6       	in	r0, 0x3f	; 63
    4744:	f8 94       	cli
    4746:	de bf       	out	0x3e, r29	; 62
    4748:	0f be       	out	0x3f, r0	; 63
    474a:	cd bf       	out	0x3d, r28	; 61
    474c:	f8 2e       	mov	r15, r24
    474e:	e9 2e       	mov	r14, r25
	struct FadeBetween3ColorsWithScalingPwmEffectArgument *dataArgument = (struct FadeBetween3ColorsWithScalingPwmEffectArgument *) data;
    4750:	8b 01       	movw	r16, r22

	//This is a bit of a hack. this counter is going to update
	//every 10ms by fadBetweenColorsWithScalingPwmEffect() 
	//just saving some memory space
	if( fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter >= TEN_MS_MULTIPLIER) {
    4752:	88 0f       	add	r24, r24
    4754:	99 1f       	adc	r25, r25
    4756:	fc 01       	movw	r30, r24
    4758:	ee 0f       	add	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	ee 0f       	add	r30, r30
    475e:	ff 1f       	adc	r31, r31
    4760:	ee 0f       	add	r30, r30
    4762:	ff 1f       	adc	r31, r31
    4764:	e8 1b       	sub	r30, r24
    4766:	f9 0b       	sbc	r31, r25
    4768:	ed 53       	subi	r30, 0x3D	; 61
    476a:	fc 4f       	sbci	r31, 0xFC	; 252
    476c:	20 85       	ldd	r18, Z+8	; 0x08
    476e:	31 85       	ldd	r19, Z+9	; 0x09
    4770:	2a 30       	cpi	r18, 0x0A	; 10
    4772:	31 05       	cpc	r19, r1
    4774:	0c f4       	brge	.+2      	; 0x4778 <fadeBetween3ColorsWithScalingPwmEffect+0x48>
    4776:	4b c0       	rjmp	.+150    	; 0x480e <fadeBetween3ColorsWithScalingPwmEffect+0xde>

		//if we reached the point where color fade is about to reset direction...
		if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter >=
    4778:	8f 2d       	mov	r24, r15
    477a:	9e 2d       	mov	r25, r14
    477c:	88 0f       	add	r24, r24
    477e:	99 1f       	adc	r25, r25
    4780:	fc 01       	movw	r30, r24
    4782:	ee 0f       	add	r30, r30
    4784:	ff 1f       	adc	r31, r31
    4786:	ee 0f       	add	r30, r30
    4788:	ff 1f       	adc	r31, r31
    478a:	ee 0f       	add	r30, r30
    478c:	ff 1f       	adc	r31, r31
    478e:	e8 1b       	sub	r30, r24
    4790:	f9 0b       	sbc	r31, r25
    4792:	ed 53       	subi	r30, 0x3D	; 61
    4794:	fc 4f       	sbci	r31, 0xFC	; 252
    4796:	26 81       	ldd	r18, Z+6	; 0x06
    4798:	37 81       	ldd	r19, Z+7	; 0x07
    479a:	8f 2d       	mov	r24, r15
    479c:	9e 2d       	mov	r25, r14
    479e:	88 0f       	add	r24, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	fc 01       	movw	r30, r24
    47a4:	ee 0f       	add	r30, r30
    47a6:	ff 1f       	adc	r31, r31
    47a8:	ee 0f       	add	r30, r30
    47aa:	ff 1f       	adc	r31, r31
    47ac:	ee 0f       	add	r30, r30
    47ae:	ff 1f       	adc	r31, r31
    47b0:	e8 1b       	sub	r30, r24
    47b2:	f9 0b       	sbc	r31, r25
    47b4:	ed 53       	subi	r30, 0x3D	; 61
    47b6:	fc 4f       	sbci	r31, 0xFC	; 252
    47b8:	84 81       	ldd	r24, Z+4	; 0x04
    47ba:	95 81       	ldd	r25, Z+5	; 0x05
    47bc:	28 17       	cp	r18, r24
    47be:	39 07       	cpc	r19, r25
    47c0:	0c f0       	brlt	.+2      	; 0x47c4 <fadeBetween3ColorsWithScalingPwmEffect+0x94>
    47c2:	95 c0       	rjmp	.+298    	; 0x48ee <fadeBetween3ColorsWithScalingPwmEffect+0x1be>

		}

		else 
		{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter+=1;
    47c4:	8f 2d       	mov	r24, r15
    47c6:	9e 2d       	mov	r25, r14
    47c8:	88 0f       	add	r24, r24
    47ca:	99 1f       	adc	r25, r25
    47cc:	fc 01       	movw	r30, r24
    47ce:	ee 0f       	add	r30, r30
    47d0:	ff 1f       	adc	r31, r31
    47d2:	ee 0f       	add	r30, r30
    47d4:	ff 1f       	adc	r31, r31
    47d6:	ee 0f       	add	r30, r30
    47d8:	ff 1f       	adc	r31, r31
    47da:	e8 1b       	sub	r30, r24
    47dc:	f9 0b       	sbc	r31, r25
    47de:	ed 53       	subi	r30, 0x3D	; 61
    47e0:	fc 4f       	sbci	r31, 0xFC	; 252
    47e2:	2f 5f       	subi	r18, 0xFF	; 255
    47e4:	3f 4f       	sbci	r19, 0xFF	; 255
    47e6:	37 83       	std	Z+7, r19	; 0x07
    47e8:	26 83       	std	Z+6, r18	; 0x06
		}
		fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter = 0;;
    47ea:	8f 2d       	mov	r24, r15
    47ec:	9e 2d       	mov	r25, r14
    47ee:	88 0f       	add	r24, r24
    47f0:	99 1f       	adc	r25, r25
    47f2:	fc 01       	movw	r30, r24
    47f4:	ee 0f       	add	r30, r30
    47f6:	ff 1f       	adc	r31, r31
    47f8:	ee 0f       	add	r30, r30
    47fa:	ff 1f       	adc	r31, r31
    47fc:	ee 0f       	add	r30, r30
    47fe:	ff 1f       	adc	r31, r31
    4800:	e8 1b       	sub	r30, r24
    4802:	f9 0b       	sbc	r31, r25
    4804:	ed 53       	subi	r30, 0x3D	; 61
    4806:	fc 4f       	sbci	r31, 0xFC	; 252
    4808:	11 86       	std	Z+9, r1	; 0x09
    480a:	10 86       	std	Z+8, r1	; 0x08
    480c:	13 c0       	rjmp	.+38     	; 0x4834 <fadeBetween3ColorsWithScalingPwmEffect+0x104>

	}
	else 
	{
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].twoMsCounter+=1;
    480e:	8f 2d       	mov	r24, r15
    4810:	9e 2d       	mov	r25, r14
    4812:	88 0f       	add	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	fc 01       	movw	r30, r24
    4818:	ee 0f       	add	r30, r30
    481a:	ff 1f       	adc	r31, r31
    481c:	ee 0f       	add	r30, r30
    481e:	ff 1f       	adc	r31, r31
    4820:	ee 0f       	add	r30, r30
    4822:	ff 1f       	adc	r31, r31
    4824:	e8 1b       	sub	r30, r24
    4826:	f9 0b       	sbc	r31, r25
    4828:	ed 53       	subi	r30, 0x3D	; 61
    482a:	fc 4f       	sbci	r31, 0xFC	; 252
    482c:	2f 5f       	subi	r18, 0xFF	; 255
    482e:	3f 4f       	sbci	r19, 0xFF	; 255
    4830:	31 87       	std	Z+9, r19	; 0x09
    4832:	20 87       	std	Z+8, r18	; 0x08
	}
	struct FadeBetweenColorsWithPwmEffectData sData;
	sData.beginRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[0];
    4834:	8f 2d       	mov	r24, r15
    4836:	9e 2d       	mov	r25, r14
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	fc 01       	movw	r30, r24
    483e:	ee 0f       	add	r30, r30
    4840:	ff 1f       	adc	r31, r31
    4842:	ee 0f       	add	r30, r30
    4844:	ff 1f       	adc	r31, r31
    4846:	ee 0f       	add	r30, r30
    4848:	ff 1f       	adc	r31, r31
    484a:	e8 1b       	sub	r30, r24
    484c:	f9 0b       	sbc	r31, r25
    484e:	ed 53       	subi	r30, 0x3D	; 61
    4850:	fc 4f       	sbci	r31, 0xFC	; 252
    4852:	02 84       	ldd	r0, Z+10	; 0x0a
    4854:	f3 85       	ldd	r31, Z+11	; 0x0b
    4856:	e0 2d       	mov	r30, r0
    4858:	80 81       	ld	r24, Z
    485a:	91 81       	ldd	r25, Z+1	; 0x01
    485c:	9e 8b       	std	Y+22, r25	; 0x16
    485e:	8d 8b       	std	Y+21, r24	; 0x15
	sData.beginGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[1];
    4860:	82 81       	ldd	r24, Z+2	; 0x02
    4862:	93 81       	ldd	r25, Z+3	; 0x03
    4864:	98 8f       	std	Y+24, r25	; 0x18
    4866:	8f 8b       	std	Y+23, r24	; 0x17
	sData.beginBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr[2];
    4868:	84 81       	ldd	r24, Z+4	; 0x04
    486a:	95 81       	ldd	r25, Z+5	; 0x05
    486c:	9a 8f       	std	Y+26, r25	; 0x1a
    486e:	89 8f       	std	Y+25, r24	; 0x19
	sData.endRed = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[0];
    4870:	8f 2d       	mov	r24, r15
    4872:	9e 2d       	mov	r25, r14
    4874:	88 0f       	add	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	fc 01       	movw	r30, r24
    487a:	ee 0f       	add	r30, r30
    487c:	ff 1f       	adc	r31, r31
    487e:	ee 0f       	add	r30, r30
    4880:	ff 1f       	adc	r31, r31
    4882:	ee 0f       	add	r30, r30
    4884:	ff 1f       	adc	r31, r31
    4886:	e8 1b       	sub	r30, r24
    4888:	f9 0b       	sbc	r31, r25
    488a:	ed 53       	subi	r30, 0x3D	; 61
    488c:	fc 4f       	sbci	r31, 0xFC	; 252
    488e:	04 84       	ldd	r0, Z+12	; 0x0c
    4890:	f5 85       	ldd	r31, Z+13	; 0x0d
    4892:	e0 2d       	mov	r30, r0
    4894:	80 81       	ld	r24, Z
    4896:	91 81       	ldd	r25, Z+1	; 0x01
    4898:	9c 8f       	std	Y+28, r25	; 0x1c
    489a:	8b 8f       	std	Y+27, r24	; 0x1b
	sData.endGreen = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[1];
    489c:	82 81       	ldd	r24, Z+2	; 0x02
    489e:	93 81       	ldd	r25, Z+3	; 0x03
    48a0:	9e 8f       	std	Y+30, r25	; 0x1e
    48a2:	8d 8f       	std	Y+29, r24	; 0x1d
	sData.endBlue = fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr[2];
    48a4:	84 81       	ldd	r24, Z+4	; 0x04
    48a6:	95 81       	ldd	r25, Z+5	; 0x05
    48a8:	98 a3       	std	Y+32, r25	; 0x20
    48aa:	8f 8f       	std	Y+31, r24	; 0x1f
	sData.colorChangeStepCount = dataArgument->colorChangeStepCount;
    48ac:	f8 01       	movw	r30, r16
    48ae:	82 89       	ldd	r24, Z+18	; 0x12
    48b0:	93 89       	ldd	r25, Z+19	; 0x13
    48b2:	9a a3       	std	Y+34, r25	; 0x22
    48b4:	89 a3       	std	Y+33, r24	; 0x21
	sData.pwmScalingDirection = dataArgument->pwmScalingDirection;
    48b6:	84 89       	ldd	r24, Z+20	; 0x14
    48b8:	95 89       	ldd	r25, Z+21	; 0x15
    48ba:	9c a3       	std	Y+36, r25	; 0x24
    48bc:	8b a3       	std	Y+35, r24	; 0x23
	sData.pwmChangeStepCount = dataArgument->pwmChangeStepCount;
    48be:	86 89       	ldd	r24, Z+22	; 0x16
    48c0:	97 89       	ldd	r25, Z+23	; 0x17
    48c2:	9e a3       	std	Y+38, r25	; 0x26
    48c4:	8d a3       	std	Y+37, r24	; 0x25
	
	fadeBetweenColorsWithScalingPwmEffect(ledNumber, (short *)&sData);
    48c6:	8f 2d       	mov	r24, r15
    48c8:	9e 2d       	mov	r25, r14
    48ca:	be 01       	movw	r22, r28
    48cc:	6b 5e       	subi	r22, 0xEB	; 235
    48ce:	7f 4f       	sbci	r23, 0xFF	; 255
    48d0:	0e 94 b3 21 	call	0x4366	; 0x4366 <fadeBetweenColorsWithScalingPwmEffect>
		setRGBColor(ledNumber,0,0,0);
	}
	*/
	
	
}
    48d4:	a6 96       	adiw	r28, 0x26	; 38
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	f8 94       	cli
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	cd bf       	out	0x3d, r28	; 61
    48e0:	cf 91       	pop	r28
    48e2:	df 91       	pop	r29
    48e4:	1f 91       	pop	r17
    48e6:	0f 91       	pop	r16
    48e8:	ff 90       	pop	r15
    48ea:	ef 90       	pop	r14
    48ec:	08 95       	ret
	
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
    48ee:	8f 2d       	mov	r24, r15
    48f0:	9e 2d       	mov	r25, r14
    48f2:	88 0f       	add	r24, r24
    48f4:	99 1f       	adc	r25, r25
    48f6:	fc 01       	movw	r30, r24
    48f8:	ee 0f       	add	r30, r30
    48fa:	ff 1f       	adc	r31, r31
    48fc:	ee 0f       	add	r30, r30
    48fe:	ff 1f       	adc	r31, r31
    4900:	ee 0f       	add	r30, r30
    4902:	ff 1f       	adc	r31, r31
    4904:	e8 1b       	sub	r30, r24
    4906:	f9 0b       	sbc	r31, r25
    4908:	ed 53       	subi	r30, 0x3D	; 61
    490a:	fc 4f       	sbci	r31, 0xFC	; 252
    490c:	42 81       	ldd	r20, Z+2	; 0x02
    490e:	53 81       	ldd	r21, Z+3	; 0x03
    4910:	41 30       	cpi	r20, 0x01	; 1
    4912:	51 05       	cpc	r21, r1
    4914:	09 f4       	brne	.+2      	; 0x4918 <fadeBetween3ColorsWithScalingPwmEffect+0x1e8>
    4916:	6a c0       	rjmp	.+212    	; 0x49ec <fadeBetween3ColorsWithScalingPwmEffect+0x2bc>
					resetData.endBlue = dataArgument->middleBlue;	
				}

			}

			else if (fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_DECREASE) {
    4918:	45 2b       	or	r20, r21
    491a:	09 f0       	breq	.+2      	; 0x491e <fadeBetween3ColorsWithScalingPwmEffect+0x1ee>
    491c:	f2 c0       	rjmp	.+484    	; 0x4b02 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator--;
    491e:	8f 2d       	mov	r24, r15
    4920:	9e 2d       	mov	r25, r14
    4922:	88 0f       	add	r24, r24
    4924:	99 1f       	adc	r25, r25
    4926:	fc 01       	movw	r30, r24
    4928:	ee 0f       	add	r30, r30
    492a:	ff 1f       	adc	r31, r31
    492c:	ee 0f       	add	r30, r30
    492e:	ff 1f       	adc	r31, r31
    4930:	ee 0f       	add	r30, r30
    4932:	ff 1f       	adc	r31, r31
    4934:	e8 1b       	sub	r30, r24
    4936:	f9 0b       	sbc	r31, r25
    4938:	ed 53       	subi	r30, 0x3D	; 61
    493a:	fc 4f       	sbci	r31, 0xFC	; 252
    493c:	20 81       	ld	r18, Z
    493e:	31 81       	ldd	r19, Z+1	; 0x01
    4940:	21 50       	subi	r18, 0x01	; 1
    4942:	30 40       	sbci	r19, 0x00	; 0
    4944:	8f 2d       	mov	r24, r15
    4946:	9e 2d       	mov	r25, r14
    4948:	88 0f       	add	r24, r24
    494a:	99 1f       	adc	r25, r25
    494c:	fc 01       	movw	r30, r24
    494e:	ee 0f       	add	r30, r30
    4950:	ff 1f       	adc	r31, r31
    4952:	ee 0f       	add	r30, r30
    4954:	ff 1f       	adc	r31, r31
    4956:	ee 0f       	add	r30, r30
    4958:	ff 1f       	adc	r31, r31
    495a:	e8 1b       	sub	r30, r24
    495c:	f9 0b       	sbc	r31, r25
    495e:	ed 53       	subi	r30, 0x3D	; 61
    4960:	fc 4f       	sbci	r31, 0xFC	; 252
    4962:	31 83       	std	Z+1, r19	; 0x01
    4964:	20 83       	st	Z, r18
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 0) {
    4966:	23 2b       	or	r18, r19
    4968:	09 f0       	breq	.+2      	; 0x496c <fadeBetween3ColorsWithScalingPwmEffect+0x23c>
    496a:	f7 c0       	rjmp	.+494    	; 0x4b5a <fadeBetween3ColorsWithScalingPwmEffect+0x42a>


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    496c:	8f 2d       	mov	r24, r15
    496e:	9e 2d       	mov	r25, r14
    4970:	88 0f       	add	r24, r24
    4972:	99 1f       	adc	r25, r25
    4974:	fc 01       	movw	r30, r24
    4976:	ee 0f       	add	r30, r30
    4978:	ff 1f       	adc	r31, r31
    497a:	ee 0f       	add	r30, r30
    497c:	ff 1f       	adc	r31, r31
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	e8 1b       	sub	r30, r24
    4984:	f9 0b       	sbc	r31, r25
    4986:	ed 53       	subi	r30, 0x3D	; 61
    4988:	fc 4f       	sbci	r31, 0xFC	; 252
    498a:	0a 5f       	subi	r16, 0xFA	; 250
    498c:	1f 4f       	sbci	r17, 0xFF	; 255
    498e:	13 87       	std	Z+11, r17	; 0x0b
    4990:	02 87       	std	Z+10, r16	; 0x0a
    4992:	06 50       	subi	r16, 0x06	; 6
    4994:	10 40       	sbci	r17, 0x00	; 0
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->beginRed;
    4996:	8f 2d       	mov	r24, r15
    4998:	9e 2d       	mov	r25, r14
    499a:	88 0f       	add	r24, r24
    499c:	99 1f       	adc	r25, r25
    499e:	fc 01       	movw	r30, r24
    49a0:	ee 0f       	add	r30, r30
    49a2:	ff 1f       	adc	r31, r31
    49a4:	ee 0f       	add	r30, r30
    49a6:	ff 1f       	adc	r31, r31
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	e8 1b       	sub	r30, r24
    49ae:	f9 0b       	sbc	r31, r25
    49b0:	ed 53       	subi	r30, 0x3D	; 61
    49b2:	fc 4f       	sbci	r31, 0xFC	; 252
    49b4:	15 87       	std	Z+13, r17	; 0x0d
    49b6:	04 87       	std	Z+12, r16	; 0x0c
					
					resetData.beginRed = dataArgument->middleRed;
    49b8:	f8 01       	movw	r30, r16
    49ba:	86 81       	ldd	r24, Z+6	; 0x06
    49bc:	97 81       	ldd	r25, Z+7	; 0x07
    49be:	98 87       	std	Y+8, r25	; 0x08
    49c0:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    49c2:	80 85       	ldd	r24, Z+8	; 0x08
    49c4:	91 85       	ldd	r25, Z+9	; 0x09
    49c6:	9a 87       	std	Y+10, r25	; 0x0a
    49c8:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    49ca:	82 85       	ldd	r24, Z+10	; 0x0a
    49cc:	93 85       	ldd	r25, Z+11	; 0x0b
    49ce:	9c 87       	std	Y+12, r25	; 0x0c
    49d0:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->beginRed;
    49d2:	80 81       	ld	r24, Z
    49d4:	91 81       	ldd	r25, Z+1	; 0x01
    49d6:	9e 87       	std	Y+14, r25	; 0x0e
    49d8:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->beginGreen;
    49da:	82 81       	ldd	r24, Z+2	; 0x02
    49dc:	93 81       	ldd	r25, Z+3	; 0x03
    49de:	98 8b       	std	Y+16, r25	; 0x10
    49e0:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->beginBlue;
    49e2:	84 81       	ldd	r24, Z+4	; 0x04
    49e4:	95 81       	ldd	r25, Z+5	; 0x05
    49e6:	9a 8b       	std	Y+18, r25	; 0x12
    49e8:	89 8b       	std	Y+17, r24	; 0x11
    49ea:	8b c0       	rjmp	.+278    	; 0x4b02 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>
		
			struct FadeBetweenColorsDataArgument resetData;

			//if we are going to the next color upwards...
			if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction == DIRECTION_INCREASE) {
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
    49ec:	8f 2d       	mov	r24, r15
    49ee:	9e 2d       	mov	r25, r14
    49f0:	88 0f       	add	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	fc 01       	movw	r30, r24
    49f6:	ee 0f       	add	r30, r30
    49f8:	ff 1f       	adc	r31, r31
    49fa:	ee 0f       	add	r30, r30
    49fc:	ff 1f       	adc	r31, r31
    49fe:	ee 0f       	add	r30, r30
    4a00:	ff 1f       	adc	r31, r31
    4a02:	e8 1b       	sub	r30, r24
    4a04:	f9 0b       	sbc	r31, r25
    4a06:	ed 53       	subi	r30, 0x3D	; 61
    4a08:	fc 4f       	sbci	r31, 0xFC	; 252
    4a0a:	20 81       	ld	r18, Z
    4a0c:	31 81       	ldd	r19, Z+1	; 0x01
    4a0e:	2f 5f       	subi	r18, 0xFF	; 255
    4a10:	3f 4f       	sbci	r19, 0xFF	; 255
    4a12:	8f 2d       	mov	r24, r15
    4a14:	9e 2d       	mov	r25, r14
    4a16:	88 0f       	add	r24, r24
    4a18:	99 1f       	adc	r25, r25
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	ee 0f       	add	r30, r30
    4a1e:	ff 1f       	adc	r31, r31
    4a20:	ee 0f       	add	r30, r30
    4a22:	ff 1f       	adc	r31, r31
    4a24:	ee 0f       	add	r30, r30
    4a26:	ff 1f       	adc	r31, r31
    4a28:	e8 1b       	sub	r30, r24
    4a2a:	f9 0b       	sbc	r31, r25
    4a2c:	ed 53       	subi	r30, 0x3D	; 61
    4a2e:	fc 4f       	sbci	r31, 0xFC	; 252
    4a30:	31 83       	std	Z+1, r19	; 0x01
    4a32:	20 83       	st	Z, r18
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {
    4a34:	21 30       	cpi	r18, 0x01	; 1
    4a36:	31 05       	cpc	r19, r1
    4a38:	09 f4       	brne	.+2      	; 0x4a3c <fadeBetween3ColorsWithScalingPwmEffect+0x30c>
    4a3a:	e5 c0       	rjmp	.+458    	; 0x4c06 <fadeBetween3ColorsWithScalingPwmEffect+0x4d6>

				}

				//we reached the 3rd color, time to go backwards
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_DECREASE;
    4a3c:	8f 2d       	mov	r24, r15
    4a3e:	9e 2d       	mov	r25, r14
    4a40:	88 0f       	add	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	fc 01       	movw	r30, r24
    4a46:	ee 0f       	add	r30, r30
    4a48:	ff 1f       	adc	r31, r31
    4a4a:	ee 0f       	add	r30, r30
    4a4c:	ff 1f       	adc	r31, r31
    4a4e:	ee 0f       	add	r30, r30
    4a50:	ff 1f       	adc	r31, r31
    4a52:	e8 1b       	sub	r30, r24
    4a54:	f9 0b       	sbc	r31, r25
    4a56:	ed 53       	subi	r30, 0x3D	; 61
    4a58:	fc 4f       	sbci	r31, 0xFC	; 252
    4a5a:	13 82       	std	Z+3, r1	; 0x03
    4a5c:	12 82       	std	Z+2, r1	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 1;
    4a5e:	8f 2d       	mov	r24, r15
    4a60:	9e 2d       	mov	r25, r14
    4a62:	88 0f       	add	r24, r24
    4a64:	99 1f       	adc	r25, r25
    4a66:	fc 01       	movw	r30, r24
    4a68:	ee 0f       	add	r30, r30
    4a6a:	ff 1f       	adc	r31, r31
    4a6c:	ee 0f       	add	r30, r30
    4a6e:	ff 1f       	adc	r31, r31
    4a70:	ee 0f       	add	r30, r30
    4a72:	ff 1f       	adc	r31, r31
    4a74:	e8 1b       	sub	r30, r24
    4a76:	f9 0b       	sbc	r31, r25
    4a78:	ed 53       	subi	r30, 0x3D	; 61
    4a7a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a7c:	51 83       	std	Z+1, r21	; 0x01
    4a7e:	40 83       	st	Z, r20
					

					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->endRed;
    4a80:	8f 2d       	mov	r24, r15
    4a82:	9e 2d       	mov	r25, r14
    4a84:	88 0f       	add	r24, r24
    4a86:	99 1f       	adc	r25, r25
    4a88:	fc 01       	movw	r30, r24
    4a8a:	ee 0f       	add	r30, r30
    4a8c:	ff 1f       	adc	r31, r31
    4a8e:	ee 0f       	add	r30, r30
    4a90:	ff 1f       	adc	r31, r31
    4a92:	ee 0f       	add	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	e8 1b       	sub	r30, r24
    4a98:	f9 0b       	sbc	r31, r25
    4a9a:	ed 53       	subi	r30, 0x3D	; 61
    4a9c:	fc 4f       	sbci	r31, 0xFC	; 252
    4a9e:	04 5f       	subi	r16, 0xF4	; 244
    4aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa2:	13 87       	std	Z+11, r17	; 0x0b
    4aa4:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4aa6:	8f 2d       	mov	r24, r15
    4aa8:	9e 2d       	mov	r25, r14
    4aaa:	88 0f       	add	r24, r24
    4aac:	99 1f       	adc	r25, r25
    4aae:	fc 01       	movw	r30, r24
    4ab0:	ee 0f       	add	r30, r30
    4ab2:	ff 1f       	adc	r31, r31
    4ab4:	ee 0f       	add	r30, r30
    4ab6:	ff 1f       	adc	r31, r31
    4ab8:	ee 0f       	add	r30, r30
    4aba:	ff 1f       	adc	r31, r31
    4abc:	e8 1b       	sub	r30, r24
    4abe:	f9 0b       	sbc	r31, r25
    4ac0:	ed 53       	subi	r30, 0x3D	; 61
    4ac2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ac4:	06 50       	subi	r16, 0x06	; 6
    4ac6:	10 40       	sbci	r17, 0x00	; 0
    4ac8:	15 87       	std	Z+13, r17	; 0x0d
    4aca:	04 87       	std	Z+12, r16	; 0x0c
    4acc:	06 50       	subi	r16, 0x06	; 6
    4ace:	10 40       	sbci	r17, 0x00	; 0
					
					
					resetData.beginRed = dataArgument->endRed;
    4ad0:	f8 01       	movw	r30, r16
    4ad2:	84 85       	ldd	r24, Z+12	; 0x0c
    4ad4:	95 85       	ldd	r25, Z+13	; 0x0d
    4ad6:	98 87       	std	Y+8, r25	; 0x08
    4ad8:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->endGreen;
    4ada:	86 85       	ldd	r24, Z+14	; 0x0e
    4adc:	97 85       	ldd	r25, Z+15	; 0x0f
    4ade:	9a 87       	std	Y+10, r25	; 0x0a
    4ae0:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->endBlue;
    4ae2:	80 89       	ldd	r24, Z+16	; 0x10
    4ae4:	91 89       	ldd	r25, Z+17	; 0x11
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
					
					resetData.beginRed = dataArgument->beginRed;
					resetData.beginGreen = dataArgument->beginGreen;
					resetData.beginBlue = dataArgument->beginBlue;
    4ae6:	9c 87       	std	Y+12, r25	; 0x0c
    4ae8:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->middleRed;
    4aea:	86 81       	ldd	r24, Z+6	; 0x06
    4aec:	97 81       	ldd	r25, Z+7	; 0x07
    4aee:	9e 87       	std	Y+14, r25	; 0x0e
    4af0:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->middleGreen;
    4af2:	80 85       	ldd	r24, Z+8	; 0x08
    4af4:	91 85       	ldd	r25, Z+9	; 0x09
    4af6:	98 8b       	std	Y+16, r25	; 0x10
    4af8:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->middleBlue;
    4afa:	82 85       	ldd	r24, Z+10	; 0x0a
    4afc:	93 85       	ldd	r25, Z+11	; 0x0b
    4afe:	9a 8b       	std	Y+18, r25	; 0x12
    4b00:	89 8b       	std	Y+17, r24	; 0x11
			

			//TODO this is a bit of a hack, for some reason it flashes the end
			//color withought the below group of code
			struct rgbColors curColors;
			getRGBColor(ledNumber,&curColors);
    4b02:	8f 2d       	mov	r24, r15
    4b04:	9e 2d       	mov	r25, r14
    4b06:	be 01       	movw	r22, r28
    4b08:	6f 5f       	subi	r22, 0xFF	; 255
    4b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0c:	0e 94 ce 28 	call	0x519c	; 0x519c <getRGBColor>
			resetData.beginRed = curColors.red;
    4b10:	89 81       	ldd	r24, Y+1	; 0x01
    4b12:	9a 81       	ldd	r25, Y+2	; 0x02
    4b14:	98 87       	std	Y+8, r25	; 0x08
    4b16:	8f 83       	std	Y+7, r24	; 0x07
			resetData.beginGreen = curColors.green;
    4b18:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1c:	9a 87       	std	Y+10, r25	; 0x0a
    4b1e:	89 87       	std	Y+9, r24	; 0x09
			resetData.beginBlue  = curColors.blue;
    4b20:	8d 81       	ldd	r24, Y+5	; 0x05
    4b22:	9e 81       	ldd	r25, Y+6	; 0x06
    4b24:	9c 87       	std	Y+12, r25	; 0x0c
    4b26:	8b 87       	std	Y+11, r24	; 0x0b
			
			
			resetFadeBetweenColorsEffect(ledNumber, (short *)&resetData);
    4b28:	8f 2d       	mov	r24, r15
    4b2a:	9e 2d       	mov	r25, r14
    4b2c:	be 01       	movw	r22, r28
    4b2e:	69 5f       	subi	r22, 0xF9	; 249
    4b30:	7f 4f       	sbci	r23, 0xFF	; 255
    4b32:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <resetFadeBetweenColorsEffect>
			fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].tenMsCounter = 0;
    4b36:	8f 2d       	mov	r24, r15
    4b38:	9e 2d       	mov	r25, r14
    4b3a:	88 0f       	add	r24, r24
    4b3c:	99 1f       	adc	r25, r25
    4b3e:	fc 01       	movw	r30, r24
    4b40:	ee 0f       	add	r30, r30
    4b42:	ff 1f       	adc	r31, r31
    4b44:	ee 0f       	add	r30, r30
    4b46:	ff 1f       	adc	r31, r31
    4b48:	ee 0f       	add	r30, r30
    4b4a:	ff 1f       	adc	r31, r31
    4b4c:	e8 1b       	sub	r30, r24
    4b4e:	f9 0b       	sbc	r31, r25
    4b50:	ed 53       	subi	r30, 0x3D	; 61
    4b52:	fc 4f       	sbci	r31, 0xFC	; 252
    4b54:	17 82       	std	Z+7, r1	; 0x07
    4b56:	16 82       	std	Z+6, r1	; 0x06
    4b58:	48 ce       	rjmp	.-880    	; 0x47ea <fadeBetween3ColorsWithScalingPwmEffect+0xba>

				}
				 
				//we reached the end, now we are going back up
				else {
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator = 0;
    4b5a:	8f 2d       	mov	r24, r15
    4b5c:	9e 2d       	mov	r25, r14
    4b5e:	88 0f       	add	r24, r24
    4b60:	99 1f       	adc	r25, r25
    4b62:	fc 01       	movw	r30, r24
    4b64:	ee 0f       	add	r30, r30
    4b66:	ff 1f       	adc	r31, r31
    4b68:	ee 0f       	add	r30, r30
    4b6a:	ff 1f       	adc	r31, r31
    4b6c:	ee 0f       	add	r30, r30
    4b6e:	ff 1f       	adc	r31, r31
    4b70:	e8 1b       	sub	r30, r24
    4b72:	f9 0b       	sbc	r31, r25
    4b74:	ed 53       	subi	r30, 0x3D	; 61
    4b76:	fc 4f       	sbci	r31, 0xFC	; 252
    4b78:	11 82       	std	Z+1, r1	; 0x01
    4b7a:	10 82       	st	Z, r1
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].direction = DIRECTION_INCREASE;
    4b7c:	8f 2d       	mov	r24, r15
    4b7e:	9e 2d       	mov	r25, r14
    4b80:	88 0f       	add	r24, r24
    4b82:	99 1f       	adc	r25, r25
    4b84:	fc 01       	movw	r30, r24
    4b86:	ee 0f       	add	r30, r30
    4b88:	ff 1f       	adc	r31, r31
    4b8a:	ee 0f       	add	r30, r30
    4b8c:	ff 1f       	adc	r31, r31
    4b8e:	ee 0f       	add	r30, r30
    4b90:	ff 1f       	adc	r31, r31
    4b92:	e8 1b       	sub	r30, r24
    4b94:	f9 0b       	sbc	r31, r25
    4b96:	ed 53       	subi	r30, 0x3D	; 61
    4b98:	fc 4f       	sbci	r31, 0xFC	; 252
    4b9a:	81 e0       	ldi	r24, 0x01	; 1
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	93 83       	std	Z+3, r25	; 0x03
    4ba0:	82 83       	std	Z+2, r24	; 0x02
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->beginRed;
    4ba2:	8f 2d       	mov	r24, r15
    4ba4:	9e 2d       	mov	r25, r14
    4ba6:	88 0f       	add	r24, r24
    4ba8:	99 1f       	adc	r25, r25
    4baa:	fc 01       	movw	r30, r24
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	ee 0f       	add	r30, r30
    4bb2:	ff 1f       	adc	r31, r31
    4bb4:	ee 0f       	add	r30, r30
    4bb6:	ff 1f       	adc	r31, r31
    4bb8:	e8 1b       	sub	r30, r24
    4bba:	f9 0b       	sbc	r31, r25
    4bbc:	ed 53       	subi	r30, 0x3D	; 61
    4bbe:	fc 4f       	sbci	r31, 0xFC	; 252
    4bc0:	13 87       	std	Z+11, r17	; 0x0b
    4bc2:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->middleRed;
    4bc4:	8f 2d       	mov	r24, r15
    4bc6:	9e 2d       	mov	r25, r14
    4bc8:	88 0f       	add	r24, r24
    4bca:	99 1f       	adc	r25, r25
    4bcc:	fc 01       	movw	r30, r24
    4bce:	ee 0f       	add	r30, r30
    4bd0:	ff 1f       	adc	r31, r31
    4bd2:	ee 0f       	add	r30, r30
    4bd4:	ff 1f       	adc	r31, r31
    4bd6:	ee 0f       	add	r30, r30
    4bd8:	ff 1f       	adc	r31, r31
    4bda:	e8 1b       	sub	r30, r24
    4bdc:	f9 0b       	sbc	r31, r25
    4bde:	ed 53       	subi	r30, 0x3D	; 61
    4be0:	fc 4f       	sbci	r31, 0xFC	; 252
    4be2:	0a 5f       	subi	r16, 0xFA	; 250
    4be4:	1f 4f       	sbci	r17, 0xFF	; 255
    4be6:	15 87       	std	Z+13, r17	; 0x0d
    4be8:	04 87       	std	Z+12, r16	; 0x0c
    4bea:	06 50       	subi	r16, 0x06	; 6
    4bec:	10 40       	sbci	r17, 0x00	; 0
					
					resetData.beginRed = dataArgument->beginRed;
    4bee:	f8 01       	movw	r30, r16
    4bf0:	80 81       	ld	r24, Z
    4bf2:	91 81       	ldd	r25, Z+1	; 0x01
    4bf4:	98 87       	std	Y+8, r25	; 0x08
    4bf6:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->beginGreen;
    4bf8:	82 81       	ldd	r24, Z+2	; 0x02
    4bfa:	93 81       	ldd	r25, Z+3	; 0x03
    4bfc:	9a 87       	std	Y+10, r25	; 0x0a
    4bfe:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->beginBlue;
    4c00:	84 81       	ldd	r24, Z+4	; 0x04
    4c02:	95 81       	ldd	r25, Z+5	; 0x05
    4c04:	70 cf       	rjmp	.-288    	; 0x4ae6 <fadeBetween3ColorsWithScalingPwmEffect+0x3b6>
				fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator++;
				
				if(fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorIndicator == 1) {


					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorBeginPtr = &dataArgument->middleRed;
    4c06:	8f 2d       	mov	r24, r15
    4c08:	9e 2d       	mov	r25, r14
    4c0a:	88 0f       	add	r24, r24
    4c0c:	99 1f       	adc	r25, r25
    4c0e:	fc 01       	movw	r30, r24
    4c10:	ee 0f       	add	r30, r30
    4c12:	ff 1f       	adc	r31, r31
    4c14:	ee 0f       	add	r30, r30
    4c16:	ff 1f       	adc	r31, r31
    4c18:	ee 0f       	add	r30, r30
    4c1a:	ff 1f       	adc	r31, r31
    4c1c:	e8 1b       	sub	r30, r24
    4c1e:	f9 0b       	sbc	r31, r25
    4c20:	ed 53       	subi	r30, 0x3D	; 61
    4c22:	fc 4f       	sbci	r31, 0xFC	; 252
    4c24:	0a 5f       	subi	r16, 0xFA	; 250
    4c26:	1f 4f       	sbci	r17, 0xFF	; 255
    4c28:	13 87       	std	Z+11, r17	; 0x0b
    4c2a:	02 87       	std	Z+10, r16	; 0x0a
					fadeBetween3ColorsWithScalingPwmEffectData[ledNumber].colorEndPtr = &dataArgument->endRed;
    4c2c:	8f 2d       	mov	r24, r15
    4c2e:	9e 2d       	mov	r25, r14
    4c30:	88 0f       	add	r24, r24
    4c32:	99 1f       	adc	r25, r25
    4c34:	fc 01       	movw	r30, r24
    4c36:	ee 0f       	add	r30, r30
    4c38:	ff 1f       	adc	r31, r31
    4c3a:	ee 0f       	add	r30, r30
    4c3c:	ff 1f       	adc	r31, r31
    4c3e:	ee 0f       	add	r30, r30
    4c40:	ff 1f       	adc	r31, r31
    4c42:	e8 1b       	sub	r30, r24
    4c44:	f9 0b       	sbc	r31, r25
    4c46:	ed 53       	subi	r30, 0x3D	; 61
    4c48:	fc 4f       	sbci	r31, 0xFC	; 252
    4c4a:	0a 5f       	subi	r16, 0xFA	; 250
    4c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4e:	15 87       	std	Z+13, r17	; 0x0d
    4c50:	04 87       	std	Z+12, r16	; 0x0c
    4c52:	0c 50       	subi	r16, 0x0C	; 12
    4c54:	10 40       	sbci	r17, 0x00	; 0
					resetData.beginRed = dataArgument->middleRed;
    4c56:	f8 01       	movw	r30, r16
    4c58:	86 81       	ldd	r24, Z+6	; 0x06
    4c5a:	97 81       	ldd	r25, Z+7	; 0x07
    4c5c:	98 87       	std	Y+8, r25	; 0x08
    4c5e:	8f 83       	std	Y+7, r24	; 0x07
					resetData.beginGreen = dataArgument->middleGreen;
    4c60:	80 85       	ldd	r24, Z+8	; 0x08
    4c62:	91 85       	ldd	r25, Z+9	; 0x09
    4c64:	9a 87       	std	Y+10, r25	; 0x0a
    4c66:	89 87       	std	Y+9, r24	; 0x09
					resetData.beginBlue = dataArgument->middleBlue;
    4c68:	82 85       	ldd	r24, Z+10	; 0x0a
    4c6a:	93 85       	ldd	r25, Z+11	; 0x0b
    4c6c:	9c 87       	std	Y+12, r25	; 0x0c
    4c6e:	8b 87       	std	Y+11, r24	; 0x0b

					resetData.endRed = dataArgument->endRed;
    4c70:	84 85       	ldd	r24, Z+12	; 0x0c
    4c72:	95 85       	ldd	r25, Z+13	; 0x0d
    4c74:	9e 87       	std	Y+14, r25	; 0x0e
    4c76:	8d 87       	std	Y+13, r24	; 0x0d
					resetData.endGreen = dataArgument->endGreen;
    4c78:	86 85       	ldd	r24, Z+14	; 0x0e
    4c7a:	97 85       	ldd	r25, Z+15	; 0x0f
    4c7c:	98 8b       	std	Y+16, r25	; 0x10
    4c7e:	8f 87       	std	Y+15, r24	; 0x0f
					resetData.endBlue = dataArgument->endBlue;
    4c80:	80 89       	ldd	r24, Z+16	; 0x10
    4c82:	91 89       	ldd	r25, Z+17	; 0x11
    4c84:	9a 8b       	std	Y+18, r25	; 0x12
    4c86:	89 8b       	std	Y+17, r24	; 0x11
    4c88:	3c cf       	rjmp	.-392    	; 0x4b02 <fadeBetween3ColorsWithScalingPwmEffect+0x3d2>

00004c8a <readCharFromFlash>:
		}		
        return ig;      
}

char readCharFromFlash(const char **data)
{
    4c8a:	dc 01       	movw	r26, r24
    
	char returnVal = pgm_read_byte(*data);
    4c8c:	2d 91       	ld	r18, X+
    4c8e:	3c 91       	ld	r19, X
    4c90:	11 97       	sbiw	r26, 0x01	; 1
    4c92:	f9 01       	movw	r30, r18
    4c94:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4c96:	2f 5f       	subi	r18, 0xFF	; 255
    4c98:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9a:	2d 93       	st	X+, r18
    4c9c:	3c 93       	st	X, r19
    return returnVal;
}
    4c9e:	08 95       	ret

00004ca0 <readShortFromFlash>:

short readShortFromFlash(const char **data)
{
    4ca0:	dc 01       	movw	r26, r24


	
    short returnVal = pgm_read_word(*data);
    4ca2:	8d 91       	ld	r24, X+
    4ca4:	9c 91       	ld	r25, X
    4ca6:	11 97       	sbiw	r26, 0x01	; 1
    4ca8:	fc 01       	movw	r30, r24
    4caa:	25 91       	lpm	r18, Z+
    4cac:	34 91       	lpm	r19, Z+
	//short returnVal = *(short *)*data;
    *data += sizeof(short);
    4cae:	02 96       	adiw	r24, 0x02	; 2
    4cb0:	8d 93       	st	X+, r24
    4cb2:	9c 93       	st	X, r25
    return returnVal;
}
    4cb4:	c9 01       	movw	r24, r18
    4cb6:	08 95       	ret

00004cb8 <copyFromFlash>:

void copyFromFlash(const char *src, char *dest, int length) {
    4cb8:	cf 93       	push	r28
    4cba:	df 93       	push	r29
    4cbc:	ec 01       	movw	r28, r24
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4cbe:	14 16       	cp	r1, r20
    4cc0:	15 06       	cpc	r1, r21
    4cc2:	64 f4       	brge	.+24     	; 0x4cdc <copyFromFlash+0x24>
    4cc4:	db 01       	movw	r26, r22
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
		*destPtr = pgm_read_byte(srcPtr);
    4cca:	fe 01       	movw	r30, r28
    4ccc:	e8 0f       	add	r30, r24
    4cce:	f9 1f       	adc	r31, r25
    4cd0:	e4 91       	lpm	r30, Z+
    4cd2:	ed 93       	st	X+, r30
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4cd4:	01 96       	adiw	r24, 0x01	; 1
    4cd6:	84 17       	cp	r24, r20
    4cd8:	95 07       	cpc	r25, r21
    4cda:	bc f3       	brlt	.-18     	; 0x4cca <copyFromFlash+0x12>
		*destPtr = pgm_read_byte(srcPtr);
		srcPtr++;
		destPtr++;
	}
}
    4cdc:	df 91       	pop	r29
    4cde:	cf 91       	pop	r28
    4ce0:	08 95       	ret

00004ce2 <getInstructionGroup>:


//This functinos returns a pointer.
//this pointer points two 2 buffers

struct instruction_group * getInstructionGroup() {	
    4ce2:	2f 92       	push	r2
    4ce4:	3f 92       	push	r3
    4ce6:	4f 92       	push	r4
    4ce8:	5f 92       	push	r5
    4cea:	6f 92       	push	r6
    4cec:	7f 92       	push	r7
    4cee:	8f 92       	push	r8
    4cf0:	9f 92       	push	r9
    4cf2:	af 92       	push	r10
    4cf4:	bf 92       	push	r11
    4cf6:	cf 92       	push	r12
    4cf8:	df 92       	push	r13
    4cfa:	ef 92       	push	r14
    4cfc:	ff 92       	push	r15
    4cfe:	1f 93       	push	r17
    4d00:	df 93       	push	r29
    4d02:	cf 93       	push	r28
    4d04:	00 d0       	rcall	.+0      	; 0x4d06 <getInstructionGroup+0x24>
    4d06:	00 d0       	rcall	.+0      	; 0x4d08 <getInstructionGroup+0x26>
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
	
	
	sramEffectDataPtr = sramEffectDataBuffer;
    4d0c:	83 ef       	ldi	r24, 0xF3	; 243
    4d0e:	98 e0       	ldi	r25, 0x08	; 8
    4d10:	90 93 f4 0e 	sts	0x0EF4, r25
    4d14:	80 93 f3 0e 	sts	0x0EF3, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4d18:	40 91 04 01 	lds	r20, 0x0104
    4d1c:	50 91 05 01 	lds	r21, 0x0105
    4d20:	fa 01       	movw	r30, r20
    4d22:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4d24:	31 96       	adiw	r30, 0x01	; 1
    4d26:	f0 93 05 01 	sts	0x0105, r31
    4d2a:	e0 93 04 01 	sts	0x0104, r30

	char beginPacket;
	//if we aren't aligned just return null
	//end of show
	beginPacket = readCharFromFlash(&dataPtr);
	if (beginPacket != 0xff) {
    4d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d30:	c9 f0       	breq	.+50     	; 0x4d64 <getInstructionGroup+0x82>
    4d32:	60 e0       	ldi	r22, 0x00	; 0
    4d34:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
	return instructionGroup;
}
    4d36:	cb 01       	movw	r24, r22
    4d38:	0f 90       	pop	r0
    4d3a:	0f 90       	pop	r0
    4d3c:	0f 90       	pop	r0
    4d3e:	0f 90       	pop	r0
    4d40:	cf 91       	pop	r28
    4d42:	df 91       	pop	r29
    4d44:	1f 91       	pop	r17
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	df 90       	pop	r13
    4d4c:	cf 90       	pop	r12
    4d4e:	bf 90       	pop	r11
    4d50:	af 90       	pop	r10
    4d52:	9f 90       	pop	r9
    4d54:	8f 90       	pop	r8
    4d56:	7f 90       	pop	r7
    4d58:	6f 90       	pop	r6
    4d5a:	5f 90       	pop	r5
    4d5c:	4f 90       	pop	r4
    4d5e:	3f 90       	pop	r3
    4d60:	2f 90       	pop	r2
    4d62:	08 95       	ret
	
	

	//flip the instruction group pointers
	//around, old is new and new is old
	char *tempPtr = newInstructionGroup;
    4d64:	80 91 00 01 	lds	r24, 0x0100
    4d68:	90 91 01 01 	lds	r25, 0x0101
	
	newInstructionGroup = oldInstructionGroup;
    4d6c:	20 91 02 01 	lds	r18, 0x0102
    4d70:	30 91 03 01 	lds	r19, 0x0103
    4d74:	20 93 00 01 	sts	0x0100, r18
    4d78:	30 93 01 01 	sts	0x0101, r19
	oldInstructionGroup = tempPtr;
    4d7c:	90 93 03 01 	sts	0x0103, r25
    4d80:	80 93 02 01 	sts	0x0102, r24
	//this points to the linked lists of 
	//a instruction group and multiple effects
	char *curPutPtr = newInstructionGroup;
	
	//read in new instruction group
	struct instruction_group *instructionGroup = (struct instruction_group *) curPutPtr;
    4d84:	c9 01       	movw	r24, r18
    4d86:	bc 01       	movw	r22, r24
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4d88:	85 91       	lpm	r24, Z+
    4d8a:	94 91       	lpm	r25, Z+
	

	//README - SINCE THE TIME COUNTER VALUE MAY NOT REPRESENT 10MS
	//STEPS DO TO THE PICKING OF 0CR1A WE NEED A SCALING VALUE
	//SO THAT IT WILL BE
	instructionGroup->dt = aDt*TEN_MS_MULTIPLIER;
    4d8c:	9c 01       	movw	r18, r24
    4d8e:	22 0f       	add	r18, r18
    4d90:	33 1f       	adc	r19, r19
    4d92:	22 0f       	add	r18, r18
    4d94:	33 1f       	adc	r19, r19
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	88 0f       	add	r24, r24
    4d9c:	99 1f       	adc	r25, r25
    4d9e:	28 0f       	add	r18, r24
    4da0:	39 1f       	adc	r19, r25
    4da2:	fb 01       	movw	r30, r22
    4da4:	31 83       	std	Z+1, r19	; 0x01
    4da6:	20 83       	st	Z, r18
	
	//curPutPtr is caluclated first
	//if you try to displace by instructionGroup +  sizeof(struct instruction_group)
	//it calculates it wrong....
	curPutPtr += sizeof(struct instruction_group);
	instructionGroup->firstInstruction = (struct instruction *) curPutPtr;
    4da8:	db 01       	movw	r26, r22
    4daa:	14 96       	adiw	r26, 0x04	; 4
    4dac:	b3 83       	std	Z+3, r27	; 0x03
    4dae:	a2 83       	std	Z+2, r26	; 0x02
    4db0:	4d 5f       	subi	r20, 0xFD	; 253
    4db2:	5f 4f       	sbci	r21, 0xFF	; 255
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4db4:	11 e0       	ldi	r17, 0x01	; 1
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4db6:	98 e3       	ldi	r25, 0x38	; 56
    4db8:	c9 2e       	mov	r12, r25
    4dba:	9d e1       	ldi	r25, 0x1D	; 29
    4dbc:	d9 2e       	mov	r13, r25
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    4dbe:	89 ee       	ldi	r24, 0xE9	; 233
    4dc0:	a8 2e       	mov	r10, r24
    4dc2:	8e e1       	ldi	r24, 0x1E	; 30
    4dc4:	b8 2e       	mov	r11, r24
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4dc6:	f9 eb       	ldi	r31, 0xB9	; 185
    4dc8:	8f 2e       	mov	r8, r31
    4dca:	fc e1       	ldi	r31, 0x1C	; 28
    4dcc:	9f 2e       	mov	r9, r31
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    4dce:	ed e9       	ldi	r30, 0x9D	; 157
    4dd0:	6e 2e       	mov	r6, r30
    4dd2:	ec e1       	ldi	r30, 0x1C	; 28
    4dd4:	7e 2e       	mov	r7, r30
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4dd6:	31 ef       	ldi	r19, 0xF1	; 241
    4dd8:	43 2e       	mov	r4, r19
    4dda:	3e e1       	ldi	r19, 0x1E	; 30
    4ddc:	53 2e       	mov	r5, r19
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4dde:	26 e3       	ldi	r18, 0x36	; 54
    4de0:	22 2e       	mov	r2, r18
    4de2:	2f e1       	ldi	r18, 0x1F	; 31
    4de4:	32 2e       	mov	r3, r18
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
			instructionPointer->effectInfo.effectFunc = doNothingEffect;
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
    4de6:	97 e2       	ldi	r25, 0x27	; 39
    4de8:	e9 2e       	mov	r14, r25
    4dea:	9c e1       	ldi	r25, 0x1C	; 28
    4dec:	f9 2e       	mov	r15, r25
    4dee:	23 c0       	rjmp	.+70     	; 0x4e36 <getInstructionGroup+0x154>
    4df0:	13 96       	adiw	r26, 0x03	; 3
    4df2:	fc 92       	st	X, r15
    4df4:	ee 92       	st	-X, r14
    4df6:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4df8:	18 96       	adiw	r26, 0x08	; 8
    4dfa:	1c 93       	st	X, r17
    4dfc:	18 97       	sbiw	r26, 0x08	; 8
    4dfe:	80 91 f3 0e 	lds	r24, 0x0EF3
    4e02:	90 91 f4 0e 	lds	r25, 0x0EF4
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}
		
		copyFromFlash(dataPtr,sramEffectDataPtr,effectDataLength);
		sramEffectDataPtr += effectDataLength;
    4e0a:	82 0f       	add	r24, r18
    4e0c:	93 1f       	adc	r25, r19
    4e0e:	90 93 f4 0e 	sts	0x0EF4, r25
    4e12:	80 93 f3 0e 	sts	0x0EF3, r24
		dataPtr+=effectDataLength;
    4e16:	40 91 04 01 	lds	r20, 0x0104
    4e1a:	50 91 05 01 	lds	r21, 0x0105
    4e1e:	42 0f       	add	r20, r18
    4e20:	53 1f       	adc	r21, r19


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
    4e22:	fa 01       	movw	r30, r20
    4e24:	84 91       	lpm	r24, Z+
    4e26:	8f 3f       	cpi	r24, 0xFF	; 255
    4e28:	09 f4       	brne	.+2      	; 0x4e2c <getInstructionGroup+0x14a>
    4e2a:	b4 c0       	rjmp	.+360    	; 0x4f94 <getInstructionGroup+0x2b2>
			break;
		}


		else {
			instructionPointer->nextInstruction = instructionPointer + 1;
    4e2c:	1b 96       	adiw	r26, 0x0b	; 11
    4e2e:	fd 01       	movw	r30, r26
    4e30:	32 97       	sbiw	r30, 0x02	; 2
    4e32:	b1 83       	std	Z+1, r27	; 0x01
    4e34:	a0 83       	st	Z, r26
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4e36:	fa 01       	movw	r30, r20
    4e38:	84 91       	lpm	r24, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4e3a:	4f 5f       	subi	r20, 0xFF	; 255
    4e3c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//set instruction pointer to new location...
	struct instruction *instructionPointer = (struct instruction *) (curPutPtr);	
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);
    4e3e:	8c 93       	st	X, r24
}

char readCharFromFlash(const char **data)
{
    
	char returnVal = pgm_read_byte(*data);
    4e40:	fa 01       	movw	r30, r20
    4e42:	24 91       	lpm	r18, Z+
	//char returnVal = *(char *)*data;
    *data += sizeof(char);
    4e44:	ca 01       	movw	r24, r20
    4e46:	01 96       	adiw	r24, 0x01	; 1
    4e48:	9a 83       	std	Y+2, r25	; 0x02
    4e4a:	89 83       	std	Y+1, r24	; 0x01
    4e4c:	90 93 05 01 	sts	0x0105, r25
    4e50:	80 93 04 01 	sts	0x0104, r24
	do {
		//get the led number
		instructionPointer->ledNumber = readCharFromFlash(&dataPtr);

		//get the effect number
		instructionPointer->effectNumber = readCharFromFlash(&dataPtr);
    4e54:	11 96       	adiw	r26, 0x01	; 1
    4e56:	2c 93       	st	X, r18
    4e58:	11 97       	sbiw	r26, 0x01	; 1

		//set the pointer to the effect data
		instructionPointer->effectInfo.effectData = (short *)sramEffectDataPtr;
    4e5a:	80 91 f3 0e 	lds	r24, 0x0EF3
    4e5e:	90 91 f4 0e 	lds	r25, 0x0EF4
    4e62:	9c 83       	std	Y+4, r25	; 0x04
    4e64:	8b 83       	std	Y+3, r24	; 0x03
    4e66:	17 96       	adiw	r26, 0x07	; 7
    4e68:	9c 93       	st	X, r25
    4e6a:	8e 93       	st	-X, r24
    4e6c:	16 97       	sbiw	r26, 0x06	; 6
		//README
		//WHEN A EFFECT CHANGES IT'S REQUIRED LENGTH OF DATA
		//UPDATE THE OFFSETS BELOW!
	
		//Effect number 0 is do nothing
		if(instructionPointer->effectNumber == 0 ) {
    4e6e:	22 23       	and	r18, r18
    4e70:	09 f4       	brne	.+2      	; 0x4e74 <getInstructionGroup+0x192>
    4e72:	be cf       	rjmp	.-132    	; 0x4df0 <getInstructionGroup+0x10e>
			instructionPointer->effectInfo.effectFunc = resetDoNothingEffect;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
    4e74:	22 30       	cpi	r18, 0x02	; 2
    4e76:	39 f1       	breq	.+78     	; 0x4ec6 <getInstructionGroup+0x1e4>
			
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
    4e78:	23 30       	cpi	r18, 0x03	; 3
    4e7a:	09 f4       	brne	.+2      	; 0x4e7e <getInstructionGroup+0x19c>
    4e7c:	4b c0       	rjmp	.+150    	; 0x4f14 <getInstructionGroup+0x232>
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
    4e7e:	24 30       	cpi	r18, 0x04	; 4
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <getInstructionGroup+0x1a2>
    4e82:	68 c0       	rjmp	.+208    	; 0x4f54 <getInstructionGroup+0x272>
			effectDataLength =  14; //two bytes per color, 6 colors, 2 for step count
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
    4e84:	25 30       	cpi	r18, 0x05	; 5
    4e86:	09 f4       	brne	.+2      	; 0x4e8a <getInstructionGroup+0x1a8>
    4e88:	73 c0       	rjmp	.+230    	; 0x4f70 <getInstructionGroup+0x28e>
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
    4e8a:	26 30       	cpi	r18, 0x06	; 6
    4e8c:	09 f4       	brne	.+2      	; 0x4e90 <getInstructionGroup+0x1ae>
    4e8e:	50 c0       	rjmp	.+160    	; 0x4f30 <getInstructionGroup+0x24e>
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
    4e90:	27 30       	cpi	r18, 0x07	; 7
    4e92:	09 f4       	brne	.+2      	; 0x4e96 <getInstructionGroup+0x1b4>
    4e94:	8a c0       	rjmp	.+276    	; 0x4faa <getInstructionGroup+0x2c8>


		}

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
    4e96:	28 30       	cpi	r18, 0x08	; 8
    4e98:	09 f4       	brne	.+2      	; 0x4e9c <getInstructionGroup+0x1ba>
    4e9a:	99 c0       	rjmp	.+306    	; 0x4fce <getInstructionGroup+0x2ec>


		}
		
		//Instruction 9 - Led ON Effect
		else if (instructionPointer->effectNumber == 9) {
    4e9c:	29 30       	cpi	r18, 0x09	; 9
    4e9e:	09 f0       	breq	.+2      	; 0x4ea2 <getInstructionGroup+0x1c0>
    4ea0:	b2 cf       	rjmp	.-156    	; 0x4e06 <getInstructionGroup+0x124>
			instructionPointer->effectInfo.effectFunc = ledOnEffect;
    4ea2:	83 e9       	ldi	r24, 0x93	; 147
    4ea4:	9c e1       	ldi	r25, 0x1C	; 28
    4ea6:	13 96       	adiw	r26, 0x03	; 3
    4ea8:	9c 93       	st	X, r25
    4eaa:	8e 93       	st	-X, r24
    4eac:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLedOnEffect;;
    4eae:	e4 e2       	ldi	r30, 0x24	; 36
    4eb0:	fc e1       	ldi	r31, 0x1C	; 28
    4eb2:	15 96       	adiw	r26, 0x05	; 5
    4eb4:	fc 93       	st	X, r31
    4eb6:	ee 93       	st	-X, r30
    4eb8:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  6;
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4eba:	18 96       	adiw	r26, 0x08	; 8
    4ebc:	1c 93       	st	X, r17
    4ebe:	18 97       	sbiw	r26, 0x08	; 8
    4ec0:	46 e0       	ldi	r20, 0x06	; 6
    4ec2:	50 e0       	ldi	r21, 0x00	; 0
    4ec4:	0d c0       	rjmp	.+26     	; 0x4ee0 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
		}

		//Effect number 2 is blink
		else if(instructionPointer->effectNumber == 2 ) {
			instructionPointer->effectInfo.effectFunc = blinkEffect;
    4ec6:	13 96       	adiw	r26, 0x03	; 3
    4ec8:	5c 92       	st	X, r5
    4eca:	4e 92       	st	-X, r4
    4ecc:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetBlinkEffect;
    4ece:	15 96       	adiw	r26, 0x05	; 5
    4ed0:	3c 92       	st	X, r3
    4ed2:	2e 92       	st	-X, r2
    4ed4:	14 97       	sbiw	r26, 0x04	; 4
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4ed6:	18 96       	adiw	r26, 0x08	; 8
    4ed8:	1c 93       	st	X, r17
    4eda:	18 97       	sbiw	r26, 0x08	; 8
    4edc:	46 e0       	ldi	r20, 0x06	; 6
    4ede:	50 e0       	ldi	r21, 0x00	; 0
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4ee0:	20 e0       	ldi	r18, 0x00	; 0
    4ee2:	30 e0       	ldi	r19, 0x00	; 0

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
		*destPtr = pgm_read_byte(srcPtr);
    4ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ee8:	84 91       	lpm	r24, Z+
    4eea:	eb 81       	ldd	r30, Y+3	; 0x03
    4eec:	fc 81       	ldd	r31, Y+4	; 0x04
    4eee:	81 93       	st	Z+, r24
    4ef0:	fc 83       	std	Y+4, r31	; 0x04
    4ef2:	eb 83       	std	Y+3, r30	; 0x03
		srcPtr++;
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef8:	01 96       	adiw	r24, 0x01	; 1
    4efa:	9a 83       	std	Y+2, r25	; 0x02
    4efc:	89 83       	std	Y+1, r24	; 0x01
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    4efe:	2f 5f       	subi	r18, 0xFF	; 255
    4f00:	3f 4f       	sbci	r19, 0xFF	; 255
    4f02:	24 17       	cp	r18, r20
    4f04:	35 07       	cpc	r19, r21
    4f06:	74 f3       	brlt	.-36     	; 0x4ee4 <getInstructionGroup+0x202>
    4f08:	9a 01       	movw	r18, r20
    4f0a:	80 91 f3 0e 	lds	r24, 0x0EF3
    4f0e:	90 91 f4 0e 	lds	r25, 0x0EF4
    4f12:	7b cf       	rjmp	.-266    	; 0x4e0a <getInstructionGroup+0x128>
			
		}

		//Effect number 3 is PWM
		else if(instructionPointer->effectNumber == 3) {
			instructionPointer->effectInfo.effectFunc = pwmEffect;
    4f14:	13 96       	adiw	r26, 0x03	; 3
    4f16:	9c 92       	st	X, r9
    4f18:	8e 92       	st	-X, r8
    4f1a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetPwmEffect;
    4f1c:	15 96       	adiw	r26, 0x05	; 5
    4f1e:	7c 92       	st	X, r7
    4f20:	6e 92       	st	-X, r6
    4f22:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  10; //6 color bytes, 4 timing bytes
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4f24:	18 96       	adiw	r26, 0x08	; 8
    4f26:	1c 92       	st	X, r1
    4f28:	18 97       	sbiw	r26, 0x08	; 8
    4f2a:	4a e0       	ldi	r20, 0x0A	; 10
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	d8 cf       	rjmp	.-80     	; 0x4ee0 <getInstructionGroup+0x1fe>
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}
		//Instruction 6 - fade between colors with scaling pwm
		else if(instructionPointer->effectNumber == 6) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithScalingPwmEffect;
    4f30:	e3 eb       	ldi	r30, 0xB3	; 179
    4f32:	f1 e2       	ldi	r31, 0x21	; 33
    4f34:	13 96       	adiw	r26, 0x03	; 3
    4f36:	fc 93       	st	X, r31
    4f38:	ee 93       	st	-X, r30
    4f3a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithScalingPwmEffect;
    4f3c:	85 e1       	ldi	r24, 0x15	; 21
    4f3e:	90 e2       	ldi	r25, 0x20	; 32
    4f40:	15 96       	adiw	r26, 0x05	; 5
    4f42:	9c 93       	st	X, r25
    4f44:	8e 93       	st	-X, r24
    4f46:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; 
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4f48:	18 96       	adiw	r26, 0x08	; 8
    4f4a:	1c 92       	st	X, r1
    4f4c:	18 97       	sbiw	r26, 0x08	; 8
    4f4e:	42 e1       	ldi	r20, 0x12	; 18
    4f50:	50 e0       	ldi	r21, 0x00	; 0
    4f52:	c6 cf       	rjmp	.-116    	; 0x4ee0 <getInstructionGroup+0x1fe>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Effect 4 is fade between colors
		else if(instructionPointer->effectNumber == 4 ) {
			instructionPointer->effectInfo.tenMsTriggerOnly=TRUE;
    4f54:	18 96       	adiw	r26, 0x08	; 8
    4f56:	1c 93       	st	X, r17
    4f58:	18 97       	sbiw	r26, 0x08	; 8
			instructionPointer->effectInfo.effectFunc = fadeBetweenColors;
    4f5a:	13 96       	adiw	r26, 0x03	; 3
    4f5c:	dc 92       	st	X, r13
    4f5e:	ce 92       	st	-X, r12
    4f60:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsEffect;
    4f62:	15 96       	adiw	r26, 0x05	; 5
    4f64:	bc 92       	st	X, r11
    4f66:	ae 92       	st	-X, r10
    4f68:	14 97       	sbiw	r26, 0x04	; 4
    4f6a:	4e e0       	ldi	r20, 0x0E	; 14
    4f6c:	50 e0       	ldi	r21, 0x00	; 0
    4f6e:	b8 cf       	rjmp	.-144    	; 0x4ee0 <getInstructionGroup+0x1fe>
			
		}

		//Effect 5 is fade between colors with pwm
		else if (instructionPointer->effectNumber == 5) {
			instructionPointer->effectInfo.effectFunc = fadeBetweenColorsWithPwm;
    4f70:	ea ea       	ldi	r30, 0xAA	; 170
    4f72:	ff e1       	ldi	r31, 0x1F	; 31
    4f74:	13 96       	adiw	r26, 0x03	; 3
    4f76:	fc 93       	st	X, r31
    4f78:	ee 93       	st	-X, r30
    4f7a:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetweenColorsWithPwm;
    4f7c:	86 e7       	ldi	r24, 0x76	; 118
    4f7e:	9f e1       	ldi	r25, 0x1F	; 31
    4f80:	15 96       	adiw	r26, 0x05	; 5
    4f82:	9c 93       	st	X, r25
    4f84:	8e 93       	st	-X, r24
    4f86:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  18; //two bytes per color, 6 colors, 2 for step count
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4f88:	18 96       	adiw	r26, 0x08	; 8
    4f8a:	1c 92       	st	X, r1
    4f8c:	18 97       	sbiw	r26, 0x08	; 8
    4f8e:	42 e1       	ldi	r20, 0x12	; 18
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	a6 cf       	rjmp	.-180    	; 0x4ee0 <getInstructionGroup+0x1fe>
		dataPtr+=effectDataLength;


		//If *dataPtr=0xff we are at the end of the packet!
		if(pgm_read_byte(dataPtr) == 0xff) {
			instructionPointer->nextInstruction = 0;
    4f94:	1a 96       	adiw	r26, 0x0a	; 10
    4f96:	1c 92       	st	X, r1
    4f98:	1e 92       	st	-X, r1
    4f9a:	19 97       	sbiw	r26, 0x09	; 9
			instructionPointer->nextInstruction = instructionPointer + 1;
			instructionPointer++;
		}
	}
	while (pgm_read_byte(dataPtr) != 0xff);
	dataPtr++;
    4f9c:	4f 5f       	subi	r20, 0xFF	; 255
    4f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4fa0:	50 93 05 01 	sts	0x0105, r21
    4fa4:	40 93 04 01 	sts	0x0104, r20
    4fa8:	c6 ce       	rjmp	.-628    	; 0x4d36 <getInstructionGroup+0x54>
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
		}

		//Instruction 7 - fade between 3 colors with scaling pwm
		else if(instructionPointer->effectNumber == 7) {
			instructionPointer->effectInfo.effectFunc = fadeBetween3ColorsWithScalingPwmEffect;	
    4faa:	e8 e9       	ldi	r30, 0x98	; 152
    4fac:	f3 e2       	ldi	r31, 0x23	; 35
    4fae:	13 96       	adiw	r26, 0x03	; 3
    4fb0:	fc 93       	st	X, r31
    4fb2:	ee 93       	st	-X, r30
    4fb4:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetFadeBetween3ColorsWithScalingPwmEffect;
    4fb6:	89 ef       	ldi	r24, 0xF9	; 249
    4fb8:	90 e2       	ldi	r25, 0x20	; 32
    4fba:	15 96       	adiw	r26, 0x05	; 5
    4fbc:	9c 93       	st	X, r25
    4fbe:	8e 93       	st	-X, r24
    4fc0:	14 97       	sbiw	r26, 0x04	; 4
			effectDataLength =  24;
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    4fc2:	18 96       	adiw	r26, 0x08	; 8
    4fc4:	1c 92       	st	X, r1
    4fc6:	18 97       	sbiw	r26, 0x08	; 8
    4fc8:	48 e1       	ldi	r20, 0x18	; 24
    4fca:	50 e0       	ldi	r21, 0x00	; 0
    4fcc:	89 cf       	rjmp	.-238    	; 0x4ee0 <getInstructionGroup+0x1fe>

		//Instrction 8 - Light beem with multiple leds
		else if(instructionPointer->effectNumber == 8) {
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
    4fce:	e4 e3       	ldi	r30, 0x34	; 52
    4fd0:	fc e1       	ldi	r31, 0x1C	; 28
    4fd2:	13 96       	adiw	r26, 0x03	; 3
    4fd4:	fc 93       	st	X, r31
    4fd6:	ee 93       	st	-X, r30
    4fd8:	12 97       	sbiw	r26, 0x02	; 2
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
    4fda:	88 e2       	ldi	r24, 0x28	; 40
    4fdc:	9c e1       	ldi	r25, 0x1C	; 28
    4fde:	15 96       	adiw	r26, 0x05	; 5
    4fe0:	9c 93       	st	X, r25
    4fe2:	8e 93       	st	-X, r24
    4fe4:	14 97       	sbiw	r26, 0x04	; 4
short readShortFromFlash(const char **data)
{


	
    short returnVal = pgm_read_word(*data);
    4fe6:	89 81       	ldd	r24, Y+1	; 0x01
    4fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    4fea:	fc 01       	movw	r30, r24
    4fec:	45 91       	lpm	r20, Z+
    4fee:	54 91       	lpm	r21, Z+
		

			instructionPointer->effectInfo.effectFunc = lightBeamEffect;
			instructionPointer->effectInfo.effectResetFunc = resetLightBeamEffect;
			short beamCount = readShortFromFlash(&dataPtr);
			dataPtr -= 2;
    4ff0:	90 93 05 01 	sts	0x0105, r25
    4ff4:	80 93 04 01 	sts	0x0104, r24
			effectDataLength =  (8 * (beamCount)) + 2;
    4ff8:	44 0f       	add	r20, r20
    4ffa:	55 1f       	adc	r21, r21
    4ffc:	44 0f       	add	r20, r20
    4ffe:	55 1f       	adc	r21, r21
    5000:	44 0f       	add	r20, r20
    5002:	55 1f       	adc	r21, r21
    5004:	4e 5f       	subi	r20, 0xFE	; 254
    5006:	5f 4f       	sbci	r21, 0xFF	; 255
			instructionPointer->effectInfo.tenMsTriggerOnly=FALSE;
    5008:	18 96       	adiw	r26, 0x08	; 8
    500a:	1c 92       	st	X, r1
    500c:	18 97       	sbiw	r26, 0x08	; 8
}

void copyFromFlash(const char *src, char *dest, int length) {
	const char *srcPtr = src;
	char *destPtr  = dest;
	for(int i =0; i < length; i++) {
    500e:	14 16       	cp	r1, r20
    5010:	15 06       	cpc	r1, r21
    5012:	0c f4       	brge	.+2      	; 0x5016 <getInstructionGroup+0x334>
    5014:	65 cf       	rjmp	.-310    	; 0x4ee0 <getInstructionGroup+0x1fe>
    5016:	78 cf       	rjmp	.-272    	; 0x4f08 <getInstructionGroup+0x226>

00005018 <getPreviousGroup>:
		ig = getLastGroup();
	}
	return ig;	
}

struct instruction_group *getPreviousGroup() {
    5018:	cf 93       	push	r28
    501a:	df 93       	push	r29

        struct instruction_group *ig;
        if(currentEffectGroupIndex >= 2 ) {
    501c:	a0 91 f3 0c 	lds	r26, 0x0CF3
    5020:	b0 91 f4 0c 	lds	r27, 0x0CF4
    5024:	a2 30       	cpi	r26, 0x02	; 2
    5026:	b1 05       	cpc	r27, r1
    5028:	78 f4       	brcc	.+30     	; 0x5048 <getPreviousGroup+0x30>
        }
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
    502a:	11 97       	sbiw	r26, 0x01	; 1
    502c:	81 f1       	breq	.+96     	; 0x508e <getPreviousGroup+0x76>
    502e:	c0 91 04 01 	lds	r28, 0x0104
    5032:	d0 91 05 01 	lds	r29, 0x0105
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
				currentEffectGroupIndex -= 1;
			}
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
    5036:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <getInstructionGroup>
			dataPtr = tmpPtr;
    503a:	d0 93 05 01 	sts	0x0105, r29
    503e:	c0 93 04 01 	sts	0x0104, r28
		}		
        return ig;      
}
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	08 95       	ret
			//dataptr is pointing th the next effect to be played..

			//we subtract the size of the last group played, this points it back to
			//the last group to be blayed. We subtract 1 more group to play the group before the
			//previous
			currentEffectGroupIndex-=1;
    5048:	fd 01       	movw	r30, r26
    504a:	31 97       	sbiw	r30, 0x01	; 1
    504c:	f0 93 f4 0c 	sts	0x0CF4, r31
    5050:	e0 93 f3 0c 	sts	0x0CF3, r30
	        dataPtr -= (effectGroupSizes[currentEffectGroupIndex] +effectGroupSizes[currentEffectGroupIndex -1]);
    5054:	aa 0f       	add	r26, r26
    5056:	bb 1f       	adc	r27, r27
    5058:	af 50       	subi	r26, 0x0F	; 15
    505a:	b3 4f       	sbci	r27, 0xF3	; 243
    505c:	ee 0f       	add	r30, r30
    505e:	ff 1f       	adc	r31, r31
    5060:	eb 50       	subi	r30, 0x0B	; 11
    5062:	f3 4f       	sbci	r31, 0xF3	; 243
    5064:	2d 91       	ld	r18, X+
    5066:	3c 91       	ld	r19, X
    5068:	80 81       	ld	r24, Z
    506a:	91 81       	ldd	r25, Z+1	; 0x01
    506c:	28 0f       	add	r18, r24
    506e:	39 1f       	adc	r19, r25
    5070:	80 91 04 01 	lds	r24, 0x0104
    5074:	90 91 05 01 	lds	r25, 0x0105
    5078:	82 1b       	sub	r24, r18
    507a:	93 0b       	sbc	r25, r19
    507c:	90 93 05 01 	sts	0x0105, r25
    5080:	80 93 04 01 	sts	0x0104, r24
			ig = getInstructionGroup();
    5084:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <getInstructionGroup>
			tmpPtr = dataPtr;
			ig = getInstructionGroup();
			dataPtr = tmpPtr;
		}		
        return ig;      
}
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	08 95       	ret
		
		else 
		{ 
			const char *tmpPtr;
			if (currentEffectGroupIndex == 1) {
				dataPtr -= effectGroupSizes[currentEffectGroupIndex -1];
    508e:	80 91 f5 0c 	lds	r24, 0x0CF5
    5092:	90 91 f6 0c 	lds	r25, 0x0CF6
    5096:	c0 91 04 01 	lds	r28, 0x0104
    509a:	d0 91 05 01 	lds	r29, 0x0105
    509e:	c8 1b       	sub	r28, r24
    50a0:	d9 0b       	sbc	r29, r25
    50a2:	d0 93 05 01 	sts	0x0105, r29
    50a6:	c0 93 04 01 	sts	0x0104, r28
				currentEffectGroupIndex -= 1;
    50aa:	10 92 f4 0c 	sts	0x0CF4, r1
    50ae:	10 92 f3 0c 	sts	0x0CF3, r1
    50b2:	c1 cf       	rjmp	.-126    	; 0x5036 <getPreviousGroup+0x1e>

000050b4 <getLastGroup>:
}



struct instruction_group * getLastGroup() {
	dataPtr -= (effectGroupSizes[currentEffectGroupIndex -1]);
    50b4:	e0 91 f3 0c 	lds	r30, 0x0CF3
    50b8:	f0 91 f4 0c 	lds	r31, 0x0CF4
    50bc:	ee 0f       	add	r30, r30
    50be:	ff 1f       	adc	r31, r31
    50c0:	ed 50       	subi	r30, 0x0D	; 13
    50c2:	f3 4f       	sbci	r31, 0xF3	; 243
    50c4:	20 81       	ld	r18, Z
    50c6:	31 81       	ldd	r19, Z+1	; 0x01
    50c8:	80 91 04 01 	lds	r24, 0x0104
    50cc:	90 91 05 01 	lds	r25, 0x0105
    50d0:	82 1b       	sub	r24, r18
    50d2:	93 0b       	sbc	r25, r19
    50d4:	90 93 05 01 	sts	0x0105, r25
    50d8:	80 93 04 01 	sts	0x0104, r24
	return getInstructionGroup();
    50dc:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <getInstructionGroup>
}
    50e0:	08 95       	ret

000050e2 <getNextGroup>:

struct instruction_group *getNextGroup() {
    50e2:	cf 93       	push	r28
    50e4:	df 93       	push	r29
	const char *beginPtr = dataPtr;
    50e6:	c0 91 04 01 	lds	r28, 0x0104
    50ea:	d0 91 05 01 	lds	r29, 0x0105
	struct instruction_group *ig = getInstructionGroup();
    50ee:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <getInstructionGroup>
    50f2:	ac 01       	movw	r20, r24

	if(ig != 0) {
    50f4:	00 97       	sbiw	r24, 0x00	; 0
    50f6:	d9 f0       	breq	.+54     	; 0x512e <getNextGroup+0x4c>
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
    50f8:	20 91 f3 0c 	lds	r18, 0x0CF3
    50fc:	30 91 f4 0c 	lds	r19, 0x0CF4
    5100:	f9 01       	movw	r30, r18
    5102:	ee 0f       	add	r30, r30
    5104:	ff 1f       	adc	r31, r31
    5106:	eb 50       	subi	r30, 0x0B	; 11
    5108:	f3 4f       	sbci	r31, 0xF3	; 243
    510a:	80 91 04 01 	lds	r24, 0x0104
    510e:	90 91 05 01 	lds	r25, 0x0105
    5112:	8c 1b       	sub	r24, r28
    5114:	9d 0b       	sbc	r25, r29
    5116:	91 83       	std	Z+1, r25	; 0x01
    5118:	80 83       	st	Z, r24
		currentEffectGroupIndex++;
    511a:	2f 5f       	subi	r18, 0xFF	; 255
    511c:	3f 4f       	sbci	r19, 0xFF	; 255
    511e:	30 93 f4 0c 	sts	0x0CF4, r19
    5122:	20 93 f3 0c 	sts	0x0CF3, r18
	}
	else {
		ig = getLastGroup();
	}
	return ig;	
}
    5126:	ca 01       	movw	r24, r20
    5128:	df 91       	pop	r29
    512a:	cf 91       	pop	r28
    512c:	08 95       	ret
	if(ig != 0) {
		effectGroupSizes[currentEffectGroupIndex] = dataPtr - beginPtr;
		currentEffectGroupIndex++;
	}
	else {
		ig = getLastGroup();
    512e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <getLastGroup>
    5132:	ac 01       	movw	r20, r24
    5134:	f8 cf       	rjmp	.-16     	; 0x5126 <getNextGroup+0x44>

00005136 <initDecoder>:
char *sramEffectDataPtr;

unsigned short effectGroupSizes[MAX_GROUP_COUNT]; 
unsigned short currentEffectGroupIndex;
void initDecoder() {
	currentEffectGroupIndex = 0;
    5136:	10 92 f4 0c 	sts	0x0CF4, r1
    513a:	10 92 f3 0c 	sts	0x0CF3, r1
	memset(&effectGroupSizes,0,sizeof(unsigned short) * MAX_GROUP_COUNT);
    513e:	8e ef       	ldi	r24, 0xFE	; 254
    5140:	91 e0       	ldi	r25, 0x01	; 1
    5142:	e5 ef       	ldi	r30, 0xF5	; 245
    5144:	fc e0       	ldi	r31, 0x0C	; 12
    5146:	df 01       	movw	r26, r30
    5148:	9c 01       	movw	r18, r24
    514a:	1d 92       	st	X+, r1
    514c:	21 50       	subi	r18, 0x01	; 1
    514e:	30 40       	sbci	r19, 0x00	; 0
    5150:	e1 f7       	brne	.-8      	; 0x514a <initDecoder+0x14>
}
    5152:	08 95       	ret

00005154 <abs>:
	}
	else {
		returnVal = number;
	}
	return returnVal;
}
    5154:	9c 01       	movw	r18, r24
    5156:	97 fd       	sbrc	r25, 7
    5158:	02 c0       	rjmp	.+4      	; 0x515e <abs+0xa>
    515a:	c9 01       	movw	r24, r18
    515c:	08 95       	ret
    515e:	30 95       	com	r19
    5160:	21 95       	neg	r18
    5162:	3f 4f       	sbci	r19, 0xFF	; 255
    5164:	c9 01       	movw	r24, r18
    5166:	08 95       	ret

00005168 <setRGBColor>:
//FOR EACH LED! THE INNER LEDS INSIDE THE CASING
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    5168:	86 30       	cpi	r24, 0x06	; 6
    516a:	91 05       	cpc	r25, r1
    516c:	24 f0       	brlt	.+8      	; 0x5176 <setRGBColor+0xe>
		if(led == 6) {
    516e:	86 30       	cpi	r24, 0x06	; 6
    5170:	91 05       	cpc	r25, r1
    5172:	89 f0       	breq	.+34     	; 0x5196 <setRGBColor+0x2e>
    5174:	01 97       	sbiw	r24, 0x01	; 1
    5176:	fc 01       	movw	r30, r24
    5178:	ee 0f       	add	r30, r30
    517a:	ff 1f       	adc	r31, r31
    517c:	e8 0f       	add	r30, r24
    517e:	f9 1f       	adc	r31, r25
    5180:	ee 0f       	add	r30, r30
    5182:	ff 1f       	adc	r31, r31
		}
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
    5184:	e5 51       	subi	r30, 0x15	; 21
    5186:	fd 4f       	sbci	r31, 0xFD	; 253
	pwmPtr[0] = red;
    5188:	71 83       	std	Z+1, r23	; 0x01
    518a:	60 83       	st	Z, r22
	pwmPtr[2] = green;
    518c:	55 83       	std	Z+5, r21	; 0x05
    518e:	44 83       	std	Z+4, r20	; 0x04
	pwmPtr[1] = blue;
    5190:	33 83       	std	Z+3, r19	; 0x03
    5192:	22 83       	std	Z+2, r18	; 0x02



}
    5194:	08 95       	ret
//AREN'T IN RGB ORDER!
void setRGBColor(int led, int red, int green, int blue) {
	
	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    5196:	e2 e4       	ldi	r30, 0x42	; 66
    5198:	f0 e0       	ldi	r31, 0x00	; 0
    519a:	f4 cf       	rjmp	.-24     	; 0x5184 <setRGBColor+0x1c>

0000519c <getRGBColor>:



}

void getRGBColor(int led, struct rgbColors* aColorsStruct) {
    519c:	db 01       	movw	r26, r22

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
    519e:	86 30       	cpi	r24, 0x06	; 6
    51a0:	91 05       	cpc	r25, r1
    51a2:	24 f0       	brlt	.+8      	; 0x51ac <getRGBColor+0x10>
		if(led == 6) {
    51a4:	86 30       	cpi	r24, 0x06	; 6
    51a6:	91 05       	cpc	r25, r1
    51a8:	e1 f0       	breq	.+56     	; 0x51e2 <getRGBColor+0x46>
    51aa:	01 97       	sbiw	r24, 0x01	; 1
    51ac:	fc 01       	movw	r30, r24
    51ae:	ee 0f       	add	r30, r30
    51b0:	ff 1f       	adc	r31, r31
    51b2:	e8 0f       	add	r30, r24
    51b4:	f9 1f       	adc	r31, r25
    51b6:	ee 0f       	add	r30, r30
    51b8:	ff 1f       	adc	r31, r31

	



	short *pwmPtr = &ledPWMArray[led * 3];
    51ba:	e5 51       	subi	r30, 0x15	; 21
    51bc:	fd 4f       	sbci	r31, 0xFD	; 253
	aColorsStruct->red = pwmPtr[0];
    51be:	80 81       	ld	r24, Z
    51c0:	91 81       	ldd	r25, Z+1	; 0x01
    51c2:	11 96       	adiw	r26, 0x01	; 1
    51c4:	9c 93       	st	X, r25
    51c6:	8e 93       	st	-X, r24
	aColorsStruct->green = pwmPtr[2];
    51c8:	84 81       	ldd	r24, Z+4	; 0x04
    51ca:	95 81       	ldd	r25, Z+5	; 0x05
    51cc:	13 96       	adiw	r26, 0x03	; 3
    51ce:	9c 93       	st	X, r25
    51d0:	8e 93       	st	-X, r24
    51d2:	12 97       	sbiw	r26, 0x02	; 2
	aColorsStruct->blue = pwmPtr[1];
    51d4:	82 81       	ldd	r24, Z+2	; 0x02
    51d6:	93 81       	ldd	r25, Z+3	; 0x03
    51d8:	15 96       	adiw	r26, 0x05	; 5
    51da:	9c 93       	st	X, r25
    51dc:	8e 93       	st	-X, r24
    51de:	14 97       	sbiw	r26, 0x04	; 4
	
	
	
}
    51e0:	08 95       	ret

void getRGBColor(int led, struct rgbColors* aColorsStruct) {

	//this is used to switch palm and thumb, software patch
	if(led >= 6) {
		if(led == 6) {
    51e2:	e2 e4       	ldi	r30, 0x42	; 66
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	e9 cf       	rjmp	.-46     	; 0x51ba <getRGBColor+0x1e>

000051e8 <displayColors>:
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    51e8:	43 e2       	ldi	r20, 0x23	; 35
    51ea:	50 e0       	ldi	r21, 0x00	; 0
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
	
		brightness = ledPWMArray[pwmIndex];
    51ec:	fa 01       	movw	r30, r20
    51ee:	ee 0f       	add	r30, r30
    51f0:	ff 1f       	adc	r31, r31
    51f2:	e5 51       	subi	r30, 0x15	; 21
    51f4:	fd 4f       	sbci	r31, 0xFD	; 253
    51f6:	01 90       	ld	r0, Z+
    51f8:	f0 81       	ld	r31, Z
    51fa:	e0 2d       	mov	r30, r0

		//we want the high brightness for the bits
		brightness = brightness << 4;
    51fc:	e2 95       	swap	r30
    51fe:	f2 95       	swap	r31
    5200:	f0 7f       	andi	r31, 0xF0	; 240
    5202:	fe 27       	eor	r31, r30
    5204:	e0 7f       	andi	r30, 0xF0	; 240
    5206:	fe 27       	eor	r31, r30
    5208:	2c e0       	ldi	r18, 0x0C	; 12
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	08 c0       	rjmp	.+16     	; 0x521e <displayColors+0x36>
	 
			if(outputBit == 1 ) {
				PINHIGH(BDI);
			}
			else {
				PINLOW(BDI);
    520e:	8b b3       	in	r24, 0x1b	; 27
    5210:	1b ba       	out	0x1b, r1	; 27
			}

	
			//generate clock signal
			PINHIGH(BCI);
    5212:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    5214:	8b b3       	in	r24, 0x1b	; 27
    5216:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    5218:	21 15       	cp	r18, r1
    521a:	31 05       	cpc	r19, r1
    521c:	91 f0       	breq	.+36     	; 0x5242 <displayColors+0x5a>

		
			//get the brightness bit
			unsigned char outputBit  = (brightness >> (curBrightnessBit - 1)) & 0x1;
    521e:	21 50       	subi	r18, 0x01	; 1
    5220:	30 40       	sbci	r19, 0x00	; 0

	 
			if(outputBit == 1 ) {
    5222:	cf 01       	movw	r24, r30
    5224:	02 2e       	mov	r0, r18
    5226:	02 c0       	rjmp	.+4      	; 0x522c <displayColors+0x44>
    5228:	95 95       	asr	r25
    522a:	87 95       	ror	r24
    522c:	0a 94       	dec	r0
    522e:	e2 f7       	brpl	.-8      	; 0x5228 <displayColors+0x40>
    5230:	80 ff       	sbrs	r24, 0
    5232:	ed cf       	rjmp	.-38     	; 0x520e <displayColors+0x26>
				PINHIGH(BDI);
    5234:	d8 9a       	sbi	0x1b, 0	; 27
				PINLOW(BDI);
			}

	
			//generate clock signal
			PINHIGH(BCI);
    5236:	db 9a       	sbi	0x1b, 3	; 27

			PINLOW(BCI);
    5238:	8b b3       	in	r24, 0x1b	; 27
    523a:	1b ba       	out	0x1b, r1	; 27
		brightness = brightness << 4;
		if(brightness & 0x08) {
			brightness |= 0x0E;
		}

		for(curBrightnessBit=12; curBrightnessBit > 0; curBrightnessBit--) {
    523c:	21 15       	cp	r18, r1
    523e:	31 05       	cpc	r19, r1
    5240:	71 f7       	brne	.-36     	; 0x521e <displayColors+0x36>

			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
    5242:	42 31       	cpi	r20, 0x12	; 18
    5244:	51 05       	cpc	r21, r1
    5246:	41 f0       	breq	.+16     	; 0x5258 <displayColors+0x70>
	int brightness;
	int pwmCount;
	int curBrightnessBit;

	pwmCount = LEDCOUNT * 3;
	for(pwmIndex = pwmCount -1;pwmIndex >= 0; pwmIndex --) {
    5248:	41 50       	subi	r20, 0x01	; 1
    524a:	50 40       	sbci	r21, 0x00	; 0
    524c:	57 ff       	sbrs	r21, 7
    524e:	ce cf       	rjmp	.-100    	; 0x51ec <displayColors+0x4>
			}
		}
	}
	//move shift register contents to LED
	//pwm contents
	PINHIGH(BLI);
    5250:	d9 9a       	sbi	0x1b, 1	; 27
	PINLOW(BLI);
    5252:	8b b3       	in	r24, 0x1b	; 27
    5254:	1b ba       	out	0x1b, r1	; 27
}
    5256:	08 95       	ret
			PINLOW(BCI);
		}
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
    5258:	8b b3       	in	r24, 0x1b	; 27
    525a:	1b ba       	out	0x1b, r1	; 27
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e0       	ldi	r25, 0x00	; 0
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
				PINHIGH(BCI);
    5260:	db 9a       	sbi	0x1b, 3	; 27
				PINLOW(BCI);
    5262:	2b b3       	in	r18, 0x1b	; 27
    5264:	1b ba       	out	0x1b, r1	; 27
		
		//We cleaned up the octrobright a bit, so we skipped a few connections
		if(pwmIndex == 18) {
			PINLOW(BDI);
			//for(int i =0; i < 105; i++) {
			for(int i =0; i < 72; i++) {
    5266:	01 96       	adiw	r24, 0x01	; 1
    5268:	88 34       	cpi	r24, 0x48	; 72
    526a:	91 05       	cpc	r25, r1
    526c:	c9 f7       	brne	.-14     	; 0x5260 <displayColors+0x78>
	
}

//outputs colors for leds using octobrite
//outputs the appropiate colors for each led
void displayColors() {
    526e:	41 e1       	ldi	r20, 0x11	; 17
    5270:	50 e0       	ldi	r21, 0x00	; 0
    5272:	bc cf       	rjmp	.-136    	; 0x51ec <displayColors+0x4>

00005274 <red60BPM>:
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    5274:	10 92 ec 02 	sts	0x02EC, r1
    5278:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    527c:	10 92 f0 02 	sts	0x02F0, r1
    5280:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    5284:	10 92 ee 02 	sts	0x02EE, r1
    5288:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    528c:	10 92 f2 02 	sts	0x02F2, r1
    5290:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    5294:	10 92 f6 02 	sts	0x02F6, r1
    5298:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    529c:	10 92 f4 02 	sts	0x02F4, r1
    52a0:	10 92 f3 02 	sts	0x02F3, r1
void red60BPM() {
	int counter = 0;

	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	displayColors();
    52a4:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    52a8:	84 e6       	ldi	r24, 0x64	; 100
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	90 93 ec 02 	sts	0x02EC, r25
    52b0:	80 93 eb 02 	sts	0x02EB, r24
	pwmPtr[2] = green;
    52b4:	10 92 f0 02 	sts	0x02F0, r1
    52b8:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    52bc:	10 92 ee 02 	sts	0x02EE, r1
    52c0:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    52c4:	90 93 f2 02 	sts	0x02F2, r25
    52c8:	80 93 f1 02 	sts	0x02F1, r24
	pwmPtr[2] = green;
    52cc:	10 92 f6 02 	sts	0x02F6, r1
    52d0:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    52d4:	10 92 f4 02 	sts	0x02F4, r1
    52d8:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    52dc:	90 91 06 01 	lds	r25, 0x0106
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    52e4:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    52e6:	86 b7       	in	r24, 0x36	; 54
    52e8:	89 23       	and	r24, r25
    52ea:	e9 f3       	breq	.-6      	; 0x52e6 <red60BPM+0x72>
	} 
	TIFR = (1 << OCF1A);
    52ec:	46 bf       	out	0x36, r20	; 54

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
		waitForTimer();
		counter++;
    52ee:	2f 5f       	subi	r18, 0xFF	; 255
    52f0:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);
	displayColors();

	setRGBColor(0,100,0,0);
	setRGBColor(1,100,0,0);
	while(counter < 50) {
    52f2:	22 33       	cpi	r18, 0x32	; 50
    52f4:	31 05       	cpc	r19, r1
    52f6:	b9 f7       	brne	.-18     	; 0x52e6 <red60BPM+0x72>
		waitForTimer();
		counter++;
	}
	displayColors();
    52f8:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <displayColors>
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    52fc:	10 92 ec 02 	sts	0x02EC, r1
    5300:	10 92 eb 02 	sts	0x02EB, r1
	pwmPtr[2] = green;
    5304:	10 92 f0 02 	sts	0x02F0, r1
    5308:	10 92 ef 02 	sts	0x02EF, r1
	pwmPtr[1] = blue;
    530c:	10 92 ee 02 	sts	0x02EE, r1
    5310:	10 92 ed 02 	sts	0x02ED, r1
	}


	
	short *pwmPtr = &ledPWMArray[led * 3];
	pwmPtr[0] = red;
    5314:	10 92 f2 02 	sts	0x02F2, r1
    5318:	10 92 f1 02 	sts	0x02F1, r1
	pwmPtr[2] = green;
    531c:	10 92 f6 02 	sts	0x02F6, r1
    5320:	10 92 f5 02 	sts	0x02F5, r1
	pwmPtr[1] = blue;
    5324:	10 92 f4 02 	sts	0x02F4, r1
    5328:	10 92 f3 02 	sts	0x02F3, r1
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    532c:	90 91 06 01 	lds	r25, 0x0106
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	30 e0       	ldi	r19, 0x00	; 0
	} 
	TIFR = (1 << OCF1A);
    5334:	40 e1       	ldi	r20, 0x10	; 16
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    5336:	86 b7       	in	r24, 0x36	; 54
    5338:	89 23       	and	r24, r25
    533a:	e9 f3       	breq	.-6      	; 0x5336 <red60BPM+0xc2>
	} 
	TIFR = (1 << OCF1A);
    533c:	46 bf       	out	0x36, r20	; 54
	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
		waitForTimer();
		counter++;
    533e:	2f 5f       	subi	r18, 0xFF	; 255
    5340:	3f 4f       	sbci	r19, 0xFF	; 255
	setRGBColor(1,0,0,0);	

	counter = 0;
	setRGBColor(0,0,0,0);
	setRGBColor(1,0,0,0);
	while(counter < 50 ) {
    5342:	22 33       	cpi	r18, 0x32	; 50
    5344:	31 05       	cpc	r19, r1
    5346:	b9 f7       	brne	.-18     	; 0x5336 <red60BPM+0xc2>
		waitForTimer();
		counter++;
	}
	displayColors();
    5348:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <displayColors>
}
    534c:	08 95       	ret

0000534e <waitForTimer>:
void waitForTimer()  {
	//wait for 2ms to pass and then 
	//output led data
	//this flag is 0 when no match 
	//occured
	while(!(outputCompareBitmask & TIFR)) {
    534e:	90 91 06 01 	lds	r25, 0x0106
    5352:	86 b7       	in	r24, 0x36	; 54
    5354:	89 23       	and	r24, r25
    5356:	e9 f3       	breq	.-6      	; 0x5352 <waitForTimer+0x4>
	} 
	TIFR = (1 << OCF1A);
    5358:	80 e1       	ldi	r24, 0x10	; 16
    535a:	86 bf       	out	0x36, r24	; 54
}
    535c:	08 95       	ret

0000535e <copy_data>:

void copy_data(char *dest, char *src, short length) {
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	ec 01       	movw	r28, r24
	short i;
	for(i = 0; i < length; i ++){
    5364:	14 16       	cp	r1, r20
    5366:	15 06       	cpc	r1, r21
    5368:	7c f4       	brge	.+30     	; 0x5388 <copy_data+0x2a>
    536a:	20 e0       	ldi	r18, 0x00	; 0
    536c:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    536e:	fe 01       	movw	r30, r28
    5370:	e2 0f       	add	r30, r18
    5372:	f3 1f       	adc	r31, r19
    5374:	db 01       	movw	r26, r22
    5376:	a2 0f       	add	r26, r18
    5378:	b3 1f       	adc	r27, r19
    537a:	8c 91       	ld	r24, X
    537c:	80 83       	st	Z, r24
	TIFR = (1 << OCF1A);
}

void copy_data(char *dest, char *src, short length) {
	short i;
	for(i = 0; i < length; i ++){
    537e:	2f 5f       	subi	r18, 0xFF	; 255
    5380:	3f 4f       	sbci	r19, 0xFF	; 255
    5382:	24 17       	cp	r18, r20
    5384:	35 07       	cpc	r19, r21
    5386:	9c f3       	brlt	.-26     	; 0x536e <copy_data+0x10>
		dest[i] = src[i];
	}
}
    5388:	df 91       	pop	r29
    538a:	cf 91       	pop	r28
    538c:	08 95       	ret

0000538e <copy_short_data>:


void copy_short_data(short *dest, short *src, short count) {
    538e:	fc 01       	movw	r30, r24
	short i;
	for(i = 0; i < count; i ++){
    5390:	14 16       	cp	r1, r20
    5392:	15 06       	cpc	r1, r21
    5394:	64 f4       	brge	.+24     	; 0x53ae <copy_short_data+0x20>
    5396:	db 01       	movw	r26, r22
    5398:	20 e0       	ldi	r18, 0x00	; 0
    539a:	30 e0       	ldi	r19, 0x00	; 0
		dest[i] = src[i];
    539c:	8d 91       	ld	r24, X+
    539e:	9d 91       	ld	r25, X+
    53a0:	81 93       	st	Z+, r24
    53a2:	91 93       	st	Z+, r25
}


void copy_short_data(short *dest, short *src, short count) {
	short i;
	for(i = 0; i < count; i ++){
    53a4:	2f 5f       	subi	r18, 0xFF	; 255
    53a6:	3f 4f       	sbci	r19, 0xFF	; 255
    53a8:	24 17       	cp	r18, r20
    53aa:	35 07       	cpc	r19, r21
    53ac:	bc f3       	brlt	.-18     	; 0x539c <copy_short_data+0xe>
    53ae:	08 95       	ret

000053b0 <_fpadd_parts>:
    53b0:	a0 e0       	ldi	r26, 0x00	; 0
    53b2:	b0 e0       	ldi	r27, 0x00	; 0
    53b4:	ee ed       	ldi	r30, 0xDE	; 222
    53b6:	f9 e2       	ldi	r31, 0x29	; 41
    53b8:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__prologue_saves__>
    53bc:	dc 01       	movw	r26, r24
    53be:	2b 01       	movw	r4, r22
    53c0:	fa 01       	movw	r30, r20
    53c2:	9c 91       	ld	r25, X
    53c4:	92 30       	cpi	r25, 0x02	; 2
    53c6:	08 f4       	brcc	.+2      	; 0x53ca <_fpadd_parts+0x1a>
    53c8:	39 c1       	rjmp	.+626    	; 0x563c <_fpadd_parts+0x28c>
    53ca:	eb 01       	movw	r28, r22
    53cc:	88 81       	ld	r24, Y
    53ce:	82 30       	cpi	r24, 0x02	; 2
    53d0:	08 f4       	brcc	.+2      	; 0x53d4 <_fpadd_parts+0x24>
    53d2:	33 c1       	rjmp	.+614    	; 0x563a <_fpadd_parts+0x28a>
    53d4:	94 30       	cpi	r25, 0x04	; 4
    53d6:	69 f4       	brne	.+26     	; 0x53f2 <_fpadd_parts+0x42>
    53d8:	84 30       	cpi	r24, 0x04	; 4
    53da:	09 f0       	breq	.+2      	; 0x53de <_fpadd_parts+0x2e>
    53dc:	2f c1       	rjmp	.+606    	; 0x563c <_fpadd_parts+0x28c>
    53de:	11 96       	adiw	r26, 0x01	; 1
    53e0:	9c 91       	ld	r25, X
    53e2:	11 97       	sbiw	r26, 0x01	; 1
    53e4:	89 81       	ldd	r24, Y+1	; 0x01
    53e6:	98 17       	cp	r25, r24
    53e8:	09 f4       	brne	.+2      	; 0x53ec <_fpadd_parts+0x3c>
    53ea:	28 c1       	rjmp	.+592    	; 0x563c <_fpadd_parts+0x28c>
    53ec:	a7 e0       	ldi	r26, 0x07	; 7
    53ee:	b1 e0       	ldi	r27, 0x01	; 1
    53f0:	25 c1       	rjmp	.+586    	; 0x563c <_fpadd_parts+0x28c>
    53f2:	84 30       	cpi	r24, 0x04	; 4
    53f4:	09 f4       	brne	.+2      	; 0x53f8 <_fpadd_parts+0x48>
    53f6:	21 c1       	rjmp	.+578    	; 0x563a <_fpadd_parts+0x28a>
    53f8:	82 30       	cpi	r24, 0x02	; 2
    53fa:	a9 f4       	brne	.+42     	; 0x5426 <_fpadd_parts+0x76>
    53fc:	92 30       	cpi	r25, 0x02	; 2
    53fe:	09 f0       	breq	.+2      	; 0x5402 <_fpadd_parts+0x52>
    5400:	1d c1       	rjmp	.+570    	; 0x563c <_fpadd_parts+0x28c>
    5402:	9a 01       	movw	r18, r20
    5404:	ad 01       	movw	r20, r26
    5406:	88 e0       	ldi	r24, 0x08	; 8
    5408:	ea 01       	movw	r28, r20
    540a:	09 90       	ld	r0, Y+
    540c:	ae 01       	movw	r20, r28
    540e:	e9 01       	movw	r28, r18
    5410:	09 92       	st	Y+, r0
    5412:	9e 01       	movw	r18, r28
    5414:	81 50       	subi	r24, 0x01	; 1
    5416:	c1 f7       	brne	.-16     	; 0x5408 <_fpadd_parts+0x58>
    5418:	e2 01       	movw	r28, r4
    541a:	89 81       	ldd	r24, Y+1	; 0x01
    541c:	11 96       	adiw	r26, 0x01	; 1
    541e:	9c 91       	ld	r25, X
    5420:	89 23       	and	r24, r25
    5422:	81 83       	std	Z+1, r24	; 0x01
    5424:	08 c1       	rjmp	.+528    	; 0x5636 <_fpadd_parts+0x286>
    5426:	92 30       	cpi	r25, 0x02	; 2
    5428:	09 f4       	brne	.+2      	; 0x542c <_fpadd_parts+0x7c>
    542a:	07 c1       	rjmp	.+526    	; 0x563a <_fpadd_parts+0x28a>
    542c:	12 96       	adiw	r26, 0x02	; 2
    542e:	2d 90       	ld	r2, X+
    5430:	3c 90       	ld	r3, X
    5432:	13 97       	sbiw	r26, 0x03	; 3
    5434:	eb 01       	movw	r28, r22
    5436:	8a 81       	ldd	r24, Y+2	; 0x02
    5438:	9b 81       	ldd	r25, Y+3	; 0x03
    543a:	14 96       	adiw	r26, 0x04	; 4
    543c:	ad 90       	ld	r10, X+
    543e:	bd 90       	ld	r11, X+
    5440:	cd 90       	ld	r12, X+
    5442:	dc 90       	ld	r13, X
    5444:	17 97       	sbiw	r26, 0x07	; 7
    5446:	ec 80       	ldd	r14, Y+4	; 0x04
    5448:	fd 80       	ldd	r15, Y+5	; 0x05
    544a:	0e 81       	ldd	r16, Y+6	; 0x06
    544c:	1f 81       	ldd	r17, Y+7	; 0x07
    544e:	91 01       	movw	r18, r2
    5450:	28 1b       	sub	r18, r24
    5452:	39 0b       	sbc	r19, r25
    5454:	b9 01       	movw	r22, r18
    5456:	37 ff       	sbrs	r19, 7
    5458:	04 c0       	rjmp	.+8      	; 0x5462 <_fpadd_parts+0xb2>
    545a:	66 27       	eor	r22, r22
    545c:	77 27       	eor	r23, r23
    545e:	62 1b       	sub	r22, r18
    5460:	73 0b       	sbc	r23, r19
    5462:	60 32       	cpi	r22, 0x20	; 32
    5464:	71 05       	cpc	r23, r1
    5466:	0c f0       	brlt	.+2      	; 0x546a <_fpadd_parts+0xba>
    5468:	61 c0       	rjmp	.+194    	; 0x552c <_fpadd_parts+0x17c>
    546a:	12 16       	cp	r1, r18
    546c:	13 06       	cpc	r1, r19
    546e:	6c f5       	brge	.+90     	; 0x54ca <_fpadd_parts+0x11a>
    5470:	37 01       	movw	r6, r14
    5472:	48 01       	movw	r8, r16
    5474:	06 2e       	mov	r0, r22
    5476:	04 c0       	rjmp	.+8      	; 0x5480 <_fpadd_parts+0xd0>
    5478:	96 94       	lsr	r9
    547a:	87 94       	ror	r8
    547c:	77 94       	ror	r7
    547e:	67 94       	ror	r6
    5480:	0a 94       	dec	r0
    5482:	d2 f7       	brpl	.-12     	; 0x5478 <_fpadd_parts+0xc8>
    5484:	21 e0       	ldi	r18, 0x01	; 1
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 e0       	ldi	r20, 0x00	; 0
    548a:	50 e0       	ldi	r21, 0x00	; 0
    548c:	04 c0       	rjmp	.+8      	; 0x5496 <_fpadd_parts+0xe6>
    548e:	22 0f       	add	r18, r18
    5490:	33 1f       	adc	r19, r19
    5492:	44 1f       	adc	r20, r20
    5494:	55 1f       	adc	r21, r21
    5496:	6a 95       	dec	r22
    5498:	d2 f7       	brpl	.-12     	; 0x548e <_fpadd_parts+0xde>
    549a:	21 50       	subi	r18, 0x01	; 1
    549c:	30 40       	sbci	r19, 0x00	; 0
    549e:	40 40       	sbci	r20, 0x00	; 0
    54a0:	50 40       	sbci	r21, 0x00	; 0
    54a2:	2e 21       	and	r18, r14
    54a4:	3f 21       	and	r19, r15
    54a6:	40 23       	and	r20, r16
    54a8:	51 23       	and	r21, r17
    54aa:	21 15       	cp	r18, r1
    54ac:	31 05       	cpc	r19, r1
    54ae:	41 05       	cpc	r20, r1
    54b0:	51 05       	cpc	r21, r1
    54b2:	21 f0       	breq	.+8      	; 0x54bc <_fpadd_parts+0x10c>
    54b4:	21 e0       	ldi	r18, 0x01	; 1
    54b6:	30 e0       	ldi	r19, 0x00	; 0
    54b8:	40 e0       	ldi	r20, 0x00	; 0
    54ba:	50 e0       	ldi	r21, 0x00	; 0
    54bc:	79 01       	movw	r14, r18
    54be:	8a 01       	movw	r16, r20
    54c0:	e6 28       	or	r14, r6
    54c2:	f7 28       	or	r15, r7
    54c4:	08 29       	or	r16, r8
    54c6:	19 29       	or	r17, r9
    54c8:	3c c0       	rjmp	.+120    	; 0x5542 <_fpadd_parts+0x192>
    54ca:	23 2b       	or	r18, r19
    54cc:	d1 f1       	breq	.+116    	; 0x5542 <_fpadd_parts+0x192>
    54ce:	26 0e       	add	r2, r22
    54d0:	37 1e       	adc	r3, r23
    54d2:	35 01       	movw	r6, r10
    54d4:	46 01       	movw	r8, r12
    54d6:	06 2e       	mov	r0, r22
    54d8:	04 c0       	rjmp	.+8      	; 0x54e2 <_fpadd_parts+0x132>
    54da:	96 94       	lsr	r9
    54dc:	87 94       	ror	r8
    54de:	77 94       	ror	r7
    54e0:	67 94       	ror	r6
    54e2:	0a 94       	dec	r0
    54e4:	d2 f7       	brpl	.-12     	; 0x54da <_fpadd_parts+0x12a>
    54e6:	21 e0       	ldi	r18, 0x01	; 1
    54e8:	30 e0       	ldi	r19, 0x00	; 0
    54ea:	40 e0       	ldi	r20, 0x00	; 0
    54ec:	50 e0       	ldi	r21, 0x00	; 0
    54ee:	04 c0       	rjmp	.+8      	; 0x54f8 <_fpadd_parts+0x148>
    54f0:	22 0f       	add	r18, r18
    54f2:	33 1f       	adc	r19, r19
    54f4:	44 1f       	adc	r20, r20
    54f6:	55 1f       	adc	r21, r21
    54f8:	6a 95       	dec	r22
    54fa:	d2 f7       	brpl	.-12     	; 0x54f0 <_fpadd_parts+0x140>
    54fc:	21 50       	subi	r18, 0x01	; 1
    54fe:	30 40       	sbci	r19, 0x00	; 0
    5500:	40 40       	sbci	r20, 0x00	; 0
    5502:	50 40       	sbci	r21, 0x00	; 0
    5504:	2a 21       	and	r18, r10
    5506:	3b 21       	and	r19, r11
    5508:	4c 21       	and	r20, r12
    550a:	5d 21       	and	r21, r13
    550c:	21 15       	cp	r18, r1
    550e:	31 05       	cpc	r19, r1
    5510:	41 05       	cpc	r20, r1
    5512:	51 05       	cpc	r21, r1
    5514:	21 f0       	breq	.+8      	; 0x551e <_fpadd_parts+0x16e>
    5516:	21 e0       	ldi	r18, 0x01	; 1
    5518:	30 e0       	ldi	r19, 0x00	; 0
    551a:	40 e0       	ldi	r20, 0x00	; 0
    551c:	50 e0       	ldi	r21, 0x00	; 0
    551e:	59 01       	movw	r10, r18
    5520:	6a 01       	movw	r12, r20
    5522:	a6 28       	or	r10, r6
    5524:	b7 28       	or	r11, r7
    5526:	c8 28       	or	r12, r8
    5528:	d9 28       	or	r13, r9
    552a:	0b c0       	rjmp	.+22     	; 0x5542 <_fpadd_parts+0x192>
    552c:	82 15       	cp	r24, r2
    552e:	93 05       	cpc	r25, r3
    5530:	2c f0       	brlt	.+10     	; 0x553c <_fpadd_parts+0x18c>
    5532:	1c 01       	movw	r2, r24
    5534:	aa 24       	eor	r10, r10
    5536:	bb 24       	eor	r11, r11
    5538:	65 01       	movw	r12, r10
    553a:	03 c0       	rjmp	.+6      	; 0x5542 <_fpadd_parts+0x192>
    553c:	ee 24       	eor	r14, r14
    553e:	ff 24       	eor	r15, r15
    5540:	87 01       	movw	r16, r14
    5542:	11 96       	adiw	r26, 0x01	; 1
    5544:	9c 91       	ld	r25, X
    5546:	d2 01       	movw	r26, r4
    5548:	11 96       	adiw	r26, 0x01	; 1
    554a:	8c 91       	ld	r24, X
    554c:	98 17       	cp	r25, r24
    554e:	09 f4       	brne	.+2      	; 0x5552 <_fpadd_parts+0x1a2>
    5550:	45 c0       	rjmp	.+138    	; 0x55dc <_fpadd_parts+0x22c>
    5552:	99 23       	and	r25, r25
    5554:	39 f0       	breq	.+14     	; 0x5564 <_fpadd_parts+0x1b4>
    5556:	a8 01       	movw	r20, r16
    5558:	97 01       	movw	r18, r14
    555a:	2a 19       	sub	r18, r10
    555c:	3b 09       	sbc	r19, r11
    555e:	4c 09       	sbc	r20, r12
    5560:	5d 09       	sbc	r21, r13
    5562:	06 c0       	rjmp	.+12     	; 0x5570 <_fpadd_parts+0x1c0>
    5564:	a6 01       	movw	r20, r12
    5566:	95 01       	movw	r18, r10
    5568:	2e 19       	sub	r18, r14
    556a:	3f 09       	sbc	r19, r15
    556c:	40 0b       	sbc	r20, r16
    556e:	51 0b       	sbc	r21, r17
    5570:	57 fd       	sbrc	r21, 7
    5572:	08 c0       	rjmp	.+16     	; 0x5584 <_fpadd_parts+0x1d4>
    5574:	11 82       	std	Z+1, r1	; 0x01
    5576:	33 82       	std	Z+3, r3	; 0x03
    5578:	22 82       	std	Z+2, r2	; 0x02
    557a:	24 83       	std	Z+4, r18	; 0x04
    557c:	35 83       	std	Z+5, r19	; 0x05
    557e:	46 83       	std	Z+6, r20	; 0x06
    5580:	57 83       	std	Z+7, r21	; 0x07
    5582:	1d c0       	rjmp	.+58     	; 0x55be <_fpadd_parts+0x20e>
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	81 83       	std	Z+1, r24	; 0x01
    5588:	33 82       	std	Z+3, r3	; 0x03
    558a:	22 82       	std	Z+2, r2	; 0x02
    558c:	88 27       	eor	r24, r24
    558e:	99 27       	eor	r25, r25
    5590:	dc 01       	movw	r26, r24
    5592:	82 1b       	sub	r24, r18
    5594:	93 0b       	sbc	r25, r19
    5596:	a4 0b       	sbc	r26, r20
    5598:	b5 0b       	sbc	r27, r21
    559a:	84 83       	std	Z+4, r24	; 0x04
    559c:	95 83       	std	Z+5, r25	; 0x05
    559e:	a6 83       	std	Z+6, r26	; 0x06
    55a0:	b7 83       	std	Z+7, r27	; 0x07
    55a2:	0d c0       	rjmp	.+26     	; 0x55be <_fpadd_parts+0x20e>
    55a4:	22 0f       	add	r18, r18
    55a6:	33 1f       	adc	r19, r19
    55a8:	44 1f       	adc	r20, r20
    55aa:	55 1f       	adc	r21, r21
    55ac:	24 83       	std	Z+4, r18	; 0x04
    55ae:	35 83       	std	Z+5, r19	; 0x05
    55b0:	46 83       	std	Z+6, r20	; 0x06
    55b2:	57 83       	std	Z+7, r21	; 0x07
    55b4:	82 81       	ldd	r24, Z+2	; 0x02
    55b6:	93 81       	ldd	r25, Z+3	; 0x03
    55b8:	01 97       	sbiw	r24, 0x01	; 1
    55ba:	93 83       	std	Z+3, r25	; 0x03
    55bc:	82 83       	std	Z+2, r24	; 0x02
    55be:	24 81       	ldd	r18, Z+4	; 0x04
    55c0:	35 81       	ldd	r19, Z+5	; 0x05
    55c2:	46 81       	ldd	r20, Z+6	; 0x06
    55c4:	57 81       	ldd	r21, Z+7	; 0x07
    55c6:	da 01       	movw	r26, r20
    55c8:	c9 01       	movw	r24, r18
    55ca:	01 97       	sbiw	r24, 0x01	; 1
    55cc:	a1 09       	sbc	r26, r1
    55ce:	b1 09       	sbc	r27, r1
    55d0:	8f 5f       	subi	r24, 0xFF	; 255
    55d2:	9f 4f       	sbci	r25, 0xFF	; 255
    55d4:	af 4f       	sbci	r26, 0xFF	; 255
    55d6:	bf 43       	sbci	r27, 0x3F	; 63
    55d8:	28 f3       	brcs	.-54     	; 0x55a4 <_fpadd_parts+0x1f4>
    55da:	0b c0       	rjmp	.+22     	; 0x55f2 <_fpadd_parts+0x242>
    55dc:	91 83       	std	Z+1, r25	; 0x01
    55de:	33 82       	std	Z+3, r3	; 0x03
    55e0:	22 82       	std	Z+2, r2	; 0x02
    55e2:	ea 0c       	add	r14, r10
    55e4:	fb 1c       	adc	r15, r11
    55e6:	0c 1d       	adc	r16, r12
    55e8:	1d 1d       	adc	r17, r13
    55ea:	e4 82       	std	Z+4, r14	; 0x04
    55ec:	f5 82       	std	Z+5, r15	; 0x05
    55ee:	06 83       	std	Z+6, r16	; 0x06
    55f0:	17 83       	std	Z+7, r17	; 0x07
    55f2:	83 e0       	ldi	r24, 0x03	; 3
    55f4:	80 83       	st	Z, r24
    55f6:	24 81       	ldd	r18, Z+4	; 0x04
    55f8:	35 81       	ldd	r19, Z+5	; 0x05
    55fa:	46 81       	ldd	r20, Z+6	; 0x06
    55fc:	57 81       	ldd	r21, Z+7	; 0x07
    55fe:	57 ff       	sbrs	r21, 7
    5600:	1a c0       	rjmp	.+52     	; 0x5636 <_fpadd_parts+0x286>
    5602:	c9 01       	movw	r24, r18
    5604:	aa 27       	eor	r26, r26
    5606:	97 fd       	sbrc	r25, 7
    5608:	a0 95       	com	r26
    560a:	ba 2f       	mov	r27, r26
    560c:	81 70       	andi	r24, 0x01	; 1
    560e:	90 70       	andi	r25, 0x00	; 0
    5610:	a0 70       	andi	r26, 0x00	; 0
    5612:	b0 70       	andi	r27, 0x00	; 0
    5614:	56 95       	lsr	r21
    5616:	47 95       	ror	r20
    5618:	37 95       	ror	r19
    561a:	27 95       	ror	r18
    561c:	82 2b       	or	r24, r18
    561e:	93 2b       	or	r25, r19
    5620:	a4 2b       	or	r26, r20
    5622:	b5 2b       	or	r27, r21
    5624:	84 83       	std	Z+4, r24	; 0x04
    5626:	95 83       	std	Z+5, r25	; 0x05
    5628:	a6 83       	std	Z+6, r26	; 0x06
    562a:	b7 83       	std	Z+7, r27	; 0x07
    562c:	82 81       	ldd	r24, Z+2	; 0x02
    562e:	93 81       	ldd	r25, Z+3	; 0x03
    5630:	01 96       	adiw	r24, 0x01	; 1
    5632:	93 83       	std	Z+3, r25	; 0x03
    5634:	82 83       	std	Z+2, r24	; 0x02
    5636:	df 01       	movw	r26, r30
    5638:	01 c0       	rjmp	.+2      	; 0x563c <_fpadd_parts+0x28c>
    563a:	d2 01       	movw	r26, r4
    563c:	cd 01       	movw	r24, r26
    563e:	cd b7       	in	r28, 0x3d	; 61
    5640:	de b7       	in	r29, 0x3e	; 62
    5642:	e2 e1       	ldi	r30, 0x12	; 18
    5644:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <__epilogue_restores__>

00005648 <__subsf3>:
    5648:	a0 e2       	ldi	r26, 0x20	; 32
    564a:	b0 e0       	ldi	r27, 0x00	; 0
    564c:	ea e2       	ldi	r30, 0x2A	; 42
    564e:	fb e2       	ldi	r31, 0x2B	; 43
    5650:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x18>
    5654:	69 83       	std	Y+1, r22	; 0x01
    5656:	7a 83       	std	Y+2, r23	; 0x02
    5658:	8b 83       	std	Y+3, r24	; 0x03
    565a:	9c 83       	std	Y+4, r25	; 0x04
    565c:	2d 83       	std	Y+5, r18	; 0x05
    565e:	3e 83       	std	Y+6, r19	; 0x06
    5660:	4f 83       	std	Y+7, r20	; 0x07
    5662:	58 87       	std	Y+8, r21	; 0x08
    5664:	e9 e0       	ldi	r30, 0x09	; 9
    5666:	ee 2e       	mov	r14, r30
    5668:	f1 2c       	mov	r15, r1
    566a:	ec 0e       	add	r14, r28
    566c:	fd 1e       	adc	r15, r29
    566e:	ce 01       	movw	r24, r28
    5670:	01 96       	adiw	r24, 0x01	; 1
    5672:	b7 01       	movw	r22, r14
    5674:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    5678:	8e 01       	movw	r16, r28
    567a:	0f 5e       	subi	r16, 0xEF	; 239
    567c:	1f 4f       	sbci	r17, 0xFF	; 255
    567e:	ce 01       	movw	r24, r28
    5680:	05 96       	adiw	r24, 0x05	; 5
    5682:	b8 01       	movw	r22, r16
    5684:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    5688:	8a 89       	ldd	r24, Y+18	; 0x12
    568a:	91 e0       	ldi	r25, 0x01	; 1
    568c:	89 27       	eor	r24, r25
    568e:	8a 8b       	std	Y+18, r24	; 0x12
    5690:	c7 01       	movw	r24, r14
    5692:	b8 01       	movw	r22, r16
    5694:	ae 01       	movw	r20, r28
    5696:	47 5e       	subi	r20, 0xE7	; 231
    5698:	5f 4f       	sbci	r21, 0xFF	; 255
    569a:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <_fpadd_parts>
    569e:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__pack_f>
    56a2:	a0 96       	adiw	r28, 0x20	; 32
    56a4:	e6 e0       	ldi	r30, 0x06	; 6
    56a6:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x18>

000056aa <__addsf3>:
    56aa:	a0 e2       	ldi	r26, 0x20	; 32
    56ac:	b0 e0       	ldi	r27, 0x00	; 0
    56ae:	eb e5       	ldi	r30, 0x5B	; 91
    56b0:	fb e2       	ldi	r31, 0x2B	; 43
    56b2:	0c 94 82 2f 	jmp	0x5f04	; 0x5f04 <__prologue_saves__+0x18>
    56b6:	69 83       	std	Y+1, r22	; 0x01
    56b8:	7a 83       	std	Y+2, r23	; 0x02
    56ba:	8b 83       	std	Y+3, r24	; 0x03
    56bc:	9c 83       	std	Y+4, r25	; 0x04
    56be:	2d 83       	std	Y+5, r18	; 0x05
    56c0:	3e 83       	std	Y+6, r19	; 0x06
    56c2:	4f 83       	std	Y+7, r20	; 0x07
    56c4:	58 87       	std	Y+8, r21	; 0x08
    56c6:	f9 e0       	ldi	r31, 0x09	; 9
    56c8:	ef 2e       	mov	r14, r31
    56ca:	f1 2c       	mov	r15, r1
    56cc:	ec 0e       	add	r14, r28
    56ce:	fd 1e       	adc	r15, r29
    56d0:	ce 01       	movw	r24, r28
    56d2:	01 96       	adiw	r24, 0x01	; 1
    56d4:	b7 01       	movw	r22, r14
    56d6:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    56da:	8e 01       	movw	r16, r28
    56dc:	0f 5e       	subi	r16, 0xEF	; 239
    56de:	1f 4f       	sbci	r17, 0xFF	; 255
    56e0:	ce 01       	movw	r24, r28
    56e2:	05 96       	adiw	r24, 0x05	; 5
    56e4:	b8 01       	movw	r22, r16
    56e6:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    56ea:	c7 01       	movw	r24, r14
    56ec:	b8 01       	movw	r22, r16
    56ee:	ae 01       	movw	r20, r28
    56f0:	47 5e       	subi	r20, 0xE7	; 231
    56f2:	5f 4f       	sbci	r21, 0xFF	; 255
    56f4:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <_fpadd_parts>
    56f8:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__pack_f>
    56fc:	a0 96       	adiw	r28, 0x20	; 32
    56fe:	e6 e0       	ldi	r30, 0x06	; 6
    5700:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__epilogue_restores__+0x18>

00005704 <__mulsf3>:
    5704:	a0 e2       	ldi	r26, 0x20	; 32
    5706:	b0 e0       	ldi	r27, 0x00	; 0
    5708:	e8 e8       	ldi	r30, 0x88	; 136
    570a:	fb e2       	ldi	r31, 0x2B	; 43
    570c:	0c 94 76 2f 	jmp	0x5eec	; 0x5eec <__prologue_saves__>
    5710:	69 83       	std	Y+1, r22	; 0x01
    5712:	7a 83       	std	Y+2, r23	; 0x02
    5714:	8b 83       	std	Y+3, r24	; 0x03
    5716:	9c 83       	std	Y+4, r25	; 0x04
    5718:	2d 83       	std	Y+5, r18	; 0x05
    571a:	3e 83       	std	Y+6, r19	; 0x06
    571c:	4f 83       	std	Y+7, r20	; 0x07
    571e:	58 87       	std	Y+8, r21	; 0x08
    5720:	ce 01       	movw	r24, r28
    5722:	01 96       	adiw	r24, 0x01	; 1
    5724:	be 01       	movw	r22, r28
    5726:	67 5f       	subi	r22, 0xF7	; 247
    5728:	7f 4f       	sbci	r23, 0xFF	; 255
    572a:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    572e:	ce 01       	movw	r24, r28
    5730:	05 96       	adiw	r24, 0x05	; 5
    5732:	be 01       	movw	r22, r28
    5734:	6f 5e       	subi	r22, 0xEF	; 239
    5736:	7f 4f       	sbci	r23, 0xFF	; 255
    5738:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    573c:	99 85       	ldd	r25, Y+9	; 0x09
    573e:	92 30       	cpi	r25, 0x02	; 2
    5740:	88 f0       	brcs	.+34     	; 0x5764 <__mulsf3+0x60>
    5742:	89 89       	ldd	r24, Y+17	; 0x11
    5744:	82 30       	cpi	r24, 0x02	; 2
    5746:	c8 f0       	brcs	.+50     	; 0x577a <__mulsf3+0x76>
    5748:	94 30       	cpi	r25, 0x04	; 4
    574a:	19 f4       	brne	.+6      	; 0x5752 <__mulsf3+0x4e>
    574c:	82 30       	cpi	r24, 0x02	; 2
    574e:	51 f4       	brne	.+20     	; 0x5764 <__mulsf3+0x60>
    5750:	04 c0       	rjmp	.+8      	; 0x575a <__mulsf3+0x56>
    5752:	84 30       	cpi	r24, 0x04	; 4
    5754:	29 f4       	brne	.+10     	; 0x5760 <__mulsf3+0x5c>
    5756:	92 30       	cpi	r25, 0x02	; 2
    5758:	81 f4       	brne	.+32     	; 0x577a <__mulsf3+0x76>
    575a:	87 e0       	ldi	r24, 0x07	; 7
    575c:	91 e0       	ldi	r25, 0x01	; 1
    575e:	c6 c0       	rjmp	.+396    	; 0x58ec <__mulsf3+0x1e8>
    5760:	92 30       	cpi	r25, 0x02	; 2
    5762:	49 f4       	brne	.+18     	; 0x5776 <__mulsf3+0x72>
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	9a 85       	ldd	r25, Y+10	; 0x0a
    5768:	8a 89       	ldd	r24, Y+18	; 0x12
    576a:	98 13       	cpse	r25, r24
    576c:	21 e0       	ldi	r18, 0x01	; 1
    576e:	2a 87       	std	Y+10, r18	; 0x0a
    5770:	ce 01       	movw	r24, r28
    5772:	09 96       	adiw	r24, 0x09	; 9
    5774:	bb c0       	rjmp	.+374    	; 0x58ec <__mulsf3+0x1e8>
    5776:	82 30       	cpi	r24, 0x02	; 2
    5778:	49 f4       	brne	.+18     	; 0x578c <__mulsf3+0x88>
    577a:	20 e0       	ldi	r18, 0x00	; 0
    577c:	9a 85       	ldd	r25, Y+10	; 0x0a
    577e:	8a 89       	ldd	r24, Y+18	; 0x12
    5780:	98 13       	cpse	r25, r24
    5782:	21 e0       	ldi	r18, 0x01	; 1
    5784:	2a 8b       	std	Y+18, r18	; 0x12
    5786:	ce 01       	movw	r24, r28
    5788:	41 96       	adiw	r24, 0x11	; 17
    578a:	b0 c0       	rjmp	.+352    	; 0x58ec <__mulsf3+0x1e8>
    578c:	2d 84       	ldd	r2, Y+13	; 0x0d
    578e:	3e 84       	ldd	r3, Y+14	; 0x0e
    5790:	4f 84       	ldd	r4, Y+15	; 0x0f
    5792:	58 88       	ldd	r5, Y+16	; 0x10
    5794:	6d 88       	ldd	r6, Y+21	; 0x15
    5796:	7e 88       	ldd	r7, Y+22	; 0x16
    5798:	8f 88       	ldd	r8, Y+23	; 0x17
    579a:	98 8c       	ldd	r9, Y+24	; 0x18
    579c:	ee 24       	eor	r14, r14
    579e:	ff 24       	eor	r15, r15
    57a0:	87 01       	movw	r16, r14
    57a2:	aa 24       	eor	r10, r10
    57a4:	bb 24       	eor	r11, r11
    57a6:	65 01       	movw	r12, r10
    57a8:	40 e0       	ldi	r20, 0x00	; 0
    57aa:	50 e0       	ldi	r21, 0x00	; 0
    57ac:	60 e0       	ldi	r22, 0x00	; 0
    57ae:	70 e0       	ldi	r23, 0x00	; 0
    57b0:	e0 e0       	ldi	r30, 0x00	; 0
    57b2:	f0 e0       	ldi	r31, 0x00	; 0
    57b4:	c1 01       	movw	r24, r2
    57b6:	81 70       	andi	r24, 0x01	; 1
    57b8:	90 70       	andi	r25, 0x00	; 0
    57ba:	89 2b       	or	r24, r25
    57bc:	e9 f0       	breq	.+58     	; 0x57f8 <__mulsf3+0xf4>
    57be:	e6 0c       	add	r14, r6
    57c0:	f7 1c       	adc	r15, r7
    57c2:	08 1d       	adc	r16, r8
    57c4:	19 1d       	adc	r17, r9
    57c6:	9a 01       	movw	r18, r20
    57c8:	ab 01       	movw	r20, r22
    57ca:	2a 0d       	add	r18, r10
    57cc:	3b 1d       	adc	r19, r11
    57ce:	4c 1d       	adc	r20, r12
    57d0:	5d 1d       	adc	r21, r13
    57d2:	80 e0       	ldi	r24, 0x00	; 0
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	a0 e0       	ldi	r26, 0x00	; 0
    57d8:	b0 e0       	ldi	r27, 0x00	; 0
    57da:	e6 14       	cp	r14, r6
    57dc:	f7 04       	cpc	r15, r7
    57de:	08 05       	cpc	r16, r8
    57e0:	19 05       	cpc	r17, r9
    57e2:	20 f4       	brcc	.+8      	; 0x57ec <__mulsf3+0xe8>
    57e4:	81 e0       	ldi	r24, 0x01	; 1
    57e6:	90 e0       	ldi	r25, 0x00	; 0
    57e8:	a0 e0       	ldi	r26, 0x00	; 0
    57ea:	b0 e0       	ldi	r27, 0x00	; 0
    57ec:	ba 01       	movw	r22, r20
    57ee:	a9 01       	movw	r20, r18
    57f0:	48 0f       	add	r20, r24
    57f2:	59 1f       	adc	r21, r25
    57f4:	6a 1f       	adc	r22, r26
    57f6:	7b 1f       	adc	r23, r27
    57f8:	aa 0c       	add	r10, r10
    57fa:	bb 1c       	adc	r11, r11
    57fc:	cc 1c       	adc	r12, r12
    57fe:	dd 1c       	adc	r13, r13
    5800:	97 fe       	sbrs	r9, 7
    5802:	08 c0       	rjmp	.+16     	; 0x5814 <__mulsf3+0x110>
    5804:	81 e0       	ldi	r24, 0x01	; 1
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	a0 e0       	ldi	r26, 0x00	; 0
    580a:	b0 e0       	ldi	r27, 0x00	; 0
    580c:	a8 2a       	or	r10, r24
    580e:	b9 2a       	or	r11, r25
    5810:	ca 2a       	or	r12, r26
    5812:	db 2a       	or	r13, r27
    5814:	31 96       	adiw	r30, 0x01	; 1
    5816:	e0 32       	cpi	r30, 0x20	; 32
    5818:	f1 05       	cpc	r31, r1
    581a:	49 f0       	breq	.+18     	; 0x582e <__mulsf3+0x12a>
    581c:	66 0c       	add	r6, r6
    581e:	77 1c       	adc	r7, r7
    5820:	88 1c       	adc	r8, r8
    5822:	99 1c       	adc	r9, r9
    5824:	56 94       	lsr	r5
    5826:	47 94       	ror	r4
    5828:	37 94       	ror	r3
    582a:	27 94       	ror	r2
    582c:	c3 cf       	rjmp	.-122    	; 0x57b4 <__mulsf3+0xb0>
    582e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5830:	ea 89       	ldd	r30, Y+18	; 0x12
    5832:	2b 89       	ldd	r18, Y+19	; 0x13
    5834:	3c 89       	ldd	r19, Y+20	; 0x14
    5836:	8b 85       	ldd	r24, Y+11	; 0x0b
    5838:	9c 85       	ldd	r25, Y+12	; 0x0c
    583a:	28 0f       	add	r18, r24
    583c:	39 1f       	adc	r19, r25
    583e:	2e 5f       	subi	r18, 0xFE	; 254
    5840:	3f 4f       	sbci	r19, 0xFF	; 255
    5842:	17 c0       	rjmp	.+46     	; 0x5872 <__mulsf3+0x16e>
    5844:	ca 01       	movw	r24, r20
    5846:	81 70       	andi	r24, 0x01	; 1
    5848:	90 70       	andi	r25, 0x00	; 0
    584a:	89 2b       	or	r24, r25
    584c:	61 f0       	breq	.+24     	; 0x5866 <__mulsf3+0x162>
    584e:	16 95       	lsr	r17
    5850:	07 95       	ror	r16
    5852:	f7 94       	ror	r15
    5854:	e7 94       	ror	r14
    5856:	80 e0       	ldi	r24, 0x00	; 0
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	a0 e0       	ldi	r26, 0x00	; 0
    585c:	b0 e8       	ldi	r27, 0x80	; 128
    585e:	e8 2a       	or	r14, r24
    5860:	f9 2a       	or	r15, r25
    5862:	0a 2b       	or	r16, r26
    5864:	1b 2b       	or	r17, r27
    5866:	76 95       	lsr	r23
    5868:	67 95       	ror	r22
    586a:	57 95       	ror	r21
    586c:	47 95       	ror	r20
    586e:	2f 5f       	subi	r18, 0xFF	; 255
    5870:	3f 4f       	sbci	r19, 0xFF	; 255
    5872:	77 fd       	sbrc	r23, 7
    5874:	e7 cf       	rjmp	.-50     	; 0x5844 <__mulsf3+0x140>
    5876:	0c c0       	rjmp	.+24     	; 0x5890 <__mulsf3+0x18c>
    5878:	44 0f       	add	r20, r20
    587a:	55 1f       	adc	r21, r21
    587c:	66 1f       	adc	r22, r22
    587e:	77 1f       	adc	r23, r23
    5880:	17 fd       	sbrc	r17, 7
    5882:	41 60       	ori	r20, 0x01	; 1
    5884:	ee 0c       	add	r14, r14
    5886:	ff 1c       	adc	r15, r15
    5888:	00 1f       	adc	r16, r16
    588a:	11 1f       	adc	r17, r17
    588c:	21 50       	subi	r18, 0x01	; 1
    588e:	30 40       	sbci	r19, 0x00	; 0
    5890:	40 30       	cpi	r20, 0x00	; 0
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	59 07       	cpc	r21, r25
    5896:	90 e0       	ldi	r25, 0x00	; 0
    5898:	69 07       	cpc	r22, r25
    589a:	90 e4       	ldi	r25, 0x40	; 64
    589c:	79 07       	cpc	r23, r25
    589e:	60 f3       	brcs	.-40     	; 0x5878 <__mulsf3+0x174>
    58a0:	2b 8f       	std	Y+27, r18	; 0x1b
    58a2:	3c 8f       	std	Y+28, r19	; 0x1c
    58a4:	db 01       	movw	r26, r22
    58a6:	ca 01       	movw	r24, r20
    58a8:	8f 77       	andi	r24, 0x7F	; 127
    58aa:	90 70       	andi	r25, 0x00	; 0
    58ac:	a0 70       	andi	r26, 0x00	; 0
    58ae:	b0 70       	andi	r27, 0x00	; 0
    58b0:	80 34       	cpi	r24, 0x40	; 64
    58b2:	91 05       	cpc	r25, r1
    58b4:	a1 05       	cpc	r26, r1
    58b6:	b1 05       	cpc	r27, r1
    58b8:	61 f4       	brne	.+24     	; 0x58d2 <__mulsf3+0x1ce>
    58ba:	47 fd       	sbrc	r20, 7
    58bc:	0a c0       	rjmp	.+20     	; 0x58d2 <__mulsf3+0x1ce>
    58be:	e1 14       	cp	r14, r1
    58c0:	f1 04       	cpc	r15, r1
    58c2:	01 05       	cpc	r16, r1
    58c4:	11 05       	cpc	r17, r1
    58c6:	29 f0       	breq	.+10     	; 0x58d2 <__mulsf3+0x1ce>
    58c8:	40 5c       	subi	r20, 0xC0	; 192
    58ca:	5f 4f       	sbci	r21, 0xFF	; 255
    58cc:	6f 4f       	sbci	r22, 0xFF	; 255
    58ce:	7f 4f       	sbci	r23, 0xFF	; 255
    58d0:	40 78       	andi	r20, 0x80	; 128
    58d2:	1a 8e       	std	Y+26, r1	; 0x1a
    58d4:	fe 17       	cp	r31, r30
    58d6:	11 f0       	breq	.+4      	; 0x58dc <__mulsf3+0x1d8>
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	8a 8f       	std	Y+26, r24	; 0x1a
    58dc:	4d 8f       	std	Y+29, r20	; 0x1d
    58de:	5e 8f       	std	Y+30, r21	; 0x1e
    58e0:	6f 8f       	std	Y+31, r22	; 0x1f
    58e2:	78 a3       	std	Y+32, r23	; 0x20
    58e4:	83 e0       	ldi	r24, 0x03	; 3
    58e6:	89 8f       	std	Y+25, r24	; 0x19
    58e8:	ce 01       	movw	r24, r28
    58ea:	49 96       	adiw	r24, 0x19	; 25
    58ec:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__pack_f>
    58f0:	a0 96       	adiw	r28, 0x20	; 32
    58f2:	e2 e1       	ldi	r30, 0x12	; 18
    58f4:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <__epilogue_restores__>

000058f8 <__divsf3>:
    58f8:	a8 e1       	ldi	r26, 0x18	; 24
    58fa:	b0 e0       	ldi	r27, 0x00	; 0
    58fc:	e2 e8       	ldi	r30, 0x82	; 130
    58fe:	fc e2       	ldi	r31, 0x2C	; 44
    5900:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__prologue_saves__+0x10>
    5904:	69 83       	std	Y+1, r22	; 0x01
    5906:	7a 83       	std	Y+2, r23	; 0x02
    5908:	8b 83       	std	Y+3, r24	; 0x03
    590a:	9c 83       	std	Y+4, r25	; 0x04
    590c:	2d 83       	std	Y+5, r18	; 0x05
    590e:	3e 83       	std	Y+6, r19	; 0x06
    5910:	4f 83       	std	Y+7, r20	; 0x07
    5912:	58 87       	std	Y+8, r21	; 0x08
    5914:	b9 e0       	ldi	r27, 0x09	; 9
    5916:	eb 2e       	mov	r14, r27
    5918:	f1 2c       	mov	r15, r1
    591a:	ec 0e       	add	r14, r28
    591c:	fd 1e       	adc	r15, r29
    591e:	ce 01       	movw	r24, r28
    5920:	01 96       	adiw	r24, 0x01	; 1
    5922:	b7 01       	movw	r22, r14
    5924:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    5928:	8e 01       	movw	r16, r28
    592a:	0f 5e       	subi	r16, 0xEF	; 239
    592c:	1f 4f       	sbci	r17, 0xFF	; 255
    592e:	ce 01       	movw	r24, r28
    5930:	05 96       	adiw	r24, 0x05	; 5
    5932:	b8 01       	movw	r22, r16
    5934:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    5938:	29 85       	ldd	r18, Y+9	; 0x09
    593a:	22 30       	cpi	r18, 0x02	; 2
    593c:	08 f4       	brcc	.+2      	; 0x5940 <__divsf3+0x48>
    593e:	7e c0       	rjmp	.+252    	; 0x5a3c <__divsf3+0x144>
    5940:	39 89       	ldd	r19, Y+17	; 0x11
    5942:	32 30       	cpi	r19, 0x02	; 2
    5944:	10 f4       	brcc	.+4      	; 0x594a <__divsf3+0x52>
    5946:	b8 01       	movw	r22, r16
    5948:	7c c0       	rjmp	.+248    	; 0x5a42 <__divsf3+0x14a>
    594a:	8a 85       	ldd	r24, Y+10	; 0x0a
    594c:	9a 89       	ldd	r25, Y+18	; 0x12
    594e:	89 27       	eor	r24, r25
    5950:	8a 87       	std	Y+10, r24	; 0x0a
    5952:	24 30       	cpi	r18, 0x04	; 4
    5954:	11 f0       	breq	.+4      	; 0x595a <__divsf3+0x62>
    5956:	22 30       	cpi	r18, 0x02	; 2
    5958:	31 f4       	brne	.+12     	; 0x5966 <__divsf3+0x6e>
    595a:	23 17       	cp	r18, r19
    595c:	09 f0       	breq	.+2      	; 0x5960 <__divsf3+0x68>
    595e:	6e c0       	rjmp	.+220    	; 0x5a3c <__divsf3+0x144>
    5960:	67 e0       	ldi	r22, 0x07	; 7
    5962:	71 e0       	ldi	r23, 0x01	; 1
    5964:	6e c0       	rjmp	.+220    	; 0x5a42 <__divsf3+0x14a>
    5966:	34 30       	cpi	r19, 0x04	; 4
    5968:	39 f4       	brne	.+14     	; 0x5978 <__divsf3+0x80>
    596a:	1d 86       	std	Y+13, r1	; 0x0d
    596c:	1e 86       	std	Y+14, r1	; 0x0e
    596e:	1f 86       	std	Y+15, r1	; 0x0f
    5970:	18 8a       	std	Y+16, r1	; 0x10
    5972:	1c 86       	std	Y+12, r1	; 0x0c
    5974:	1b 86       	std	Y+11, r1	; 0x0b
    5976:	04 c0       	rjmp	.+8      	; 0x5980 <__divsf3+0x88>
    5978:	32 30       	cpi	r19, 0x02	; 2
    597a:	21 f4       	brne	.+8      	; 0x5984 <__divsf3+0x8c>
    597c:	84 e0       	ldi	r24, 0x04	; 4
    597e:	89 87       	std	Y+9, r24	; 0x09
    5980:	b7 01       	movw	r22, r14
    5982:	5f c0       	rjmp	.+190    	; 0x5a42 <__divsf3+0x14a>
    5984:	2b 85       	ldd	r18, Y+11	; 0x0b
    5986:	3c 85       	ldd	r19, Y+12	; 0x0c
    5988:	8b 89       	ldd	r24, Y+19	; 0x13
    598a:	9c 89       	ldd	r25, Y+20	; 0x14
    598c:	28 1b       	sub	r18, r24
    598e:	39 0b       	sbc	r19, r25
    5990:	3c 87       	std	Y+12, r19	; 0x0c
    5992:	2b 87       	std	Y+11, r18	; 0x0b
    5994:	ed 84       	ldd	r14, Y+13	; 0x0d
    5996:	fe 84       	ldd	r15, Y+14	; 0x0e
    5998:	0f 85       	ldd	r16, Y+15	; 0x0f
    599a:	18 89       	ldd	r17, Y+16	; 0x10
    599c:	ad 88       	ldd	r10, Y+21	; 0x15
    599e:	be 88       	ldd	r11, Y+22	; 0x16
    59a0:	cf 88       	ldd	r12, Y+23	; 0x17
    59a2:	d8 8c       	ldd	r13, Y+24	; 0x18
    59a4:	ea 14       	cp	r14, r10
    59a6:	fb 04       	cpc	r15, r11
    59a8:	0c 05       	cpc	r16, r12
    59aa:	1d 05       	cpc	r17, r13
    59ac:	40 f4       	brcc	.+16     	; 0x59be <__divsf3+0xc6>
    59ae:	ee 0c       	add	r14, r14
    59b0:	ff 1c       	adc	r15, r15
    59b2:	00 1f       	adc	r16, r16
    59b4:	11 1f       	adc	r17, r17
    59b6:	21 50       	subi	r18, 0x01	; 1
    59b8:	30 40       	sbci	r19, 0x00	; 0
    59ba:	3c 87       	std	Y+12, r19	; 0x0c
    59bc:	2b 87       	std	Y+11, r18	; 0x0b
    59be:	20 e0       	ldi	r18, 0x00	; 0
    59c0:	30 e0       	ldi	r19, 0x00	; 0
    59c2:	40 e0       	ldi	r20, 0x00	; 0
    59c4:	50 e0       	ldi	r21, 0x00	; 0
    59c6:	80 e0       	ldi	r24, 0x00	; 0
    59c8:	90 e0       	ldi	r25, 0x00	; 0
    59ca:	a0 e0       	ldi	r26, 0x00	; 0
    59cc:	b0 e4       	ldi	r27, 0x40	; 64
    59ce:	60 e0       	ldi	r22, 0x00	; 0
    59d0:	70 e0       	ldi	r23, 0x00	; 0
    59d2:	ea 14       	cp	r14, r10
    59d4:	fb 04       	cpc	r15, r11
    59d6:	0c 05       	cpc	r16, r12
    59d8:	1d 05       	cpc	r17, r13
    59da:	40 f0       	brcs	.+16     	; 0x59ec <__divsf3+0xf4>
    59dc:	28 2b       	or	r18, r24
    59de:	39 2b       	or	r19, r25
    59e0:	4a 2b       	or	r20, r26
    59e2:	5b 2b       	or	r21, r27
    59e4:	ea 18       	sub	r14, r10
    59e6:	fb 08       	sbc	r15, r11
    59e8:	0c 09       	sbc	r16, r12
    59ea:	1d 09       	sbc	r17, r13
    59ec:	b6 95       	lsr	r27
    59ee:	a7 95       	ror	r26
    59f0:	97 95       	ror	r25
    59f2:	87 95       	ror	r24
    59f4:	ee 0c       	add	r14, r14
    59f6:	ff 1c       	adc	r15, r15
    59f8:	00 1f       	adc	r16, r16
    59fa:	11 1f       	adc	r17, r17
    59fc:	6f 5f       	subi	r22, 0xFF	; 255
    59fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5a00:	6f 31       	cpi	r22, 0x1F	; 31
    5a02:	71 05       	cpc	r23, r1
    5a04:	31 f7       	brne	.-52     	; 0x59d2 <__divsf3+0xda>
    5a06:	da 01       	movw	r26, r20
    5a08:	c9 01       	movw	r24, r18
    5a0a:	8f 77       	andi	r24, 0x7F	; 127
    5a0c:	90 70       	andi	r25, 0x00	; 0
    5a0e:	a0 70       	andi	r26, 0x00	; 0
    5a10:	b0 70       	andi	r27, 0x00	; 0
    5a12:	80 34       	cpi	r24, 0x40	; 64
    5a14:	91 05       	cpc	r25, r1
    5a16:	a1 05       	cpc	r26, r1
    5a18:	b1 05       	cpc	r27, r1
    5a1a:	61 f4       	brne	.+24     	; 0x5a34 <__divsf3+0x13c>
    5a1c:	27 fd       	sbrc	r18, 7
    5a1e:	0a c0       	rjmp	.+20     	; 0x5a34 <__divsf3+0x13c>
    5a20:	e1 14       	cp	r14, r1
    5a22:	f1 04       	cpc	r15, r1
    5a24:	01 05       	cpc	r16, r1
    5a26:	11 05       	cpc	r17, r1
    5a28:	29 f0       	breq	.+10     	; 0x5a34 <__divsf3+0x13c>
    5a2a:	20 5c       	subi	r18, 0xC0	; 192
    5a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    5a30:	5f 4f       	sbci	r21, 0xFF	; 255
    5a32:	20 78       	andi	r18, 0x80	; 128
    5a34:	2d 87       	std	Y+13, r18	; 0x0d
    5a36:	3e 87       	std	Y+14, r19	; 0x0e
    5a38:	4f 87       	std	Y+15, r20	; 0x0f
    5a3a:	58 8b       	std	Y+16, r21	; 0x10
    5a3c:	be 01       	movw	r22, r28
    5a3e:	67 5f       	subi	r22, 0xF7	; 247
    5a40:	7f 4f       	sbci	r23, 0xFF	; 255
    5a42:	cb 01       	movw	r24, r22
    5a44:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__pack_f>
    5a48:	68 96       	adiw	r28, 0x18	; 24
    5a4a:	ea e0       	ldi	r30, 0x0A	; 10
    5a4c:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <__epilogue_restores__+0x10>

00005a50 <__floatsisf>:
    5a50:	a8 e0       	ldi	r26, 0x08	; 8
    5a52:	b0 e0       	ldi	r27, 0x00	; 0
    5a54:	ee e2       	ldi	r30, 0x2E	; 46
    5a56:	fd e2       	ldi	r31, 0x2D	; 45
    5a58:	0c 94 7f 2f 	jmp	0x5efe	; 0x5efe <__prologue_saves__+0x12>
    5a5c:	9b 01       	movw	r18, r22
    5a5e:	ac 01       	movw	r20, r24
    5a60:	83 e0       	ldi	r24, 0x03	; 3
    5a62:	89 83       	std	Y+1, r24	; 0x01
    5a64:	da 01       	movw	r26, r20
    5a66:	c9 01       	movw	r24, r18
    5a68:	88 27       	eor	r24, r24
    5a6a:	b7 fd       	sbrc	r27, 7
    5a6c:	83 95       	inc	r24
    5a6e:	99 27       	eor	r25, r25
    5a70:	aa 27       	eor	r26, r26
    5a72:	bb 27       	eor	r27, r27
    5a74:	b8 2e       	mov	r11, r24
    5a76:	21 15       	cp	r18, r1
    5a78:	31 05       	cpc	r19, r1
    5a7a:	41 05       	cpc	r20, r1
    5a7c:	51 05       	cpc	r21, r1
    5a7e:	19 f4       	brne	.+6      	; 0x5a86 <__floatsisf+0x36>
    5a80:	82 e0       	ldi	r24, 0x02	; 2
    5a82:	89 83       	std	Y+1, r24	; 0x01
    5a84:	3a c0       	rjmp	.+116    	; 0x5afa <__floatsisf+0xaa>
    5a86:	88 23       	and	r24, r24
    5a88:	a9 f0       	breq	.+42     	; 0x5ab4 <__floatsisf+0x64>
    5a8a:	20 30       	cpi	r18, 0x00	; 0
    5a8c:	80 e0       	ldi	r24, 0x00	; 0
    5a8e:	38 07       	cpc	r19, r24
    5a90:	80 e0       	ldi	r24, 0x00	; 0
    5a92:	48 07       	cpc	r20, r24
    5a94:	80 e8       	ldi	r24, 0x80	; 128
    5a96:	58 07       	cpc	r21, r24
    5a98:	29 f4       	brne	.+10     	; 0x5aa4 <__floatsisf+0x54>
    5a9a:	60 e0       	ldi	r22, 0x00	; 0
    5a9c:	70 e0       	ldi	r23, 0x00	; 0
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	9f ec       	ldi	r25, 0xCF	; 207
    5aa2:	30 c0       	rjmp	.+96     	; 0x5b04 <__floatsisf+0xb4>
    5aa4:	ee 24       	eor	r14, r14
    5aa6:	ff 24       	eor	r15, r15
    5aa8:	87 01       	movw	r16, r14
    5aaa:	e2 1a       	sub	r14, r18
    5aac:	f3 0a       	sbc	r15, r19
    5aae:	04 0b       	sbc	r16, r20
    5ab0:	15 0b       	sbc	r17, r21
    5ab2:	02 c0       	rjmp	.+4      	; 0x5ab8 <__floatsisf+0x68>
    5ab4:	79 01       	movw	r14, r18
    5ab6:	8a 01       	movw	r16, r20
    5ab8:	8e e1       	ldi	r24, 0x1E	; 30
    5aba:	c8 2e       	mov	r12, r24
    5abc:	d1 2c       	mov	r13, r1
    5abe:	dc 82       	std	Y+4, r13	; 0x04
    5ac0:	cb 82       	std	Y+3, r12	; 0x03
    5ac2:	ed 82       	std	Y+5, r14	; 0x05
    5ac4:	fe 82       	std	Y+6, r15	; 0x06
    5ac6:	0f 83       	std	Y+7, r16	; 0x07
    5ac8:	18 87       	std	Y+8, r17	; 0x08
    5aca:	c8 01       	movw	r24, r16
    5acc:	b7 01       	movw	r22, r14
    5ace:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <__clzsi2>
    5ad2:	01 97       	sbiw	r24, 0x01	; 1
    5ad4:	18 16       	cp	r1, r24
    5ad6:	19 06       	cpc	r1, r25
    5ad8:	84 f4       	brge	.+32     	; 0x5afa <__floatsisf+0xaa>
    5ada:	08 2e       	mov	r0, r24
    5adc:	04 c0       	rjmp	.+8      	; 0x5ae6 <__floatsisf+0x96>
    5ade:	ee 0c       	add	r14, r14
    5ae0:	ff 1c       	adc	r15, r15
    5ae2:	00 1f       	adc	r16, r16
    5ae4:	11 1f       	adc	r17, r17
    5ae6:	0a 94       	dec	r0
    5ae8:	d2 f7       	brpl	.-12     	; 0x5ade <__floatsisf+0x8e>
    5aea:	ed 82       	std	Y+5, r14	; 0x05
    5aec:	fe 82       	std	Y+6, r15	; 0x06
    5aee:	0f 83       	std	Y+7, r16	; 0x07
    5af0:	18 87       	std	Y+8, r17	; 0x08
    5af2:	c8 1a       	sub	r12, r24
    5af4:	d9 0a       	sbc	r13, r25
    5af6:	dc 82       	std	Y+4, r13	; 0x04
    5af8:	cb 82       	std	Y+3, r12	; 0x03
    5afa:	ba 82       	std	Y+2, r11	; 0x02
    5afc:	ce 01       	movw	r24, r28
    5afe:	01 96       	adiw	r24, 0x01	; 1
    5b00:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <__pack_f>
    5b04:	28 96       	adiw	r28, 0x08	; 8
    5b06:	e9 e0       	ldi	r30, 0x09	; 9
    5b08:	0c 94 9b 2f 	jmp	0x5f36	; 0x5f36 <__epilogue_restores__+0x12>

00005b0c <__fixsfsi>:
    5b0c:	ac e0       	ldi	r26, 0x0C	; 12
    5b0e:	b0 e0       	ldi	r27, 0x00	; 0
    5b10:	ec e8       	ldi	r30, 0x8C	; 140
    5b12:	fd e2       	ldi	r31, 0x2D	; 45
    5b14:	0c 94 86 2f 	jmp	0x5f0c	; 0x5f0c <__prologue_saves__+0x20>
    5b18:	69 83       	std	Y+1, r22	; 0x01
    5b1a:	7a 83       	std	Y+2, r23	; 0x02
    5b1c:	8b 83       	std	Y+3, r24	; 0x03
    5b1e:	9c 83       	std	Y+4, r25	; 0x04
    5b20:	ce 01       	movw	r24, r28
    5b22:	01 96       	adiw	r24, 0x01	; 1
    5b24:	be 01       	movw	r22, r28
    5b26:	6b 5f       	subi	r22, 0xFB	; 251
    5b28:	7f 4f       	sbci	r23, 0xFF	; 255
    5b2a:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <__unpack_f>
    5b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b30:	82 30       	cpi	r24, 0x02	; 2
    5b32:	61 f1       	breq	.+88     	; 0x5b8c <__fixsfsi+0x80>
    5b34:	82 30       	cpi	r24, 0x02	; 2
    5b36:	50 f1       	brcs	.+84     	; 0x5b8c <__fixsfsi+0x80>
    5b38:	84 30       	cpi	r24, 0x04	; 4
    5b3a:	21 f4       	brne	.+8      	; 0x5b44 <__fixsfsi+0x38>
    5b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b3e:	88 23       	and	r24, r24
    5b40:	51 f1       	breq	.+84     	; 0x5b96 <__fixsfsi+0x8a>
    5b42:	2e c0       	rjmp	.+92     	; 0x5ba0 <__fixsfsi+0x94>
    5b44:	2f 81       	ldd	r18, Y+7	; 0x07
    5b46:	38 85       	ldd	r19, Y+8	; 0x08
    5b48:	37 fd       	sbrc	r19, 7
    5b4a:	20 c0       	rjmp	.+64     	; 0x5b8c <__fixsfsi+0x80>
    5b4c:	6e 81       	ldd	r22, Y+6	; 0x06
    5b4e:	2f 31       	cpi	r18, 0x1F	; 31
    5b50:	31 05       	cpc	r19, r1
    5b52:	1c f0       	brlt	.+6      	; 0x5b5a <__fixsfsi+0x4e>
    5b54:	66 23       	and	r22, r22
    5b56:	f9 f0       	breq	.+62     	; 0x5b96 <__fixsfsi+0x8a>
    5b58:	23 c0       	rjmp	.+70     	; 0x5ba0 <__fixsfsi+0x94>
    5b5a:	8e e1       	ldi	r24, 0x1E	; 30
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	82 1b       	sub	r24, r18
    5b60:	93 0b       	sbc	r25, r19
    5b62:	29 85       	ldd	r18, Y+9	; 0x09
    5b64:	3a 85       	ldd	r19, Y+10	; 0x0a
    5b66:	4b 85       	ldd	r20, Y+11	; 0x0b
    5b68:	5c 85       	ldd	r21, Y+12	; 0x0c
    5b6a:	04 c0       	rjmp	.+8      	; 0x5b74 <__fixsfsi+0x68>
    5b6c:	56 95       	lsr	r21
    5b6e:	47 95       	ror	r20
    5b70:	37 95       	ror	r19
    5b72:	27 95       	ror	r18
    5b74:	8a 95       	dec	r24
    5b76:	d2 f7       	brpl	.-12     	; 0x5b6c <__fixsfsi+0x60>
    5b78:	66 23       	and	r22, r22
    5b7a:	b1 f0       	breq	.+44     	; 0x5ba8 <__fixsfsi+0x9c>
    5b7c:	50 95       	com	r21
    5b7e:	40 95       	com	r20
    5b80:	30 95       	com	r19
    5b82:	21 95       	neg	r18
    5b84:	3f 4f       	sbci	r19, 0xFF	; 255
    5b86:	4f 4f       	sbci	r20, 0xFF	; 255
    5b88:	5f 4f       	sbci	r21, 0xFF	; 255
    5b8a:	0e c0       	rjmp	.+28     	; 0x5ba8 <__fixsfsi+0x9c>
    5b8c:	20 e0       	ldi	r18, 0x00	; 0
    5b8e:	30 e0       	ldi	r19, 0x00	; 0
    5b90:	40 e0       	ldi	r20, 0x00	; 0
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	09 c0       	rjmp	.+18     	; 0x5ba8 <__fixsfsi+0x9c>
    5b96:	2f ef       	ldi	r18, 0xFF	; 255
    5b98:	3f ef       	ldi	r19, 0xFF	; 255
    5b9a:	4f ef       	ldi	r20, 0xFF	; 255
    5b9c:	5f e7       	ldi	r21, 0x7F	; 127
    5b9e:	04 c0       	rjmp	.+8      	; 0x5ba8 <__fixsfsi+0x9c>
    5ba0:	20 e0       	ldi	r18, 0x00	; 0
    5ba2:	30 e0       	ldi	r19, 0x00	; 0
    5ba4:	40 e0       	ldi	r20, 0x00	; 0
    5ba6:	50 e8       	ldi	r21, 0x80	; 128
    5ba8:	b9 01       	movw	r22, r18
    5baa:	ca 01       	movw	r24, r20
    5bac:	2c 96       	adiw	r28, 0x0c	; 12
    5bae:	e2 e0       	ldi	r30, 0x02	; 2
    5bb0:	0c 94 a2 2f 	jmp	0x5f44	; 0x5f44 <__epilogue_restores__+0x20>

00005bb4 <__clzsi2>:
    5bb4:	ef 92       	push	r14
    5bb6:	ff 92       	push	r15
    5bb8:	0f 93       	push	r16
    5bba:	1f 93       	push	r17
    5bbc:	7b 01       	movw	r14, r22
    5bbe:	8c 01       	movw	r16, r24
    5bc0:	80 e0       	ldi	r24, 0x00	; 0
    5bc2:	e8 16       	cp	r14, r24
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	f8 06       	cpc	r15, r24
    5bc8:	81 e0       	ldi	r24, 0x01	; 1
    5bca:	08 07       	cpc	r16, r24
    5bcc:	80 e0       	ldi	r24, 0x00	; 0
    5bce:	18 07       	cpc	r17, r24
    5bd0:	88 f4       	brcc	.+34     	; 0x5bf4 <__clzsi2+0x40>
    5bd2:	8f ef       	ldi	r24, 0xFF	; 255
    5bd4:	e8 16       	cp	r14, r24
    5bd6:	f1 04       	cpc	r15, r1
    5bd8:	01 05       	cpc	r16, r1
    5bda:	11 05       	cpc	r17, r1
    5bdc:	31 f0       	breq	.+12     	; 0x5bea <__clzsi2+0x36>
    5bde:	28 f0       	brcs	.+10     	; 0x5bea <__clzsi2+0x36>
    5be0:	88 e0       	ldi	r24, 0x08	; 8
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	a0 e0       	ldi	r26, 0x00	; 0
    5be6:	b0 e0       	ldi	r27, 0x00	; 0
    5be8:	17 c0       	rjmp	.+46     	; 0x5c18 <__clzsi2+0x64>
    5bea:	80 e0       	ldi	r24, 0x00	; 0
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	a0 e0       	ldi	r26, 0x00	; 0
    5bf0:	b0 e0       	ldi	r27, 0x00	; 0
    5bf2:	12 c0       	rjmp	.+36     	; 0x5c18 <__clzsi2+0x64>
    5bf4:	80 e0       	ldi	r24, 0x00	; 0
    5bf6:	e8 16       	cp	r14, r24
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	f8 06       	cpc	r15, r24
    5bfc:	80 e0       	ldi	r24, 0x00	; 0
    5bfe:	08 07       	cpc	r16, r24
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	18 07       	cpc	r17, r24
    5c04:	28 f0       	brcs	.+10     	; 0x5c10 <__clzsi2+0x5c>
    5c06:	88 e1       	ldi	r24, 0x18	; 24
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	a0 e0       	ldi	r26, 0x00	; 0
    5c0c:	b0 e0       	ldi	r27, 0x00	; 0
    5c0e:	04 c0       	rjmp	.+8      	; 0x5c18 <__clzsi2+0x64>
    5c10:	80 e1       	ldi	r24, 0x10	; 16
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	a0 e0       	ldi	r26, 0x00	; 0
    5c16:	b0 e0       	ldi	r27, 0x00	; 0
    5c18:	20 e2       	ldi	r18, 0x20	; 32
    5c1a:	30 e0       	ldi	r19, 0x00	; 0
    5c1c:	40 e0       	ldi	r20, 0x00	; 0
    5c1e:	50 e0       	ldi	r21, 0x00	; 0
    5c20:	28 1b       	sub	r18, r24
    5c22:	39 0b       	sbc	r19, r25
    5c24:	4a 0b       	sbc	r20, r26
    5c26:	5b 0b       	sbc	r21, r27
    5c28:	04 c0       	rjmp	.+8      	; 0x5c32 <__clzsi2+0x7e>
    5c2a:	16 95       	lsr	r17
    5c2c:	07 95       	ror	r16
    5c2e:	f7 94       	ror	r15
    5c30:	e7 94       	ror	r14
    5c32:	8a 95       	dec	r24
    5c34:	d2 f7       	brpl	.-12     	; 0x5c2a <__clzsi2+0x76>
    5c36:	f7 01       	movw	r30, r14
    5c38:	e1 5f       	subi	r30, 0xF1	; 241
    5c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5c3c:	80 81       	ld	r24, Z
    5c3e:	28 1b       	sub	r18, r24
    5c40:	31 09       	sbc	r19, r1
    5c42:	41 09       	sbc	r20, r1
    5c44:	51 09       	sbc	r21, r1
    5c46:	c9 01       	movw	r24, r18
    5c48:	1f 91       	pop	r17
    5c4a:	0f 91       	pop	r16
    5c4c:	ff 90       	pop	r15
    5c4e:	ef 90       	pop	r14
    5c50:	08 95       	ret

00005c52 <__pack_f>:
    5c52:	df 92       	push	r13
    5c54:	ef 92       	push	r14
    5c56:	ff 92       	push	r15
    5c58:	0f 93       	push	r16
    5c5a:	1f 93       	push	r17
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	e4 80       	ldd	r14, Z+4	; 0x04
    5c60:	f5 80       	ldd	r15, Z+5	; 0x05
    5c62:	06 81       	ldd	r16, Z+6	; 0x06
    5c64:	17 81       	ldd	r17, Z+7	; 0x07
    5c66:	d1 80       	ldd	r13, Z+1	; 0x01
    5c68:	80 81       	ld	r24, Z
    5c6a:	82 30       	cpi	r24, 0x02	; 2
    5c6c:	48 f4       	brcc	.+18     	; 0x5c80 <__pack_f+0x2e>
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	a0 e1       	ldi	r26, 0x10	; 16
    5c74:	b0 e0       	ldi	r27, 0x00	; 0
    5c76:	e8 2a       	or	r14, r24
    5c78:	f9 2a       	or	r15, r25
    5c7a:	0a 2b       	or	r16, r26
    5c7c:	1b 2b       	or	r17, r27
    5c7e:	a5 c0       	rjmp	.+330    	; 0x5dca <__pack_f+0x178>
    5c80:	84 30       	cpi	r24, 0x04	; 4
    5c82:	09 f4       	brne	.+2      	; 0x5c86 <__pack_f+0x34>
    5c84:	9f c0       	rjmp	.+318    	; 0x5dc4 <__pack_f+0x172>
    5c86:	82 30       	cpi	r24, 0x02	; 2
    5c88:	21 f4       	brne	.+8      	; 0x5c92 <__pack_f+0x40>
    5c8a:	ee 24       	eor	r14, r14
    5c8c:	ff 24       	eor	r15, r15
    5c8e:	87 01       	movw	r16, r14
    5c90:	05 c0       	rjmp	.+10     	; 0x5c9c <__pack_f+0x4a>
    5c92:	e1 14       	cp	r14, r1
    5c94:	f1 04       	cpc	r15, r1
    5c96:	01 05       	cpc	r16, r1
    5c98:	11 05       	cpc	r17, r1
    5c9a:	19 f4       	brne	.+6      	; 0x5ca2 <__pack_f+0x50>
    5c9c:	e0 e0       	ldi	r30, 0x00	; 0
    5c9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ca0:	96 c0       	rjmp	.+300    	; 0x5dce <__pack_f+0x17c>
    5ca2:	62 81       	ldd	r22, Z+2	; 0x02
    5ca4:	73 81       	ldd	r23, Z+3	; 0x03
    5ca6:	9f ef       	ldi	r25, 0xFF	; 255
    5ca8:	62 38       	cpi	r22, 0x82	; 130
    5caa:	79 07       	cpc	r23, r25
    5cac:	0c f0       	brlt	.+2      	; 0x5cb0 <__pack_f+0x5e>
    5cae:	5b c0       	rjmp	.+182    	; 0x5d66 <__pack_f+0x114>
    5cb0:	22 e8       	ldi	r18, 0x82	; 130
    5cb2:	3f ef       	ldi	r19, 0xFF	; 255
    5cb4:	26 1b       	sub	r18, r22
    5cb6:	37 0b       	sbc	r19, r23
    5cb8:	2a 31       	cpi	r18, 0x1A	; 26
    5cba:	31 05       	cpc	r19, r1
    5cbc:	2c f0       	brlt	.+10     	; 0x5cc8 <__pack_f+0x76>
    5cbe:	20 e0       	ldi	r18, 0x00	; 0
    5cc0:	30 e0       	ldi	r19, 0x00	; 0
    5cc2:	40 e0       	ldi	r20, 0x00	; 0
    5cc4:	50 e0       	ldi	r21, 0x00	; 0
    5cc6:	2a c0       	rjmp	.+84     	; 0x5d1c <__pack_f+0xca>
    5cc8:	b8 01       	movw	r22, r16
    5cca:	a7 01       	movw	r20, r14
    5ccc:	02 2e       	mov	r0, r18
    5cce:	04 c0       	rjmp	.+8      	; 0x5cd8 <__pack_f+0x86>
    5cd0:	76 95       	lsr	r23
    5cd2:	67 95       	ror	r22
    5cd4:	57 95       	ror	r21
    5cd6:	47 95       	ror	r20
    5cd8:	0a 94       	dec	r0
    5cda:	d2 f7       	brpl	.-12     	; 0x5cd0 <__pack_f+0x7e>
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	a0 e0       	ldi	r26, 0x00	; 0
    5ce2:	b0 e0       	ldi	r27, 0x00	; 0
    5ce4:	04 c0       	rjmp	.+8      	; 0x5cee <__pack_f+0x9c>
    5ce6:	88 0f       	add	r24, r24
    5ce8:	99 1f       	adc	r25, r25
    5cea:	aa 1f       	adc	r26, r26
    5cec:	bb 1f       	adc	r27, r27
    5cee:	2a 95       	dec	r18
    5cf0:	d2 f7       	brpl	.-12     	; 0x5ce6 <__pack_f+0x94>
    5cf2:	01 97       	sbiw	r24, 0x01	; 1
    5cf4:	a1 09       	sbc	r26, r1
    5cf6:	b1 09       	sbc	r27, r1
    5cf8:	8e 21       	and	r24, r14
    5cfa:	9f 21       	and	r25, r15
    5cfc:	a0 23       	and	r26, r16
    5cfe:	b1 23       	and	r27, r17
    5d00:	00 97       	sbiw	r24, 0x00	; 0
    5d02:	a1 05       	cpc	r26, r1
    5d04:	b1 05       	cpc	r27, r1
    5d06:	21 f0       	breq	.+8      	; 0x5d10 <__pack_f+0xbe>
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	a0 e0       	ldi	r26, 0x00	; 0
    5d0e:	b0 e0       	ldi	r27, 0x00	; 0
    5d10:	9a 01       	movw	r18, r20
    5d12:	ab 01       	movw	r20, r22
    5d14:	28 2b       	or	r18, r24
    5d16:	39 2b       	or	r19, r25
    5d18:	4a 2b       	or	r20, r26
    5d1a:	5b 2b       	or	r21, r27
    5d1c:	da 01       	movw	r26, r20
    5d1e:	c9 01       	movw	r24, r18
    5d20:	8f 77       	andi	r24, 0x7F	; 127
    5d22:	90 70       	andi	r25, 0x00	; 0
    5d24:	a0 70       	andi	r26, 0x00	; 0
    5d26:	b0 70       	andi	r27, 0x00	; 0
    5d28:	80 34       	cpi	r24, 0x40	; 64
    5d2a:	91 05       	cpc	r25, r1
    5d2c:	a1 05       	cpc	r26, r1
    5d2e:	b1 05       	cpc	r27, r1
    5d30:	39 f4       	brne	.+14     	; 0x5d40 <__pack_f+0xee>
    5d32:	27 ff       	sbrs	r18, 7
    5d34:	09 c0       	rjmp	.+18     	; 0x5d48 <__pack_f+0xf6>
    5d36:	20 5c       	subi	r18, 0xC0	; 192
    5d38:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3a:	4f 4f       	sbci	r20, 0xFF	; 255
    5d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d3e:	04 c0       	rjmp	.+8      	; 0x5d48 <__pack_f+0xf6>
    5d40:	21 5c       	subi	r18, 0xC1	; 193
    5d42:	3f 4f       	sbci	r19, 0xFF	; 255
    5d44:	4f 4f       	sbci	r20, 0xFF	; 255
    5d46:	5f 4f       	sbci	r21, 0xFF	; 255
    5d48:	e0 e0       	ldi	r30, 0x00	; 0
    5d4a:	f0 e0       	ldi	r31, 0x00	; 0
    5d4c:	20 30       	cpi	r18, 0x00	; 0
    5d4e:	a0 e0       	ldi	r26, 0x00	; 0
    5d50:	3a 07       	cpc	r19, r26
    5d52:	a0 e0       	ldi	r26, 0x00	; 0
    5d54:	4a 07       	cpc	r20, r26
    5d56:	a0 e4       	ldi	r26, 0x40	; 64
    5d58:	5a 07       	cpc	r21, r26
    5d5a:	10 f0       	brcs	.+4      	; 0x5d60 <__pack_f+0x10e>
    5d5c:	e1 e0       	ldi	r30, 0x01	; 1
    5d5e:	f0 e0       	ldi	r31, 0x00	; 0
    5d60:	79 01       	movw	r14, r18
    5d62:	8a 01       	movw	r16, r20
    5d64:	27 c0       	rjmp	.+78     	; 0x5db4 <__pack_f+0x162>
    5d66:	60 38       	cpi	r22, 0x80	; 128
    5d68:	71 05       	cpc	r23, r1
    5d6a:	64 f5       	brge	.+88     	; 0x5dc4 <__pack_f+0x172>
    5d6c:	fb 01       	movw	r30, r22
    5d6e:	e1 58       	subi	r30, 0x81	; 129
    5d70:	ff 4f       	sbci	r31, 0xFF	; 255
    5d72:	d8 01       	movw	r26, r16
    5d74:	c7 01       	movw	r24, r14
    5d76:	8f 77       	andi	r24, 0x7F	; 127
    5d78:	90 70       	andi	r25, 0x00	; 0
    5d7a:	a0 70       	andi	r26, 0x00	; 0
    5d7c:	b0 70       	andi	r27, 0x00	; 0
    5d7e:	80 34       	cpi	r24, 0x40	; 64
    5d80:	91 05       	cpc	r25, r1
    5d82:	a1 05       	cpc	r26, r1
    5d84:	b1 05       	cpc	r27, r1
    5d86:	39 f4       	brne	.+14     	; 0x5d96 <__pack_f+0x144>
    5d88:	e7 fe       	sbrs	r14, 7
    5d8a:	0d c0       	rjmp	.+26     	; 0x5da6 <__pack_f+0x154>
    5d8c:	80 e4       	ldi	r24, 0x40	; 64
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	a0 e0       	ldi	r26, 0x00	; 0
    5d92:	b0 e0       	ldi	r27, 0x00	; 0
    5d94:	04 c0       	rjmp	.+8      	; 0x5d9e <__pack_f+0x14c>
    5d96:	8f e3       	ldi	r24, 0x3F	; 63
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	a0 e0       	ldi	r26, 0x00	; 0
    5d9c:	b0 e0       	ldi	r27, 0x00	; 0
    5d9e:	e8 0e       	add	r14, r24
    5da0:	f9 1e       	adc	r15, r25
    5da2:	0a 1f       	adc	r16, r26
    5da4:	1b 1f       	adc	r17, r27
    5da6:	17 ff       	sbrs	r17, 7
    5da8:	05 c0       	rjmp	.+10     	; 0x5db4 <__pack_f+0x162>
    5daa:	16 95       	lsr	r17
    5dac:	07 95       	ror	r16
    5dae:	f7 94       	ror	r15
    5db0:	e7 94       	ror	r14
    5db2:	31 96       	adiw	r30, 0x01	; 1
    5db4:	87 e0       	ldi	r24, 0x07	; 7
    5db6:	16 95       	lsr	r17
    5db8:	07 95       	ror	r16
    5dba:	f7 94       	ror	r15
    5dbc:	e7 94       	ror	r14
    5dbe:	8a 95       	dec	r24
    5dc0:	d1 f7       	brne	.-12     	; 0x5db6 <__pack_f+0x164>
    5dc2:	05 c0       	rjmp	.+10     	; 0x5dce <__pack_f+0x17c>
    5dc4:	ee 24       	eor	r14, r14
    5dc6:	ff 24       	eor	r15, r15
    5dc8:	87 01       	movw	r16, r14
    5dca:	ef ef       	ldi	r30, 0xFF	; 255
    5dcc:	f0 e0       	ldi	r31, 0x00	; 0
    5dce:	6e 2f       	mov	r22, r30
    5dd0:	67 95       	ror	r22
    5dd2:	66 27       	eor	r22, r22
    5dd4:	67 95       	ror	r22
    5dd6:	90 2f       	mov	r25, r16
    5dd8:	9f 77       	andi	r25, 0x7F	; 127
    5dda:	d7 94       	ror	r13
    5ddc:	dd 24       	eor	r13, r13
    5dde:	d7 94       	ror	r13
    5de0:	8e 2f       	mov	r24, r30
    5de2:	86 95       	lsr	r24
    5de4:	49 2f       	mov	r20, r25
    5de6:	46 2b       	or	r20, r22
    5de8:	58 2f       	mov	r21, r24
    5dea:	5d 29       	or	r21, r13
    5dec:	b7 01       	movw	r22, r14
    5dee:	ca 01       	movw	r24, r20
    5df0:	1f 91       	pop	r17
    5df2:	0f 91       	pop	r16
    5df4:	ff 90       	pop	r15
    5df6:	ef 90       	pop	r14
    5df8:	df 90       	pop	r13
    5dfa:	08 95       	ret

00005dfc <__unpack_f>:
    5dfc:	fc 01       	movw	r30, r24
    5dfe:	db 01       	movw	r26, r22
    5e00:	40 81       	ld	r20, Z
    5e02:	51 81       	ldd	r21, Z+1	; 0x01
    5e04:	22 81       	ldd	r18, Z+2	; 0x02
    5e06:	62 2f       	mov	r22, r18
    5e08:	6f 77       	andi	r22, 0x7F	; 127
    5e0a:	70 e0       	ldi	r23, 0x00	; 0
    5e0c:	22 1f       	adc	r18, r18
    5e0e:	22 27       	eor	r18, r18
    5e10:	22 1f       	adc	r18, r18
    5e12:	93 81       	ldd	r25, Z+3	; 0x03
    5e14:	89 2f       	mov	r24, r25
    5e16:	88 0f       	add	r24, r24
    5e18:	82 2b       	or	r24, r18
    5e1a:	28 2f       	mov	r18, r24
    5e1c:	30 e0       	ldi	r19, 0x00	; 0
    5e1e:	99 1f       	adc	r25, r25
    5e20:	99 27       	eor	r25, r25
    5e22:	99 1f       	adc	r25, r25
    5e24:	11 96       	adiw	r26, 0x01	; 1
    5e26:	9c 93       	st	X, r25
    5e28:	11 97       	sbiw	r26, 0x01	; 1
    5e2a:	21 15       	cp	r18, r1
    5e2c:	31 05       	cpc	r19, r1
    5e2e:	a9 f5       	brne	.+106    	; 0x5e9a <__unpack_f+0x9e>
    5e30:	41 15       	cp	r20, r1
    5e32:	51 05       	cpc	r21, r1
    5e34:	61 05       	cpc	r22, r1
    5e36:	71 05       	cpc	r23, r1
    5e38:	11 f4       	brne	.+4      	; 0x5e3e <__unpack_f+0x42>
    5e3a:	82 e0       	ldi	r24, 0x02	; 2
    5e3c:	37 c0       	rjmp	.+110    	; 0x5eac <__unpack_f+0xb0>
    5e3e:	82 e8       	ldi	r24, 0x82	; 130
    5e40:	9f ef       	ldi	r25, 0xFF	; 255
    5e42:	13 96       	adiw	r26, 0x03	; 3
    5e44:	9c 93       	st	X, r25
    5e46:	8e 93       	st	-X, r24
    5e48:	12 97       	sbiw	r26, 0x02	; 2
    5e4a:	9a 01       	movw	r18, r20
    5e4c:	ab 01       	movw	r20, r22
    5e4e:	67 e0       	ldi	r22, 0x07	; 7
    5e50:	22 0f       	add	r18, r18
    5e52:	33 1f       	adc	r19, r19
    5e54:	44 1f       	adc	r20, r20
    5e56:	55 1f       	adc	r21, r21
    5e58:	6a 95       	dec	r22
    5e5a:	d1 f7       	brne	.-12     	; 0x5e50 <__unpack_f+0x54>
    5e5c:	83 e0       	ldi	r24, 0x03	; 3
    5e5e:	8c 93       	st	X, r24
    5e60:	0d c0       	rjmp	.+26     	; 0x5e7c <__unpack_f+0x80>
    5e62:	22 0f       	add	r18, r18
    5e64:	33 1f       	adc	r19, r19
    5e66:	44 1f       	adc	r20, r20
    5e68:	55 1f       	adc	r21, r21
    5e6a:	12 96       	adiw	r26, 0x02	; 2
    5e6c:	8d 91       	ld	r24, X+
    5e6e:	9c 91       	ld	r25, X
    5e70:	13 97       	sbiw	r26, 0x03	; 3
    5e72:	01 97       	sbiw	r24, 0x01	; 1
    5e74:	13 96       	adiw	r26, 0x03	; 3
    5e76:	9c 93       	st	X, r25
    5e78:	8e 93       	st	-X, r24
    5e7a:	12 97       	sbiw	r26, 0x02	; 2
    5e7c:	20 30       	cpi	r18, 0x00	; 0
    5e7e:	80 e0       	ldi	r24, 0x00	; 0
    5e80:	38 07       	cpc	r19, r24
    5e82:	80 e0       	ldi	r24, 0x00	; 0
    5e84:	48 07       	cpc	r20, r24
    5e86:	80 e4       	ldi	r24, 0x40	; 64
    5e88:	58 07       	cpc	r21, r24
    5e8a:	58 f3       	brcs	.-42     	; 0x5e62 <__unpack_f+0x66>
    5e8c:	14 96       	adiw	r26, 0x04	; 4
    5e8e:	2d 93       	st	X+, r18
    5e90:	3d 93       	st	X+, r19
    5e92:	4d 93       	st	X+, r20
    5e94:	5c 93       	st	X, r21
    5e96:	17 97       	sbiw	r26, 0x07	; 7
    5e98:	08 95       	ret
    5e9a:	2f 3f       	cpi	r18, 0xFF	; 255
    5e9c:	31 05       	cpc	r19, r1
    5e9e:	79 f4       	brne	.+30     	; 0x5ebe <__unpack_f+0xc2>
    5ea0:	41 15       	cp	r20, r1
    5ea2:	51 05       	cpc	r21, r1
    5ea4:	61 05       	cpc	r22, r1
    5ea6:	71 05       	cpc	r23, r1
    5ea8:	19 f4       	brne	.+6      	; 0x5eb0 <__unpack_f+0xb4>
    5eaa:	84 e0       	ldi	r24, 0x04	; 4
    5eac:	8c 93       	st	X, r24
    5eae:	08 95       	ret
    5eb0:	64 ff       	sbrs	r22, 4
    5eb2:	03 c0       	rjmp	.+6      	; 0x5eba <__unpack_f+0xbe>
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	8c 93       	st	X, r24
    5eb8:	12 c0       	rjmp	.+36     	; 0x5ede <__unpack_f+0xe2>
    5eba:	1c 92       	st	X, r1
    5ebc:	10 c0       	rjmp	.+32     	; 0x5ede <__unpack_f+0xe2>
    5ebe:	2f 57       	subi	r18, 0x7F	; 127
    5ec0:	30 40       	sbci	r19, 0x00	; 0
    5ec2:	13 96       	adiw	r26, 0x03	; 3
    5ec4:	3c 93       	st	X, r19
    5ec6:	2e 93       	st	-X, r18
    5ec8:	12 97       	sbiw	r26, 0x02	; 2
    5eca:	83 e0       	ldi	r24, 0x03	; 3
    5ecc:	8c 93       	st	X, r24
    5ece:	87 e0       	ldi	r24, 0x07	; 7
    5ed0:	44 0f       	add	r20, r20
    5ed2:	55 1f       	adc	r21, r21
    5ed4:	66 1f       	adc	r22, r22
    5ed6:	77 1f       	adc	r23, r23
    5ed8:	8a 95       	dec	r24
    5eda:	d1 f7       	brne	.-12     	; 0x5ed0 <__unpack_f+0xd4>
    5edc:	70 64       	ori	r23, 0x40	; 64
    5ede:	14 96       	adiw	r26, 0x04	; 4
    5ee0:	4d 93       	st	X+, r20
    5ee2:	5d 93       	st	X+, r21
    5ee4:	6d 93       	st	X+, r22
    5ee6:	7c 93       	st	X, r23
    5ee8:	17 97       	sbiw	r26, 0x07	; 7
    5eea:	08 95       	ret

00005eec <__prologue_saves__>:
    5eec:	2f 92       	push	r2
    5eee:	3f 92       	push	r3
    5ef0:	4f 92       	push	r4
    5ef2:	5f 92       	push	r5
    5ef4:	6f 92       	push	r6
    5ef6:	7f 92       	push	r7
    5ef8:	8f 92       	push	r8
    5efa:	9f 92       	push	r9
    5efc:	af 92       	push	r10
    5efe:	bf 92       	push	r11
    5f00:	cf 92       	push	r12
    5f02:	df 92       	push	r13
    5f04:	ef 92       	push	r14
    5f06:	ff 92       	push	r15
    5f08:	0f 93       	push	r16
    5f0a:	1f 93       	push	r17
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
    5f10:	cd b7       	in	r28, 0x3d	; 61
    5f12:	de b7       	in	r29, 0x3e	; 62
    5f14:	ca 1b       	sub	r28, r26
    5f16:	db 0b       	sbc	r29, r27
    5f18:	0f b6       	in	r0, 0x3f	; 63
    5f1a:	f8 94       	cli
    5f1c:	de bf       	out	0x3e, r29	; 62
    5f1e:	0f be       	out	0x3f, r0	; 63
    5f20:	cd bf       	out	0x3d, r28	; 61
    5f22:	09 94       	ijmp

00005f24 <__epilogue_restores__>:
    5f24:	2a 88       	ldd	r2, Y+18	; 0x12
    5f26:	39 88       	ldd	r3, Y+17	; 0x11
    5f28:	48 88       	ldd	r4, Y+16	; 0x10
    5f2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f30:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f32:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f34:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f36:	b9 84       	ldd	r11, Y+9	; 0x09
    5f38:	c8 84       	ldd	r12, Y+8	; 0x08
    5f3a:	df 80       	ldd	r13, Y+7	; 0x07
    5f3c:	ee 80       	ldd	r14, Y+6	; 0x06
    5f3e:	fd 80       	ldd	r15, Y+5	; 0x05
    5f40:	0c 81       	ldd	r16, Y+4	; 0x04
    5f42:	1b 81       	ldd	r17, Y+3	; 0x03
    5f44:	aa 81       	ldd	r26, Y+2	; 0x02
    5f46:	b9 81       	ldd	r27, Y+1	; 0x01
    5f48:	ce 0f       	add	r28, r30
    5f4a:	d1 1d       	adc	r29, r1
    5f4c:	0f b6       	in	r0, 0x3f	; 63
    5f4e:	f8 94       	cli
    5f50:	de bf       	out	0x3e, r29	; 62
    5f52:	0f be       	out	0x3f, r0	; 63
    5f54:	cd bf       	out	0x3d, r28	; 61
    5f56:	ed 01       	movw	r28, r26
    5f58:	08 95       	ret

00005f5a <_exit>:
    5f5a:	f8 94       	cli

00005f5c <__stop_program>:
    5f5c:	ff cf       	rjmp	.-2      	; 0x5f5c <__stop_program>
